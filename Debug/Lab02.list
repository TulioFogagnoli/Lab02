
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d938  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e100  0800e100  0001006c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e100  0800e100  0000f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e108  0800e108  0001006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e108  0800e108  0000f108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e10c  0800e10c  0000f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800e110  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001006c  2**0
                  CONTENTS
 10 .bss          00004428  2000006c  2000006c  0001006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004494  20004494  0001006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000217de  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d8d  00000000  00000000  0003187a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  00036608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000187f  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b29  00000000  00000000  00039df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002827f  00000000  00000000  00061920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1d3c  00000000  00000000  00089b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b8db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c4c  00000000  00000000  0016b920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0017456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dab0 	.word	0x0800dab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800dab0 	.word	0x0800dab0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <sr04_init>:

#include "sr04.h"
#include "stm32f4xx_hal.h" // Adicionado para HAL_RCC_GetPCLK1Freq()
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f002 fa98 	bl	8002af4 <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	899b      	ldrh	r3, [r3, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10a      	bne.n	80005e2 <sr04_init+0x36>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a1a      	ldr	r2, [r3, #32]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 020a 	bic.w	r2, r2, #10
 80005de:	621a      	str	r2, [r3, #32]
 80005e0:	e027      	b.n	8000632 <sr04_init+0x86>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	899b      	ldrh	r3, [r3, #12]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d10a      	bne.n	8000600 <sr04_init+0x54>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6a1b      	ldr	r3, [r3, #32]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	6892      	ldr	r2, [r2, #8]
 80005f6:	6812      	ldr	r2, [r2, #0]
 80005f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80005fc:	6213      	str	r3, [r2, #32]
 80005fe:	e018      	b.n	8000632 <sr04_init+0x86>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	899b      	ldrh	r3, [r3, #12]
 8000604:	2b08      	cmp	r3, #8
 8000606:	d10a      	bne.n	800061e <sr04_init+0x72>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	6892      	ldr	r2, [r2, #8]
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800061a:	6213      	str	r3, [r2, #32]
 800061c:	e009      	b.n	8000632 <sr04_init+0x86>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	6892      	ldr	r2, [r2, #8]
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8000630:	6213      	str	r3, [r2, #32]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	899b      	ldrh	r3, [r3, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d108      	bne.n	800064c <sr04_init+0xa0>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6a12      	ldr	r2, [r2, #32]
 8000648:	621a      	str	r2, [r3, #32]
 800064a:	e021      	b.n	8000690 <sr04_init+0xe4>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	899b      	ldrh	r3, [r3, #12]
 8000650:	2b04      	cmp	r3, #4
 8000652:	d108      	bne.n	8000666 <sr04_init+0xba>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	6892      	ldr	r2, [r2, #8]
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	6213      	str	r3, [r2, #32]
 8000664:	e014      	b.n	8000690 <sr04_init+0xe4>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	899b      	ldrh	r3, [r3, #12]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d108      	bne.n	8000680 <sr04_init+0xd4>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	6892      	ldr	r2, [r2, #8]
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	6213      	str	r3, [r2, #32]
 800067e:	e007      	b.n	8000690 <sr04_init+0xe4>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6892      	ldr	r2, [r2, #8]
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	6a1b      	ldr	r3, [r3, #32]
 800068e:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	899b      	ldrh	r3, [r3, #12]
 800069e:	4619      	mov	r1, r3
 80006a0:	4610      	mov	r0, r2
 80006a2:	f004 fa71 	bl	8004b88 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f9a2 	bl	80049f4 <HAL_TIM_Base_Start_IT>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <sr04_read_distance>:
  for (uint8_t i=0; i<15; i++) { __NOP(); } // Pequeno delay de ~10us
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
}

// SUBSTITUA A FUNÇÃO ANTIGA POR ESTA
void sr04_read_distance(sr04_t *sr04_struct){
 80006b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006bc:	b08a      	sub	sp, #40	@ 0x28
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6178      	str	r0, [r7, #20]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	7b9b      	ldrb	r3, [r3, #14]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <sr04_read_distance+0x1a>
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	f000 8081 	beq.w	80007d2 <sr04_read_distance+0x11a>

      // Volta a polaridade para detectar a borda de subida do próximo pulso
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      break;
  }
 80006d0:	e172      	b.n	80009b8 <sr04_read_distance+0x300>
      sr04_struct->start_counter = HAL_TIM_ReadCapturedValue(sr04_struct->echo_htim, sr04_struct->echo_channel);
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	899b      	ldrh	r3, [r3, #12]
 80006da:	4619      	mov	r1, r3
 80006dc:	4610      	mov	r0, r2
 80006de:	f004 fdcf 	bl	8005280 <HAL_TIM_ReadCapturedValue>
 80006e2:	4602      	mov	r2, r0
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2201      	movs	r2, #1
 80006ec:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2200      	movs	r2, #0
 80006f2:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	899b      	ldrh	r3, [r3, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10a      	bne.n	8000712 <sr04_read_distance+0x5a>
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a1a      	ldr	r2, [r3, #32]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 020a 	bic.w	r2, r2, #10
 800070e:	621a      	str	r2, [r3, #32]
 8000710:	e027      	b.n	8000762 <sr04_read_distance+0xaa>
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	899b      	ldrh	r3, [r3, #12]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d10a      	bne.n	8000730 <sr04_read_distance+0x78>
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	6892      	ldr	r2, [r2, #8]
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800072c:	6213      	str	r3, [r2, #32]
 800072e:	e018      	b.n	8000762 <sr04_read_distance+0xaa>
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	899b      	ldrh	r3, [r3, #12]
 8000734:	2b08      	cmp	r3, #8
 8000736:	d10a      	bne.n	800074e <sr04_read_distance+0x96>
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	6892      	ldr	r2, [r2, #8]
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800074a:	6213      	str	r3, [r2, #32]
 800074c:	e009      	b.n	8000762 <sr04_read_distance+0xaa>
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	6892      	ldr	r2, [r2, #8]
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8000760:	6213      	str	r3, [r2, #32]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	899b      	ldrh	r3, [r3, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10a      	bne.n	8000780 <sr04_read_distance+0xc8>
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6a1a      	ldr	r2, [r3, #32]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f042 0202 	orr.w	r2, r2, #2
 800077c:	621a      	str	r2, [r3, #32]
      break;
 800077e:	e11b      	b.n	80009b8 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d10a      	bne.n	800079e <sr04_read_distance+0xe6>
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a1b      	ldr	r3, [r3, #32]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	6892      	ldr	r2, [r2, #8]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6213      	str	r3, [r2, #32]
      break;
 800079c:	e10c      	b.n	80009b8 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	899b      	ldrh	r3, [r3, #12]
 80007a2:	2b08      	cmp	r3, #8
 80007a4:	d10a      	bne.n	80007bc <sr04_read_distance+0x104>
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	6892      	ldr	r2, [r2, #8]
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007b8:	6213      	str	r3, [r2, #32]
      break;
 80007ba:	e0fd      	b.n	80009b8 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	6892      	ldr	r2, [r2, #8]
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ce:	6213      	str	r3, [r2, #32]
      break;
 80007d0:	e0f2      	b.n	80009b8 <sr04_read_distance+0x300>
      sr04_struct->end_counter = HAL_TIM_ReadCapturedValue(sr04_struct->echo_htim, sr04_struct->echo_channel);
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	4619      	mov	r1, r3
 80007dc:	4610      	mov	r0, r2
 80007de:	f004 fd4f 	bl	8005280 <HAL_TIM_ReadCapturedValue>
 80007e2:	4602      	mov	r2, r0
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2200      	movs	r2, #0
 80007ec:	739a      	strb	r2, [r3, #14]
      if (sr04_struct->end_counter > sr04_struct->start_counter) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d910      	bls.n	800081c <sr04_read_distance+0x164>
          delta_ticks = (sr04_struct->end_counter - sr04_struct->start_counter) + sr04_struct->tim_update_count * (sr04_struct->echo_htim->Init.Period + 1);
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	695a      	ldr	r2, [r3, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	1ad2      	subs	r2, r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	8c1b      	ldrh	r3, [r3, #32]
 8000808:	4619      	mov	r1, r3
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	4413      	add	r3, r2
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
 800081a:	e014      	b.n	8000846 <sr04_read_distance+0x18e>
          delta_ticks = (sr04_struct->echo_htim->Init.Period - sr04_struct->start_counter + sr04_struct->end_counter) + (sr04_struct->tim_update_count -1) * (sr04_struct->echo_htim->Init.Period + 1);
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	441a      	add	r2, r3
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	8c1b      	ldrh	r3, [r3, #32]
 8000832:	3b01      	subs	r3, #1
 8000834:	4619      	mov	r1, r3
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	fb01 f303 	mul.w	r3, r1, r3
 8000842:	4413      	add	r3, r2
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t timer_clock = HAL_RCC_GetPCLK1Freq();
 8000846:	f002 ff3d 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 800084a:	6238      	str	r0, [r7, #32]
      if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1) {
 800084c:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <sr04_read_distance+0x30c>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <sr04_read_distance+0x1a6>
          timer_clock *= 2; // O clock do timer é dobrado se o prescaler APB1 > 1
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	623b      	str	r3, [r7, #32]
      uint64_t numerator = (uint64_t)delta_ticks * (sr04_struct->echo_htim->Init.Prescaler + 1) * 343000;
 800085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000860:	2200      	movs	r2, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	60fa      	str	r2, [r7, #12]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	3301      	adds	r3, #1
 800086e:	2200      	movs	r2, #0
 8000870:	469a      	mov	sl, r3
 8000872:	4693      	mov	fp, r2
 8000874:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000878:	460b      	mov	r3, r1
 800087a:	fb0a f203 	mul.w	r2, sl, r3
 800087e:	4603      	mov	r3, r0
 8000880:	fb03 f30b 	mul.w	r3, r3, fp
 8000884:	4413      	add	r3, r2
 8000886:	4602      	mov	r2, r0
 8000888:	fba2 450a 	umull	r4, r5, r2, sl
 800088c:	442b      	add	r3, r5
 800088e:	461d      	mov	r5, r3
 8000890:	4b4d      	ldr	r3, [pc, #308]	@ (80009c8 <sr04_read_distance+0x310>)
 8000892:	fb03 f205 	mul.w	r2, r3, r5
 8000896:	2300      	movs	r3, #0
 8000898:	fb04 f303 	mul.w	r3, r4, r3
 800089c:	4413      	add	r3, r2
 800089e:	4a4a      	ldr	r2, [pc, #296]	@ (80009c8 <sr04_read_distance+0x310>)
 80008a0:	fba4 8902 	umull	r8, r9, r4, r2
 80008a4:	444b      	add	r3, r9
 80008a6:	4699      	mov	r9, r3
 80008a8:	e9c7 8906 	strd	r8, r9, [r7, #24]
 80008ac:	e9c7 8906 	strd	r8, r9, [r7, #24]
      sr04_struct->distance = numerator / (timer_clock * 2);
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2200      	movs	r2, #0
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80008c2:	f7ff fcdd 	bl	8000280 <__aeabi_uldivmod>
 80008c6:	4602      	mov	r2, r0
 80008c8:	460b      	mov	r3, r1
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d903      	bls.n	80008e2 <sr04_read_distance+0x22a>
        sr04_struct->distance = sr04_struct->last_distance;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	699a      	ldr	r2, [r3, #24]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	899b      	ldrh	r3, [r3, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10a      	bne.n	8000908 <sr04_read_distance+0x250>
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 020a 	bic.w	r2, r2, #10
 8000904:	621a      	str	r2, [r3, #32]
 8000906:	e027      	b.n	8000958 <sr04_read_distance+0x2a0>
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	899b      	ldrh	r3, [r3, #12]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d10a      	bne.n	8000926 <sr04_read_distance+0x26e>
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	6892      	ldr	r2, [r2, #8]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8000922:	6213      	str	r3, [r2, #32]
 8000924:	e018      	b.n	8000958 <sr04_read_distance+0x2a0>
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	899b      	ldrh	r3, [r3, #12]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d10a      	bne.n	8000944 <sr04_read_distance+0x28c>
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	6892      	ldr	r2, [r2, #8]
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8000940:	6213      	str	r3, [r2, #32]
 8000942:	e009      	b.n	8000958 <sr04_read_distance+0x2a0>
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	6892      	ldr	r2, [r2, #8]
 8000950:	6812      	ldr	r2, [r2, #0]
 8000952:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8000956:	6213      	str	r3, [r2, #32]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	899b      	ldrh	r3, [r3, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d108      	bne.n	8000972 <sr04_read_distance+0x2ba>
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a12      	ldr	r2, [r2, #32]
 800096e:	621a      	str	r2, [r3, #32]
      break;
 8000970:	e021      	b.n	80009b6 <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	2b04      	cmp	r3, #4
 8000978:	d108      	bne.n	800098c <sr04_read_distance+0x2d4>
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	6213      	str	r3, [r2, #32]
      break;
 800098a:	e014      	b.n	80009b6 <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	899b      	ldrh	r3, [r3, #12]
 8000990:	2b08      	cmp	r3, #8
 8000992:	d108      	bne.n	80009a6 <sr04_read_distance+0x2ee>
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	6892      	ldr	r2, [r2, #8]
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	6a1b      	ldr	r3, [r3, #32]
 80009a2:	6213      	str	r3, [r2, #32]
      break;
 80009a4:	e007      	b.n	80009b6 <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	6892      	ldr	r2, [r2, #8]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	6213      	str	r3, [r2, #32]
      break;
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	00053bd8 	.word	0x00053bd8

080009cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <vApplicationGetIdleTaskMemory+0x30>)
 80009e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000088 	.word	0x20000088
 80009fc:	200000dc 	.word	0x200000dc

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b09c      	sub	sp, #112	@ 0x70
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 f9b5 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f875 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fa29 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f000 f9ff 	bl	8000e14 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a16:	f000 f8d9 	bl	8000bcc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000a1a:	f000 f905 	bl	8000c28 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000a1e:	f000 f925 	bl	8000c6c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000a22:	f000 f959 	bl	8000cd8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a26:	f000 f9cb 	bl	8000dc0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000a2a:	f005 ffe5 	bl	80069f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  mpu6050_init(); // Assumindo que o MPU6050 usa o I2C1
 8000a2e:	f000 fda7 	bl	8001580 <mpu6050_init>
  sr04_init(&htim1);    // Assumindo que o HC-SR04 usa o TIM1 para a medição de tempo
 8000a32:	4828      	ldr	r0, [pc, #160]	@ (8000ad4 <main+0xd4>)
 8000a34:	f7ff fdba 	bl	80005ac <sr04_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(SDCardTask, StartSDCardTask, osPriorityNormal, 0, 1024);
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <main+0xd8>)
 8000a3a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardTaskHandle = osThreadCreate(osThread(SDCardTask), NULL);
 8000a4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 f9da 	bl	8009e0c <osThreadCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <main+0xdc>)
 8000a5c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityHigh, 0, 254);
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <main+0xe0>)
 8000a60:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000a72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f009 f9c7 	bl	8009e0c <osThreadCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a18      	ldr	r2, [pc, #96]	@ (8000ae4 <main+0xe4>)
 8000a82:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 128);
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <main+0xe8>)
 8000a86:	f107 041c 	add.w	r4, r7, #28
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 f9b4 	bl	8009e0c <osThreadCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <main+0xec>)
 8000aa8:	6013      	str	r3, [r2, #0]

  osThreadDef(EventDetectTask, StartEventDetectTask, osPriorityAboveNormal, 0, 128);
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <main+0xf0>)
 8000aac:	463c      	mov	r4, r7
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventDetectTaskHandle = osThreadCreate(osThread(EventDetectTask), NULL);
 8000abc:	463b      	mov	r3, r7
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f009 f9a3 	bl	8009e0c <osThreadCreate>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <main+0xf4>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000acc:	f009 f97b 	bl	8009dc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <main+0xd0>
 8000ad4:	200004cc 	.word	0x200004cc
 8000ad8:	0800dad4 	.word	0x0800dad4
 8000adc:	2000055c 	.word	0x2000055c
 8000ae0:	0800dafc 	.word	0x0800dafc
 8000ae4:	20000560 	.word	0x20000560
 8000ae8:	0800db24 	.word	0x0800db24
 8000aec:	20000564 	.word	0x20000564
 8000af0:	0800db50 	.word	0x0800db50
 8000af4:	20000568 	.word	0x20000568

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00c f9ad 	bl	800ce66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a27      	ldr	r2, [pc, #156]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b6c:	23a8      	movs	r3, #168	@ 0xa8
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f931 	bl	8002de4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 fae0 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2105      	movs	r1, #5
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fb92 	bl	80032d4 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb6:	f000 fac9 	bl	800114c <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	@ 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bd2:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <MX_I2C1_Init+0x54>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <MX_I2C1_Init+0x58>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_I2C1_Init+0x50>)
 8000c0a:	f001 ffa7 	bl	8002b5c <HAL_I2C_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c14:	f000 fa9a 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200002dc 	.word	0x200002dc
 8000c20:	40005400 	.word	0x40005400
 8000c24:	000186a0 	.word	0x000186a0

08000c28 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <MX_SDIO_SD_Init+0x40>)
 8000c30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c44:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c50:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <MX_SDIO_SD_Init+0x3c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  /* USER CODE END SDIO_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000330 	.word	0x20000330
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c72:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <MX_SPI1_Init+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000cb8:	220a      	movs	r2, #10
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_SPI1_Init+0x64>)
 8000cbe:	f003 fdc1 	bl	8004844 <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc8:	f000 fa40 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000474 	.word	0x20000474
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d04:	4a2d      	ldr	r2, [pc, #180]	@ (8000dbc <MX_TIM1_Init+0xe4>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d22:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2e:	4822      	ldr	r0, [pc, #136]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d30:	f003 fe11 	bl	8004956 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000d3a:	f000 fa07 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d4c:	f004 f9d0 	bl	80050f0 <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d56:	f000 f9f9 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d5a:	4817      	ldr	r0, [pc, #92]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d5c:	f003 feba 	bl	8004ad4 <HAL_TIM_IC_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 f9f1 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000d7a:	f004 fd87 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f000 f9e2 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_TIM1_Init+0xe0>)
 8000da0:	f004 f90a 	bl	8004fb8 <HAL_TIM_IC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000daa:	f000 f9cf 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	@ 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200004cc 	.word	0x200004cc
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <MX_USART1_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df8:	f004 fdd8 	bl	80059ac <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f000 f9a3 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000514 	.word	0x20000514
 8000e10:	40011000 	.word	0x40011000

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_DMA_Init+0x4c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2105      	movs	r1, #5
 8000e3a:	203b      	movs	r0, #59	@ 0x3b
 8000e3c:	f001 f90b 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e40:	203b      	movs	r0, #59	@ 0x3b
 8000e42:	f001 f924 	bl	800208e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2105      	movs	r1, #5
 8000e4a:	2045      	movs	r0, #69	@ 0x45
 8000e4c:	f001 f903 	bl	8002056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e50:	2045      	movs	r0, #69	@ 0x45
 8000e52:	f001 f91c 	bl	800208e <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a4e      	ldr	r2, [pc, #312]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	4b48      	ldr	r3, [pc, #288]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a47      	ldr	r2, [pc, #284]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b45      	ldr	r3, [pc, #276]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a40      	ldr	r2, [pc, #256]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a39      	ldr	r2, [pc, #228]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a32      	ldr	r2, [pc, #200]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <MX_GPIO_Init+0x158>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2130      	movs	r1, #48	@ 0x30
 8000f26:	4826      	ldr	r0, [pc, #152]	@ (8000fc0 <MX_GPIO_Init+0x15c>)
 8000f28:	f001 fde4 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <MX_GPIO_Init+0x160>)
 8000f32:	f001 fddf 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000f3c:	4822      	ldr	r0, [pc, #136]	@ (8000fc8 <MX_GPIO_Init+0x164>)
 8000f3e:	f001 fdd9 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 8000f42:	2330      	movs	r3, #48	@ 0x30
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4819      	ldr	r0, [pc, #100]	@ (8000fc0 <MX_GPIO_Init+0x15c>)
 8000f5a:	f001 fc2f 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <MX_GPIO_Init+0x160>)
 8000f76:	f001 fc21 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_TRIG_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin;
 8000f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HC_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <MX_GPIO_Init+0x168>)
 8000f90:	f001 fc14 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000f94:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <MX_GPIO_Init+0x164>)
 8000fae:	f001 fc05 	bl	80027bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	@ 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <StartEventDetectTask>:

/* USER CODE BEGIN 4 */
void StartEventDetectTask(void const * argument)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <StartDisplayTask>:

void StartDisplayTask(void const * argument)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <StartSensorsTask>:

void StartSensorsTask(void const * argument)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b095      	sub	sp, #84	@ 0x54
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // 1. Ler dados do MPU-6050 (Acelerómetro e Giroscópio)
    mpu6050_read_all(&mpu_data);
 8001000:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001004:	4618      	mov	r0, r3
 8001006:	f000 faf7 	bl	80015f8 <mpu6050_read_all>

    // 2. Ler dados do HC-SR04 (Distância)
    sr04_read_distance(&distance);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb52 	bl	80006b8 <sr04_read_distance>

    // Por agora, vamos apenas imprimir os dados para depuração.
    // Mais tarde, enviaremos estes dados para a vEventProcessingTask.
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
           mpu_data.ax, mpu_data.ay, mpu_data.az,
 8001014:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 8001018:	461c      	mov	r4, r3
           mpu_data.ax, mpu_data.ay, mpu_data.az,
 800101a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 800101e:	461d      	mov	r5, r3
           mpu_data.ax, mpu_data.ay, mpu_data.az,
 8001020:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 8001024:	461e      	mov	r6, r3
           mpu_data.gx, mpu_data.gy, mpu_data.gz,
 8001026:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 800102a:	461a      	mov	r2, r3
           mpu_data.gx, mpu_data.gy, mpu_data.gz,
 800102c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 8001030:	4619      	mov	r1, r3
           mpu_data.gx, mpu_data.gy, mpu_data.gz,
 8001032:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
    printf("Accel: X=%.2f, Y=%.2f, Z=%.2f | Gyro: X=%.2f, Y=%.2f, Z=%.2f | Dist: %.2f cm\r\n",
 8001036:	4618      	mov	r0, r3
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	9002      	str	r0, [sp, #8]
 800103e:	9101      	str	r1, [sp, #4]
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	4633      	mov	r3, r6
 8001044:	462a      	mov	r2, r5
 8001046:	4621      	mov	r1, r4
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <StartSensorsTask+0x60>)
 800104a:	f00b feb7 	bl	800cdbc <iprintf>
           distance.distance);

    // Pausa a tarefa pela frequência desejada (ex: 100ms)
    osDelay(100);
 800104e:	2064      	movs	r0, #100	@ 0x64
 8001050:	f008 ff28 	bl	8009ea4 <osDelay>
  {
 8001054:	bf00      	nop
 8001056:	e7d3      	b.n	8001000 <StartSensorsTask+0x8>
 8001058:	0800db6c 	.word	0x0800db6c

0800105c <StartSDCardTask>:
  }
  /* USER CODE END StartSensorReadTask */
}

void StartSDCardTask(void const * argument)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8001062:	af00      	add	r7, sp, #0
 8001064:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001068:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 800106c:	6018      	str	r0, [r3, #0]
    FRESULT res;
    UINT bytesWritten;
    // A variável SDPath é o caminho correto para o drive (geralmente "0:")
    extern char SDPath[4];
    
    char writeBuffer[] = "Sucesso! O cartao SD esta funcionando com FATFS!";
 800106e:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001072:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 8001076:	4a31      	ldr	r2, [pc, #196]	@ (800113c <StartSDCardTask+0xe0>)
 8001078:	461c      	mov	r4, r3
 800107a:	4615      	mov	r5, r2
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	7023      	strb	r3, [r4, #0]
    
    // Um pequeno delay para garantir que tudo estabilizou
    osDelay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001090:	f008 ff08 	bl	8009ea4 <osDelay>
    
    // 1. Monta o sistema de arquivos
    res = f_mount(&myFATFS, (TCHAR const*)SDPath, 1);
 8001094:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001098:	2201      	movs	r2, #1
 800109a:	4929      	ldr	r1, [pc, #164]	@ (8001140 <StartSDCardTask+0xe4>)
 800109c:	4618      	mov	r0, r3
 800109e:	f008 f84d 	bl	800913c <f_mount>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (res != FR_OK)
 80010a8:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <StartSDCardTask+0x68>
    {
      // Falha ao montar - Pisca LED de erro (PD15)
      while(1)
      {
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b4:	4823      	ldr	r0, [pc, #140]	@ (8001144 <StartSDCardTask+0xe8>)
 80010b6:	f001 fd36 	bl	8002b26 <HAL_GPIO_TogglePin>
        osDelay(200);
 80010ba:	20c8      	movs	r0, #200	@ 0xc8
 80010bc:	f008 fef2 	bl	8009ea4 <osDelay>
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010c0:	bf00      	nop
 80010c2:	e7f5      	b.n	80010b0 <StartSDCardTask+0x54>
      }
    }
    
    // 2. Abre (ou cria) um arquivo para escrita
    res = f_open(&myFILE, "log.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80010c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c8:	220a      	movs	r2, #10
 80010ca:	491f      	ldr	r1, [pc, #124]	@ (8001148 <StartSDCardTask+0xec>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 f899 	bl	8009204 <f_open>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (res != FR_OK)
 80010d8:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00a      	beq.n	80010f6 <StartSDCardTask+0x9a>
    {
      // Falha ao abrir o arquivo - Pisca LED de erro (PD15)
      while(1)
      {
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e4:	4817      	ldr	r0, [pc, #92]	@ (8001144 <StartSDCardTask+0xe8>)
 80010e6:	f001 fd1e 	bl	8002b26 <HAL_GPIO_TogglePin>
        osDelay(400);
 80010ea:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80010ee:	f008 fed9 	bl	8009ea4 <osDelay>
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010f2:	bf00      	nop
 80010f4:	e7f4      	b.n	80010e0 <StartSDCardTask+0x84>
      }
    }
    
    // 3. Escreve no arquivo
    f_write(&myFILE, writeBuffer, strlen(writeBuffer), &bytesWritten);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f868 	bl	80001d0 <strlen>
 8001100:	4602      	mov	r2, r0
 8001102:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001106:	f107 010c 	add.w	r1, r7, #12
 800110a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800110e:	f008 fa4f 	bl	80095b0 <f_write>
    
    // 4. Fecha o arquivo (MUITO IMPORTANTE!)
    f_close(&myFILE);
 8001112:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001116:	4618      	mov	r0, r3
 8001118:	f008 fc77 	bl	8009a0a <f_close>
    
    // 5. Desmonta o sistema de arquivos (boa prática)
    f_mount(NULL, (TCHAR const*)SDPath, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	4908      	ldr	r1, [pc, #32]	@ (8001140 <StartSDCardTask+0xe4>)
 8001120:	2000      	movs	r0, #0
 8001122:	f008 f80b 	bl	800913c <f_mount>
    
    // Se tudo deu certo, acende o LED de sucesso (PD14) permanentemente
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <StartSDCardTask+0xe8>)
 800112e:	f001 fce1 	bl	8002af4 <HAL_GPIO_WritePin>
    
    // Suspende a tarefa, pois o teste foi concluído com sucesso
    osThreadSuspend(NULL);
 8001132:	2000      	movs	r0, #0
 8001134:	f009 f870 	bl	800a218 <osThreadSuspend>
  {
 8001138:	e799      	b.n	800106e <StartSDCardTask+0x12>
 800113a:	bf00      	nop
 800113c:	0800dbc4 	.word	0x0800dbc4
 8001140:	20000578 	.word	0x20000578
 8001144:	40020c00 	.word	0x40020c00
 8001148:	0800dbbc 	.word	0x0800dbbc

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <i2c_timeout>:
#include "mpu6050.h"
#include "stm32f4xx.h"

static int i2c_timeout(uint32_t *t) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    if ((*t)-- == 0) return -1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1e59      	subs	r1, r3, #1
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6011      	str	r1, [r2, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <i2c_timeout+0x1c>
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e000      	b.n	8001176 <i2c_timeout+0x1e>
    return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <i2c1_start_addr>:

    // Habilita
    I2C1->CR1 |= I2C_CR1_PE;
}

static int i2c1_start_addr(uint8_t addr7, int read) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
    uint32_t to = 1000000;
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <i2c1_start_addr+0xc4>)
 8001192:	60fb      	str	r3, [r7, #12]

    // START
    I2C1->CR1 |= I2C_CR1_START;
 8001194:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <i2c1_start_addr+0xc8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2c      	ldr	r2, [pc, #176]	@ (800124c <i2c1_start_addr+0xc8>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB)) if (i2c_timeout(&to)) return -1;
 80011a0:	e00a      	b.n	80011b8 <i2c1_start_addr+0x34>
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffd6 	bl	8001158 <i2c_timeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <i2c1_start_addr+0x34>
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e042      	b.n	800123e <i2c1_start_addr+0xba>
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <i2c1_start_addr+0xc8>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ee      	beq.n	80011a2 <i2c1_start_addr+0x1e>
    (void)I2C1->SR1;
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <i2c1_start_addr+0xc8>)
 80011c6:	695b      	ldr	r3, [r3, #20]

    // Endereço
    I2C1->DR = (addr7<<1) | (read?1:0);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2201      	movne	r2, #1
 80011d4:	2200      	moveq	r2, #0
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	431a      	orrs	r2, r3
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <i2c1_start_addr+0xc8>)
 80011dc:	611a      	str	r2, [r3, #16]
    if (!read) {
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d121      	bne.n	8001228 <i2c1_start_addr+0xa4>
        while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) return -1;
 80011e4:	e00a      	b.n	80011fc <i2c1_start_addr+0x78>
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffb4 	bl	8001158 <i2c_timeout>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <i2c1_start_addr+0x78>
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e020      	b.n	800123e <i2c1_start_addr+0xba>
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <i2c1_start_addr+0xc8>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0ee      	beq.n	80011e6 <i2c1_start_addr+0x62>
        (void)I2C1->SR1; (void)I2C1->SR2;
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <i2c1_start_addr+0xc8>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <i2c1_start_addr+0xc8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	e014      	b.n	800123c <i2c1_start_addr+0xb8>
    } else {
        while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) return -1;
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff9e 	bl	8001158 <i2c_timeout>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <i2c1_start_addr+0xa4>
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e00a      	b.n	800123e <i2c1_start_addr+0xba>
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <i2c1_start_addr+0xc8>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ee      	beq.n	8001212 <i2c1_start_addr+0x8e>
        (void)I2C1->SR1; (void)I2C1->SR2;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <i2c1_start_addr+0xc8>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <i2c1_start_addr+0xc8>)
 800123a:	699b      	ldr	r3, [r3, #24]
    }
    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	000f4240 	.word	0x000f4240
 800124c:	40005400 	.word	0x40005400

08001250 <i2c1_stop>:

static void i2c1_stop(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <i2c1_stop+0x1c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <i2c1_stop+0x1c>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40005400 	.word	0x40005400

08001270 <i2c1_write_reg>:

int i2c1_write_reg(uint8_t addr7, uint8_t reg, uint8_t data) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	460b      	mov	r3, r1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	4613      	mov	r3, r2
 8001280:	717b      	strb	r3, [r7, #5]
    uint32_t to = 1000000;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <i2c1_write_reg+0xc0>)
 8001284:	60fb      	str	r3, [r7, #12]

    if (i2c1_start_addr(addr7, 0) < 0) { i2c1_stop(); return -1; }
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff7a 	bl	8001184 <i2c1_start_addr>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	da11      	bge.n	80012ba <i2c1_write_reg+0x4a>
 8001296:	f7ff ffdb 	bl	8001250 <i2c1_stop>
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e043      	b.n	8001328 <i2c1_write_reg+0xb8>

    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff57 	bl	8001158 <i2c_timeout>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <i2c1_write_reg+0x4a>
 80012b0:	f7ff ffce 	bl	8001250 <i2c1_stop>
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e036      	b.n	8001328 <i2c1_write_reg+0xb8>
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <i2c1_write_reg+0xc4>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0ec      	beq.n	80012a0 <i2c1_write_reg+0x30>
    I2C1->DR = reg;
 80012c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <i2c1_write_reg+0xc4>)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 80012cc:	e00c      	b.n	80012e8 <i2c1_write_reg+0x78>
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff40 	bl	8001158 <i2c_timeout>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <i2c1_write_reg+0x78>
 80012de:	f7ff ffb7 	bl	8001250 <i2c1_stop>
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e01f      	b.n	8001328 <i2c1_write_reg+0xb8>
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <i2c1_write_reg+0xc4>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ec      	beq.n	80012ce <i2c1_write_reg+0x5e>
    I2C1->DR = data;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <i2c1_write_reg+0xc4>)
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 80012fa:	e00c      	b.n	8001316 <i2c1_write_reg+0xa6>
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff29 	bl	8001158 <i2c_timeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <i2c1_write_reg+0xa6>
 800130c:	f7ff ffa0 	bl	8001250 <i2c1_stop>
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e008      	b.n	8001328 <i2c1_write_reg+0xb8>
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <i2c1_write_reg+0xc4>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0ec      	beq.n	80012fc <i2c1_write_reg+0x8c>
    i2c1_stop();
 8001322:	f7ff ff95 	bl	8001250 <i2c1_stop>
    return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	000f4240 	.word	0x000f4240
 8001334:	40005400 	.word	0x40005400

08001338 <i2c1_read_multi>:
    *data = (uint8_t)I2C1->DR;

    return 0;
}

int i2c1_read_multi(uint8_t addr7, uint8_t reg, uint8_t *buf, uint32_t len) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	460b      	mov	r3, r1
 8001348:	73bb      	strb	r3, [r7, #14]
    if (len == 0) return 0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <i2c1_read_multi+0x1c>
 8001350:	2300      	movs	r3, #0
 8001352:	e10c      	b.n	800156e <i2c1_read_multi+0x236>
    uint32_t to = 1000000;
 8001354:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <i2c1_read_multi+0x240>)
 8001356:	613b      	str	r3, [r7, #16]

    // Write reg
    if (i2c1_start_addr(addr7, 0) < 0) { i2c1_stop(); return -1; }
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff11 	bl	8001184 <i2c1_start_addr>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	da11      	bge.n	800138c <i2c1_read_multi+0x54>
 8001368:	f7ff ff72 	bl	8001250 <i2c1_stop>
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e0fd      	b.n	800156e <i2c1_read_multi+0x236>
    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff feee 	bl	8001158 <i2c_timeout>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <i2c1_read_multi+0x54>
 8001382:	f7ff ff65 	bl	8001250 <i2c1_stop>
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e0f0      	b.n	800156e <i2c1_read_multi+0x236>
 800138c:	4b7b      	ldr	r3, [pc, #492]	@ (800157c <i2c1_read_multi+0x244>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ec      	beq.n	8001372 <i2c1_read_multi+0x3a>
    I2C1->DR = reg;
 8001398:	4a78      	ldr	r2, [pc, #480]	@ (800157c <i2c1_read_multi+0x244>)
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 800139e:	e00c      	b.n	80013ba <i2c1_read_multi+0x82>
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fed7 	bl	8001158 <i2c_timeout>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <i2c1_read_multi+0x82>
 80013b0:	f7ff ff4e 	bl	8001250 <i2c1_stop>
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	e0d9      	b.n	800156e <i2c1_read_multi+0x236>
 80013ba:	4b70      	ldr	r3, [pc, #448]	@ (800157c <i2c1_read_multi+0x244>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ec      	beq.n	80013a0 <i2c1_read_multi+0x68>

    // Restart leitura
    I2C1->CR1 |= I2C_CR1_START;
 80013c6:	4b6d      	ldr	r3, [pc, #436]	@ (800157c <i2c1_read_multi+0x244>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	@ (800157c <i2c1_read_multi+0x244>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 80013d2:	e00c      	b.n	80013ee <i2c1_read_multi+0xb6>
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff febd 	bl	8001158 <i2c_timeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <i2c1_read_multi+0xb6>
 80013e4:	f7ff ff34 	bl	8001250 <i2c1_stop>
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e0bf      	b.n	800156e <i2c1_read_multi+0x236>
 80013ee:	4b63      	ldr	r3, [pc, #396]	@ (800157c <i2c1_read_multi+0x244>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ec      	beq.n	80013d4 <i2c1_read_multi+0x9c>
    (void)I2C1->SR1;
 80013fa:	4b60      	ldr	r3, [pc, #384]	@ (800157c <i2c1_read_multi+0x244>)
 80013fc:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = (addr7<<1) | 1;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	4b5d      	ldr	r3, [pc, #372]	@ (800157c <i2c1_read_multi+0x244>)
 8001408:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 800140a:	e00c      	b.n	8001426 <i2c1_read_multi+0xee>
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fea1 	bl	8001158 <i2c_timeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <i2c1_read_multi+0xee>
 800141c:	f7ff ff18 	bl	8001250 <i2c1_stop>
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	e0a3      	b.n	800156e <i2c1_read_multi+0x236>
 8001426:	4b55      	ldr	r3, [pc, #340]	@ (800157c <i2c1_read_multi+0x244>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0ec      	beq.n	800140c <i2c1_read_multi+0xd4>

    if (len == 1) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d128      	bne.n	800148a <i2c1_read_multi+0x152>
        // NACK single
        I2C1->CR1 &= ~I2C_CR1_ACK;
 8001438:	4b50      	ldr	r3, [pc, #320]	@ (800157c <i2c1_read_multi+0x244>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a4f      	ldr	r2, [pc, #316]	@ (800157c <i2c1_read_multi+0x244>)
 800143e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
        (void)I2C1->SR1; (void)I2C1->SR2;
 8001444:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <i2c1_read_multi+0x244>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4b4c      	ldr	r3, [pc, #304]	@ (800157c <i2c1_read_multi+0x244>)
 800144a:	699b      	ldr	r3, [r3, #24]
        I2C1->CR1 |= I2C_CR1_STOP;
 800144c:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <i2c1_read_multi+0x244>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4a      	ldr	r2, [pc, #296]	@ (800157c <i2c1_read_multi+0x244>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001456:	6013      	str	r3, [r2, #0]
        while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 8001458:	e00a      	b.n	8001470 <i2c1_read_multi+0x138>
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe7a 	bl	8001158 <i2c_timeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <i2c1_read_multi+0x138>
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e07e      	b.n	800156e <i2c1_read_multi+0x236>
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <i2c1_read_multi+0x244>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <i2c1_read_multi+0x122>
        buf[0] = (uint8_t)I2C1->DR;
 800147c:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <i2c1_read_multi+0x244>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	701a      	strb	r2, [r3, #0]
        return 0;
 8001486:	2300      	movs	r3, #0
 8001488:	e071      	b.n	800156e <i2c1_read_multi+0x236>
    }

    // ACK para múltiplos
    I2C1->CR1 |= I2C_CR1_ACK;
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <i2c1_read_multi+0x244>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <i2c1_read_multi+0x244>)
 8001490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001494:	6013      	str	r3, [r2, #0]
    (void)I2C1->SR1; (void)I2C1->SR2;
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <i2c1_read_multi+0x244>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4b38      	ldr	r3, [pc, #224]	@ (800157c <i2c1_read_multi+0x244>)
 800149c:	699b      	ldr	r3, [r3, #24]

    for (uint32_t i=0; i<len; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e05f      	b.n	8001564 <i2c1_read_multi+0x22c>
        if (i == (len-2)) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b02      	subs	r3, #2
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d14a      	bne.n	8001544 <i2c1_read_multi+0x20c>
            // preparar NACK para o último byte
            while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) return -1;
 80014ae:	e00a      	b.n	80014c6 <i2c1_read_multi+0x18e>
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe4f 	bl	8001158 <i2c_timeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <i2c1_read_multi+0x18e>
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	e053      	b.n	800156e <i2c1_read_multi+0x236>
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <i2c1_read_multi+0x244>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ee      	beq.n	80014b0 <i2c1_read_multi+0x178>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <i2c1_read_multi+0x244>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a29      	ldr	r2, [pc, #164]	@ (800157c <i2c1_read_multi+0x244>)
 80014d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014dc:	6013      	str	r3, [r2, #0]
            buf[i] = (uint8_t)I2C1->DR;
 80014de:	4b27      	ldr	r3, [pc, #156]	@ (800157c <i2c1_read_multi+0x244>)
 80014e0:	6919      	ldr	r1, [r3, #16]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2ca      	uxtb	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
            I2C1->CR1 |= I2C_CR1_STOP;
 80014ec:	4b23      	ldr	r3, [pc, #140]	@ (800157c <i2c1_read_multi+0x244>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <i2c1_read_multi+0x244>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	6013      	str	r3, [r2, #0]
            while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 80014f8:	e00a      	b.n	8001510 <i2c1_read_multi+0x1d8>
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe2a 	bl	8001158 <i2c_timeout>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <i2c1_read_multi+0x1d8>
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e02e      	b.n	800156e <i2c1_read_multi+0x236>
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <i2c1_read_multi+0x244>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ee      	beq.n	80014fa <i2c1_read_multi+0x1c2>
            buf[i+1] = (uint8_t)I2C1->DR;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <i2c1_read_multi+0x244>)
 800151e:	6919      	ldr	r1, [r3, #16]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	4413      	add	r3, r2
 8001528:	b2ca      	uxtb	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
            break;
 800152c:	e01e      	b.n	800156c <i2c1_read_multi+0x234>
        } else {
            while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fe10 	bl	8001158 <i2c_timeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <i2c1_read_multi+0x20c>
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e014      	b.n	800156e <i2c1_read_multi+0x236>
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <i2c1_read_multi+0x244>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ee      	beq.n	800152e <i2c1_read_multi+0x1f6>
            buf[i] = (uint8_t)I2C1->DR;
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <i2c1_read_multi+0x244>)
 8001552:	6919      	ldr	r1, [r3, #16]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4413      	add	r3, r2
 800155a:	b2ca      	uxtb	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i=0; i<len; i++) {
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d39b      	bcc.n	80014a4 <i2c1_read_multi+0x16c>
        }
    }
    return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	000f4240 	.word	0x000f4240
 800157c:	40005400 	.word	0x40005400

08001580 <mpu6050_init>:

int mpu6050_init(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    // Wake up
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_PWR1, 0x00) < 0) return -1;
 8001584:	2200      	movs	r2, #0
 8001586:	216b      	movs	r1, #107	@ 0x6b
 8001588:	2068      	movs	r0, #104	@ 0x68
 800158a:	f7ff fe71 	bl	8001270 <i2c1_write_reg>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	da02      	bge.n	800159a <mpu6050_init+0x1a>
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	e02c      	b.n	80015f4 <mpu6050_init+0x74>
    // LPF ~42 Hz, gyro ±250 dps, accel ±2g, SampleRate 1k/(1+SMPLRT_DIV) -> 100 Hz (div=9)
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_CONFIG, 0x03) < 0) return -1;
 800159a:	2203      	movs	r2, #3
 800159c:	211a      	movs	r1, #26
 800159e:	2068      	movs	r0, #104	@ 0x68
 80015a0:	f7ff fe66 	bl	8001270 <i2c1_write_reg>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da02      	bge.n	80015b0 <mpu6050_init+0x30>
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e021      	b.n	80015f4 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_GYROCFG, 0x00) < 0) return -1;
 80015b0:	2200      	movs	r2, #0
 80015b2:	211b      	movs	r1, #27
 80015b4:	2068      	movs	r0, #104	@ 0x68
 80015b6:	f7ff fe5b 	bl	8001270 <i2c1_write_reg>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da02      	bge.n	80015c6 <mpu6050_init+0x46>
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	e016      	b.n	80015f4 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_ACCELCFG, 0x00) < 0) return -1;
 80015c6:	2200      	movs	r2, #0
 80015c8:	211c      	movs	r1, #28
 80015ca:	2068      	movs	r0, #104	@ 0x68
 80015cc:	f7ff fe50 	bl	8001270 <i2c1_write_reg>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	da02      	bge.n	80015dc <mpu6050_init+0x5c>
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e00b      	b.n	80015f4 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_SMPLRT, 9)    < 0) return -1;
 80015dc:	2209      	movs	r2, #9
 80015de:	2119      	movs	r1, #25
 80015e0:	2068      	movs	r0, #104	@ 0x68
 80015e2:	f7ff fe45 	bl	8001270 <i2c1_write_reg>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da02      	bge.n	80015f2 <mpu6050_init+0x72>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	e000      	b.n	80015f4 <mpu6050_init+0x74>
    return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <mpu6050_read_all>:

int mpu6050_read_all(mpu6050_raw_t *out) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[14];
    if (i2c1_read_multi(MPU6050_ADDR, MPU6050_REG_ACCEL, buf, 14) < 0) return -1;
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	230e      	movs	r3, #14
 8001606:	213b      	movs	r1, #59	@ 0x3b
 8001608:	2068      	movs	r0, #104	@ 0x68
 800160a:	f7ff fe95 	bl	8001338 <i2c1_read_multi>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	da02      	bge.n	800161a <mpu6050_read_all+0x22>
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	e046      	b.n	80016a8 <mpu6050_read_all+0xb0>

    out->ax = (int16_t)((buf[0]<<8) | buf[1]);
 800161a:	7a3b      	ldrb	r3, [r7, #8]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7a7b      	ldrb	r3, [r7, #9]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	801a      	strh	r2, [r3, #0]
    out->ay = (int16_t)((buf[2]<<8) | buf[3]);
 800162e:	7abb      	ldrb	r3, [r7, #10]
 8001630:	b21b      	sxth	r3, r3
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21a      	sxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	805a      	strh	r2, [r3, #2]
    out->az = (int16_t)((buf[4]<<8) | buf[5]);
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	809a      	strh	r2, [r3, #4]
    out->temp_raw = (int16_t)((buf[6]<<8) | buf[7]);
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	b21b      	sxth	r3, r3
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b21a      	sxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	819a      	strh	r2, [r3, #12]
    out->gx = (int16_t)((buf[8]<<8) | buf[9]);
 800166a:	7c3b      	ldrb	r3, [r7, #16]
 800166c:	b21b      	sxth	r3, r3
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7c7b      	ldrb	r3, [r7, #17]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21a      	sxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	80da      	strh	r2, [r3, #6]
    out->gy = (int16_t)((buf[10]<<8) | buf[11]);
 800167e:	7cbb      	ldrb	r3, [r7, #18]
 8001680:	b21b      	sxth	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21a      	sxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	811a      	strh	r2, [r3, #8]
    out->gz = (int16_t)((buf[12]<<8) | buf[13]);
 8001692:	7d3b      	ldrb	r3, [r7, #20]
 8001694:	b21b      	sxth	r3, r3
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7d7b      	ldrb	r3, [r7, #21]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	815a      	strh	r2, [r3, #10]
    return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_MspInit+0x54>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <HAL_MspInit+0x54>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x54>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_MspInit+0x54>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_MspInit+0x54>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_MspInit+0x54>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	210f      	movs	r1, #15
 80016f2:	f06f 0001 	mvn.w	r0, #1
 80016f6:	f000 fcae 	bl	8002056 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	@ (800178c <HAL_I2C_MspInit+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12b      	bne.n	8001782 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MP_SCL_Pin|MP_SDA_Pin;
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001756:	2304      	movs	r3, #4
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <HAL_I2C_MspInit+0x8c>)
 8001762:	f001 f82b 	bl	80027bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	@ 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40005400 	.word	0x40005400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a64      	ldr	r2, [pc, #400]	@ (8001948 <HAL_SD_MspInit+0x1b0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	f040 80c1 	bne.w	800193e <HAL_SD_MspInit+0x1a6>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	4b62      	ldr	r3, [pc, #392]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	4a61      	ldr	r2, [pc, #388]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80017cc:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e0:	4a5a      	ldr	r2, [pc, #360]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	4b54      	ldr	r3, [pc, #336]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4a53      	ldr	r2, [pc, #332]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6313      	str	r3, [r2, #48]	@ 0x30
 8001804:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_SD_MspInit+0x1b4>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001810:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001814:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001822:	230c      	movs	r3, #12
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4848      	ldr	r0, [pc, #288]	@ (8001950 <HAL_SD_MspInit+0x1b8>)
 800182e:	f000 ffc5 	bl	80027bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001832:	2304      	movs	r3, #4
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001842:	230c      	movs	r3, #12
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4841      	ldr	r0, [pc, #260]	@ (8001954 <HAL_SD_MspInit+0x1bc>)
 800184e:	f000 ffb5 	bl	80027bc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001852:	4b41      	ldr	r3, [pc, #260]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001854:	4a41      	ldr	r2, [pc, #260]	@ (800195c <HAL_SD_MspInit+0x1c4>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001858:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 800185a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800185e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001860:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b3c      	ldr	r3, [pc, #240]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 800186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001872:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001874:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001876:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800187a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 800187e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001882:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001884:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001886:	2220      	movs	r2, #32
 8001888:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001890:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001892:	2204      	movs	r2, #4
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001896:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 8001898:	2203      	movs	r2, #3
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800189c:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 800189e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 80018a6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80018ac:	482a      	ldr	r0, [pc, #168]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 80018ae:	f000 fc09 	bl	80020c4 <HAL_DMA_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80018b8:	f7ff fc48 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a26      	ldr	r2, [pc, #152]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c2:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <HAL_SD_MspInit+0x1c0>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018ca:	4a26      	ldr	r2, [pc, #152]	@ (8001964 <HAL_SD_MspInit+0x1cc>)
 80018cc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018d4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018f8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 80018fc:	2220      	movs	r2, #32
 80018fe:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 8001908:	2204      	movs	r2, #4
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 800190e:	2203      	movs	r2, #3
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 8001914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 800191c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001922:	480f      	ldr	r0, [pc, #60]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 8001924:	f000 fbce 	bl	80020c4 <HAL_DMA_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800192e:	f7ff fc0d 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001938:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_SD_MspInit+0x1c8>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	200003b4 	.word	0x200003b4
 800195c:	40026458 	.word	0x40026458
 8001960:	20000414 	.word	0x20000414
 8001964:	400264a0 	.word	0x400264a0

08001968 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_SPI_MspInit+0x84>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12b      	bne.n	80019e2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 8001994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <HAL_SPI_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80019c2:	23e0      	movs	r3, #224	@ 0xe0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d2:	2305      	movs	r3, #5
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_SPI_MspInit+0x8c>)
 80019de:	f000 feed 	bl	80027bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013000 	.word	0x40013000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	@ (8001a8c <HAL_TIM_Base_MspInit+0x94>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d134      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_TIM_Base_MspInit+0x98>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_ECHO_Pin;
 8001a52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4809      	ldr	r0, [pc, #36]	@ (8001a94 <HAL_TIM_Base_MspInit+0x9c>)
 8001a70:	f000 fea4 	bl	80027bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2105      	movs	r1, #5
 8001a78:	201b      	movs	r0, #27
 8001a7a:	f000 faec 	bl	8002056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a7e:	201b      	movs	r0, #27
 8001a80:	f000 fb05 	bl	800208e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	@ 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	@ (8001b1c <HAL_UART_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12c      	bne.n	8001b14 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001af2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b04:	2307      	movs	r3, #7
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001b10:	f000 fe54 	bl	80027bc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	@ 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <NMI_Handler+0x4>

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <MemManage_Handler+0x4>

08001b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b62:	f000 f959 	bl	8001e18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b66:	f00a fa01 	bl	800bf6c <xTaskGetSchedulerState>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d001      	beq.n	8001b74 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b70:	f00a fde2 	bl	800c738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <TIM1_CC_IRQHandler+0x10>)
 8001b7e:	f003 f92b 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004cc 	.word	0x200004cc

08001b8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <DMA2_Stream3_IRQHandler+0x10>)
 8001b92:	f000 fb9d 	bl	80022d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003b4 	.word	0x200003b4

08001ba0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <DMA2_Stream6_IRQHandler+0x10>)
 8001ba6:	f000 fb93 	bl	80022d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000414 	.word	0x20000414

08001bb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc6:	f3af 8000 	nop.w
 8001bca:	4601      	mov	r1, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf0      	blt.n	8001bc6 <_read+0x12>
  }

  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e009      	b.n	8001c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf1      	blt.n	8001c00 <_write+0x12>
  }
  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_close>:

int _close(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_isatty>:

int _isatty(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f00b f920 	bl	800cf04 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20020000 	.word	0x20020000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	2000056c 	.word	0x2000056c
 8001cf8:	20004498 	.word	0x20004498

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d24:	f7ff ffea 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	@ (8001d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	@ (8001d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f00b f8df 	bl	800cf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7fe fe55 	bl	8000a00 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d64:	0800e110 	.word	0x0800e110
  ldr r2, =_sbss
 8001d68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d6c:	20004494 	.word	0x20004494

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f94f 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fc82 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f967 	bl	80020aa <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f92f 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000570 	.word	0x20000570

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000570 	.word	0x20000570

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	@ (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff29 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff3e 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff31 	bl	8001f04 <__NVIC_EnableIRQ>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffa2 	bl	8001ffc <SysTick_Config>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff feb6 	bl	8001e40 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e099      	b.n	8002214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002100:	e00f      	b.n	8002122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002102:	f7ff fe9d 	bl	8001e40 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b05      	cmp	r3, #5
 800210e:	d908      	bls.n	8002122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e078      	b.n	8002214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e8      	bne.n	8002102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_DMA_Init+0x158>)
 800213c:	4013      	ands	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	2b04      	cmp	r3, #4
 800217a:	d107      	bne.n	800218c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002184:	4313      	orrs	r3, r2
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 0307 	bic.w	r3, r3, #7
 80021a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d117      	bne.n	80021e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00e      	beq.n	80021e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fa7b 	bl	80026c4 <DMA_CheckFifoParam>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2240      	movs	r2, #64	@ 0x40
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021e2:	2301      	movs	r3, #1
 80021e4:	e016      	b.n	8002214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa32 	bl	8002658 <DMA_CalcBaseAndBitshift>
 80021f4:	4603      	mov	r3, r0
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fc:	223f      	movs	r2, #63	@ 0x3f
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	f010803f 	.word	0xf010803f

08002220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_DMA_Start_IT+0x26>
 8002242:	2302      	movs	r3, #2
 8002244:	e040      	b.n	80022c8 <HAL_DMA_Start_IT+0xa8>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d12f      	bne.n	80022ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f9c4 	bl	80025fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	223f      	movs	r2, #63	@ 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0216 	orr.w	r2, r2, #22
 800228e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0208 	orr.w	r2, r2, #8
 80022a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e005      	b.n	80022c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002518 <HAL_DMA_IRQHandler+0x248>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a8e      	ldr	r2, [pc, #568]	@ (800251c <HAL_DMA_IRQHandler+0x24c>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	2208      	movs	r2, #8
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01a      	beq.n	800233c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0204 	bic.w	r2, r2, #4
 8002322:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	2208      	movs	r2, #8
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	2201      	movs	r2, #1
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	2201      	movs	r2, #1
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	f043 0202 	orr.w	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002376:	2204      	movs	r2, #4
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d012      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	2204      	movs	r2, #4
 8002396:	409a      	lsls	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a0:	f043 0204 	orr.w	r2, r3, #4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	2210      	movs	r2, #16
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d043      	beq.n	8002440 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03c      	beq.n	8002440 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	2210      	movs	r2, #16
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d018      	beq.n	8002412 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d024      	beq.n	8002440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
 80023fe:	e01f      	b.n	8002440 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
 8002410:	e016      	b.n	8002440 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0208 	bic.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002444:	2220      	movs	r2, #32
 8002446:	409a      	lsls	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 808f 	beq.w	8002570 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8087 	beq.w	8002570 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	2220      	movs	r2, #32
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b05      	cmp	r3, #5
 8002478:	d136      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0216 	bic.w	r2, r2, #22
 8002488:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002498:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <HAL_DMA_IRQHandler+0x1da>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0208 	bic.w	r2, r2, #8
 80024b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	223f      	movs	r2, #63	@ 0x3f
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d07e      	beq.n	80025dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
        }
        return;
 80024e6:	e079      	b.n	80025dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01d      	beq.n	8002532 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	2b00      	cmp	r3, #0
 800250a:	d031      	beq.n	8002570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e02c      	b.n	8002570 <HAL_DMA_IRQHandler+0x2a0>
 8002516:	bf00      	nop
 8002518:	20000000 	.word	0x20000000
 800251c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e01e      	b.n	8002570 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10f      	bne.n	8002560 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0210 	bic.w	r2, r2, #16
 800254e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d032      	beq.n	80025de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d022      	beq.n	80025ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2205      	movs	r2, #5
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	3301      	adds	r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d307      	bcc.n	80025b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f2      	bne.n	800259c <HAL_DMA_IRQHandler+0x2cc>
 80025b6:	e000      	b.n	80025ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
 80025da:	e000      	b.n	80025de <HAL_DMA_IRQHandler+0x30e>
        return;
 80025dc:	bf00      	nop
    }
  }
}
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b40      	cmp	r3, #64	@ 0x40
 8002628:	d108      	bne.n	800263c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800263a:	e007      	b.n	800264c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	60da      	str	r2, [r3, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3b10      	subs	r3, #16
 8002668:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <DMA_CalcBaseAndBitshift+0x64>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d909      	bls.n	800269a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	1d1a      	adds	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	@ 0x58
 8002698:	e007      	b.n	80026aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	aaaaaaab 	.word	0xaaaaaaab
 80026c0:	0800dc70 	.word	0x0800dc70

080026c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11f      	bne.n	800271e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d856      	bhi.n	8002792 <DMA_CheckFifoParam+0xce>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <DMA_CheckFifoParam+0x28>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	0800270f 	.word	0x0800270f
 80026f4:	080026fd 	.word	0x080026fd
 80026f8:	08002793 	.word	0x08002793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d046      	beq.n	8002796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e043      	b.n	8002796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002716:	d140      	bne.n	800279a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e03d      	b.n	800279a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002726:	d121      	bne.n	800276c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d837      	bhi.n	800279e <DMA_CheckFifoParam+0xda>
 800272e:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <DMA_CheckFifoParam+0x70>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002745 	.word	0x08002745
 8002738:	0800274b 	.word	0x0800274b
 800273c:	08002745 	.word	0x08002745
 8002740:	0800275d 	.word	0x0800275d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      break;
 8002748:	e030      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d025      	beq.n	80027a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e022      	b.n	80027a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002764:	d11f      	bne.n	80027a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800276a:	e01c      	b.n	80027a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d903      	bls.n	800277a <DMA_CheckFifoParam+0xb6>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d003      	beq.n	8002780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002778:	e018      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      break;
 800277e:	e015      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e00b      	b.n	80027aa <DMA_CheckFifoParam+0xe6>
      break;
 8002792:	bf00      	nop
 8002794:	e00a      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e008      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e006      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
 80027a0:	e004      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e002      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;   
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
    }
  } 
  
  return status; 
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	@ 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e16b      	b.n	8002ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f040 815a 	bne.w	8002aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d005      	beq.n	800280e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	2b02      	cmp	r3, #2
 800280c:	d130      	bne.n	8002870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 0201 	and.w	r2, r3, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b03      	cmp	r3, #3
 800287a:	d017      	beq.n	80028ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d123      	bne.n	8002900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0203 	and.w	r2, r3, #3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80b4 	beq.w	8002aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b60      	ldr	r3, [pc, #384]	@ (8002ac8 <HAL_GPIO_Init+0x30c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ac8 <HAL_GPIO_Init+0x30c>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_GPIO_Init+0x30c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295e:	4a5b      	ldr	r2, [pc, #364]	@ (8002acc <HAL_GPIO_Init+0x310>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_GPIO_Init+0x314>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	@ (8002ad4 <HAL_GPIO_Init+0x318>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	@ (8002ad8 <HAL_GPIO_Init+0x31c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	@ (8002adc <HAL_GPIO_Init+0x320>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x21a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x216>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ae4 <HAL_GPIO_Init+0x328>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x212>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae8 <HAL_GPIO_Init+0x32c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x20e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	@ (8002aec <HAL_GPIO_Init+0x330>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x20a>
 80029c2:	2307      	movs	r3, #7
 80029c4:	e00e      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x228>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	@ (8002acc <HAL_GPIO_Init+0x310>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3b      	ldr	r3, [pc, #236]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b26      	ldr	r3, [pc, #152]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <HAL_GPIO_Init+0x334>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae90 	bls.w	80027d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40013c00 	.word	0x40013c00

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	400b      	ands	r3, r1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e12b      	b.n	8002dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe fdc0 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc0:	f000 fd80 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a81      	ldr	r2, [pc, #516]	@ (8002dd0 <HAL_I2C_Init+0x274>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d807      	bhi.n	8002be0 <HAL_I2C_Init+0x84>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a80      	ldr	r2, [pc, #512]	@ (8002dd4 <HAL_I2C_Init+0x278>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e006      	b.n	8002bee <HAL_I2C_Init+0x92>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a7d      	ldr	r2, [pc, #500]	@ (8002dd8 <HAL_I2C_Init+0x27c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0e7      	b.n	8002dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a78      	ldr	r2, [pc, #480]	@ (8002ddc <HAL_I2C_Init+0x280>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd0 <HAL_I2C_Init+0x274>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d802      	bhi.n	8002c30 <HAL_I2C_Init+0xd4>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	e009      	b.n	8002c44 <HAL_I2C_Init+0xe8>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	4a69      	ldr	r2, [pc, #420]	@ (8002de0 <HAL_I2C_Init+0x284>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	3301      	adds	r3, #1
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	495c      	ldr	r1, [pc, #368]	@ (8002dd0 <HAL_I2C_Init+0x274>)
 8002c60:	428b      	cmp	r3, r1
 8002c62:	d819      	bhi.n	8002c98 <HAL_I2C_Init+0x13c>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e59      	subs	r1, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c72:	1c59      	adds	r1, r3, #1
 8002c74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c78:	400b      	ands	r3, r1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_I2C_Init+0x138>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e59      	subs	r1, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	e051      	b.n	8002d38 <HAL_I2C_Init+0x1dc>
 8002c94:	2304      	movs	r3, #4
 8002c96:	e04f      	b.n	8002d38 <HAL_I2C_Init+0x1dc>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d111      	bne.n	8002cc4 <HAL_I2C_Init+0x168>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e012      	b.n	8002cea <HAL_I2C_Init+0x18e>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1e58      	subs	r0, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	0099      	lsls	r1, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Init+0x196>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e022      	b.n	8002d38 <HAL_I2C_Init+0x1dc>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10e      	bne.n	8002d18 <HAL_I2C_Init+0x1bc>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1e58      	subs	r0, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	440b      	add	r3, r1
 8002d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d16:	e00f      	b.n	8002d38 <HAL_I2C_Init+0x1dc>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e58      	subs	r0, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	0099      	lsls	r1, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	6809      	ldr	r1, [r1, #0]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6911      	ldr	r1, [r2, #16]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68d2      	ldr	r2, [r2, #12]
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	000186a0 	.word	0x000186a0
 8002dd4:	001e847f 	.word	0x001e847f
 8002dd8:	003d08ff 	.word	0x003d08ff
 8002ddc:	431bde83 	.word	0x431bde83
 8002de0:	10624dd3 	.word	0x10624dd3

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e267      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d075      	beq.n	8002eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e02:	4b88      	ldr	r3, [pc, #544]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d00c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4b85      	ldr	r3, [pc, #532]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d112      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1a:	4b82      	ldr	r3, [pc, #520]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	4b7e      	ldr	r3, [pc, #504]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_OscConfig+0x108>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e242      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x74>
 8002e4a:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b70      	ldr	r3, [pc, #448]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6f      	ldr	r2, [pc, #444]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6c      	ldr	r2, [pc, #432]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	4b69      	ldr	r3, [pc, #420]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a68      	ldr	r2, [pc, #416]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b66      	ldr	r3, [pc, #408]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a65      	ldr	r2, [pc, #404]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe ffd0 	bl	8001e40 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe ffcc 	bl	8001e40 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e207      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe ffbc 	bl	8001e40 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe ffb8 	bl	8001e40 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1f3      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xe8>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d063      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002efa:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f12:	4b44      	ldr	r3, [pc, #272]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1c7      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4937      	ldr	r1, [pc, #220]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_RCC_OscConfig+0x244>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe ff71 	bl	8001e40 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe ff6d 	bl	8001e40 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1a8      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4925      	ldr	r1, [pc, #148]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	600b      	str	r3, [r1, #0]
 8002f94:	e015      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <HAL_RCC_OscConfig+0x244>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe ff50 	bl	8001e40 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe ff4c 	bl	8001e40 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e187      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d036      	beq.n	800303c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_RCC_OscConfig+0x248>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe ff30 	bl	8001e40 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe ff2c 	bl	8001e40 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e167      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x200>
 8003002:	e01b      	b.n	800303c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_OscConfig+0x248>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fe ff19 	bl	8001e40 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	e00e      	b.n	8003030 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe ff15 	bl	8001e40 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d907      	bls.n	8003030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e150      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
 8003024:	40023800 	.word	0x40023800
 8003028:	42470000 	.word	0x42470000
 800302c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b88      	ldr	r3, [pc, #544]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ea      	bne.n	8003012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8097 	beq.w	8003178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b81      	ldr	r3, [pc, #516]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10f      	bne.n	800307a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b7d      	ldr	r3, [pc, #500]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	4a7c      	ldr	r2, [pc, #496]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003068:	6413      	str	r3, [r2, #64]	@ 0x40
 800306a:	4b7a      	ldr	r3, [pc, #488]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b77      	ldr	r3, [pc, #476]	@ (8003258 <HAL_RCC_OscConfig+0x474>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b74      	ldr	r3, [pc, #464]	@ (8003258 <HAL_RCC_OscConfig+0x474>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a73      	ldr	r2, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x474>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7fe fed5 	bl	8001e40 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fe fed1 	bl	8001e40 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e10c      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003258 <HAL_RCC_OscConfig+0x474>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x2ea>
 80030c0:	4b64      	ldr	r3, [pc, #400]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	4a63      	ldr	r2, [pc, #396]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80030cc:	e01c      	b.n	8003108 <HAL_RCC_OscConfig+0x324>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x30c>
 80030d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	4a5e      	ldr	r2, [pc, #376]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0x324>
 80030f0:	4b58      	ldr	r3, [pc, #352]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	4a57      	ldr	r2, [pc, #348]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030fc:	4b55      	ldr	r3, [pc, #340]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	4a54      	ldr	r2, [pc, #336]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003102:	f023 0304 	bic.w	r3, r3, #4
 8003106:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fe96 	bl	8001e40 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe fe92 	bl	8001e40 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0cb      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ee      	beq.n	8003118 <HAL_RCC_OscConfig+0x334>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fe fe80 	bl	8001e40 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe fe7c 	bl	8001e40 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0b5      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315a:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ee      	bne.n	8003144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316c:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	4a38      	ldr	r2, [pc, #224]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a1 	beq.w	80032c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d05c      	beq.n	8003248 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d141      	bne.n	800321a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b31      	ldr	r3, [pc, #196]	@ (800325c <HAL_RCC_OscConfig+0x478>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fe50 	bl	8001e40 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fe4c 	bl	8001e40 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e087      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	3b01      	subs	r3, #1
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	491b      	ldr	r1, [pc, #108]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_RCC_OscConfig+0x478>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe fe25 	bl	8001e40 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7fe fe21 	bl	8001e40 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e05c      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x416>
 8003218:	e054      	b.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <HAL_RCC_OscConfig+0x478>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe fe0e 	bl	8001e40 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe fe0a 	bl	8001e40 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e045      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_RCC_OscConfig+0x470>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x444>
 8003246:	e03d      	b.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e038      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000
 800325c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCC_OscConfig+0x4ec>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d028      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0cc      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b68      	ldr	r3, [pc, #416]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d90c      	bls.n	8003310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b65      	ldr	r3, [pc, #404]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800334a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d119      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b3f      	ldr	r3, [pc, #252]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e067      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b37      	ldr	r3, [pc, #220]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4934      	ldr	r1, [pc, #208]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fe fd3c 	bl	8001e40 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fe fd38 	bl	8001e40 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b25      	ldr	r3, [pc, #148]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d20c      	bcs.n	800341c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b22      	ldr	r3, [pc, #136]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fc9c 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
 8003494:	0800dc58 	.word	0x0800dc58
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b094      	sub	sp, #80	@ 0x50
 80034a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b8:	4b79      	ldr	r3, [pc, #484]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x40>
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	f200 80e1 	bhi.w	800368c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x3a>
 80034d2:	e0db      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b73      	ldr	r3, [pc, #460]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034d8:	e0db      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034da:	4b73      	ldr	r3, [pc, #460]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034de:	e0d8      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b6f      	ldr	r3, [pc, #444]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ea:	4b6d      	ldr	r3, [pc, #436]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b6a      	ldr	r3, [pc, #424]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	2200      	movs	r2, #0
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003500:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003508:	633b      	str	r3, [r7, #48]	@ 0x30
 800350a:	2300      	movs	r3, #0
 800350c:	637b      	str	r3, [r7, #52]	@ 0x34
 800350e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	f04f 0000 	mov.w	r0, #0
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003524:	0150      	lsls	r0, r2, #5
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4621      	mov	r1, r4
 800352c:	1a51      	subs	r1, r2, r1
 800352e:	6139      	str	r1, [r7, #16]
 8003530:	4629      	mov	r1, r5
 8003532:	eb63 0301 	sbc.w	r3, r3, r1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003544:	4659      	mov	r1, fp
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	4651      	mov	r1, sl
 800354a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354e:	4651      	mov	r1, sl
 8003550:	018a      	lsls	r2, r1, #6
 8003552:	4651      	mov	r1, sl
 8003554:	ebb2 0801 	subs.w	r8, r2, r1
 8003558:	4659      	mov	r1, fp
 800355a:	eb63 0901 	sbc.w	r9, r3, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003572:	4690      	mov	r8, r2
 8003574:	4699      	mov	r9, r3
 8003576:	4623      	mov	r3, r4
 8003578:	eb18 0303 	adds.w	r3, r8, r3
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	462b      	mov	r3, r5
 8003580:	eb49 0303 	adc.w	r3, r9, r3
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003592:	4629      	mov	r1, r5
 8003594:	024b      	lsls	r3, r1, #9
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800359c:	4621      	mov	r1, r4
 800359e:	024a      	lsls	r2, r1, #9
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035b0:	f7fc fe66 	bl	8000280 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035bc:	e058      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b38      	ldr	r3, [pc, #224]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	2200      	movs	r2, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	4611      	mov	r1, r2
 80035ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	0159      	lsls	r1, r3, #5
 80035e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ea:	0150      	lsls	r0, r2, #5
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4641      	mov	r1, r8
 80035f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035f6:	4649      	mov	r1, r9
 80035f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800360c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003610:	ebb2 040a 	subs.w	r4, r2, sl
 8003614:	eb63 050b 	sbc.w	r5, r3, fp
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	00eb      	lsls	r3, r5, #3
 8003622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003626:	00e2      	lsls	r2, r4, #3
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4643      	mov	r3, r8
 800362e:	18e3      	adds	r3, r4, r3
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	464b      	mov	r3, r9
 8003634:	eb45 0303 	adc.w	r3, r5, r3
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003646:	4629      	mov	r1, r5
 8003648:	028b      	lsls	r3, r1, #10
 800364a:	4621      	mov	r1, r4
 800364c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003650:	4621      	mov	r1, r4
 8003652:	028a      	lsls	r2, r1, #10
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	2200      	movs	r2, #0
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	61fa      	str	r2, [r7, #28]
 8003660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003664:	f7fc fe0c 	bl	8000280 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800368a:	e002      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003694:	4618      	mov	r0, r3
 8003696:	3750      	adds	r7, #80	@ 0x50
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	007a1200 	.word	0x007a1200

080036ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c8:	f7ff fff0 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0a9b      	lsrs	r3, r3, #10
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	@ (80036e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	0800dc68 	.word	0x0800dc68

080036ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036f0:	f7ff ffdc 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0b5b      	lsrs	r3, r3, #13
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	@ (8003710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	0800dc68 	.word	0x0800dc68

08003714 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fe f82d 	bl	8001798 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f814 	bl	8003774 <HAL_SD_InitCard>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00a      	b.n	800376c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b08e      	sub	sp, #56	@ 0x38
 8003778:	af04      	add	r7, sp, #16
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003790:	2376      	movs	r3, #118	@ 0x76
 8003792:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681d      	ldr	r5, [r3, #0]
 8003798:	466c      	mov	r4, sp
 800379a:	f107 0318 	add.w	r3, r7, #24
 800379e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ac:	4628      	mov	r0, r5
 80037ae:	f002 fbc1 	bl	8005f34 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037b2:	4b2a      	ldr	r3, [pc, #168]	@ (800385c <HAL_SD_InitCard+0xe8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fbf1 	bl	8005fa4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037c2:	4b26      	ldr	r3, [pc, #152]	@ (800385c <HAL_SD_InitCard+0xe8>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80037c8:	2002      	movs	r0, #2
 80037ca:	f7fe fb45 	bl	8001e58 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fe12 	bl	80043f8 <SD_PowerON>
 80037d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02e      	b.n	8003852 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fd31 	bl	800425c <SD_InitCard>
 80037fa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e01b      	b.n	8003852 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fc50 	bl	80060c8 <SDMMC_CmdBlockLength>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <HAL_SD_InitCard+0xec>)
 8003836:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3728      	adds	r7, #40	@ 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bdb0      	pop	{r4, r5, r7, pc}
 800385a:	bf00      	nop
 800385c:	422580a0 	.word	0x422580a0
 8003860:	004005ff 	.word	0x004005ff

08003864 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	@ 0x30
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003880:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0c0      	b.n	8003a0e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	f040 80b9 	bne.w	8003a0c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	441a      	add	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d907      	bls.n	80038be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0a7      	b.n	8003a0e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2203      	movs	r2, #3
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003a18 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80038e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	4a4b      	ldr	r2, [pc, #300]	@ (8003a1c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80038f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2200      	movs	r2, #0
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3380      	adds	r3, #128	@ 0x80
 8003928:	4619      	mov	r1, r3
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	025b      	lsls	r3, r3, #9
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	f7fe fc75 	bl	8002220 <HAL_DMA_Start_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d017      	beq.n	800396c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e050      	b.n	8003a0e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800396c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800396e:	2201      	movs	r2, #1
 8003970:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	2b01      	cmp	r3, #1
 8003978:	d002      	beq.n	8003980 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	025b      	lsls	r3, r3, #9
 800398a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800398c:	2390      	movs	r3, #144	@ 0x90
 800398e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003990:	2302      	movs	r3, #2
 8003992:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f107 0210 	add.w	r2, r7, #16
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 fb62 	bl	8006070 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d90a      	bls.n	80039c8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2282      	movs	r2, #130	@ 0x82
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fbc6 	bl	8006150 <SDMMC_CmdReadMultiBlock>
 80039c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80039c6:	e009      	b.n	80039dc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2281      	movs	r2, #129	@ 0x81
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 fb99 	bl	800610c <SDMMC_CmdReadSingleBlock>
 80039da:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d012      	beq.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e002      	b.n	8003a0e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3730      	adds	r7, #48	@ 0x30
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	08004147 	.word	0x08004147
 8003a1c:	080041b9 	.word	0x080041b9
 8003a20:	004005ff 	.word	0x004005ff
 8003a24:	4225858c 	.word	0x4225858c

08003a28 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	@ 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0c5      	b.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 80be 	bne.w	8003bda <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d907      	bls.n	8003a82 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0ac      	b.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2203      	movs	r2, #3
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8003be4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8003be8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003ab4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	2200      	movs	r2, #0
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d002      	beq.n	8003acc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	025b      	lsls	r3, r3, #9
 8003aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d90a      	bls.n	8003ae8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	22a0      	movs	r2, #160	@ 0xa0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fb7a 	bl	80061d8 <SDMMC_CmdWriteMultiBlock>
 8003ae4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003ae6:	e009      	b.n	8003afc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2290      	movs	r2, #144	@ 0x90
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 fb4d 	bl	8006194 <SDMMC_CmdWriteSingleBlock>
 8003afa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a39      	ldr	r2, [pc, #228]	@ (8003bec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e059      	b.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b28:	4b31      	ldr	r3, [pc, #196]	@ (8003bf0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	2240      	movs	r2, #64	@ 0x40
 8003b34:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3380      	adds	r3, #128	@ 0x80
 8003b5e:	461a      	mov	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	025b      	lsls	r3, r3, #9
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	f7fe fb5b 	bl	8002220 <HAL_DMA_Start_IT>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01c      	beq.n	8003baa <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8003b7e:	f023 0302 	bic.w	r3, r3, #2
 8003b82:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e018      	b.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	025b      	lsls	r3, r3, #9
 8003bb4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bb6:	2390      	movs	r3, #144	@ 0x90
 8003bb8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f107 0210 	add.w	r2, r7, #16
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f002 fa4d 	bl	8006070 <SDIO_ConfigData>

      return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3730      	adds	r7, #48	@ 0x30
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	0800411d 	.word	0x0800411d
 8003be8:	080041b9 	.word	0x080041b9
 8003bec:	004005ff 	.word	0x004005ff
 8003bf0:	4225858c 	.word	0x4225858c

08003bf4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c16:	0f9b      	lsrs	r3, r3, #30
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c22:	0e9b      	lsrs	r3, r3, #26
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c68:	0d1b      	lsrs	r3, r3, #20
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c86:	0bdb      	lsrs	r3, r3, #15
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c98:	0b9b      	lsrs	r3, r3, #14
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cbc:	0b1b      	lsrs	r3, r3, #12
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d163      	bne.n	8003da0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cdc:	009a      	lsls	r2, r3, #2
 8003cde:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003ce8:	0f92      	lsrs	r2, r2, #30
 8003cea:	431a      	orrs	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf4:	0edb      	lsrs	r3, r3, #27
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d06:	0e1b      	lsrs	r3, r3, #24
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d18:	0d5b      	lsrs	r3, r3, #21
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3c:	0bdb      	lsrs	r3, r3, #15
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	7e1b      	ldrb	r3, [r3, #24]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	3302      	adds	r3, #2
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003d6a:	fb03 f202 	mul.w	r2, r3, r2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	7a1b      	ldrb	r3, [r3, #8]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d8c:	0a52      	lsrs	r2, r2, #9
 8003d8e:	fb03 f202 	mul.w	r2, r3, r2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d9e:	e031      	b.n	8003e04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d11d      	bne.n	8003de4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	431a      	orrs	r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	029a      	lsls	r2, r3, #10
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003de2:	e00f      	b.n	8003e04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a58      	ldr	r2, [pc, #352]	@ (8003f4c <HAL_SD_GetCardCSD+0x344>)
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e09d      	b.n	8003f40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e08:	0b9b      	lsrs	r3, r3, #14
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1a:	09db      	lsrs	r3, r3, #7
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3c:	0fdb      	lsrs	r3, r3, #31
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	0f5b      	lsrs	r3, r3, #29
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	0d9b      	lsrs	r3, r3, #22
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	0d5b      	lsrs	r3, r3, #21
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	0bdb      	lsrs	r3, r3, #15
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	0b9b      	lsrs	r3, r3, #14
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	0b5b      	lsrs	r3, r3, #13
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	0b1b      	lsrs	r3, r3, #12
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	0a9b      	lsrs	r3, r3, #10
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	004005ff 	.word	0x004005ff

08003f50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003fa8:	b5b0      	push	{r4, r5, r7, lr}
 8003faa:	b08e      	sub	sp, #56	@ 0x38
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d02e      	beq.n	8004026 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fce:	d106      	bne.n	8003fde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fdc:	e029      	b.n	8004032 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe4:	d10a      	bne.n	8003ffc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fabc 	bl	8004564 <SD_WideBus_Enable>
 8003fec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ffa:	e01a      	b.n	8004032 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 faf9 	bl	80045fa <SD_WideBus_Disable>
 8004008:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38
 8004016:	e00c      	b.n	8004032 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
 8004024:	e005      	b.n	8004032 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004050:	e01f      	b.n	8004092 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681d      	ldr	r5, [r3, #0]
 8004078:	466c      	mov	r4, sp
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800408c:	4628      	mov	r0, r5
 800408e:	f001 ff51 	bl	8005f34 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800409a:	4618      	mov	r0, r3
 800409c:	f002 f814 	bl	80060c8 <SDMMC_CmdBlockLength>
 80040a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0a      	ldr	r2, [pc, #40]	@ (80040d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80040ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3728      	adds	r7, #40	@ 0x28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	004005ff 	.word	0x004005ff

080040dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa10 	bl	8004514 <SD_SendStatus>
 80040f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	0a5b      	lsrs	r3, r3, #9
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004112:	693b      	ldr	r3, [r7, #16]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004138:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	2b82      	cmp	r3, #130	@ 0x82
 800415a:	d111      	bne.n	8004180 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f002 f85b 	bl	800621c <SDMMC_CmdStopTransfer>
 8004166:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fd3a 	bl	8003bf4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0208 	bic.w	r2, r2, #8
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004198:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f002 fcb7 	bl	8006b1c <HAL_SD_RxCpltCallback>
#endif
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fa0c 	bl	80025e4 <HAL_DMA_GetError>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d03e      	beq.n	8004250 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d002      	beq.n	80041ee <SD_DMAError+0x36>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d12d      	bne.n	800424a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <SD_DMAError+0xa0>)
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004204:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff62 	bl	80040dc <HAL_SD_GetCardState>
 8004218:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d002      	beq.n	8004226 <SD_DMAError+0x6e>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d10a      	bne.n	800423c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f001 fff6 	bl	800621c <SDMMC_CmdStopTransfer>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	431a      	orrs	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f7ff fcd2 	bl	8003bf4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	004005ff 	.word	0x004005ff

0800425c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b094      	sub	sp, #80	@ 0x50
 8004260:	af04      	add	r7, sp, #16
 8004262:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004264:	2301      	movs	r3, #1
 8004266:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fea7 	bl	8005fc0 <SDIO_GetPowerState>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004278:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800427c:	e0b8      	b.n	80043f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	2b03      	cmp	r3, #3
 8004284:	d02f      	beq.n	80042e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f002 f8d0 	bl	8006430 <SDMMC_CmdSendCID>
 8004290:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <SD_InitCard+0x40>
    {
      return errorstate;
 8004298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429a:	e0a9      	b.n	80043f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fed1 	bl	800604a <SDIO_GetResponse>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2104      	movs	r1, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 fec8 	bl	800604a <SDIO_GetResponse>
 80042ba:	4602      	mov	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2108      	movs	r1, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 febf 	bl	800604a <SDIO_GetResponse>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	210c      	movs	r1, #12
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 feb6 	bl	800604a <SDIO_GetResponse>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d00d      	beq.n	800430a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f107 020e 	add.w	r2, r7, #14
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 f8d6 	bl	80064aa <SDMMC_CmdSetRelAdd>
 80042fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <SD_InitCard+0xae>
    {
      return errorstate;
 8004306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004308:	e072      	b.n	80043f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	2b03      	cmp	r3, #3
 8004310:	d036      	beq.n	8004380 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004312:	89fb      	ldrh	r3, [r7, #14]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f002 f8a0 	bl	800646c <SDMMC_CmdSendCSD>
 800432c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004336:	e05b      	b.n	80043f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f001 fe83 	bl	800604a <SDIO_GetResponse>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2104      	movs	r1, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fe7a 	bl	800604a <SDIO_GetResponse>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2108      	movs	r1, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fe71 	bl	800604a <SDIO_GetResponse>
 8004368:	4602      	mov	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	210c      	movs	r1, #12
 8004374:	4618      	mov	r0, r3
 8004376:	f001 fe68 	bl	800604a <SDIO_GetResponse>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2104      	movs	r1, #4
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fe5f 	bl	800604a <SDIO_GetResponse>
 800438c:	4603      	mov	r3, r0
 800438e:	0d1a      	lsrs	r2, r3, #20
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fc34 	bl	8003c08 <HAL_SD_GetCardCSD>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80043aa:	e021      	b.n	80043f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	2200      	movs	r2, #0
 80043b8:	461c      	mov	r4, r3
 80043ba:	4615      	mov	r5, r2
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	4608      	mov	r0, r1
 80043c2:	f001 ff4d 	bl	8006260 <SDMMC_CmdSelDesel>
 80043c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	e00e      	b.n	80043f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681d      	ldr	r5, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	466c      	mov	r4, sp
 80043da:	f103 0210 	add.w	r2, r3, #16
 80043de:	ca07      	ldmia	r2, {r0, r1, r2}
 80043e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043e4:	3304      	adds	r3, #4
 80043e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e8:	4628      	mov	r0, r5
 80043ea:	f001 fda3 	bl	8005f34 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3740      	adds	r7, #64	@ 0x40
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}

080043f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f001 ff48 	bl	80062a6 <SDMMC_CmdGoIdleState>
 8004416:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <SD_PowerON+0x2a>
  {
    return errorstate;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	e072      	b.n	8004508 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f001 ff5b 	bl	80062e2 <SDMMC_CmdOperCond>
 800442c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f001 ff31 	bl	80062a6 <SDMMC_CmdGoIdleState>
 8004444:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <SD_PowerON+0x5e>
    {
      return errorstate;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e05b      	b.n	8004508 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445a:	2b01      	cmp	r3, #1
 800445c:	d137      	bne.n	80044ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f001 ff5b 	bl	8006320 <SDMMC_CmdAppCommand>
 800446a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02d      	beq.n	80044ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004472:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004476:	e047      	b.n	8004508 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f001 ff4e 	bl	8006320 <SDMMC_CmdAppCommand>
 8004484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <SD_PowerON+0x98>
    {
      return errorstate;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	e03b      	b.n	8004508 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	491e      	ldr	r1, [pc, #120]	@ (8004510 <SD_PowerON+0x118>)
 8004496:	4618      	mov	r0, r3
 8004498:	f001 ff64 	bl	8006364 <SDMMC_CmdAppOperCommand>
 800449c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80044a8:	e02e      	b.n	8004508 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 fdca 	bl	800604a <SDIO_GetResponse>
 80044b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	0fdb      	lsrs	r3, r3, #31
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <SD_PowerON+0xcc>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <SD_PowerON+0xce>
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

    count++;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3301      	adds	r3, #1
 80044cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d802      	bhi.n	80044de <SD_PowerON+0xe6>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0cc      	beq.n	8004478 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d902      	bls.n	80044ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ec:	e00c      	b.n	8004508 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80044fe:	e002      	b.n	8004506 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	c1100000 	.word	0xc1100000

08004514 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004524:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004528:	e018      	b.n	800455c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f001 ffd8 	bl	80064ec <SDMMC_CmdSendStatus>
 800453c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	e009      	b.n	800455c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fd7b 	bl	800604a <SDIO_GetResponse>
 8004554:	4602      	mov	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fd65 	bl	800604a <SDIO_GetResponse>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800458a:	d102      	bne.n	8004592 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800458c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004590:	e02f      	b.n	80045f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f879 	bl	8004690 <SD_FindSCR>
 800459e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	e023      	b.n	80045f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f001 fead 	bl	8006320 <SDMMC_CmdAppCommand>
 80045c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	e00f      	b.n	80045f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fee6 	bl	80063aa <SDMMC_CmdBusWidth>
 80045de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	e003      	b.n	80045f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e001      	b.n	80045f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f001 fd1a 	bl	800604a <SDIO_GetResponse>
 8004616:	4603      	mov	r3, r0
 8004618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004620:	d102      	bne.n	8004628 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004622:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004626:	e02f      	b.n	8004688 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f82e 	bl	8004690 <SD_FindSCR>
 8004634:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	e023      	b.n	8004688 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01c      	beq.n	8004684 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f001 fe62 	bl	8006320 <SDMMC_CmdAppCommand>
 800465c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	e00f      	b.n	8004688 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fe9b 	bl	80063aa <SDMMC_CmdBusWidth>
 8004674:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	e003      	b.n	8004688 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004680:	2300      	movs	r3, #0
 8004682:	e001      	b.n	8004688 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004684:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b08f      	sub	sp, #60	@ 0x3c
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800469a:	f7fd fbd1 	bl	8001e40 <HAL_GetTick>
 800469e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2108      	movs	r1, #8
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fd06 	bl	80060c8 <SDMMC_CmdBlockLength>
 80046bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	e0b9      	b.n	800483c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f001 fe23 	bl	8006320 <SDMMC_CmdAppCommand>
 80046da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	e0aa      	b.n	800483c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80046ec:	2308      	movs	r3, #8
 80046ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80046f0:	2330      	movs	r3, #48	@ 0x30
 80046f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80046f4:	2302      	movs	r3, #2
 80046f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f107 0210 	add.w	r2, r7, #16
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fcb0 	bl	8006070 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fe6a 	bl	80063ee <SDMMC_CmdSendSCR>
 800471a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02a      	beq.n	8004778 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	e08a      	b.n	800483c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00f      	beq.n	8004754 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	f107 0208 	add.w	r2, r7, #8
 8004740:	18d4      	adds	r4, r2, r3
 8004742:	4608      	mov	r0, r1
 8004744:	f001 fc21 	bl	8005f8a <SDIO_ReadFIFO>
 8004748:	4603      	mov	r3, r0
 800474a:	6023      	str	r3, [r4, #0]
      index++;
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	3301      	adds	r3, #1
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
 8004752:	e006      	b.n	8004762 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004762:	f7fd fb6d 	bl	8001e40 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d102      	bne.n	8004778 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004772:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004776:	e061      	b.n	800483c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0cf      	beq.n	8004726 <SD_FindSCR+0x96>
 8004786:	e000      	b.n	800478a <SD_FindSCR+0xfa>
      break;
 8004788:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <SD_FindSCR+0x116>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2208      	movs	r2, #8
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80047ae:	2308      	movs	r3, #8
 80047b0:	e044      	b.n	800483c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2202      	movs	r2, #2
 80047c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80047c8:	2302      	movs	r3, #2
 80047ca:	e037      	b.n	800483c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2220      	movs	r2, #32
 80047e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80047e2:	2320      	movs	r3, #32
 80047e4:	e02a      	b.n	800483c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	061a      	lsls	r2, r3, #24
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004806:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	601a      	str	r2, [r3, #0]
    scr++;
 8004812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004814:	3304      	adds	r3, #4
 8004816:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	061a      	lsls	r2, r3, #24
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004824:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800482e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	0e1b      	lsrs	r3, r3, #24
 8004834:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	373c      	adds	r7, #60	@ 0x3c
 8004840:	46bd      	mov	sp, r7
 8004842:	bd90      	pop	{r4, r7, pc}

08004844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07b      	b.n	800494e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004866:	d009      	beq.n	800487c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
 800486e:	e005      	b.n	800487c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd f866 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004900:	ea42 0103 	orr.w	r1, r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0104 	and.w	r1, r3, #4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f003 0210 	and.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800493c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e041      	b.n	80049ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fd f83b 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f000 fce9 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d001      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e04e      	b.n	8004aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d01d      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_TIM_Base_Start_IT+0xc8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <HAL_TIM_Base_Start_IT+0xd8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d010      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40001800 	.word	0x40001800

08004ad4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e041      	b.n	8004b6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f839 	bl	8004b72 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f000 fc2a 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_IC_Start_IT+0x1e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e013      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x46>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_IC_Start_IT+0x2e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x46>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0x3e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e003      	b.n	8004bce <HAL_TIM_IC_Start_IT+0x46>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_TIM_IC_Start_IT+0x58>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e013      	b.n	8004c08 <HAL_TIM_IC_Start_IT+0x80>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d104      	bne.n	8004bf0 <HAL_TIM_IC_Start_IT+0x68>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e00b      	b.n	8004c08 <HAL_TIM_IC_Start_IT+0x80>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d104      	bne.n	8004c00 <HAL_TIM_IC_Start_IT+0x78>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e003      	b.n	8004c08 <HAL_TIM_IC_Start_IT+0x80>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c10:	7b7b      	ldrb	r3, [r7, #13]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0cc      	b.n	8004db4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_IC_Start_IT+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c28:	e013      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0xca>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_IC_Start_IT+0xb2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c38:	e00b      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0xca>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_IC_Start_IT+0xc2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c48:	e003      	b.n	8004c52 <HAL_TIM_IC_Start_IT+0xca>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_IC_Start_IT+0xda>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c60:	e013      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x102>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_IC_Start_IT+0xea>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x102>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_IC_Start_IT+0xfa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c80:	e003      	b.n	8004c8a <HAL_TIM_IC_Start_IT+0x102>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d841      	bhi.n	8004d14 <HAL_TIM_IC_Start_IT+0x18c>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_TIM_IC_Start_IT+0x110>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004cdf 	.word	0x08004cdf
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004cf1 	.word	0x08004cf1
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d03 	.word	0x08004d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0202 	orr.w	r2, r2, #2
 8004cda:	60da      	str	r2, [r3, #12]
      break;
 8004cdc:	e01d      	b.n	8004d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0204 	orr.w	r2, r2, #4
 8004cec:	60da      	str	r2, [r3, #12]
      break;
 8004cee:	e014      	b.n	8004d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0208 	orr.w	r2, r2, #8
 8004cfe:	60da      	str	r2, [r3, #12]
      break;
 8004d00:	e00b      	b.n	8004d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0210 	orr.w	r2, r2, #16
 8004d10:	60da      	str	r2, [r3, #12]
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d148      	bne.n	8004db2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fd89 	bl	8005840 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a22      	ldr	r2, [pc, #136]	@ (8004dbc <HAL_TIM_IC_Start_IT+0x234>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <HAL_TIM_IC_Start_IT+0x238>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_TIM_IC_Start_IT+0x240>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <HAL_TIM_IC_Start_IT+0x244>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_TIM_IC_Start_IT+0x248>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a16      	ldr	r2, [pc, #88]	@ (8004dd4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d010      	beq.n	8004db2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	e007      	b.n	8004db2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40001800 	.word	0x40001800

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0202 	mvn.w	r2, #2
 8004e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa84 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa76 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa87 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa5e 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa50 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa61 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0208 	mvn.w	r2, #8
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa38 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa2a 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa3b 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0210 	mvn.w	r2, #16
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa12 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa04 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fa15 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0201 	mvn.w	r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9e2 	bl	8005308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fd18 	bl	8005998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9e6 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0220 	mvn.w	r2, #32
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fcea 	bl	8005984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e088      	b.n	80050e8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004ff4:	f000 fa60 	bl	80054b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 020c 	bic.w	r2, r2, #12
 8005006:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6999      	ldr	r1, [r3, #24]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	619a      	str	r2, [r3, #24]
 800501a:	e060      	b.n	80050de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b04      	cmp	r3, #4
 8005020:	d11c      	bne.n	800505c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005032:	f000 fae4 	bl	80055fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005044:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6999      	ldr	r1, [r3, #24]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	021a      	lsls	r2, r3, #8
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	e040      	b.n	80050de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11b      	bne.n	800509a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005072:	f000 fb31 	bl	80056d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 020c 	bic.w	r2, r2, #12
 8005084:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69d9      	ldr	r1, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	61da      	str	r2, [r3, #28]
 8005098:	e021      	b.n	80050de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b0c      	cmp	r3, #12
 800509e:	d11c      	bne.n	80050da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80050b0:	f000 fb4e 	bl	8005750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80050c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69d9      	ldr	r1, [r3, #28]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	61da      	str	r2, [r3, #28]
 80050d8:	e001      	b.n	80050de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIM_ConfigClockSource+0x1c>
 8005108:	2302      	movs	r3, #2
 800510a:	e0b4      	b.n	8005276 <HAL_TIM_ConfigClockSource+0x186>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800512a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005144:	d03e      	beq.n	80051c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514a:	f200 8087 	bhi.w	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	f000 8086 	beq.w	8005262 <HAL_TIM_ConfigClockSource+0x172>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515a:	d87f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b70      	cmp	r3, #112	@ 0x70
 800515e:	d01a      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xa6>
 8005160:	2b70      	cmp	r3, #112	@ 0x70
 8005162:	d87b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b60      	cmp	r3, #96	@ 0x60
 8005166:	d050      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x11a>
 8005168:	2b60      	cmp	r3, #96	@ 0x60
 800516a:	d877      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b50      	cmp	r3, #80	@ 0x50
 800516e:	d03c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0xfa>
 8005170:	2b50      	cmp	r3, #80	@ 0x50
 8005172:	d873      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d058      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x13a>
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d86f      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b30      	cmp	r3, #48	@ 0x30
 800517e:	d064      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b30      	cmp	r3, #48	@ 0x30
 8005182:	d86b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b20      	cmp	r3, #32
 8005186:	d060      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d867      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05c      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	2b10      	cmp	r3, #16
 8005192:	d05a      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	e062      	b.n	800525c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	f000 fb2b 	bl	8005800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	609a      	str	r2, [r3, #8]
      break;
 80051c2:	e04f      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	f000 fb14 	bl	8005800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051e6:	609a      	str	r2, [r3, #8]
      break;
 80051e8:	e03c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 f9d2 	bl	80055a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2150      	movs	r1, #80	@ 0x50
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fae1 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005208:	e02c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005216:	461a      	mov	r2, r3
 8005218:	f000 fa2e 	bl	8005678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2160      	movs	r1, #96	@ 0x60
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fad1 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005228:	e01c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005236:	461a      	mov	r2, r3
 8005238:	f000 f9b2 	bl	80055a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2140      	movs	r1, #64	@ 0x40
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fac1 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8005248:	e00c      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f000 fab8 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 800525a:	e003      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      break;
 8005260:	e000      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d831      	bhi.n	80052f8 <HAL_TIM_ReadCapturedValue+0x78>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052f9 	.word	0x080052f9
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	080052f9 	.word	0x080052f9
 80052cc:	080052ef 	.word	0x080052ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d6:	60fb      	str	r3, [r7, #12]

      break;
 80052d8:	e00f      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	60fb      	str	r3, [r7, #12]

      break;
 80052e2:	e00a      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	60fb      	str	r3, [r7, #12]

      break;
 80052ec:	e005      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	60fb      	str	r3, [r7, #12]

      break;
 80052f6:	e000      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052f8:	bf00      	nop
  }

  return tmpreg;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a43      	ldr	r2, [pc, #268]	@ (800548c <TIM_Base_SetConfig+0x120>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a40      	ldr	r2, [pc, #256]	@ (8005490 <TIM_Base_SetConfig+0x124>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3f      	ldr	r2, [pc, #252]	@ (8005494 <TIM_Base_SetConfig+0x128>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3e      	ldr	r2, [pc, #248]	@ (8005498 <TIM_Base_SetConfig+0x12c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3d      	ldr	r2, [pc, #244]	@ (800549c <TIM_Base_SetConfig+0x130>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a32      	ldr	r2, [pc, #200]	@ (800548c <TIM_Base_SetConfig+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d027      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005490 <TIM_Base_SetConfig+0x124>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d023      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005494 <TIM_Base_SetConfig+0x128>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005498 <TIM_Base_SetConfig+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <TIM_Base_SetConfig+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	@ (80054a0 <TIM_Base_SetConfig+0x134>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <TIM_Base_SetConfig+0x138>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a29      	ldr	r2, [pc, #164]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a28      	ldr	r2, [pc, #160]	@ (80054ac <TIM_Base_SetConfig+0x140>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <TIM_Base_SetConfig+0x144>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a26      	ldr	r2, [pc, #152]	@ (80054b4 <TIM_Base_SetConfig+0x148>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a0e      	ldr	r2, [pc, #56]	@ (800548c <TIM_Base_SetConfig+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0xf2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a10      	ldr	r2, [pc, #64]	@ (800549c <TIM_Base_SetConfig+0x130>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d103      	bne.n	8005466 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40010400 	.word	0x40010400
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400
 80054a8:	40014800 	.word	0x40014800
 80054ac:	40001800 	.word	0x40001800
 80054b0:	40001c00 	.word	0x40001c00
 80054b4:	40002000 	.word	0x40002000

080054b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0201 	bic.w	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a28      	ldr	r2, [pc, #160]	@ (8005584 <TIM_TI1_SetConfig+0xcc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01b      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ec:	d017      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a25      	ldr	r2, [pc, #148]	@ (8005588 <TIM_TI1_SetConfig+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a24      	ldr	r2, [pc, #144]	@ (800558c <TIM_TI1_SetConfig+0xd4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00f      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a23      	ldr	r2, [pc, #140]	@ (8005590 <TIM_TI1_SetConfig+0xd8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <TIM_TI1_SetConfig+0xdc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a21      	ldr	r2, [pc, #132]	@ (8005598 <TIM_TI1_SetConfig+0xe0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_TI1_SetConfig+0x66>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a20      	ldr	r2, [pc, #128]	@ (800559c <TIM_TI1_SetConfig+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <TIM_TI1_SetConfig+0x6a>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <TIM_TI1_SetConfig+0x6c>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e003      	b.n	8005542 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	b2db      	uxtb	r3, r3
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f003 030a 	and.w	r3, r3, #10
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40001800 	.word	0x40001800

080055a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 030a 	bic.w	r3, r3, #10
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800563c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	b29b      	uxth	r3, r3
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0210 	bic.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	031b      	lsls	r3, r3, #12
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	621a      	str	r2, [r3, #32]
}
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 0303 	bic.w	r3, r3, #3
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	b2db      	uxtb	r3, r3
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	031b      	lsls	r3, r3, #12
 8005794:	b29b      	uxth	r3, r3
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	031b      	lsls	r3, r3, #12
 80057a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e05a      	b.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a21      	ldr	r2, [pc, #132]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f0:	d01d      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1d      	ldr	r2, [pc, #116]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1b      	ldr	r2, [pc, #108]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1a      	ldr	r2, [pc, #104]	@ (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a17      	ldr	r2, [pc, #92]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a15      	ldr	r2, [pc, #84]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10c      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4313      	orrs	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40001800 	.word	0x40001800

08005984 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e042      	b.n	8005a44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fc f860 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	@ 0x24
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f82b 	bl	8005a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b0c0      	sub	sp, #256	@ 0x100
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	68d9      	ldr	r1, [r3, #12]
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	ea40 0301 	orr.w	r3, r0, r1
 8005a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005aa4:	f021 010c 	bic.w	r1, r1, #12
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	6999      	ldr	r1, [r3, #24]
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	ea40 0301 	orr.w	r3, r0, r1
 8005ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b8f      	ldr	r3, [pc, #572]	@ (8005d18 <UART_SetConfig+0x2cc>)
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d005      	beq.n	8005aec <UART_SetConfig+0xa0>
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8005d1c <UART_SetConfig+0x2d0>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d104      	bne.n	8005af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aec:	f7fd fdfe 	bl	80036ec <HAL_RCC_GetPCLK2Freq>
 8005af0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005af4:	e003      	b.n	8005afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005af6:	f7fd fde5 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8005afa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b08:	f040 810c 	bne.w	8005d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	1891      	adds	r1, r2, r2
 8005b24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b26:	415b      	adcs	r3, r3
 8005b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b2e:	4621      	mov	r1, r4
 8005b30:	eb12 0801 	adds.w	r8, r2, r1
 8005b34:	4629      	mov	r1, r5
 8005b36:	eb43 0901 	adc.w	r9, r3, r1
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4e:	4690      	mov	r8, r2
 8005b50:	4699      	mov	r9, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	eb18 0303 	adds.w	r3, r8, r3
 8005b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	eb49 0303 	adc.w	r3, r9, r3
 8005b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	18db      	adds	r3, r3, r3
 8005b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b80:	4613      	mov	r3, r2
 8005b82:	eb42 0303 	adc.w	r3, r2, r3
 8005b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b90:	f7fa fb76 	bl	8000280 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4b61      	ldr	r3, [pc, #388]	@ (8005d20 <UART_SetConfig+0x2d4>)
 8005b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	011c      	lsls	r4, r3, #4
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005be4:	4692      	mov	sl, r2
 8005be6:	469b      	mov	fp, r3
 8005be8:	4643      	mov	r3, r8
 8005bea:	eb1a 0303 	adds.w	r3, sl, r3
 8005bee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8005bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c10:	460b      	mov	r3, r1
 8005c12:	18db      	adds	r3, r3, r3
 8005c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c16:	4613      	mov	r3, r2
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c26:	f7fa fb2b 	bl	8000280 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4b3b      	ldr	r3, [pc, #236]	@ (8005d20 <UART_SetConfig+0x2d4>)
 8005c32:	fba3 2301 	umull	r2, r3, r3, r1
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2264      	movs	r2, #100	@ 0x64
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	1acb      	subs	r3, r1, r3
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c46:	4b36      	ldr	r3, [pc, #216]	@ (8005d20 <UART_SetConfig+0x2d4>)
 8005c48:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c54:	441c      	add	r4, r3
 8005c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	1891      	adds	r1, r2, r2
 8005c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c70:	415b      	adcs	r3, r3
 8005c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c78:	4641      	mov	r1, r8
 8005c7a:	1851      	adds	r1, r2, r1
 8005c7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c7e:	4649      	mov	r1, r9
 8005c80:	414b      	adcs	r3, r1
 8005c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c90:	4659      	mov	r1, fp
 8005c92:	00cb      	lsls	r3, r1, #3
 8005c94:	4651      	mov	r1, sl
 8005c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9a:	4651      	mov	r1, sl
 8005c9c:	00ca      	lsls	r2, r1, #3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cac:	464b      	mov	r3, r9
 8005cae:	460a      	mov	r2, r1
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ccc:	460b      	mov	r3, r1
 8005cce:	18db      	adds	r3, r3, r3
 8005cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ce2:	f7fa facd 	bl	8000280 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <UART_SetConfig+0x2d4>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	2164      	movs	r1, #100	@ 0x64
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	3332      	adds	r3, #50	@ 0x32
 8005cfe:	4a08      	ldr	r2, [pc, #32]	@ (8005d20 <UART_SetConfig+0x2d4>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 0207 	and.w	r2, r3, #7
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4422      	add	r2, r4
 8005d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d14:	e106      	b.n	8005f24 <UART_SetConfig+0x4d8>
 8005d16:	bf00      	nop
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40011400 	.word	0x40011400
 8005d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	6239      	str	r1, [r7, #32]
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d46:	4641      	mov	r1, r8
 8005d48:	1854      	adds	r4, r2, r1
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	eb43 0501 	adc.w	r5, r3, r1
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	00eb      	lsls	r3, r5, #3
 8005d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5e:	00e2      	lsls	r2, r4, #3
 8005d60:	4614      	mov	r4, r2
 8005d62:	461d      	mov	r5, r3
 8005d64:	4643      	mov	r3, r8
 8005d66:	18e3      	adds	r3, r4, r3
 8005d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	eb45 0303 	adc.w	r3, r5, r3
 8005d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d92:	4629      	mov	r1, r5
 8005d94:	008b      	lsls	r3, r1, #2
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	008a      	lsls	r2, r1, #2
 8005da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005da4:	f7fa fa6c 	bl	8000280 <__aeabi_uldivmod>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4b60      	ldr	r3, [pc, #384]	@ (8005f30 <UART_SetConfig+0x4e4>)
 8005dae:	fba3 2302 	umull	r2, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	011c      	lsls	r4, r3, #4
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	1891      	adds	r1, r2, r2
 8005dce:	61b9      	str	r1, [r7, #24]
 8005dd0:	415b      	adcs	r3, r3
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dd8:	4641      	mov	r1, r8
 8005dda:	1851      	adds	r1, r2, r1
 8005ddc:	6139      	str	r1, [r7, #16]
 8005dde:	4649      	mov	r1, r9
 8005de0:	414b      	adcs	r3, r1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005df0:	4659      	mov	r1, fp
 8005df2:	00cb      	lsls	r3, r1, #3
 8005df4:	4651      	mov	r1, sl
 8005df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	00ca      	lsls	r2, r1, #3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	4642      	mov	r2, r8
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	460a      	mov	r2, r1
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e30:	4649      	mov	r1, r9
 8005e32:	008b      	lsls	r3, r1, #2
 8005e34:	4641      	mov	r1, r8
 8005e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	008a      	lsls	r2, r1, #2
 8005e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e42:	f7fa fa1d 	bl	8000280 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4b38      	ldr	r3, [pc, #224]	@ (8005f30 <UART_SetConfig+0x4e4>)
 8005e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2264      	movs	r2, #100	@ 0x64
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	1acb      	subs	r3, r1, r3
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	3332      	adds	r3, #50	@ 0x32
 8005e60:	4a33      	ldr	r2, [pc, #204]	@ (8005f30 <UART_SetConfig+0x4e4>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6c:	441c      	add	r4, r3
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e76:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	1891      	adds	r1, r2, r2
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	415b      	adcs	r3, r3
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	1851      	adds	r1, r2, r1
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	4649      	mov	r1, r9
 8005e94:	414b      	adcs	r3, r1
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	00cb      	lsls	r3, r1, #3
 8005ea8:	4651      	mov	r1, sl
 8005eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eae:	4651      	mov	r1, sl
 8005eb0:	00ca      	lsls	r2, r1, #3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4642      	mov	r2, r8
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	460a      	mov	r2, r1
 8005ec2:	eb42 0303 	adc.w	r3, r2, r3
 8005ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	008b      	lsls	r3, r1, #2
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eea:	4641      	mov	r1, r8
 8005eec:	008a      	lsls	r2, r1, #2
 8005eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ef2:	f7fa f9c5 	bl	8000280 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <UART_SetConfig+0x4e4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	@ 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	3332      	adds	r3, #50	@ 0x32
 8005f0e:	4a08      	ldr	r2, [pc, #32]	@ (8005f30 <UART_SetConfig+0x4e4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 020f 	and.w	r2, r3, #15
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4422      	add	r2, r4
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f30:	51eb851f 	.word	0x51eb851f

08005f34 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005f34:	b084      	sub	sp, #16
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	f107 001c 	add.w	r0, r7, #28
 8005f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005f4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005f4e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005f52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005f56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005f5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005f5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005f6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	b004      	add	sp, #16
 8005f88:	4770      	bx	lr

08005f8a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2203      	movs	r2, #3
 8005fb0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ffa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006000:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006006:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006016:	f023 030f 	bic.w	r3, r3, #15
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	b2db      	uxtb	r3, r3
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3314      	adds	r3, #20
 8006058:	461a      	mov	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	4413      	add	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
}  
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006096:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800609c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80060a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0

}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80060d6:	2310      	movs	r3, #16
 80060d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060da:	2340      	movs	r3, #64	@ 0x40
 80060dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060e8:	f107 0308 	add.w	r3, r7, #8
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff ff74 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80060f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f8:	2110      	movs	r1, #16
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa18 	bl	8006530 <SDMMC_GetCmdResp1>
 8006100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006102:	69fb      	ldr	r3, [r7, #28]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800611a:	2311      	movs	r3, #17
 800611c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800611e:	2340      	movs	r3, #64	@ 0x40
 8006120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800612a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ff52 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613c:	2111      	movs	r1, #17
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9f6 	bl	8006530 <SDMMC_GetCmdResp1>
 8006144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006146:	69fb      	ldr	r3, [r7, #28]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800615e:	2312      	movs	r3, #18
 8006160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006162:	2340      	movs	r3, #64	@ 0x40
 8006164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800616a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800616e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ff30 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800617c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006180:	2112      	movs	r1, #18
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f9d4 	bl	8006530 <SDMMC_GetCmdResp1>
 8006188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618a:	69fb      	ldr	r3, [r7, #28]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80061a2:	2318      	movs	r3, #24
 80061a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a6:	2340      	movs	r3, #64	@ 0x40
 80061a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ff0e 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80061c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c4:	2118      	movs	r1, #24
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9b2 	bl	8006530 <SDMMC_GetCmdResp1>
 80061cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ce:	69fb      	ldr	r3, [r7, #28]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3720      	adds	r7, #32
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80061e6:	2319      	movs	r3, #25
 80061e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ea:	2340      	movs	r3, #64	@ 0x40
 80061ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff feec 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006208:	2119      	movs	r1, #25
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f990 	bl	8006530 <SDMMC_GetCmdResp1>
 8006210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006212:	69fb      	ldr	r3, [r7, #28]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006228:	230c      	movs	r3, #12
 800622a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800622c:	2340      	movs	r3, #64	@ 0x40
 800622e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006238:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800623a:	f107 0308 	add.w	r3, r7, #8
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fecb 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006246:	4a05      	ldr	r2, [pc, #20]	@ (800625c <SDMMC_CmdStopTransfer+0x40>)
 8006248:	210c      	movs	r1, #12
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f970 	bl	8006530 <SDMMC_GetCmdResp1>
 8006250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006252:	69fb      	ldr	r3, [r7, #28]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	05f5e100 	.word	0x05f5e100

08006260 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	@ 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006270:	2307      	movs	r3, #7
 8006272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006274:	2340      	movs	r3, #64	@ 0x40
 8006276:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800627c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006280:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006282:	f107 0310 	add.w	r3, r7, #16
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fea7 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800628e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006292:	2107      	movs	r1, #7
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f94b 	bl	8006530 <SDMMC_GetCmdResp1>
 800629a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3728      	adds	r7, #40	@ 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b088      	sub	sp, #32
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fe86 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb65 	bl	80069a0 <SDMMC_GetCmdError>
 80062d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062d8:	69fb      	ldr	r3, [r7, #28]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b088      	sub	sp, #32
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80062ea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80062ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80062f0:	2308      	movs	r3, #8
 80062f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062f4:	2340      	movs	r3, #64	@ 0x40
 80062f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006300:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fe67 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 faf8 	bl	8006904 <SDMMC_GetCmdResp7>
 8006314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006316:	69fb      	ldr	r3, [r7, #28]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800632e:	2337      	movs	r3, #55	@ 0x37
 8006330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006332:	2340      	movs	r3, #64	@ 0x40
 8006334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800633a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800633e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fe48 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800634c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006350:	2137      	movs	r1, #55	@ 0x37
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8ec 	bl	8006530 <SDMMC_GetCmdResp1>
 8006358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800635a:	69fb      	ldr	r3, [r7, #28]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800637a:	2329      	movs	r3, #41	@ 0x29
 800637c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800637e:	2340      	movs	r3, #64	@ 0x40
 8006380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800638a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe22 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9ff 	bl	800679c <SDMMC_GetCmdResp3>
 800639e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063a0:	69fb      	ldr	r3, [r7, #28]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80063b8:	2306      	movs	r3, #6
 80063ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063bc:	2340      	movs	r3, #64	@ 0x40
 80063be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063ca:	f107 0308 	add.w	r3, r7, #8
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fe03 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80063d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063da:	2106      	movs	r1, #6
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8a7 	bl	8006530 <SDMMC_GetCmdResp1>
 80063e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b088      	sub	sp, #32
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80063fa:	2333      	movs	r3, #51	@ 0x33
 80063fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063fe:	2340      	movs	r3, #64	@ 0x40
 8006400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800640a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800640c:	f107 0308 	add.w	r3, r7, #8
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fde2 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641c:	2133      	movs	r1, #51	@ 0x33
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f886 	bl	8006530 <SDMMC_GetCmdResp1>
 8006424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006426:	69fb      	ldr	r3, [r7, #28]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800643c:	2302      	movs	r3, #2
 800643e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006440:	23c0      	movs	r3, #192	@ 0xc0
 8006442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800644c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fdc1 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f956 	bl	800670c <SDMMC_GetCmdResp2>
 8006460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006462:	69fb      	ldr	r3, [r7, #28]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800647a:	2309      	movs	r3, #9
 800647c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800647e:	23c0      	movs	r3, #192	@ 0xc0
 8006480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800648a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800648c:	f107 0308 	add.w	r3, r7, #8
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fda2 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f937 	bl	800670c <SDMMC_GetCmdResp2>
 800649e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064a0:	69fb      	ldr	r3, [r7, #28]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b088      	sub	sp, #32
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80064b8:	2303      	movs	r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064bc:	2340      	movs	r3, #64	@ 0x40
 80064be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064ca:	f107 0308 	add.w	r3, r7, #8
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fd83 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	2103      	movs	r1, #3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f99c 	bl	8006818 <SDMMC_GetCmdResp6>
 80064e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064e2:	69fb      	ldr	r3, [r7, #28]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80064fa:	230d      	movs	r3, #13
 80064fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064fe:	2340      	movs	r3, #64	@ 0x40
 8006500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800650a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fd62 	bl	8005fdc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651c:	210d      	movs	r1, #13
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f806 	bl	8006530 <SDMMC_GetCmdResp1>
 8006524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006526:	69fb      	ldr	r3, [r7, #28]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	460b      	mov	r3, r1
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800653e:	4b70      	ldr	r3, [pc, #448]	@ (8006700 <SDMMC_GetCmdResp1+0x1d0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a70      	ldr	r2, [pc, #448]	@ (8006704 <SDMMC_GetCmdResp1+0x1d4>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	0a5a      	lsrs	r2, r3, #9
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	61fa      	str	r2, [r7, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800655c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006560:	e0c9      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ef      	beq.n	8006552 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1ea      	bne.n	8006552 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2204      	movs	r2, #4
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800658e:	2304      	movs	r3, #4
 8006590:	e0b1      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0a6      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	22c5      	movs	r2, #197	@ 0xc5
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff fd3e 	bl	8006030 <SDIO_GetCommandResponse>
 80065b4:	4603      	mov	r3, r0
 80065b6:	461a      	mov	r2, r3
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d001      	beq.n	80065c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065be:	2301      	movs	r3, #1
 80065c0:	e099      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80065c2:	2100      	movs	r1, #0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff fd40 	bl	800604a <SDIO_GetResponse>
 80065ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006708 <SDMMC_GetCmdResp1+0x1d8>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e08d      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da02      	bge.n	80065e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80065e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065e4:	e087      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80065f0:	2340      	movs	r3, #64	@ 0x40
 80065f2:	e080      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	e079      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800660c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006610:	e071      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800661c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006620:	e069      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800662c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006630:	e061      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800663c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006640:	e059      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800664c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006650:	e051      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800665c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006660:	e049      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800666c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006670:	e041      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800667c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006680:	e039      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800668c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006690:	e031      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800669c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80066a0:	e029      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80066ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80066b0:	e021      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80066bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80066c0:	e019      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80066cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80066d0:	e011      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80066dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80066e0:	e009      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80066ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80066f0:	e001      	b.n	80066f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000000 	.word	0x20000000
 8006704:	10624dd3 	.word	0x10624dd3
 8006708:	fdffe008 	.word	0xfdffe008

0800670c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006714:	4b1f      	ldr	r3, [pc, #124]	@ (8006794 <SDMMC_GetCmdResp2+0x88>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <SDMMC_GetCmdResp2+0x8c>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	0a5b      	lsrs	r3, r3, #9
 8006720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1e5a      	subs	r2, r3, #1
 800672e:	60fa      	str	r2, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006734:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006738:	e026      	b.n	8006788 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0ef      	beq.n	800672a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1ea      	bne.n	800672a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2204      	movs	r2, #4
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006766:	2304      	movs	r3, #4
 8006768:	e00e      	b.n	8006788 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800677c:	2301      	movs	r3, #1
 800677e:	e003      	b.n	8006788 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	22c5      	movs	r2, #197	@ 0xc5
 8006784:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20000000 	.word	0x20000000
 8006798:	10624dd3 	.word	0x10624dd3

0800679c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <SDMMC_GetCmdResp3+0x74>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <SDMMC_GetCmdResp3+0x78>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	0a5b      	lsrs	r3, r3, #9
 80067b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	60fa      	str	r2, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067c8:	e01b      	b.n	8006802 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0ef      	beq.n	80067ba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1ea      	bne.n	80067ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2204      	movs	r2, #4
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067f6:	2304      	movs	r3, #4
 80067f8:	e003      	b.n	8006802 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	22c5      	movs	r2, #197	@ 0xc5
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20000000 	.word	0x20000000
 8006814:	10624dd3 	.word	0x10624dd3

08006818 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	460b      	mov	r3, r1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006826:	4b35      	ldr	r3, [pc, #212]	@ (80068fc <SDMMC_GetCmdResp6+0xe4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a35      	ldr	r2, [pc, #212]	@ (8006900 <SDMMC_GetCmdResp6+0xe8>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	0a5b      	lsrs	r3, r3, #9
 8006832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	1e5a      	subs	r2, r3, #1
 8006840:	61fa      	str	r2, [r7, #28]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006846:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800684a:	e052      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006850:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ef      	beq.n	800683c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1ea      	bne.n	800683c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2204      	movs	r2, #4
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006878:	2304      	movs	r3, #4
 800687a:	e03a      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800688e:	2301      	movs	r3, #1
 8006890:	e02f      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7ff fbcc 	bl	8006030 <SDIO_GetCommandResponse>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	4293      	cmp	r3, r2
 80068a0:	d001      	beq.n	80068a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e025      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	22c5      	movs	r2, #197	@ 0xc5
 80068aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80068ac:	2100      	movs	r1, #0
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff fbcb 	bl	800604a <SDIO_GetResponse>
 80068b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	0c1b      	lsrs	r3, r3, #16
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e011      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80068d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068dc:	e009      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80068e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068ec:	e001      	b.n	80068f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80068ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000000 	.word	0x20000000
 8006900:	10624dd3 	.word	0x10624dd3

08006904 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800690c:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <SDMMC_GetCmdResp7+0x94>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a22      	ldr	r2, [pc, #136]	@ (800699c <SDMMC_GetCmdResp7+0x98>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	0a5b      	lsrs	r3, r3, #9
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1e5a      	subs	r2, r3, #1
 8006926:	60fa      	str	r2, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800692c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006930:	e02c      	b.n	800698c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006936:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ef      	beq.n	8006922 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ea      	bne.n	8006922 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2204      	movs	r2, #4
 800695c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800695e:	2304      	movs	r3, #4
 8006960:	e014      	b.n	800698c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006974:	2301      	movs	r3, #1
 8006976:	e009      	b.n	800698c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2240      	movs	r2, #64	@ 0x40
 8006988:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800698a:	2300      	movs	r3, #0
  
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	20000000 	.word	0x20000000
 800699c:	10624dd3 	.word	0x10624dd3

080069a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069a8:	4b11      	ldr	r3, [pc, #68]	@ (80069f0 <SDMMC_GetCmdError+0x50>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a11      	ldr	r2, [pc, #68]	@ (80069f4 <SDMMC_GetCmdError+0x54>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	0a5b      	lsrs	r3, r3, #9
 80069b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
 80069bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1e5a      	subs	r2, r3, #1
 80069c2:	60fa      	str	r2, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80069cc:	e009      	b.n	80069e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f1      	beq.n	80069be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22c5      	movs	r2, #197	@ 0xc5
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000000 	.word	0x20000000
 80069f4:	10624dd3 	.word	0x10624dd3

080069f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80069fc:	4904      	ldr	r1, [pc, #16]	@ (8006a10 <MX_FATFS_Init+0x18>)
 80069fe:	4805      	ldr	r0, [pc, #20]	@ (8006a14 <MX_FATFS_Init+0x1c>)
 8006a00:	f003 f87e 	bl	8009b00 <FATFS_LinkDriver>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	4b03      	ldr	r3, [pc, #12]	@ (8006a18 <MX_FATFS_Init+0x20>)
 8006a0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000578 	.word	0x20000578
 8006a14:	0800dc78 	.word	0x0800dc78
 8006a18:	20000574 	.word	0x20000574

08006a1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006a36:	f000 f87b 	bl	8006b30 <BSP_SD_IsDetected>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d001      	beq.n	8006a44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e012      	b.n	8006a6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006a44:	480b      	ldr	r0, [pc, #44]	@ (8006a74 <BSP_SD_Init+0x48>)
 8006a46:	f7fc fe65 	bl	8003714 <HAL_SD_Init>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006a58:	4806      	ldr	r0, [pc, #24]	@ (8006a74 <BSP_SD_Init+0x48>)
 8006a5a:	f7fd faa5 	bl	8003fa8 <HAL_SD_ConfigWideBusOperation>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006a68:	79fb      	ldrb	r3, [r7, #7]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000330 	.word	0x20000330

08006a78 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	4806      	ldr	r0, [pc, #24]	@ (8006aa8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006a90:	f7fc fee8 	bl	8003864 <HAL_SD_ReadBlocks_DMA>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000330 	.word	0x20000330

08006aac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	68f9      	ldr	r1, [r7, #12]
 8006ac2:	4806      	ldr	r0, [pc, #24]	@ (8006adc <BSP_SD_WriteBlocks_DMA+0x30>)
 8006ac4:	f7fc ffb0 	bl	8003a28 <HAL_SD_WriteBlocks_DMA>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000330 	.word	0x20000330

08006ae0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006ae4:	4805      	ldr	r0, [pc, #20]	@ (8006afc <BSP_SD_GetCardState+0x1c>)
 8006ae6:	f7fd faf9 	bl	80040dc <HAL_SD_GetCardState>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000330 	.word	0x20000330

08006b00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4803      	ldr	r0, [pc, #12]	@ (8006b18 <BSP_SD_GetCardInfo+0x18>)
 8006b0c:	f7fd fa20 	bl	8003f50 <HAL_SD_GetCardInfo>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000330 	.word	0x20000330

08006b1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006b24:	f000 f996 	bl	8006e54 <BSP_SD_ReadCpltCallback>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006b36:	2301      	movs	r3, #1
 8006b38:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	b2db      	uxtb	r3, r3
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8006b52:	f003 f94b 	bl	8009dec <osKernelSysTick>
 8006b56:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8006b58:	e006      	b.n	8006b68 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b5a:	f7ff ffc1 	bl	8006ae0 <BSP_SD_GetCardState>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e009      	b.n	8006b7c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8006b68:	f003 f940 	bl	8009dec <osKernelSysTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d8f0      	bhi.n	8006b5a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bbc <SD_CheckStatus+0x38>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b94:	f7ff ffa4 	bl	8006ae0 <BSP_SD_GetCardState>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d107      	bne.n	8006bae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006b9e:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <SD_CheckStatus+0x38>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <SD_CheckStatus+0x38>)
 8006bac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006bae:	4b03      	ldr	r3, [pc, #12]	@ (8006bbc <SD_CheckStatus+0x38>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000009 	.word	0x20000009

08006bc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006bca:	4b20      	ldr	r3, [pc, #128]	@ (8006c4c <SD_initialize+0x8c>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006bd0:	f003 f900 	bl	8009dd4 <osKernelRunning>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d030      	beq.n	8006c3c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006bda:	f7ff ff27 	bl	8006a2c <BSP_SD_Init>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff ffcc 	bl	8006b84 <SD_CheckStatus>
 8006bec:	4603      	mov	r3, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4b16      	ldr	r3, [pc, #88]	@ (8006c4c <SD_initialize+0x8c>)
 8006bf2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006bf4:	4b15      	ldr	r3, [pc, #84]	@ (8006c4c <SD_initialize+0x8c>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d01e      	beq.n	8006c3c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006bfe:	4b14      	ldr	r3, [pc, #80]	@ (8006c50 <SD_initialize+0x90>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10e      	bne.n	8006c24 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006c06:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <SD_initialize+0x94>)
 8006c08:	f107 0408 	add.w	r4, r7, #8
 8006c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006c12:	f107 0308 	add.w	r3, r7, #8
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f003 fa20 	bl	800a05e <osMessageCreate>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	4a0b      	ldr	r2, [pc, #44]	@ (8006c50 <SD_initialize+0x90>)
 8006c22:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8006c24:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <SD_initialize+0x90>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <SD_initialize+0x8c>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	4b04      	ldr	r3, [pc, #16]	@ (8006c4c <SD_initialize+0x8c>)
 8006c3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <SD_initialize+0x8c>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b2db      	uxtb	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd90      	pop	{r4, r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000009 	.word	0x20000009
 8006c50:	2000057c 	.word	0x2000057c
 8006c54:	0800dbf8 	.word	0x0800dbf8

08006c58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ff8d 	bl	8006b84 <SD_CheckStatus>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	@ 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c8a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006c8e:	f7ff ff5c 	bl	8006b4a <SD_CheckStatusWithTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	da02      	bge.n	8006c9e <SD_read+0x2a>
  {
    return res;
 8006c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c9c:	e032      	b.n	8006d04 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	68b8      	ldr	r0, [r7, #8]
 8006ca4:	f7ff fee8 	bl	8006a78 <BSP_SD_ReadBlocks_DMA>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8006cae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d124      	bne.n	8006d00 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006cb6:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <SD_read+0x98>)
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	f107 0314 	add.w	r3, r7, #20
 8006cbe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f003 fa34 	bl	800a130 <osMessageGet>

    if (event.status == osEventMessage)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b10      	cmp	r3, #16
 8006ccc:	d118      	bne.n	8006d00 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d115      	bne.n	8006d00 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8006cd4:	f003 f88a 	bl	8009dec <osKernelSysTick>
 8006cd8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006cda:	e008      	b.n	8006cee <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006cdc:	f7ff ff00 	bl	8006ae0 <BSP_SD_GetCardState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <SD_read+0x7a>
              {
                res = RES_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006cec:	e008      	b.n	8006d00 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006cee:	f003 f87d 	bl	8009dec <osKernelSysTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d9ed      	bls.n	8006cdc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3728      	adds	r7, #40	@ 0x28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	2000057c 	.word	0x2000057c

08006d10 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	@ 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d26:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006d2a:	f7ff ff0e 	bl	8006b4a <SD_CheckStatusWithTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da02      	bge.n	8006d3a <SD_write+0x2a>
  {
    return res;
 8006d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d38:	e02e      	b.n	8006d98 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f7ff feb4 	bl	8006aac <BSP_SD_WriteBlocks_DMA>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d124      	bne.n	8006d94 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006d4a:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <SD_write+0x90>)
 8006d4c:	6819      	ldr	r1, [r3, #0]
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	f247 5230 	movw	r2, #30000	@ 0x7530
 8006d56:	4618      	mov	r0, r3
 8006d58:	f003 f9ea 	bl	800a130 <osMessageGet>

    if (event.status == osEventMessage)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d118      	bne.n	8006d94 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d115      	bne.n	8006d94 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8006d68:	f003 f840 	bl	8009dec <osKernelSysTick>
 8006d6c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006d6e:	e008      	b.n	8006d82 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006d70:	f7ff feb6 	bl	8006ae0 <BSP_SD_GetCardState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <SD_write+0x72>
          {
            res = RES_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8006d80:	e008      	b.n	8006d94 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006d82:	f003 f833 	bl	8009dec <osKernelSysTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d9ed      	bls.n	8006d70 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 8006d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	@ 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	2000057c 	.word	0x2000057c

08006da4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	@ 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	603a      	str	r2, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
 8006db0:	460b      	mov	r3, r1
 8006db2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006dba:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <SD_ioctl+0xac>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <SD_ioctl+0x28>
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e03c      	b.n	8006e46 <SD_ioctl+0xa2>

  switch (cmd)
 8006dcc:	79bb      	ldrb	r3, [r7, #6]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d834      	bhi.n	8006e3c <SD_ioctl+0x98>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <SD_ioctl+0x34>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e23 	.word	0x08006e23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006dee:	e028      	b.n	8006e42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006df0:	f107 030c 	add.w	r3, r7, #12
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fe83 	bl	8006b00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006e06:	e01c      	b.n	8006e42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e08:	f107 030c 	add.w	r3, r7, #12
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fe77 	bl	8006b00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006e20:	e00f      	b.n	8006e42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fe6a 	bl	8006b00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	0a5a      	lsrs	r2, r3, #9
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006e3a:	e002      	b.n	8006e42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006e42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3730      	adds	r7, #48	@ 0x30
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000009 	.word	0x20000009

08006e54 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <BSP_SD_ReadCpltCallback+0x18>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f003 f925 	bl	800a0b0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8006e66:	bf00      	nop
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2000057c 	.word	0x2000057c

08006e70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	4a08      	ldr	r2, [pc, #32]	@ (8006ea0 <disk_status+0x30>)
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	79fa      	ldrb	r2, [r7, #7]
 8006e88:	4905      	ldr	r1, [pc, #20]	@ (8006ea0 <disk_status+0x30>)
 8006e8a:	440a      	add	r2, r1
 8006e8c:	7a12      	ldrb	r2, [r2, #8]
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200005a8 	.word	0x200005a8

08006ea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef0 <disk_initialize+0x4c>)
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d114      	bne.n	8006ee6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef0 <disk_initialize+0x4c>)
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	79fa      	ldrb	r2, [r7, #7]
 8006eca:	4909      	ldr	r1, [pc, #36]	@ (8006ef0 <disk_initialize+0x4c>)
 8006ecc:	440a      	add	r2, r1
 8006ece:	7a12      	ldrb	r2, [r2, #8]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	4a03      	ldr	r2, [pc, #12]	@ (8006ef0 <disk_initialize+0x4c>)
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	200005a8 	.word	0x200005a8

08006ef4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	4a0a      	ldr	r2, [pc, #40]	@ (8006f30 <disk_read+0x3c>)
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	689c      	ldr	r4, [r3, #8]
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	4a07      	ldr	r2, [pc, #28]	@ (8006f30 <disk_read+0x3c>)
 8006f14:	4413      	add	r3, r2
 8006f16:	7a18      	ldrb	r0, [r3, #8]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	47a0      	blx	r4
 8006f20:	4603      	mov	r3, r0
 8006f22:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200005a8 	.word	0x200005a8

08006f34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <disk_write+0x3c>)
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68dc      	ldr	r4, [r3, #12]
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	4a07      	ldr	r2, [pc, #28]	@ (8006f70 <disk_write+0x3c>)
 8006f54:	4413      	add	r3, r2
 8006f56:	7a18      	ldrb	r0, [r3, #8]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	47a0      	blx	r4
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd90      	pop	{r4, r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200005a8 	.word	0x200005a8

08006f74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	603a      	str	r2, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
 8006f80:	460b      	mov	r3, r1
 8006f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	4a09      	ldr	r2, [pc, #36]	@ (8006fac <disk_ioctl+0x38>)
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	79fa      	ldrb	r2, [r7, #7]
 8006f92:	4906      	ldr	r1, [pc, #24]	@ (8006fac <disk_ioctl+0x38>)
 8006f94:	440a      	add	r2, r1
 8006f96:	7a10      	ldrb	r0, [r2, #8]
 8006f98:	79b9      	ldrb	r1, [r7, #6]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200005a8 	.word	0x200005a8

08006fb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	b21a      	sxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b21b      	sxth	r3, r3
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3303      	adds	r3, #3
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	3202      	adds	r2, #2
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	3201      	adds	r2, #1
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
	return rv;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	607a      	str	r2, [r7, #4]
 800703a:	887a      	ldrh	r2, [r7, #2]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	887a      	ldrh	r2, [r7, #2]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	0a1b      	lsrs	r3, r3, #8
 8007078:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	607a      	str	r2, [r7, #4]
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070b6:	b480      	push	{r7}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00d      	beq.n	80070ec <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	1c53      	adds	r3, r2, #1
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	1c59      	adds	r1, r3, #1
 80070da:	6179      	str	r1, [r7, #20]
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <mem_cpy+0x1a>
	}
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	617a      	str	r2, [r7, #20]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3b01      	subs	r3, #1
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f3      	bne.n	8007108 <mem_set+0x10>
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800712e:	b480      	push	{r7}
 8007130:	b089      	sub	sp, #36	@ 0x24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	61fa      	str	r2, [r7, #28]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	1acb      	subs	r3, r1, r3
 800715a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <mem_cmp+0x40>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0eb      	beq.n	8007146 <mem_cmp+0x18>

	return r;
 800716e:	697b      	ldr	r3, [r7, #20]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3724      	adds	r7, #36	@ 0x24
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007186:	e002      	b.n	800718e <chk_chr+0x12>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3301      	adds	r3, #1
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <chk_chr+0x26>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	4293      	cmp	r3, r2
 80071a0:	d1f2      	bne.n	8007188 <chk_chr+0xc>
	return *str;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	781b      	ldrb	r3, [r3, #0]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <lock_fs+0x22>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 fd9d 	bl	8009d04 <ff_req_grant>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <lock_fs+0x22>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <lock_fs+0x24>
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <unlock_fs+0x2e>
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d00a      	beq.n	800720c <unlock_fs+0x2e>
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	2b0b      	cmp	r3, #11
 80071fa:	d007      	beq.n	800720c <unlock_fs+0x2e>
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	2b0f      	cmp	r3, #15
 8007200:	d004      	beq.n	800720c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	4618      	mov	r0, r3
 8007208:	f002 fd91 	bl	8009d2e <ff_rel_grant>
	}
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e029      	b.n	800727c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007228:	4a27      	ldr	r2, [pc, #156]	@ (80072c8 <chk_lock+0xb4>)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	4413      	add	r3, r2
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01d      	beq.n	8007272 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007236:	4a24      	ldr	r2, [pc, #144]	@ (80072c8 <chk_lock+0xb4>)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	4413      	add	r3, r2
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d116      	bne.n	8007276 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007248:	4a1f      	ldr	r2, [pc, #124]	@ (80072c8 <chk_lock+0xb4>)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007258:	429a      	cmp	r2, r3
 800725a:	d10c      	bne.n	8007276 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800725c:	4a1a      	ldr	r2, [pc, #104]	@ (80072c8 <chk_lock+0xb4>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	4413      	add	r3, r2
 8007264:	3308      	adds	r3, #8
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800726c:	429a      	cmp	r2, r3
 800726e:	d102      	bne.n	8007276 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007270:	e007      	b.n	8007282 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007272:	2301      	movs	r3, #1
 8007274:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d9d2      	bls.n	8007228 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d109      	bne.n	800729c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <chk_lock+0x80>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d101      	bne.n	8007298 <chk_lock+0x84>
 8007294:	2300      	movs	r3, #0
 8007296:	e010      	b.n	80072ba <chk_lock+0xa6>
 8007298:	2312      	movs	r3, #18
 800729a:	e00e      	b.n	80072ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <chk_lock+0xa0>
 80072a2:	4a09      	ldr	r2, [pc, #36]	@ (80072c8 <chk_lock+0xb4>)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	4413      	add	r3, r2
 80072aa:	330c      	adds	r3, #12
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b2:	d101      	bne.n	80072b8 <chk_lock+0xa4>
 80072b4:	2310      	movs	r3, #16
 80072b6:	e000      	b.n	80072ba <chk_lock+0xa6>
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000588 	.word	0x20000588

080072cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	e002      	b.n	80072de <enq_lock+0x12>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3301      	adds	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d806      	bhi.n	80072f2 <enq_lock+0x26>
 80072e4:	4a09      	ldr	r2, [pc, #36]	@ (800730c <enq_lock+0x40>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	4413      	add	r3, r2
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f2      	bne.n	80072d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000588 	.word	0x20000588

08007310 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e01f      	b.n	8007360 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007320:	4a41      	ldr	r2, [pc, #260]	@ (8007428 <inc_lock+0x118>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4413      	add	r3, r2
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d113      	bne.n	800735a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007332:	4a3d      	ldr	r2, [pc, #244]	@ (8007428 <inc_lock+0x118>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	3304      	adds	r3, #4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007342:	429a      	cmp	r2, r3
 8007344:	d109      	bne.n	800735a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007346:	4a38      	ldr	r2, [pc, #224]	@ (8007428 <inc_lock+0x118>)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	4413      	add	r3, r2
 800734e:	3308      	adds	r3, #8
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007356:	429a      	cmp	r2, r3
 8007358:	d006      	beq.n	8007368 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d9dc      	bls.n	8007320 <inc_lock+0x10>
 8007366:	e000      	b.n	800736a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007368:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d132      	bne.n	80073d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <inc_lock+0x6c>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d806      	bhi.n	8007390 <inc_lock+0x80>
 8007382:	4a29      	ldr	r2, [pc, #164]	@ (8007428 <inc_lock+0x118>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	4413      	add	r3, r2
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f2      	bne.n	8007376 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d101      	bne.n	800739a <inc_lock+0x8a>
 8007396:	2300      	movs	r3, #0
 8007398:	e040      	b.n	800741c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4922      	ldr	r1, [pc, #136]	@ (8007428 <inc_lock+0x118>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	440b      	add	r3, r1
 80073a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	491e      	ldr	r1, [pc, #120]	@ (8007428 <inc_lock+0x118>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	440b      	add	r3, r1
 80073b4:	3304      	adds	r3, #4
 80073b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	491a      	ldr	r1, [pc, #104]	@ (8007428 <inc_lock+0x118>)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	440b      	add	r3, r1
 80073c4:	3308      	adds	r3, #8
 80073c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80073c8:	4a17      	ldr	r2, [pc, #92]	@ (8007428 <inc_lock+0x118>)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	4413      	add	r3, r2
 80073d0:	330c      	adds	r3, #12
 80073d2:	2200      	movs	r2, #0
 80073d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <inc_lock+0xe0>
 80073dc:	4a12      	ldr	r2, [pc, #72]	@ (8007428 <inc_lock+0x118>)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	4413      	add	r3, r2
 80073e4:	330c      	adds	r3, #12
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <inc_lock+0xe0>
 80073ec:	2300      	movs	r3, #0
 80073ee:	e015      	b.n	800741c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <inc_lock+0xf8>
 80073f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007428 <inc_lock+0x118>)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	4413      	add	r3, r2
 80073fe:	330c      	adds	r3, #12
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	e001      	b.n	800740c <inc_lock+0xfc>
 8007408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800740c:	4906      	ldr	r1, [pc, #24]	@ (8007428 <inc_lock+0x118>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	440b      	add	r3, r1
 8007414:	330c      	adds	r3, #12
 8007416:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20000588 	.word	0x20000588

0800742c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d825      	bhi.n	800748c <dec_lock+0x60>
		n = Files[i].ctr;
 8007440:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <dec_lock+0x74>)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	4413      	add	r3, r2
 8007448:	330c      	adds	r3, #12
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800744e:	89fb      	ldrh	r3, [r7, #14]
 8007450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007454:	d101      	bne.n	800745a <dec_lock+0x2e>
 8007456:	2300      	movs	r3, #0
 8007458:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <dec_lock+0x3a>
 8007460:	89fb      	ldrh	r3, [r7, #14]
 8007462:	3b01      	subs	r3, #1
 8007464:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007466:	4a0e      	ldr	r2, [pc, #56]	@ (80074a0 <dec_lock+0x74>)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	4413      	add	r3, r2
 800746e:	330c      	adds	r3, #12
 8007470:	89fa      	ldrh	r2, [r7, #14]
 8007472:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <dec_lock+0x5a>
 800747a:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <dec_lock+0x74>)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	737b      	strb	r3, [r7, #13]
 800748a:	e001      	b.n	8007490 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800748c:	2302      	movs	r3, #2
 800748e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007490:	7b7b      	ldrb	r3, [r7, #13]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000588 	.word	0x20000588

080074a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e010      	b.n	80074d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074b2:	4a0d      	ldr	r2, [pc, #52]	@ (80074e8 <clear_lock+0x44>)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d105      	bne.n	80074ce <clear_lock+0x2a>
 80074c2:	4a09      	ldr	r2, [pc, #36]	@ (80074e8 <clear_lock+0x44>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d9eb      	bls.n	80074b2 <clear_lock+0xe>
	}
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	20000588 	.word	0x20000588

080074ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	78db      	ldrb	r3, [r3, #3]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d034      	beq.n	800756a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007504:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7858      	ldrb	r0, [r3, #1]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007510:	2301      	movs	r3, #1
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	f7ff fd0e 	bl	8006f34 <disk_write>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <sync_window+0x38>
			res = FR_DISK_ERR;
 800751e:	2301      	movs	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
 8007522:	e022      	b.n	800756a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	1ad2      	subs	r2, r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	429a      	cmp	r2, r3
 8007538:	d217      	bcs.n	800756a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	789b      	ldrb	r3, [r3, #2]
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e010      	b.n	8007564 <sync_window+0x78>
					wsect += fs->fsize;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7858      	ldrb	r0, [r3, #1]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007556:	2301      	movs	r3, #1
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	f7ff fceb 	bl	8006f34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3b01      	subs	r3, #1
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d8eb      	bhi.n	8007542 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d01b      	beq.n	80075c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ffad 	bl	80074ec <sync_window>
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d113      	bne.n	80075c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	7858      	ldrb	r0, [r3, #1]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80075a6:	2301      	movs	r3, #1
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	f7ff fca3 	bl	8006ef4 <disk_read>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
 80075b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff ff87 	bl	80074ec <sync_window>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d158      	bne.n	800769a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d148      	bne.n	8007682 <sync_fs+0xb2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	791b      	ldrb	r3, [r3, #4]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d144      	bne.n	8007682 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3338      	adds	r3, #56	@ 0x38
 80075fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fd78 	bl	80070f8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3338      	adds	r3, #56	@ 0x38
 800760c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007610:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fd07 	bl	8007028 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3338      	adds	r3, #56	@ 0x38
 800761e:	4921      	ldr	r1, [pc, #132]	@ (80076a4 <sync_fs+0xd4>)
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fd1c 	bl	800705e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3338      	adds	r3, #56	@ 0x38
 800762a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800762e:	491e      	ldr	r1, [pc, #120]	@ (80076a8 <sync_fs+0xd8>)
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff fd14 	bl	800705e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3338      	adds	r3, #56	@ 0x38
 800763a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7ff fd0a 	bl	800705e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3338      	adds	r3, #56	@ 0x38
 800764e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7ff fd00 	bl	800705e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7858      	ldrb	r0, [r3, #1]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007676:	2301      	movs	r3, #1
 8007678:	f7ff fc5c 	bl	8006f34 <disk_write>
			fs->fsi_flag = 0;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fc72 	bl	8006f74 <disk_ioctl>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <sync_fs+0xca>
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	41615252 	.word	0x41615252
 80076a8:	61417272 	.word	0x61417272

080076ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	3b02      	subs	r3, #2
 80076ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	3b02      	subs	r3, #2
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d301      	bcc.n	80076cc <clust2sect+0x20>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e008      	b.n	80076de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	895b      	ldrh	r3, [r3, #10]
 80076d0:	461a      	mov	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	fb03 f202 	mul.w	r2, r3, r2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076dc:	4413      	add	r3, r2
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d904      	bls.n	800770a <get_fat+0x20>
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <get_fat+0x26>
		val = 1;	/* Internal error */
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e08e      	b.n	800782e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b03      	cmp	r3, #3
 800771c:	d061      	beq.n	80077e2 <get_fat+0xf8>
 800771e:	2b03      	cmp	r3, #3
 8007720:	dc7b      	bgt.n	800781a <get_fat+0x130>
 8007722:	2b01      	cmp	r3, #1
 8007724:	d002      	beq.n	800772c <get_fat+0x42>
 8007726:	2b02      	cmp	r3, #2
 8007728:	d041      	beq.n	80077ae <get_fat+0xc4>
 800772a:	e076      	b.n	800781a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	0a5b      	lsrs	r3, r3, #9
 8007742:	4413      	add	r3, r2
 8007744:	4619      	mov	r1, r3
 8007746:	6938      	ldr	r0, [r7, #16]
 8007748:	f7ff ff14 	bl	8007574 <move_window>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d166      	bne.n	8007820 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	60fa      	str	r2, [r7, #12]
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007764:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	0a5b      	lsrs	r3, r3, #9
 800776e:	4413      	add	r3, r2
 8007770:	4619      	mov	r1, r3
 8007772:	6938      	ldr	r0, [r7, #16]
 8007774:	f7ff fefe 	bl	8007574 <move_window>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d152      	bne.n	8007824 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4313      	orrs	r3, r2
 8007792:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <get_fat+0xba>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	e002      	b.n	80077aa <get_fat+0xc0>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077aa:	617b      	str	r3, [r7, #20]
			break;
 80077ac:	e03f      	b.n	800782e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	4413      	add	r3, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6938      	ldr	r0, [r7, #16]
 80077bc:	f7ff feda 	bl	8007574 <move_window>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d130      	bne.n	8007828 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80077d4:	4413      	add	r3, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fbea 	bl	8006fb0 <ld_word>
 80077dc:	4603      	mov	r3, r0
 80077de:	617b      	str	r3, [r7, #20]
			break;
 80077e0:	e025      	b.n	800782e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	09db      	lsrs	r3, r3, #7
 80077ea:	4413      	add	r3, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	6938      	ldr	r0, [r7, #16]
 80077f0:	f7ff fec0 	bl	8007574 <move_window>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d118      	bne.n	800782c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007808:	4413      	add	r3, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fbe9 	bl	8006fe2 <ld_dword>
 8007810:	4603      	mov	r3, r0
 8007812:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007816:	617b      	str	r3, [r7, #20]
			break;
 8007818:	e009      	b.n	800782e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800781a:	2301      	movs	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e006      	b.n	800782e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007820:	bf00      	nop
 8007822:	e004      	b.n	800782e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007824:	bf00      	nop
 8007826:	e002      	b.n	800782e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800782c:	bf00      	nop
		}
	}

	return val;
 800782e:	697b      	ldr	r3, [r7, #20]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b089      	sub	sp, #36	@ 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007844:	2302      	movs	r3, #2
 8007846:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b01      	cmp	r3, #1
 800784c:	f240 80d9 	bls.w	8007a02 <put_fat+0x1ca>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	f080 80d3 	bcs.w	8007a02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b03      	cmp	r3, #3
 8007862:	f000 8096 	beq.w	8007992 <put_fat+0x15a>
 8007866:	2b03      	cmp	r3, #3
 8007868:	f300 80cb 	bgt.w	8007a02 <put_fat+0x1ca>
 800786c:	2b01      	cmp	r3, #1
 800786e:	d002      	beq.n	8007876 <put_fat+0x3e>
 8007870:	2b02      	cmp	r3, #2
 8007872:	d06e      	beq.n	8007952 <put_fat+0x11a>
 8007874:	e0c5      	b.n	8007a02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4413      	add	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	0a5b      	lsrs	r3, r3, #9
 800788c:	4413      	add	r3, r2
 800788e:	4619      	mov	r1, r3
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fe6f 	bl	8007574 <move_window>
 8007896:	4603      	mov	r3, r0
 8007898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800789a:	7ffb      	ldrb	r3, [r7, #31]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 80a9 	bne.w	80079f4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	1c59      	adds	r1, r3, #1
 80078ac:	61b9      	str	r1, [r7, #24]
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	4413      	add	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <put_fat+0xa4>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	b25a      	sxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	b25b      	sxtb	r3, r3
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	b25b      	sxtb	r3, r3
 80078d4:	4313      	orrs	r3, r2
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e001      	b.n	80078e0 <put_fat+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	0a5b      	lsrs	r3, r3, #9
 80078f2:	4413      	add	r3, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff fe3c 	bl	8007574 <move_window>
 80078fc:	4603      	mov	r3, r0
 80078fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007900:	7ffb      	ldrb	r3, [r7, #31]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d178      	bne.n	80079f8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	4413      	add	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <put_fat+0xf0>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e00e      	b.n	8007946 <put_fat+0x10e>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b25b      	sxtb	r3, r3
 800792e:	f023 030f 	bic.w	r3, r3, #15
 8007932:	b25a      	sxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	0a1b      	lsrs	r3, r3, #8
 8007938:	b25b      	sxtb	r3, r3
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	b25b      	sxtb	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b25b      	sxtb	r3, r3
 8007944:	b2db      	uxtb	r3, r3
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	70da      	strb	r2, [r3, #3]
			break;
 8007950:	e057      	b.n	8007a02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	4413      	add	r3, r2
 800795c:	4619      	mov	r1, r3
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fe08 	bl	8007574 <move_window>
 8007964:	4603      	mov	r3, r0
 8007966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007968:	7ffb      	ldrb	r3, [r7, #31]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d146      	bne.n	80079fc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800797c:	4413      	add	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	b292      	uxth	r2, r2
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fb4f 	bl	8007028 <st_word>
			fs->wflag = 1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	70da      	strb	r2, [r3, #3]
			break;
 8007990:	e037      	b.n	8007a02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	09db      	lsrs	r3, r3, #7
 800799a:	4413      	add	r3, r2
 800799c:	4619      	mov	r1, r3
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff fde8 	bl	8007574 <move_window>
 80079a4:	4603      	mov	r3, r0
 80079a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079a8:	7ffb      	ldrb	r3, [r7, #31]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d128      	bne.n	8007a00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80079c2:	4413      	add	r3, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff fb0c 	bl	8006fe2 <ld_dword>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80079d0:	4323      	orrs	r3, r4
 80079d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80079e2:	4413      	add	r3, r2
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fb39 	bl	800705e <st_dword>
			fs->wflag = 1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	70da      	strb	r2, [r3, #3]
			break;
 80079f2:	e006      	b.n	8007a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079f4:	bf00      	nop
 80079f6:	e004      	b.n	8007a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079f8:	bf00      	nop
 80079fa:	e002      	b.n	8007a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007a00:	bf00      	nop
		}
	}
	return res;
 8007a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3724      	adds	r7, #36	@ 0x24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd90      	pop	{r4, r7, pc}

08007a0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d904      	bls.n	8007a32 <remove_chain+0x26>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d301      	bcc.n	8007a36 <remove_chain+0x2a>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e04b      	b.n	8007ace <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	69b8      	ldr	r0, [r7, #24]
 8007a44:	f7ff fef8 	bl	8007838 <put_fat>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <remove_chain+0x4a>
 8007a52:	7ffb      	ldrb	r3, [r7, #31]
 8007a54:	e03b      	b.n	8007ace <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fe46 	bl	80076ea <get_fat>
 8007a5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d031      	beq.n	8007aca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <remove_chain+0x64>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e02e      	b.n	8007ace <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d101      	bne.n	8007a7c <remove_chain+0x70>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e028      	b.n	8007ace <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	69b8      	ldr	r0, [r7, #24]
 8007a82:	f7ff fed9 	bl	8007838 <put_fat>
 8007a86:	4603      	mov	r3, r0
 8007a88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <remove_chain+0x88>
 8007a90:	7ffb      	ldrb	r3, [r7, #31]
 8007a92:	e01c      	b.n	8007ace <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	3b02      	subs	r3, #2
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d20b      	bcs.n	8007aba <remove_chain+0xae>
			fs->free_clst++;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3c6      	bcc.n	8007a56 <remove_chain+0x4a>
 8007ac8:	e000      	b.n	8007acc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007aca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b088      	sub	sp, #32
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <create_chain+0x2c>
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d31b      	bcc.n	8007b3a <create_chain+0x64>
 8007b02:	2301      	movs	r3, #1
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	e018      	b.n	8007b3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fded 	bl	80076ea <get_fat>
 8007b10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d801      	bhi.n	8007b1c <create_chain+0x46>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e070      	b.n	8007bfe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d101      	bne.n	8007b28 <create_chain+0x52>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	e06a      	b.n	8007bfe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d201      	bcs.n	8007b36 <create_chain+0x60>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	e063      	b.n	8007bfe <create_chain+0x128>
		scl = clst;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d307      	bcc.n	8007b5e <create_chain+0x88>
				ncl = 2;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d901      	bls.n	8007b5e <create_chain+0x88>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e04f      	b.n	8007bfe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007b5e:	69f9      	ldr	r1, [r7, #28]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff fdc2 	bl	80076ea <get_fat>
 8007b66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d003      	beq.n	8007b7c <create_chain+0xa6>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d101      	bne.n	8007b80 <create_chain+0xaa>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	e03e      	b.n	8007bfe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1da      	bne.n	8007b3e <create_chain+0x68>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e038      	b.n	8007bfe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007b8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b92:	69f9      	ldr	r1, [r7, #28]
 8007b94:	6938      	ldr	r0, [r7, #16]
 8007b96:	f7ff fe4f 	bl	8007838 <put_fat>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <create_chain+0xe2>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6938      	ldr	r0, [r7, #16]
 8007bb0:	f7ff fe42 	bl	8007838 <put_fat>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d116      	bne.n	8007bec <create_chain+0x116>
		fs->last_clst = ncl;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	3b02      	subs	r3, #2
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d804      	bhi.n	8007bdc <create_chain+0x106>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	1e5a      	subs	r2, r3, #1
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	791b      	ldrb	r3, [r3, #4]
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	711a      	strb	r2, [r3, #4]
 8007bea:	e007      	b.n	8007bfc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d102      	bne.n	8007bf8 <create_chain+0x122>
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf6:	e000      	b.n	8007bfa <create_chain+0x124>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007bfc:	69fb      	ldr	r3, [r7, #28]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3720      	adds	r7, #32
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	0a5b      	lsrs	r3, r3, #9
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	8952      	ldrh	r2, [r2, #10]
 8007c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	613a      	str	r2, [r7, #16]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <clmt_clust+0x3a>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e010      	b.n	8007c62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d307      	bcc.n	8007c58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	3304      	adds	r3, #4
 8007c54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c56:	e7e9      	b.n	8007c2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007c58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	4413      	add	r3, r2
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c84:	d204      	bcs.n	8007c90 <dir_sdi+0x22>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007c90:	2302      	movs	r3, #2
 8007c92:	e063      	b.n	8007d5c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <dir_sdi+0x46>
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d902      	bls.n	8007cb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10c      	bne.n	8007cd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	8912      	ldrh	r2, [r2, #8]
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d301      	bcc.n	8007cca <dir_sdi+0x5c>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e048      	b.n	8007d5c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	61da      	str	r2, [r3, #28]
 8007cd2:	e029      	b.n	8007d28 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	895b      	ldrh	r3, [r3, #10]
 8007cd8:	025b      	lsls	r3, r3, #9
 8007cda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007cdc:	e019      	b.n	8007d12 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fd01 	bl	80076ea <get_fat>
 8007ce8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d101      	bne.n	8007cf6 <dir_sdi+0x88>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e032      	b.n	8007d5c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d904      	bls.n	8007d06 <dir_sdi+0x98>
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d301      	bcc.n	8007d0a <dir_sdi+0x9c>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e028      	b.n	8007d5c <dir_sdi+0xee>
			ofs -= csz;
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d2e1      	bcs.n	8007cde <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007d1a:	6979      	ldr	r1, [r7, #20]
 8007d1c:	6938      	ldr	r0, [r7, #16]
 8007d1e:	f7ff fcc5 	bl	80076ac <clust2sect>
 8007d22:	4602      	mov	r2, r0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <dir_sdi+0xcc>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e010      	b.n	8007d5c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	0a5b      	lsrs	r3, r3, #9
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	3320      	adds	r3, #32
 8007d7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <dir_next+0x28>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d8a:	d301      	bcc.n	8007d90 <dir_next+0x2c>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	e0aa      	b.n	8007ee6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 8098 	bne.w	8007ecc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	8912      	ldrh	r2, [r2, #8]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	f0c0 8088 	bcc.w	8007ecc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	61da      	str	r2, [r3, #28]
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	e08f      	b.n	8007ee6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	0a5b      	lsrs	r3, r3, #9
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	8952      	ldrh	r2, [r2, #10]
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d17a      	bne.n	8007ecc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7ff fc83 	bl	80076ea <get_fat>
 8007de4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d801      	bhi.n	8007df0 <dir_next+0x8c>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e07a      	b.n	8007ee6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d101      	bne.n	8007dfc <dir_next+0x98>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e074      	b.n	8007ee6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d358      	bcc.n	8007eb8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	61da      	str	r2, [r3, #28]
 8007e12:	2304      	movs	r3, #4
 8007e14:	e067      	b.n	8007ee6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f7ff fe59 	bl	8007ad6 <create_chain>
 8007e24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <dir_next+0xcc>
 8007e2c:	2307      	movs	r3, #7
 8007e2e:	e05a      	b.n	8007ee6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <dir_next+0xd6>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e055      	b.n	8007ee6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d101      	bne.n	8007e46 <dir_next+0xe2>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04f      	b.n	8007ee6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff fb50 	bl	80074ec <sync_window>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <dir_next+0xf2>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e047      	b.n	8007ee6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3338      	adds	r3, #56	@ 0x38
 8007e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff f949 	bl	80070f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	6979      	ldr	r1, [r7, #20]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fc1d 	bl	80076ac <clust2sect>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e78:	e012      	b.n	8007ea0 <dir_next+0x13c>
						fs->wflag = 1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff fb33 	bl	80074ec <sync_window>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <dir_next+0x12c>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e02a      	b.n	8007ee6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3301      	adds	r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	895b      	ldrh	r3, [r3, #10]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d3e6      	bcc.n	8007e7a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fbf3 	bl	80076ac <clust2sect>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ede:	441a      	add	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff feb4 	bl	8007c6e <dir_sdi>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d12b      	bne.n	8007f68 <dir_alloc+0x7a>
		n = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff fb2a 	bl	8007574 <move_window>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d11d      	bne.n	8007f66 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2be5      	cmp	r3, #229	@ 0xe5
 8007f32:	d004      	beq.n	8007f3e <dir_alloc+0x50>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d107      	bne.n	8007f4e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3301      	adds	r3, #1
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d102      	bne.n	8007f52 <dir_alloc+0x64>
 8007f4c:	e00c      	b.n	8007f68 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007f52:	2101      	movs	r1, #1
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff ff05 	bl	8007d64 <dir_next>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0d7      	beq.n	8007f14 <dir_alloc+0x26>
 8007f64:	e000      	b.n	8007f68 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007f66:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d101      	bne.n	8007f72 <dir_alloc+0x84>
 8007f6e:	2307      	movs	r3, #7
 8007f70:	75fb      	strb	r3, [r7, #23]
	return res;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	331a      	adds	r3, #26
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff f810 	bl	8006fb0 <ld_word>
 8007f90:	4603      	mov	r3, r0
 8007f92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d109      	bne.n	8007fb0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff f805 	bl	8006fb0 <ld_word>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	041b      	lsls	r3, r3, #16
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	331a      	adds	r3, #26
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff f829 	bl	8007028 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d109      	bne.n	8007ff2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f103 0214 	add.w	r2, r3, #20
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7ff f81b 	bl	8007028 <st_word>
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	331a      	adds	r3, #26
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe ffd0 	bl	8006fb0 <ld_word>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <cmp_lfn+0x1e>
 8008016:	2300      	movs	r3, #0
 8008018:	e059      	b.n	80080ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008022:	1e5a      	subs	r2, r3, #1
 8008024:	4613      	mov	r3, r2
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008030:	2301      	movs	r3, #1
 8008032:	81fb      	strh	r3, [r7, #14]
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	e033      	b.n	80080a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800803a:	4a27      	ldr	r2, [pc, #156]	@ (80080d8 <cmp_lfn+0xdc>)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	4413      	add	r3, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe ffb1 	bl	8006fb0 <ld_word>
 800804e:	4603      	mov	r3, r0
 8008050:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008052:	89fb      	ldrh	r3, [r7, #14]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01a      	beq.n	800808e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2bfe      	cmp	r3, #254	@ 0xfe
 800805c:	d812      	bhi.n	8008084 <cmp_lfn+0x88>
 800805e:	89bb      	ldrh	r3, [r7, #12]
 8008060:	4618      	mov	r0, r3
 8008062:	f001 fd99 	bl	8009b98 <ff_wtoupper>
 8008066:	4603      	mov	r3, r0
 8008068:	461c      	mov	r4, r3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	617a      	str	r2, [r7, #20]
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fd8d 	bl	8009b98 <ff_wtoupper>
 800807e:	4603      	mov	r3, r0
 8008080:	429c      	cmp	r4, r3
 8008082:	d001      	beq.n	8008088 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008084:	2300      	movs	r3, #0
 8008086:	e022      	b.n	80080ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8008088:	89bb      	ldrh	r3, [r7, #12]
 800808a:	81fb      	strh	r3, [r7, #14]
 800808c:	e006      	b.n	800809c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800808e:	89bb      	ldrh	r3, [r7, #12]
 8008090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008094:	4293      	cmp	r3, r2
 8008096:	d001      	beq.n	800809c <cmp_lfn+0xa0>
 8008098:	2300      	movs	r3, #0
 800809a:	e018      	b.n	80080ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3301      	adds	r3, #1
 80080a0:	613b      	str	r3, [r7, #16]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b0c      	cmp	r3, #12
 80080a6:	d9c8      	bls.n	800803a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <cmp_lfn+0xd0>
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <cmp_lfn+0xd0>
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <cmp_lfn+0xd0>
 80080c8:	2300      	movs	r3, #0
 80080ca:	e000      	b.n	80080ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80080cc:	2301      	movs	r3, #1
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}
 80080d6:	bf00      	nop
 80080d8:	0800dd0c 	.word	0x0800dd0c

080080dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	460b      	mov	r3, r1
 80080ec:	71fb      	strb	r3, [r7, #7]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	330d      	adds	r3, #13
 80080f6:	79ba      	ldrb	r2, [r7, #6]
 80080f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	330b      	adds	r3, #11
 80080fe:	220f      	movs	r2, #15
 8008100:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	330c      	adds	r3, #12
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	331a      	adds	r3, #26
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe ff89 	bl	8007028 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	1e5a      	subs	r2, r3, #1
 800811a:	4613      	mov	r3, r2
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	82fb      	strh	r3, [r7, #22]
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800812e:	8afb      	ldrh	r3, [r7, #22]
 8008130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <put_lfn+0x6c>
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	61fa      	str	r2, [r7, #28]
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008148:	4a17      	ldr	r2, [pc, #92]	@ (80081a8 <put_lfn+0xcc>)
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	4413      	add	r3, r2
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	8afa      	ldrh	r2, [r7, #22]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe ff64 	bl	8007028 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008160:	8afb      	ldrh	r3, [r7, #22]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <put_lfn+0x90>
 8008166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800816a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	3301      	adds	r3, #1
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b0c      	cmp	r3, #12
 8008176:	d9da      	bls.n	800812e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800817e:	4293      	cmp	r3, r2
 8008180:	d006      	beq.n	8008190 <put_lfn+0xb4>
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <put_lfn+0xbc>
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008196:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	79fa      	ldrb	r2, [r7, #7]
 800819c:	701a      	strb	r2, [r3, #0]
}
 800819e:	bf00      	nop
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	0800dd0c 	.word	0x0800dd0c

080081ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08c      	sub	sp, #48	@ 0x30
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80081ba:	220b      	movs	r2, #11
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7fe ff79 	bl	80070b6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d92b      	bls.n	8008222 <gen_numname+0x76>
		sr = seq;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80081ce:	e022      	b.n	8008216 <gen_numname+0x6a>
			wc = *lfn++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80081da:	2300      	movs	r3, #0
 80081dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081de:	e017      	b.n	8008210 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	005a      	lsls	r2, r3, #1
 80081e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80081ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081f0:	085b      	lsrs	r3, r3, #1
 80081f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <gen_numname+0x5e>
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008204:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008208:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	3301      	adds	r3, #1
 800820e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d9e4      	bls.n	80081e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1d8      	bne.n	80081d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008222:	2307      	movs	r3, #7
 8008224:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	b2db      	uxtb	r3, r3
 8008230:	3330      	adds	r3, #48	@ 0x30
 8008232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800823a:	2b39      	cmp	r3, #57	@ 0x39
 800823c:	d904      	bls.n	8008248 <gen_numname+0x9c>
 800823e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008242:	3307      	adds	r3, #7
 8008244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	1e5a      	subs	r2, r3, #1
 800824c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800824e:	3330      	adds	r3, #48	@ 0x30
 8008250:	443b      	add	r3, r7
 8008252:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008256:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	091b      	lsrs	r3, r3, #4
 800825e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1df      	bne.n	8008226 <gen_numname+0x7a>
	ns[i] = '~';
 8008266:	f107 0214 	add.w	r2, r7, #20
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	4413      	add	r3, r2
 800826e:	227e      	movs	r2, #126	@ 0x7e
 8008270:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	@ 0x24
 8008276:	e002      	b.n	800827e <gen_numname+0xd2>
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	3301      	adds	r3, #1
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
 800827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	429a      	cmp	r2, r3
 8008284:	d205      	bcs.n	8008292 <gen_numname+0xe6>
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	4413      	add	r3, r2
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b20      	cmp	r3, #32
 8008290:	d1f2      	bne.n	8008278 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	2b07      	cmp	r3, #7
 8008296:	d807      	bhi.n	80082a8 <gen_numname+0xfc>
 8008298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800829e:	3330      	adds	r3, #48	@ 0x30
 80082a0:	443b      	add	r3, r7
 80082a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80082a6:	e000      	b.n	80082aa <gen_numname+0xfe>
 80082a8:	2120      	movs	r1, #32
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	460a      	mov	r2, r1
 80082b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	2b07      	cmp	r3, #7
 80082bc:	d9e9      	bls.n	8008292 <gen_numname+0xe6>
}
 80082be:	bf00      	nop
 80082c0:	bf00      	nop
 80082c2:	3730      	adds	r7, #48	@ 0x30
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80082d4:	230b      	movs	r3, #11
 80082d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	0852      	lsrs	r2, r2, #1
 80082de:	01db      	lsls	r3, r3, #7
 80082e0:	4313      	orrs	r3, r2
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	6079      	str	r1, [r7, #4]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	4413      	add	r3, r2
 80082ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	60bb      	str	r3, [r7, #8]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1ed      	bne.n	80082d8 <sum_sfn+0x10>
	return sum;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008318:	2100      	movs	r1, #0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fca7 	bl	8007c6e <dir_sdi>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <dir_find+0x24>
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	e0a9      	b.n	8008482 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800832e:	23ff      	movs	r3, #255	@ 0xff
 8008330:	753b      	strb	r3, [r7, #20]
 8008332:	7d3b      	ldrb	r3, [r7, #20]
 8008334:	757b      	strb	r3, [r7, #21]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	4619      	mov	r1, r3
 8008344:	6938      	ldr	r0, [r7, #16]
 8008346:	f7ff f915 	bl	8007574 <move_window>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8090 	bne.w	8008476 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800835e:	7dbb      	ldrb	r3, [r7, #22]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <dir_find+0x60>
 8008364:	2304      	movs	r3, #4
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e08a      	b.n	8008480 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	330b      	adds	r3, #11
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7bfa      	ldrb	r2, [r7, #15]
 800837c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800837e:	7dbb      	ldrb	r3, [r7, #22]
 8008380:	2be5      	cmp	r3, #229	@ 0xe5
 8008382:	d007      	beq.n	8008394 <dir_find+0x8a>
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <dir_find+0x98>
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d006      	beq.n	80083a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008394:	23ff      	movs	r3, #255	@ 0xff
 8008396:	757b      	strb	r3, [r7, #21]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
 80083a0:	e05e      	b.n	8008460 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	2b0f      	cmp	r3, #15
 80083a6:	d136      	bne.n	8008416 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d154      	bne.n	8008460 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80083b6:	7dbb      	ldrb	r3, [r7, #22]
 80083b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	7b5b      	ldrb	r3, [r3, #13]
 80083c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80083c8:	7dbb      	ldrb	r3, [r7, #22]
 80083ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ce:	75bb      	strb	r3, [r7, #22]
 80083d0:	7dbb      	ldrb	r3, [r7, #22]
 80083d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695a      	ldr	r2, [r3, #20]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80083dc:	7dba      	ldrb	r2, [r7, #22]
 80083de:	7d7b      	ldrb	r3, [r7, #21]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d115      	bne.n	8008410 <dir_find+0x106>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	330d      	adds	r3, #13
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	7d3a      	ldrb	r2, [r7, #20]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d10e      	bne.n	8008410 <dir_find+0x106>
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f7ff fdfd 	bl	8007ffc <cmp_lfn>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <dir_find+0x106>
 8008408:	7d7b      	ldrb	r3, [r7, #21]
 800840a:	3b01      	subs	r3, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	e000      	b.n	8008412 <dir_find+0x108>
 8008410:	23ff      	movs	r3, #255	@ 0xff
 8008412:	757b      	strb	r3, [r7, #21]
 8008414:	e024      	b.n	8008460 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008416:	7d7b      	ldrb	r3, [r7, #21]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d109      	bne.n	8008430 <dir_find+0x126>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff ff51 	bl	80082c8 <sum_sfn>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	7d3b      	ldrb	r3, [r7, #20]
 800842c:	4293      	cmp	r3, r2
 800842e:	d024      	beq.n	800847a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <dir_find+0x14a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a18      	ldr	r0, [r3, #32]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3324      	adds	r3, #36	@ 0x24
 8008446:	220b      	movs	r2, #11
 8008448:	4619      	mov	r1, r3
 800844a:	f7fe fe70 	bl	800712e <mem_cmp>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d014      	beq.n	800847e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008454:	23ff      	movs	r3, #255	@ 0xff
 8008456:	757b      	strb	r3, [r7, #21]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff fc7e 	bl	8007d64 <dir_next>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f43f af65 	beq.w	800833e <dir_find+0x34>
 8008474:	e004      	b.n	8008480 <dir_find+0x176>
		if (res != FR_OK) break;
 8008476:	bf00      	nop
 8008478:	e002      	b.n	8008480 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800847a:	bf00      	nop
 800847c:	e000      	b.n	8008480 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800847e:	bf00      	nop

	return res;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08c      	sub	sp, #48	@ 0x30
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80084a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <dir_register+0x20>
 80084a8:	2306      	movs	r3, #6
 80084aa:	e0e0      	b.n	800866e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80084ac:	2300      	movs	r3, #0
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b0:	e002      	b.n	80084b8 <dir_register+0x2c>
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	3301      	adds	r3, #1
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	4413      	add	r3, r2
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f4      	bne.n	80084b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	220c      	movs	r2, #12
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fdee 	bl	80070b6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d032      	beq.n	800854a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2240      	movs	r2, #64	@ 0x40
 80084e8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80084ec:	2301      	movs	r3, #1
 80084ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084f0:	e016      	b.n	8008520 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	f107 010c 	add.w	r1, r7, #12
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f7ff fe53 	bl	80081ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff feff 	bl	800830a <dir_find>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	3301      	adds	r3, #1
 800851e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	2b63      	cmp	r3, #99	@ 0x63
 8008524:	d9e5      	bls.n	80084f2 <dir_register+0x66>
 8008526:	e000      	b.n	800852a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008528:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	2b64      	cmp	r3, #100	@ 0x64
 800852e:	d101      	bne.n	8008534 <dir_register+0xa8>
 8008530:	2307      	movs	r3, #7
 8008532:	e09c      	b.n	800866e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008538:	2b04      	cmp	r3, #4
 800853a:	d002      	beq.n	8008542 <dir_register+0xb6>
 800853c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008540:	e095      	b.n	800866e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008542:	7dfa      	ldrb	r2, [r7, #23]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800854a:	7dfb      	ldrb	r3, [r7, #23]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <dir_register+0xd8>
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	330c      	adds	r3, #12
 8008558:	4a47      	ldr	r2, [pc, #284]	@ (8008678 <dir_register+0x1ec>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3301      	adds	r3, #1
 8008562:	e000      	b.n	8008566 <dir_register+0xda>
 8008564:	2301      	movs	r3, #1
 8008566:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008568:	6a39      	ldr	r1, [r7, #32]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fcbf 	bl	8007eee <dir_alloc>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800857a:	2b00      	cmp	r3, #0
 800857c:	d148      	bne.n	8008610 <dir_register+0x184>
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	3b01      	subs	r3, #1
 8008582:	623b      	str	r3, [r7, #32]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d042      	beq.n	8008610 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695a      	ldr	r2, [r3, #20]
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	015b      	lsls	r3, r3, #5
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fb69 	bl	8007c6e <dir_sdi>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80085a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d132      	bne.n	8008610 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3324      	adds	r3, #36	@ 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fe8a 	bl	80082c8 <sum_sfn>
 80085b4:	4603      	mov	r3, r0
 80085b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	4619      	mov	r1, r3
 80085be:	69f8      	ldr	r0, [r7, #28]
 80085c0:	f7fe ffd8 	bl	8007574 <move_window>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80085ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d11d      	bne.n	800860e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	68d8      	ldr	r0, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a19      	ldr	r1, [r3, #32]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	7efb      	ldrb	r3, [r7, #27]
 80085e0:	f7ff fd7c 	bl	80080dc <put_lfn>
				fs->wflag = 1;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	2201      	movs	r2, #1
 80085e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80085ea:	2100      	movs	r1, #0
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fbb9 	bl	8007d64 <dir_next>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80085f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <dir_register+0x184>
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	3b01      	subs	r3, #1
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1d5      	bne.n	80085b8 <dir_register+0x12c>
 800860c:	e000      	b.n	8008610 <dir_register+0x184>
				if (res != FR_OK) break;
 800860e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008614:	2b00      	cmp	r3, #0
 8008616:	d128      	bne.n	800866a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	4619      	mov	r1, r3
 800861e:	69f8      	ldr	r0, [r7, #28]
 8008620:	f7fe ffa8 	bl	8007574 <move_window>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800862a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800862e:	2b00      	cmp	r3, #0
 8008630:	d11b      	bne.n	800866a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	2220      	movs	r2, #32
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fd5c 	bl	80070f8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a18      	ldr	r0, [r3, #32]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3324      	adds	r3, #36	@ 0x24
 8008648:	220b      	movs	r2, #11
 800864a:	4619      	mov	r1, r3
 800864c:	f7fe fd33 	bl	80070b6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	330c      	adds	r3, #12
 800865c:	f002 0218 	and.w	r2, r2, #24
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	2201      	movs	r2, #1
 8008668:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800866a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800866e:	4618      	mov	r0, r3
 8008670:	3730      	adds	r7, #48	@ 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	4ec4ec4f 	.word	0x4ec4ec4f

0800867c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	@ 0x28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	61ba      	str	r2, [r7, #24]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80086aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086ac:	2b1f      	cmp	r3, #31
 80086ae:	d940      	bls.n	8008732 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80086b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80086b4:	d006      	beq.n	80086c4 <create_name+0x48>
 80086b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80086ba:	d110      	bne.n	80086de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80086bc:	e002      	b.n	80086c4 <create_name+0x48>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	3301      	adds	r3, #1
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	4413      	add	r3, r2
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80086ce:	d0f6      	beq.n	80086be <create_name+0x42>
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4413      	add	r3, r2
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80086da:	d0f0      	beq.n	80086be <create_name+0x42>
			break;
 80086dc:	e02a      	b.n	8008734 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80086e2:	d901      	bls.n	80086e8 <create_name+0x6c>
 80086e4:	2306      	movs	r3, #6
 80086e6:	e17d      	b.n	80089e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80086e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80086ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086f0:	2101      	movs	r1, #1
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 fa14 	bl	8009b20 <ff_convert>
 80086f8:	4603      	mov	r3, r0
 80086fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80086fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <create_name+0x8a>
 8008702:	2306      	movs	r3, #6
 8008704:	e16e      	b.n	80089e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008708:	2b7f      	cmp	r3, #127	@ 0x7f
 800870a:	d809      	bhi.n	8008720 <create_name+0xa4>
 800870c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800870e:	4619      	mov	r1, r3
 8008710:	488d      	ldr	r0, [pc, #564]	@ (8008948 <create_name+0x2cc>)
 8008712:	f7fe fd33 	bl	800717c <chk_chr>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <create_name+0xa4>
 800871c:	2306      	movs	r3, #6
 800871e:	e161      	b.n	80089e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	617a      	str	r2, [r7, #20]
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800872e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008730:	e7b4      	b.n	800869c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008732:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	441a      	add	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800873e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008740:	2b1f      	cmp	r3, #31
 8008742:	d801      	bhi.n	8008748 <create_name+0xcc>
 8008744:	2304      	movs	r3, #4
 8008746:	e000      	b.n	800874a <create_name+0xce>
 8008748:	2300      	movs	r3, #0
 800874a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800874e:	e011      	b.n	8008774 <create_name+0xf8>
		w = lfn[di - 1];
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008756:	3b01      	subs	r3, #1
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008764:	2b20      	cmp	r3, #32
 8008766:	d002      	beq.n	800876e <create_name+0xf2>
 8008768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800876a:	2b2e      	cmp	r3, #46	@ 0x2e
 800876c:	d106      	bne.n	800877c <create_name+0x100>
		di--;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3b01      	subs	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1ea      	bne.n	8008750 <create_name+0xd4>
 800877a:	e000      	b.n	800877e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800877c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	2200      	movs	r2, #0
 8008788:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <create_name+0x118>
 8008790:	2306      	movs	r3, #6
 8008792:	e127      	b.n	80089e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3324      	adds	r3, #36	@ 0x24
 8008798:	220b      	movs	r2, #11
 800879a:	2120      	movs	r1, #32
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fcab 	bl	80070f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	e002      	b.n	80087ae <create_name+0x132>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d0f5      	beq.n	80087a8 <create_name+0x12c>
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087c8:	d0ee      	beq.n	80087a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d009      	beq.n	80087e4 <create_name+0x168>
 80087d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087d4:	f043 0303 	orr.w	r3, r3, #3
 80087d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80087dc:	e002      	b.n	80087e4 <create_name+0x168>
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <create_name+0x182>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80087f0:	3b01      	subs	r3, #1
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80087fc:	d1ef      	bne.n	80087de <create_name+0x162>

	i = b = 0; ni = 8;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008804:	2300      	movs	r3, #0
 8008806:	623b      	str	r3, [r7, #32]
 8008808:	2308      	movs	r3, #8
 800880a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	61ba      	str	r2, [r7, #24]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800881c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8090 	beq.w	8008944 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008826:	2b20      	cmp	r3, #32
 8008828:	d006      	beq.n	8008838 <create_name+0x1bc>
 800882a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800882c:	2b2e      	cmp	r3, #46	@ 0x2e
 800882e:	d10a      	bne.n	8008846 <create_name+0x1ca>
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	429a      	cmp	r2, r3
 8008836:	d006      	beq.n	8008846 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800883c:	f043 0303 	orr.w	r3, r3, #3
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008844:	e07d      	b.n	8008942 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	429a      	cmp	r2, r3
 800884c:	d203      	bcs.n	8008856 <create_name+0x1da>
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	429a      	cmp	r2, r3
 8008854:	d123      	bne.n	800889e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2b0b      	cmp	r3, #11
 800885a:	d106      	bne.n	800886a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800885c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008860:	f043 0303 	orr.w	r3, r3, #3
 8008864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008868:	e075      	b.n	8008956 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	429a      	cmp	r2, r3
 8008870:	d005      	beq.n	800887e <create_name+0x202>
 8008872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008876:	f043 0303 	orr.w	r3, r3, #3
 800887a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	429a      	cmp	r2, r3
 8008884:	d866      	bhi.n	8008954 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	2308      	movs	r3, #8
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	230b      	movs	r3, #11
 8008890:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008892:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800889c:	e051      	b.n	8008942 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800889e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80088a2:	d914      	bls.n	80088ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80088a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088a6:	2100      	movs	r1, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 f939 	bl	8009b20 <ff_convert>
 80088ae:	4603      	mov	r3, r0
 80088b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80088b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <create_name+0x246>
 80088b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088ba:	3b80      	subs	r3, #128	@ 0x80
 80088bc:	4a23      	ldr	r2, [pc, #140]	@ (800894c <create_name+0x2d0>)
 80088be:	5cd3      	ldrb	r3, [r2, r3]
 80088c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80088c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088c6:	f043 0302 	orr.w	r3, r3, #2
 80088ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80088ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <create_name+0x268>
 80088d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088d6:	4619      	mov	r1, r3
 80088d8:	481d      	ldr	r0, [pc, #116]	@ (8008950 <create_name+0x2d4>)
 80088da:	f7fe fc4f 	bl	800717c <chk_chr>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80088e4:	235f      	movs	r3, #95	@ 0x5f
 80088e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80088e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088ec:	f043 0303 	orr.w	r3, r3, #3
 80088f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088f4:	e01b      	b.n	800892e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80088f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088f8:	2b40      	cmp	r3, #64	@ 0x40
 80088fa:	d909      	bls.n	8008910 <create_name+0x294>
 80088fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8008900:	d806      	bhi.n	8008910 <create_name+0x294>
					b |= 2;
 8008902:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008906:	f043 0302 	orr.w	r3, r3, #2
 800890a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800890e:	e00e      	b.n	800892e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008912:	2b60      	cmp	r3, #96	@ 0x60
 8008914:	d90b      	bls.n	800892e <create_name+0x2b2>
 8008916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008918:	2b7a      	cmp	r3, #122	@ 0x7a
 800891a:	d808      	bhi.n	800892e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800891c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800892a:	3b20      	subs	r3, #32
 800892c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	623a      	str	r2, [r7, #32]
 8008934:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008936:	b2d1      	uxtb	r1, r2
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	460a      	mov	r2, r1
 800893e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008942:	e763      	b.n	800880c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008944:	bf00      	nop
 8008946:	e006      	b.n	8008956 <create_name+0x2da>
 8008948:	0800dc08 	.word	0x0800dc08
 800894c:	0800dc8c 	.word	0x0800dc8c
 8008950:	0800dc14 	.word	0x0800dc14
			if (si > di) break;			/* No extension */
 8008954:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800895c:	2be5      	cmp	r3, #229	@ 0xe5
 800895e:	d103      	bne.n	8008968 <create_name+0x2ec>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2205      	movs	r2, #5
 8008964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2b08      	cmp	r3, #8
 800896c:	d104      	bne.n	8008978 <create_name+0x2fc>
 800896e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008978:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800897c:	f003 030c 	and.w	r3, r3, #12
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d005      	beq.n	8008990 <create_name+0x314>
 8008984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	2b03      	cmp	r3, #3
 800898e:	d105      	bne.n	800899c <create_name+0x320>
 8008990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008994:	f043 0302 	orr.w	r3, r3, #2
 8008998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800899c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d117      	bne.n	80089d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80089a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d105      	bne.n	80089c0 <create_name+0x344>
 80089b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089b8:	f043 0310 	orr.w	r3, r3, #16
 80089bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80089c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089c4:	f003 030c 	and.w	r3, r3, #12
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d105      	bne.n	80089d8 <create_name+0x35c>
 80089cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80089de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80089e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3728      	adds	r7, #40	@ 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008a00:	e002      	b.n	8008a08 <follow_path+0x1c>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008a0e:	d0f8      	beq.n	8008a02 <follow_path+0x16>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a16:	d0f4      	beq.n	8008a02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b1f      	cmp	r3, #31
 8008a24:	d80a      	bhi.n	8008a3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2280      	movs	r2, #128	@ 0x80
 8008a2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008a2e:	2100      	movs	r1, #0
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff f91c 	bl	8007c6e <dir_sdi>
 8008a36:	4603      	mov	r3, r0
 8008a38:	75fb      	strb	r3, [r7, #23]
 8008a3a:	e043      	b.n	8008ac4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fe1b 	bl	800867c <create_name>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d134      	bne.n	8008aba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff fc5a 	bl	800830a <dir_find>
 8008a56:	4603      	mov	r3, r0
 8008a58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00a      	beq.n	8008a7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d127      	bne.n	8008abe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d122      	bne.n	8008abe <follow_path+0xd2>
 8008a78:	2305      	movs	r3, #5
 8008a7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a7c:	e01f      	b.n	8008abe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d11c      	bne.n	8008ac2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	799b      	ldrb	r3, [r3, #6]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a94:	2305      	movs	r3, #5
 8008a96:	75fb      	strb	r3, [r7, #23]
 8008a98:	e014      	b.n	8008ac4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff fa65 	bl	8007f7c <ld_clust>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ab8:	e7c0      	b.n	8008a3c <follow_path+0x50>
			if (res != FR_OK) break;
 8008aba:	bf00      	nop
 8008abc:	e002      	b.n	8008ac4 <follow_path+0xd8>
				break;
 8008abe:	bf00      	nop
 8008ac0:	e000      	b.n	8008ac4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ac2:	bf00      	nop
			}
		}
	}

	return res;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b087      	sub	sp, #28
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d031      	beq.n	8008b48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e002      	b.n	8008af2 <get_ldnumber+0x24>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	3301      	adds	r3, #1
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b1f      	cmp	r3, #31
 8008af8:	d903      	bls.n	8008b02 <get_ldnumber+0x34>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b3a      	cmp	r3, #58	@ 0x3a
 8008b00:	d1f4      	bne.n	8008aec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b3a      	cmp	r3, #58	@ 0x3a
 8008b08:	d11c      	bne.n	8008b44 <get_ldnumber+0x76>
			tp = *path;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	60fa      	str	r2, [r7, #12]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	3b30      	subs	r3, #48	@ 0x30
 8008b1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d80e      	bhi.n	8008b40 <get_ldnumber+0x72>
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d10a      	bne.n	8008b40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d107      	bne.n	8008b40 <get_ldnumber+0x72>
					vol = (int)i;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	3301      	adds	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	e002      	b.n	8008b4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008b44:	2300      	movs	r3, #0
 8008b46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008b48:	693b      	ldr	r3, [r7, #16]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	70da      	strb	r2, [r3, #3]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fe fcfe 	bl	8007574 <move_window>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <check_fs+0x2a>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	e038      	b.n	8008bf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3338      	adds	r3, #56	@ 0x38
 8008b86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fa10 	bl	8006fb0 <ld_word>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d001      	beq.n	8008ba0 <check_fs+0x48>
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e029      	b.n	8008bf4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ba6:	2be9      	cmp	r3, #233	@ 0xe9
 8008ba8:	d009      	beq.n	8008bbe <check_fs+0x66>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008bb0:	2beb      	cmp	r3, #235	@ 0xeb
 8008bb2:	d11e      	bne.n	8008bf2 <check_fs+0x9a>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008bba:	2b90      	cmp	r3, #144	@ 0x90
 8008bbc:	d119      	bne.n	8008bf2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3338      	adds	r3, #56	@ 0x38
 8008bc2:	3336      	adds	r3, #54	@ 0x36
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fa0c 	bl	8006fe2 <ld_dword>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bfc <check_fs+0xa4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d101      	bne.n	8008bda <check_fs+0x82>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e00c      	b.n	8008bf4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3338      	adds	r3, #56	@ 0x38
 8008bde:	3352      	adds	r3, #82	@ 0x52
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe f9fe 	bl	8006fe2 <ld_dword>
 8008be6:	4603      	mov	r3, r0
 8008be8:	4a05      	ldr	r2, [pc, #20]	@ (8008c00 <check_fs+0xa8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d101      	bne.n	8008bf2 <check_fs+0x9a>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e000      	b.n	8008bf4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008bf2:	2302      	movs	r3, #2
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	00544146 	.word	0x00544146
 8008c00:	33544146 	.word	0x33544146

08008c04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b096      	sub	sp, #88	@ 0x58
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ff58 	bl	8008ace <get_ldnumber>
 8008c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da01      	bge.n	8008c2a <find_volume+0x26>
 8008c26:	230b      	movs	r3, #11
 8008c28:	e235      	b.n	8009096 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c2a:	4aa5      	ldr	r2, [pc, #660]	@ (8008ec0 <find_volume+0x2bc>)
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <find_volume+0x3a>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	e22b      	b.n	8009096 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8008c3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c40:	f7fe fab7 	bl	80071b2 <lock_fs>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <find_volume+0x4a>
 8008c4a:	230f      	movs	r3, #15
 8008c4c:	e223      	b.n	8009096 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01a      	beq.n	8008c9a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe f901 	bl	8006e70 <disk_status>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10c      	bne.n	8008c9a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <find_volume+0x92>
 8008c86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c8a:	f003 0304 	and.w	r3, r3, #4
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008c92:	230a      	movs	r3, #10
 8008c94:	e1ff      	b.n	8009096 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8008c96:	2300      	movs	r3, #0
 8008c98:	e1fd      	b.n	8009096 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe f8f9 	bl	8006ea4 <disk_initialize>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e1e6      	b.n	8009096 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <find_volume+0xda>
 8008cce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008cda:	230a      	movs	r3, #10
 8008cdc:	e1db      	b.n	8009096 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ce4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ce6:	f7ff ff37 	bl	8008b58 <check_fs>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d149      	bne.n	8008d8c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cfc:	e01e      	b.n	8008d3c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d00:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008d0c:	4413      	add	r3, r2
 8008d0e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	3304      	adds	r3, #4
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <find_volume+0x124>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe f95f 	bl	8006fe2 <ld_dword>
 8008d24:	4602      	mov	r2, r0
 8008d26:	e000      	b.n	8008d2a <find_volume+0x126>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	3358      	adds	r3, #88	@ 0x58
 8008d30:	443b      	add	r3, r7
 8008d32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d38:	3301      	adds	r3, #1
 8008d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d9dd      	bls.n	8008cfe <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008d42:	2300      	movs	r3, #0
 8008d44:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <find_volume+0x14e>
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3358      	adds	r3, #88	@ 0x58
 8008d58:	443b      	add	r3, r7
 8008d5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d5e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <find_volume+0x16e>
 8008d66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d6a:	f7ff fef5 	bl	8008b58 <check_fs>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	e000      	b.n	8008d74 <find_volume+0x170>
 8008d72:	2303      	movs	r3, #3
 8008d74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d905      	bls.n	8008d8c <find_volume+0x188>
 8008d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d82:	3301      	adds	r3, #1
 8008d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d9e2      	bls.n	8008d52 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d101      	bne.n	8008d98 <find_volume+0x194>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e17e      	b.n	8009096 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d901      	bls.n	8008da4 <find_volume+0x1a0>
 8008da0:	230d      	movs	r3, #13
 8008da2:	e178      	b.n	8009096 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da6:	3338      	adds	r3, #56	@ 0x38
 8008da8:	330b      	adds	r3, #11
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe f900 	bl	8006fb0 <ld_word>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008db6:	d001      	beq.n	8008dbc <find_volume+0x1b8>
 8008db8:	230d      	movs	r3, #13
 8008dba:	e16c      	b.n	8009096 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbe:	3338      	adds	r3, #56	@ 0x38
 8008dc0:	3316      	adds	r3, #22
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe f8f4 	bl	8006fb0 <ld_word>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <find_volume+0x1dc>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	3338      	adds	r3, #56	@ 0x38
 8008dd6:	3324      	adds	r3, #36	@ 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe f902 	bl	8006fe2 <ld_dword>
 8008dde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008de4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	789b      	ldrb	r3, [r3, #2]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d005      	beq.n	8008e04 <find_volume+0x200>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	789b      	ldrb	r3, [r3, #2]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d001      	beq.n	8008e04 <find_volume+0x200>
 8008e00:	230d      	movs	r3, #13
 8008e02:	e148      	b.n	8009096 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
 8008e10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	895b      	ldrh	r3, [r3, #10]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <find_volume+0x234>
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	895b      	ldrh	r3, [r3, #10]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	895b      	ldrh	r3, [r3, #10]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4013      	ands	r3, r2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <find_volume+0x238>
 8008e38:	230d      	movs	r3, #13
 8008e3a:	e12c      	b.n	8009096 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	3338      	adds	r3, #56	@ 0x38
 8008e40:	3311      	adds	r3, #17
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe f8b4 	bl	8006fb0 <ld_word>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	891b      	ldrh	r3, [r3, #8]
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <find_volume+0x25e>
 8008e5e:	230d      	movs	r3, #13
 8008e60:	e119      	b.n	8009096 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	3338      	adds	r3, #56	@ 0x38
 8008e66:	3313      	adds	r3, #19
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe f8a1 	bl	8006fb0 <ld_word>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <find_volume+0x282>
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	3338      	adds	r3, #56	@ 0x38
 8008e7c:	3320      	adds	r3, #32
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe f8af 	bl	8006fe2 <ld_dword>
 8008e84:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e88:	3338      	adds	r3, #56	@ 0x38
 8008e8a:	330e      	adds	r3, #14
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe f88f 	bl	8006fb0 <ld_word>
 8008e92:	4603      	mov	r3, r0
 8008e94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008e96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <find_volume+0x29c>
 8008e9c:	230d      	movs	r3, #13
 8008e9e:	e0fa      	b.n	8009096 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008ea0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea4:	4413      	add	r3, r2
 8008ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ea8:	8912      	ldrh	r2, [r2, #8]
 8008eaa:	0912      	lsrs	r2, r2, #4
 8008eac:	b292      	uxth	r2, r2
 8008eae:	4413      	add	r3, r2
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d204      	bcs.n	8008ec4 <find_volume+0x2c0>
 8008eba:	230d      	movs	r3, #13
 8008ebc:	e0eb      	b.n	8009096 <find_volume+0x492>
 8008ebe:	bf00      	nop
 8008ec0:	20000580 	.word	0x20000580
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ecc:	8952      	ldrh	r2, [r2, #10]
 8008ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <find_volume+0x2da>
 8008eda:	230d      	movs	r3, #13
 8008edc:	e0db      	b.n	8009096 <find_volume+0x492>
		fmt = FS_FAT32;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d802      	bhi.n	8008ef4 <find_volume+0x2f0>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d802      	bhi.n	8008f04 <find_volume+0x300>
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	1c9a      	adds	r2, r3, #2
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f10:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008f12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f16:	441a      	add	r2, r3
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	441a      	add	r2, r3
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008f26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d11e      	bne.n	8008f6c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f30:	3338      	adds	r3, #56	@ 0x38
 8008f32:	332a      	adds	r3, #42	@ 0x2a
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe f83b 	bl	8006fb0 <ld_word>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <find_volume+0x340>
 8008f40:	230d      	movs	r3, #13
 8008f42:	e0a8      	b.n	8009096 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	891b      	ldrh	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <find_volume+0x34c>
 8008f4c:	230d      	movs	r3, #13
 8008f4e:	e0a2      	b.n	8009096 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f52:	3338      	adds	r3, #56	@ 0x38
 8008f54:	332c      	adds	r3, #44	@ 0x2c
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe f843 	bl	8006fe2 <ld_dword>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f60:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f6a:	e01f      	b.n	8008fac <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	891b      	ldrh	r3, [r3, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <find_volume+0x374>
 8008f74:	230d      	movs	r3, #13
 8008f76:	e08e      	b.n	8009096 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f7e:	441a      	add	r2, r3
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d103      	bne.n	8008f94 <find_volume+0x390>
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	e00a      	b.n	8008faa <find_volume+0x3a6>
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	085a      	lsrs	r2, r3, #1
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008faa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	6a1a      	ldr	r2, [r3, #32]
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008fb6:	0a5b      	lsrs	r3, r3, #9
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d201      	bcs.n	8008fc0 <find_volume+0x3bc>
 8008fbc:	230d      	movs	r3, #13
 8008fbe:	e06a      	b.n	8009096 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc6:	619a      	str	r2, [r3, #24]
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd2:	2280      	movs	r2, #128	@ 0x80
 8008fd4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d149      	bne.n	8009072 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	3338      	adds	r3, #56	@ 0x38
 8008fe2:	3330      	adds	r3, #48	@ 0x30
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fd ffe3 	bl	8006fb0 <ld_word>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d140      	bne.n	8009072 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ff8:	f7fe fabc 	bl	8007574 <move_window>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d137      	bne.n	8009072 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	2200      	movs	r2, #0
 8009006:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	3338      	adds	r3, #56	@ 0x38
 800900c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd ffcd 	bl	8006fb0 <ld_word>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800901e:	429a      	cmp	r2, r3
 8009020:	d127      	bne.n	8009072 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	3338      	adds	r3, #56	@ 0x38
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd ffdb 	bl	8006fe2 <ld_dword>
 800902c:	4603      	mov	r3, r0
 800902e:	4a1c      	ldr	r2, [pc, #112]	@ (80090a0 <find_volume+0x49c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d11e      	bne.n	8009072 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009036:	3338      	adds	r3, #56	@ 0x38
 8009038:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800903c:	4618      	mov	r0, r3
 800903e:	f7fd ffd0 	bl	8006fe2 <ld_dword>
 8009042:	4603      	mov	r3, r0
 8009044:	4a17      	ldr	r2, [pc, #92]	@ (80090a4 <find_volume+0x4a0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d113      	bne.n	8009072 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800904a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904c:	3338      	adds	r3, #56	@ 0x38
 800904e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009052:	4618      	mov	r0, r3
 8009054:	f7fd ffc5 	bl	8006fe2 <ld_dword>
 8009058:	4602      	mov	r2, r0
 800905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	3338      	adds	r3, #56	@ 0x38
 8009062:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009066:	4618      	mov	r0, r3
 8009068:	f7fd ffbb 	bl	8006fe2 <ld_dword>
 800906c:	4602      	mov	r2, r0
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009078:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800907a:	4b0b      	ldr	r3, [pc, #44]	@ (80090a8 <find_volume+0x4a4>)
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	3301      	adds	r3, #1
 8009080:	b29a      	uxth	r2, r3
 8009082:	4b09      	ldr	r3, [pc, #36]	@ (80090a8 <find_volume+0x4a4>)
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <find_volume+0x4a4>)
 8009088:	881a      	ldrh	r2, [r3, #0]
 800908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800908e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009090:	f7fe fa08 	bl	80074a4 <clear_lock>
#endif
	return FR_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3758      	adds	r7, #88	@ 0x58
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	41615252 	.word	0x41615252
 80090a4:	61417272 	.word	0x61417272
 80090a8:	20000584 	.word	0x20000584

080090ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80090b6:	2309      	movs	r3, #9
 80090b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d02e      	beq.n	800911e <validate+0x72>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02a      	beq.n	800911e <validate+0x72>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d025      	beq.n	800911e <validate+0x72>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	889a      	ldrh	r2, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	88db      	ldrh	r3, [r3, #6]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d11e      	bne.n	800911e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe f864 	bl	80071b2 <lock_fs>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d014      	beq.n	800911a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd feba 	bl	8006e70 <disk_status>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d102      	bne.n	800910c <validate+0x60>
				res = FR_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
 800910a:	e008      	b.n	800911e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2100      	movs	r1, #0
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe f863 	bl	80071de <unlock_fs>
 8009118:	e001      	b.n	800911e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800911a:	230f      	movs	r3, #15
 800911c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <validate+0x7e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	e000      	b.n	800912c <validate+0x80>
 800912a:	2300      	movs	r3, #0
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	6013      	str	r3, [r2, #0]
	return res;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800914e:	f107 0310 	add.w	r3, r7, #16
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fcbb 	bl	8008ace <get_ldnumber>
 8009158:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da01      	bge.n	8009164 <f_mount+0x28>
 8009160:	230b      	movs	r3, #11
 8009162:	e048      	b.n	80091f6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009164:	4a26      	ldr	r2, [pc, #152]	@ (8009200 <f_mount+0xc4>)
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800916c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00f      	beq.n	8009194 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009174:	69b8      	ldr	r0, [r7, #24]
 8009176:	f7fe f995 	bl	80074a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fdb4 	bl	8009cec <ff_del_syncobj>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <f_mount+0x52>
 800918a:	2302      	movs	r3, #2
 800918c:	e033      	b.n	80091f6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00f      	beq.n	80091ba <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3310      	adds	r3, #16
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f000 fd7e 	bl	8009cac <ff_cre_syncobj>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <f_mount+0x7e>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e01d      	b.n	80091f6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4910      	ldr	r1, [pc, #64]	@ (8009200 <f_mount+0xc4>)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <f_mount+0x94>
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d001      	beq.n	80091d4 <f_mount+0x98>
 80091d0:	2300      	movs	r3, #0
 80091d2:	e010      	b.n	80091f6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80091d4:	f107 010c 	add.w	r1, r7, #12
 80091d8:	f107 0308 	add.w	r3, r7, #8
 80091dc:	2200      	movs	r2, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fd10 	bl	8008c04 <find_volume>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	7dfa      	ldrb	r2, [r7, #23]
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fd fff5 	bl	80071de <unlock_fs>
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000580 	.word	0x20000580

08009204 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b09a      	sub	sp, #104	@ 0x68
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <f_open+0x18>
 8009218:	2309      	movs	r3, #9
 800921a:	e1c5      	b.n	80095a8 <f_open+0x3a4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009222:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009224:	79fa      	ldrb	r2, [r7, #7]
 8009226:	f107 0110 	add.w	r1, r7, #16
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff fce8 	bl	8008c04 <find_volume>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800923a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800923e:	2b00      	cmp	r3, #0
 8009240:	f040 81a2 	bne.w	8009588 <f_open+0x384>
		dj.obj.fs = fs;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009248:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800924c:	f000 fd7a 	bl	8009d44 <ff_memalloc>
 8009250:	65b8      	str	r0, [r7, #88]	@ 0x58
 8009252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <f_open+0x62>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2111      	movs	r1, #17
 800925c:	4618      	mov	r0, r3
 800925e:	f7fd ffbe 	bl	80071de <unlock_fs>
 8009262:	2311      	movs	r3, #17
 8009264:	e1a0      	b.n	80095a8 <f_open+0x3a4>
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800926a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff fbb9 	bl	80089ec <follow_path>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009280:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009284:	2b00      	cmp	r3, #0
 8009286:	d118      	bne.n	80092ba <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009288:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800928c:	b25b      	sxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	da03      	bge.n	800929a <f_open+0x96>
				res = FR_INVALID_NAME;
 8009292:	2306      	movs	r3, #6
 8009294:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009298:	e00f      	b.n	80092ba <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf8c      	ite	hi
 80092a0:	2301      	movhi	r3, #1
 80092a2:	2300      	movls	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd ffb0 	bl	8007214 <chk_lock>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	f003 031c 	and.w	r3, r3, #28
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d07f      	beq.n	80093c4 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 80092c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d017      	beq.n	80092fc <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80092cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d10e      	bne.n	80092f2 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80092d4:	f7fd fffa 	bl	80072cc <enq_lock>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d006      	beq.n	80092ec <f_open+0xe8>
 80092de:	f107 0314 	add.w	r3, r7, #20
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff f8d2 	bl	800848c <dir_register>
 80092e8:	4603      	mov	r3, r0
 80092ea:	e000      	b.n	80092ee <f_open+0xea>
 80092ec:	2312      	movs	r3, #18
 80092ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	f043 0308 	orr.w	r3, r3, #8
 80092f8:	71fb      	strb	r3, [r7, #7]
 80092fa:	e010      	b.n	800931e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80092fc:	7ebb      	ldrb	r3, [r7, #26]
 80092fe:	f003 0311 	and.w	r3, r3, #17
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <f_open+0x10a>
					res = FR_DENIED;
 8009306:	2307      	movs	r3, #7
 8009308:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800930c:	e007      	b.n	800931e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <f_open+0x11a>
 8009318:	2308      	movs	r3, #8
 800931a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800931e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009322:	2b00      	cmp	r3, #0
 8009324:	d168      	bne.n	80093f8 <f_open+0x1f4>
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d063      	beq.n	80093f8 <f_open+0x1f4>
				dw = GET_FATTIME();
 8009330:	f7fd fb74 	bl	8006a1c <get_fattime>
 8009334:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	330e      	adds	r3, #14
 800933a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800933c:	4618      	mov	r0, r3
 800933e:	f7fd fe8e 	bl	800705e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009344:	3316      	adds	r3, #22
 8009346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009348:	4618      	mov	r0, r3
 800934a:	f7fd fe88 	bl	800705e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	330b      	adds	r3, #11
 8009352:	2220      	movs	r2, #32
 8009354:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fe0d 	bl	8007f7c <ld_clust>
 8009362:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009368:	2200      	movs	r2, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fe25 	bl	8007fba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009372:	331c      	adds	r3, #28
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f7fd fe71 	bl	800705e <st_dword>
					fs->wflag = 1;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2201      	movs	r2, #1
 8009380:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009384:	2b00      	cmp	r3, #0
 8009386:	d037      	beq.n	80093f8 <f_open+0x1f4>
						dw = fs->winsect;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800938c:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	2200      	movs	r2, #0
 8009394:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fb38 	bl	8007a0c <remove_chain>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80093a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d126      	bne.n	80093f8 <f_open+0x1f4>
							res = move_window(fs, dw);
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe f8e0 	bl	8007574 <move_window>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093be:	3a01      	subs	r2, #1
 80093c0:	615a      	str	r2, [r3, #20]
 80093c2:	e019      	b.n	80093f8 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80093c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d115      	bne.n	80093f8 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80093cc:	7ebb      	ldrb	r3, [r7, #26]
 80093ce:	f003 0310 	and.w	r3, r3, #16
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <f_open+0x1da>
					res = FR_NO_FILE;
 80093d6:	2304      	movs	r3, #4
 80093d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80093dc:	e00c      	b.n	80093f8 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <f_open+0x1f4>
 80093e8:	7ebb      	ldrb	r3, [r7, #26]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <f_open+0x1f4>
						res = FR_DENIED;
 80093f2:	2307      	movs	r3, #7
 80093f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80093f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d126      	bne.n	800944e <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <f_open+0x20e>
				mode |= FA_MODIFIED;
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009410:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800941a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b01      	cmp	r3, #1
 8009424:	bf8c      	ite	hi
 8009426:	2301      	movhi	r3, #1
 8009428:	2300      	movls	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	f107 0314 	add.w	r3, r7, #20
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd ff6b 	bl	8007310 <inc_lock>
 800943a:	4602      	mov	r2, r0
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <f_open+0x24a>
 8009448:	2302      	movs	r3, #2
 800944a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800944e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 8095 	bne.w	8009582 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fd8c 	bl	8007f7c <ld_clust>
 8009464:	4602      	mov	r2, r0
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	331c      	adds	r3, #28
 800946e:	4618      	mov	r0, r3
 8009470:	f7fd fdb7 	bl	8006fe2 <ld_dword>
 8009474:	4602      	mov	r2, r0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	88da      	ldrh	r2, [r3, #6]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	79fa      	ldrb	r2, [r7, #7]
 8009492:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3330      	adds	r3, #48	@ 0x30
 80094aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd fe21 	bl	80070f8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d060      	beq.n	8009582 <f_open+0x37e>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d05c      	beq.n	8009582 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	895b      	ldrh	r3, [r3, #10]
 80094d4:	025b      	lsls	r3, r3, #9
 80094d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094e4:	e016      	b.n	8009514 <f_open+0x310>
					clst = get_fat(&fp->obj, clst);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe f8fd 	bl	80076ea <get_fat>
 80094f0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80094f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d802      	bhi.n	80094fe <f_open+0x2fa>
 80094f8:	2302      	movs	r3, #2
 80094fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80094fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d102      	bne.n	800950c <f_open+0x308>
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800950c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800950e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009514:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009518:	2b00      	cmp	r3, #0
 800951a:	d103      	bne.n	8009524 <f_open+0x320>
 800951c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800951e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009520:	429a      	cmp	r2, r3
 8009522:	d8e0      	bhi.n	80094e6 <f_open+0x2e2>
				}
				fp->clust = clst;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009528:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800952a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800952e:	2b00      	cmp	r3, #0
 8009530:	d127      	bne.n	8009582 <f_open+0x37e>
 8009532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	2b00      	cmp	r3, #0
 800953a:	d022      	beq.n	8009582 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe f8b3 	bl	80076ac <clust2sect>
 8009546:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800954a:	2b00      	cmp	r3, #0
 800954c:	d103      	bne.n	8009556 <f_open+0x352>
						res = FR_INT_ERR;
 800954e:	2302      	movs	r3, #2
 8009550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009554:	e015      	b.n	8009582 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009558:	0a5a      	lsrs	r2, r3, #9
 800955a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	7858      	ldrb	r0, [r3, #1]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	2301      	movs	r3, #1
 8009572:	f7fd fcbf 	bl	8006ef4 <disk_read>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <f_open+0x37e>
 800957c:	2301      	movs	r3, #1
 800957e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009582:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009584:	f000 fbea 	bl	8009d5c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009588:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <f_open+0x392>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fd fe1d 	bl	80071de <unlock_fs>
 80095a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3768      	adds	r7, #104	@ 0x68
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08c      	sub	sp, #48	@ 0x30
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f107 0210 	add.w	r2, r7, #16
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fd6b 	bl	80090ac <validate>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80095dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <f_write+0x44>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7d5b      	ldrb	r3, [r3, #21]
 80095e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80095ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d009      	beq.n	8009608 <f_write+0x58>
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fd fdee 	bl	80071de <unlock_fs>
 8009602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009606:	e173      	b.n	80098f0 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d106      	bne.n	8009622 <f_write+0x72>
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2107      	movs	r1, #7
 8009618:	4618      	mov	r0, r3
 800961a:	f7fd fde0 	bl	80071de <unlock_fs>
 800961e:	2307      	movs	r3, #7
 8009620:	e166      	b.n	80098f0 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	699a      	ldr	r2, [r3, #24]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	441a      	add	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	429a      	cmp	r2, r3
 8009630:	f080 814b 	bcs.w	80098ca <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	43db      	mvns	r3, r3
 800963a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800963c:	e145      	b.n	80098ca <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 8101 	bne.w	800984e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	0a5b      	lsrs	r3, r3, #9
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	8952      	ldrh	r2, [r2, #10]
 8009656:	3a01      	subs	r2, #1
 8009658:	4013      	ands	r3, r2
 800965a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d14d      	bne.n	80096fe <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10c      	bne.n	8009684 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d11a      	bne.n	80096ac <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fa2b 	bl	8007ad6 <create_chain>
 8009680:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009682:	e013      	b.n	80096ac <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	4619      	mov	r1, r3
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7fe fab7 	bl	8007c06 <clmt_clust>
 8009698:	62b8      	str	r0, [r7, #40]	@ 0x28
 800969a:	e007      	b.n	80096ac <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f7fe fa16 	bl	8007ad6 <create_chain>
 80096aa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8110 	beq.w	80098d4 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80096b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d109      	bne.n	80096ce <f_write+0x11e>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2202      	movs	r2, #2
 80096be:	755a      	strb	r2, [r3, #21]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2102      	movs	r1, #2
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fd fd8a 	bl	80071de <unlock_fs>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e110      	b.n	80098f0 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d109      	bne.n	80096ea <f_write+0x13a>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	755a      	strb	r2, [r3, #21]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2101      	movs	r1, #1
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fd7c 	bl	80071de <unlock_fs>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e102      	b.n	80098f0 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d102      	bne.n	80096fe <f_write+0x14e>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	7d1b      	ldrb	r3, [r3, #20]
 8009702:	b25b      	sxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	da1d      	bge.n	8009744 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	7858      	ldrb	r0, [r3, #1]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	2301      	movs	r3, #1
 8009718:	f7fd fc0c 	bl	8006f34 <disk_write>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <f_write+0x186>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	755a      	strb	r2, [r3, #21]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2101      	movs	r1, #1
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fd56 	bl	80071de <unlock_fs>
 8009732:	2301      	movs	r3, #1
 8009734:	e0dc      	b.n	80098f0 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800973e:	b2da      	uxtb	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fd ffad 	bl	80076ac <clust2sect>
 8009752:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <f_write+0x1be>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2202      	movs	r2, #2
 800975e:	755a      	strb	r2, [r3, #21]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2102      	movs	r1, #2
 8009764:	4618      	mov	r0, r3
 8009766:	f7fd fd3a 	bl	80071de <unlock_fs>
 800976a:	2302      	movs	r3, #2
 800976c:	e0c0      	b.n	80098f0 <f_write+0x340>
			sect += csect;
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	4413      	add	r3, r2
 8009774:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	0a5b      	lsrs	r3, r3, #9
 800977a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d041      	beq.n	8009806 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	4413      	add	r3, r2
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	8952      	ldrh	r2, [r2, #10]
 800978c:	4293      	cmp	r3, r2
 800978e:	d905      	bls.n	800979c <f_write+0x1ec>
					cc = fs->csize - csect;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	895b      	ldrh	r3, [r3, #10]
 8009794:	461a      	mov	r2, r3
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	7858      	ldrb	r0, [r3, #1]
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	69f9      	ldr	r1, [r7, #28]
 80097a6:	f7fd fbc5 	bl	8006f34 <disk_write>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <f_write+0x214>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	755a      	strb	r2, [r3, #21]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2101      	movs	r1, #1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd fd0f 	bl	80071de <unlock_fs>
 80097c0:	2301      	movs	r3, #1
 80097c2:	e095      	b.n	80098f0 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	6a3a      	ldr	r2, [r7, #32]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d915      	bls.n	80097fe <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a1a      	ldr	r2, [r3, #32]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	025b      	lsls	r3, r3, #9
 80097e2:	69fa      	ldr	r2, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097ea:	4619      	mov	r1, r3
 80097ec:	f7fd fc63 	bl	80070b6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	7d1b      	ldrb	r3, [r3, #20]
 80097f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	025b      	lsls	r3, r3, #9
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009804:	e044      	b.n	8009890 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	429a      	cmp	r2, r3
 800980e:	d01b      	beq.n	8009848 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009818:	429a      	cmp	r2, r3
 800981a:	d215      	bcs.n	8009848 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	7858      	ldrb	r0, [r3, #1]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009826:	2301      	movs	r3, #1
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	f7fd fb63 	bl	8006ef4 <disk_read>
 800982e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	755a      	strb	r2, [r3, #21]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2101      	movs	r1, #1
 800983e:	4618      	mov	r0, r3
 8009840:	f7fd fccd 	bl	80071de <unlock_fs>
 8009844:	2301      	movs	r3, #1
 8009846:	e053      	b.n	80098f0 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009856:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800985c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d901      	bls.n	8009868 <f_write+0x2b8>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009876:	4413      	add	r3, r2
 8009878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987a:	69f9      	ldr	r1, [r7, #28]
 800987c:	4618      	mov	r0, r3
 800987e:	f7fd fc1a 	bl	80070b6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	7d1b      	ldrb	r3, [r3, #20]
 8009886:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800988a:	b2da      	uxtb	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	4413      	add	r3, r2
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	699a      	ldr	r2, [r3, #24]
 800989c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989e:	441a      	add	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	619a      	str	r2, [r3, #24]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	bf38      	it	cc
 80098b0:	461a      	movcc	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	60da      	str	r2, [r3, #12]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098bc:	441a      	add	r2, r3
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f47f aeb6 	bne.w	800963e <f_write+0x8e>
 80098d2:	e000      	b.n	80098d6 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	7d1b      	ldrb	r3, [r3, #20]
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2100      	movs	r1, #0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fd fc78 	bl	80071de <unlock_fs>
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3730      	adds	r7, #48	@ 0x30
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f107 0208 	add.w	r2, r7, #8
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fbcf 	bl	80090ac <validate>
 800990e:	4603      	mov	r3, r0
 8009910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d16d      	bne.n	80099f4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7d1b      	ldrb	r3, [r3, #20]
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d067      	beq.n	80099f4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	7d1b      	ldrb	r3, [r3, #20]
 8009928:	b25b      	sxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	da1a      	bge.n	8009964 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	7858      	ldrb	r0, [r3, #1]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	2301      	movs	r3, #1
 800993e:	f7fd faf9 	bl	8006f34 <disk_write>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d006      	beq.n	8009956 <f_sync+0x5e>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2101      	movs	r1, #1
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd fc46 	bl	80071de <unlock_fs>
 8009952:	2301      	movs	r3, #1
 8009954:	e055      	b.n	8009a02 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	7d1b      	ldrb	r3, [r3, #20]
 800995a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800995e:	b2da      	uxtb	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009964:	f7fd f85a 	bl	8006a1c <get_fattime>
 8009968:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	f7fd fdfe 	bl	8007574 <move_window>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d138      	bne.n	80099f4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009986:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	330b      	adds	r3, #11
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	330b      	adds	r3, #11
 8009992:	f042 0220 	orr.w	r2, r2, #32
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	461a      	mov	r2, r3
 80099a4:	68f9      	ldr	r1, [r7, #12]
 80099a6:	f7fe fb08 	bl	8007fba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f103 021c 	add.w	r2, r3, #28
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fd fb51 	bl	800705e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3316      	adds	r3, #22
 80099c0:	6939      	ldr	r1, [r7, #16]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fd fb4b 	bl	800705e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3312      	adds	r3, #18
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fd fb2a 	bl	8007028 <st_word>
					fs->wflag = 1;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2201      	movs	r2, #1
 80099d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fd fdf7 	bl	80075d0 <sync_fs>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7d1b      	ldrb	r3, [r3, #20]
 80099ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	7dfa      	ldrb	r2, [r7, #23]
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fd fbef 	bl	80071de <unlock_fs>
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ff70 	bl	80098f8 <f_sync>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d11d      	bne.n	8009a5e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f107 0208 	add.w	r2, r7, #8
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fb3e 	bl	80090ac <validate>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d111      	bne.n	8009a5e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fd fcf4 	bl	800742c <dec_lock>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fd fbc0 	bl	80071de <unlock_fs>
#endif
		}
	}
	return res;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a76:	2301      	movs	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009a80:	7a5b      	ldrb	r3, [r3, #9]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d131      	bne.n	8009aec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a88:	4b1c      	ldr	r3, [pc, #112]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009a8a:	7a5b      	ldrb	r3, [r3, #9]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	4b1a      	ldr	r3, [pc, #104]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009a92:	2100      	movs	r1, #0
 8009a94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a96:	4b19      	ldr	r3, [pc, #100]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009a98:	7a5b      	ldrb	r3, [r3, #9]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	4a17      	ldr	r2, [pc, #92]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aa6:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009aa8:	7a5b      	ldrb	r3, [r3, #9]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b13      	ldr	r3, [pc, #76]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009ab0:	4413      	add	r3, r2
 8009ab2:	79fa      	ldrb	r2, [r7, #7]
 8009ab4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ab6:	4b11      	ldr	r3, [pc, #68]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	b2d1      	uxtb	r1, r2
 8009ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8009afc <FATFS_LinkDriverEx+0x94>)
 8009ac2:	7251      	strb	r1, [r2, #9]
 8009ac4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ac6:	7dbb      	ldrb	r3, [r7, #22]
 8009ac8:	3330      	adds	r3, #48	@ 0x30
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	223a      	movs	r2, #58	@ 0x3a
 8009ad6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3302      	adds	r3, #2
 8009adc:	222f      	movs	r2, #47	@ 0x2f
 8009ade:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3303      	adds	r3, #3
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	200005a8 	.word	0x200005a8

08009b00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ffaa 	bl	8009a68 <FATFS_LinkDriverEx>
 8009b14:	4603      	mov	r3, r0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b30:	d802      	bhi.n	8009b38 <ff_convert+0x18>
		c = chr;
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	81fb      	strh	r3, [r7, #14]
 8009b36:	e025      	b.n	8009b84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009b3e:	88fb      	ldrh	r3, [r7, #6]
 8009b40:	2bff      	cmp	r3, #255	@ 0xff
 8009b42:	d805      	bhi.n	8009b50 <ff_convert+0x30>
 8009b44:	88fb      	ldrh	r3, [r7, #6]
 8009b46:	3b80      	subs	r3, #128	@ 0x80
 8009b48:	4a12      	ldr	r2, [pc, #72]	@ (8009b94 <ff_convert+0x74>)
 8009b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b4e:	e000      	b.n	8009b52 <ff_convert+0x32>
 8009b50:	2300      	movs	r3, #0
 8009b52:	81fb      	strh	r3, [r7, #14]
 8009b54:	e016      	b.n	8009b84 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009b56:	2300      	movs	r3, #0
 8009b58:	81fb      	strh	r3, [r7, #14]
 8009b5a:	e009      	b.n	8009b70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009b5c:	89fb      	ldrh	r3, [r7, #14]
 8009b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009b94 <ff_convert+0x74>)
 8009b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b64:	88fa      	ldrh	r2, [r7, #6]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d006      	beq.n	8009b78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009b6a:	89fb      	ldrh	r3, [r7, #14]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	81fb      	strh	r3, [r7, #14]
 8009b70:	89fb      	ldrh	r3, [r7, #14]
 8009b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b74:	d9f2      	bls.n	8009b5c <ff_convert+0x3c>
 8009b76:	e000      	b.n	8009b7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009b78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009b7a:	89fb      	ldrh	r3, [r7, #14]
 8009b7c:	3380      	adds	r3, #128	@ 0x80
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009b84:	89fb      	ldrh	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	0800dd1c 	.word	0x0800dd1c

08009b98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba8:	d201      	bcs.n	8009bae <ff_wtoupper+0x16>
 8009baa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca4 <ff_wtoupper+0x10c>)
 8009bac:	e000      	b.n	8009bb0 <ff_wtoupper+0x18>
 8009bae:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca8 <ff_wtoupper+0x110>)
 8009bb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	1c9a      	adds	r2, r3, #2
 8009bb6:	617a      	str	r2, [r7, #20]
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009bbc:	8a7b      	ldrh	r3, [r7, #18]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d068      	beq.n	8009c94 <ff_wtoupper+0xfc>
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	8a7b      	ldrh	r3, [r7, #18]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d364      	bcc.n	8009c94 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	1c9a      	adds	r2, r3, #2
 8009bce:	617a      	str	r2, [r7, #20]
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	823b      	strh	r3, [r7, #16]
 8009bd4:	8a3b      	ldrh	r3, [r7, #16]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	81fb      	strh	r3, [r7, #14]
 8009bda:	8a3b      	ldrh	r3, [r7, #16]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009be0:	88fa      	ldrh	r2, [r7, #6]
 8009be2:	8a79      	ldrh	r1, [r7, #18]
 8009be4:	8a3b      	ldrh	r3, [r7, #16]
 8009be6:	440b      	add	r3, r1
 8009be8:	429a      	cmp	r2, r3
 8009bea:	da49      	bge.n	8009c80 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d84f      	bhi.n	8009c92 <ff_wtoupper+0xfa>
 8009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf8 <ff_wtoupper+0x60>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c2f 	.word	0x08009c2f
 8009c00:	08009c45 	.word	0x08009c45
 8009c04:	08009c4d 	.word	0x08009c4d
 8009c08:	08009c55 	.word	0x08009c55
 8009c0c:	08009c5d 	.word	0x08009c5d
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c75 	.word	0x08009c75
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	8a7b      	ldrh	r3, [r7, #18]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4413      	add	r3, r2
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	80fb      	strh	r3, [r7, #6]
 8009c2c:	e027      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009c2e:	88fa      	ldrh	r2, [r7, #6]
 8009c30:	8a7b      	ldrh	r3, [r7, #18]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	80fb      	strh	r3, [r7, #6]
 8009c42:	e01c      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	3b10      	subs	r3, #16
 8009c48:	80fb      	strh	r3, [r7, #6]
 8009c4a:	e018      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	3b20      	subs	r3, #32
 8009c50:	80fb      	strh	r3, [r7, #6]
 8009c52:	e014      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	3b30      	subs	r3, #48	@ 0x30
 8009c58:	80fb      	strh	r3, [r7, #6]
 8009c5a:	e010      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	3b1a      	subs	r3, #26
 8009c60:	80fb      	strh	r3, [r7, #6]
 8009c62:	e00c      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	3308      	adds	r3, #8
 8009c68:	80fb      	strh	r3, [r7, #6]
 8009c6a:	e008      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009c6c:	88fb      	ldrh	r3, [r7, #6]
 8009c6e:	3b50      	subs	r3, #80	@ 0x50
 8009c70:	80fb      	strh	r3, [r7, #6]
 8009c72:	e004      	b.n	8009c7e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009c7a:	80fb      	strh	r3, [r7, #6]
 8009c7c:	bf00      	nop
			}
			break;
 8009c7e:	e008      	b.n	8009c92 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d195      	bne.n	8009bb2 <ff_wtoupper+0x1a>
 8009c86:	8a3b      	ldrh	r3, [r7, #16]
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009c90:	e78f      	b.n	8009bb2 <ff_wtoupper+0x1a>
			break;
 8009c92:	bf00      	nop
	}

	return chr;
 8009c94:	88fb      	ldrh	r3, [r7, #6]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	0800de1c 	.word	0x0800de1c
 8009ca8:	0800e010 	.word	0x0800e010

08009cac <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f900 	bl	8009ecc <osSemaphoreCreate>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bf14      	ite	ne
 8009cda:	2301      	movne	r3, #1
 8009cdc:	2300      	moveq	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	617b      	str	r3, [r7, #20]

    return ret;
 8009ce2:	697b      	ldr	r3, [r7, #20]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f99f 	bl	800a038 <osSemaphoreDelete>
#endif
    return 1;
 8009cfa:	2301      	movs	r3, #1
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009d10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f90b 	bl	8009f30 <osSemaphoreWait>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009d20:	2301      	movs	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009d24:	68fb      	ldr	r3, [r7, #12]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f948 	bl	8009fcc <osSemaphoreRelease>
#endif
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f002 fd85 	bl	800c85c <pvPortMalloc>
 8009d52:	4603      	mov	r3, r0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f002 fe47 	bl	800c9f8 <vPortFree>
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	4603      	mov	r3, r0
 8009d7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d84:	2b84      	cmp	r3, #132	@ 0x84
 8009d86:	d005      	beq.n	8009d94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	3303      	adds	r3, #3
 8009d92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	607b      	str	r3, [r7, #4]
  return(result);
 8009dae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009dca:	f001 fca3 	bl	800b714 <vTaskStartScheduler>
  
  return osOK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009dd8:	f002 f8c8 	bl	800bf6c <xTaskGetSchedulerState>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <osKernelRunning+0x12>
    return 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <osKernelRunning+0x14>
  else
    return 1;
 8009de6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	bd80      	pop	{r7, pc}

08009dec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009df0:	f7ff ffd7 	bl	8009da2 <inHandlerMode>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009dfa:	f001 fda9 	bl	800b950 <xTaskGetTickCountFromISR>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	e002      	b.n	8009e08 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009e02:	f001 fd95 	bl	800b930 <xTaskGetTickCount>
 8009e06:	4603      	mov	r3, r0
  }
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e0e:	b089      	sub	sp, #36	@ 0x24
 8009e10:	af04      	add	r7, sp, #16
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d020      	beq.n	8009e60 <osThreadCreate+0x54>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01c      	beq.n	8009e60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685c      	ldr	r4, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691e      	ldr	r6, [r3, #16]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff ff9a 	bl	8009d72 <makeFreeRtosPriority>
 8009e3e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e48:	9202      	str	r2, [sp, #8]
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	9100      	str	r1, [sp, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	4632      	mov	r2, r6
 8009e52:	4629      	mov	r1, r5
 8009e54:	4620      	mov	r0, r4
 8009e56:	f001 f9fb 	bl	800b250 <xTaskCreateStatic>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	e01c      	b.n	8009e9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685c      	ldr	r4, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e6c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff ff7c 	bl	8009d72 <makeFreeRtosPriority>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	f107 030c 	add.w	r3, r7, #12
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	9200      	str	r2, [sp, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	4632      	mov	r2, r6
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f001 fa40 	bl	800b310 <xTaskCreate>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d001      	beq.n	8009e9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e000      	b.n	8009e9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ea4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <osDelay+0x16>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	e000      	b.n	8009ebc <osDelay+0x18>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fb5f 	bl	800b580 <vTaskDelay>
  
  return osOK;
 8009ec2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d10a      	bne.n	8009efa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2203      	movs	r2, #3
 8009eea:	9200      	str	r2, [sp, #0]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f000 fabb 	bl	800a46c <xQueueGenericCreateStatic>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	e016      	b.n	8009f28 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e014      	b.n	8009f28 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d110      	bne.n	8009f26 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009f04:	2203      	movs	r2, #3
 8009f06:	2100      	movs	r1, #0
 8009f08:	2001      	movs	r0, #1
 8009f0a:	f000 fb2c 	bl	800a566 <xQueueGenericCreate>
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <osSemaphoreCreate+0x56>
 8009f16:	2300      	movs	r3, #0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fb7d 	bl	800a61c <xQueueGenericSend>
      return sema;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	e000      	b.n	8009f28 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009f26:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009f44:	2380      	movs	r3, #128	@ 0x80
 8009f46:	e03a      	b.n	8009fbe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f52:	d103      	bne.n	8009f5c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	e009      	b.n	8009f70 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <osSemaphoreWait+0x40>
      ticks = 1;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009f70:	f7ff ff17 	bl	8009da2 <inHandlerMode>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d017      	beq.n	8009faa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	461a      	mov	r2, r3
 8009f80:	2100      	movs	r1, #0
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 ff6c 	bl	800ae60 <xQueueReceiveFromISR>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d001      	beq.n	8009f92 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009f8e:	23ff      	movs	r3, #255	@ 0xff
 8009f90:	e015      	b.n	8009fbe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d011      	beq.n	8009fbc <osSemaphoreWait+0x8c>
 8009f98:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc8 <osSemaphoreWait+0x98>)
 8009f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	e008      	b.n	8009fbc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fe47 	bl	800ac40 <xQueueSemaphoreTake>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d001      	beq.n	8009fbc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009fb8:	23ff      	movs	r3, #255	@ 0xff
 8009fba:	e000      	b.n	8009fbe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009fdc:	f7ff fee1 	bl	8009da2 <inHandlerMode>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d016      	beq.n	800a014 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fcb5 	bl	800a95c <xQueueGiveFromISR>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d001      	beq.n	8009ffc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009ff8:	23ff      	movs	r3, #255	@ 0xff
 8009ffa:	e017      	b.n	800a02c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d013      	beq.n	800a02a <osSemaphoreRelease+0x5e>
 800a002:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <osSemaphoreRelease+0x68>)
 800a004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	e00a      	b.n	800a02a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a014:	2300      	movs	r3, #0
 800a016:	2200      	movs	r2, #0
 800a018:	2100      	movs	r1, #0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fafe 	bl	800a61c <xQueueGenericSend>
 800a020:	4603      	mov	r3, r0
 800a022:	2b01      	cmp	r3, #1
 800a024:	d001      	beq.n	800a02a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a026:	23ff      	movs	r3, #255	@ 0xff
 800a028:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a040:	f7ff feaf 	bl	8009da2 <inHandlerMode>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a04a:	2382      	movs	r3, #130	@ 0x82
 800a04c:	e003      	b.n	800a056 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 ff88 	bl	800af64 <vQueueDelete>

  return osOK; 
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a05e:	b590      	push	{r4, r7, lr}
 800a060:	b085      	sub	sp, #20
 800a062:	af02      	add	r7, sp, #8
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d011      	beq.n	800a094 <osMessageCreate+0x36>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00d      	beq.n	800a094 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6859      	ldr	r1, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	2400      	movs	r4, #0
 800a08a:	9400      	str	r4, [sp, #0]
 800a08c:	f000 f9ee 	bl	800a46c <xQueueGenericCreateStatic>
 800a090:	4603      	mov	r3, r0
 800a092:	e008      	b.n	800a0a6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f000 fa61 	bl	800a566 <xQueueGenericCreate>
 800a0a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd90      	pop	{r4, r7, pc}
	...

0800a0b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <osMessagePut+0x1e>
    ticks = 1;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a0ce:	f7ff fe68 	bl	8009da2 <inHandlerMode>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d018      	beq.n	800a10a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a0d8:	f107 0210 	add.w	r2, r7, #16
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fb9c 	bl	800a820 <xQueueGenericSendFromISR>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d001      	beq.n	800a0f2 <osMessagePut+0x42>
      return osErrorOS;
 800a0ee:	23ff      	movs	r3, #255	@ 0xff
 800a0f0:	e018      	b.n	800a124 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d014      	beq.n	800a122 <osMessagePut+0x72>
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a12c <osMessagePut+0x7c>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	e00b      	b.n	800a122 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a10a:	f107 0108 	add.w	r1, r7, #8
 800a10e:	2300      	movs	r3, #0
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 fa82 	bl	800a61c <xQueueGenericSend>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d001      	beq.n	800a122 <osMessagePut+0x72>
      return osErrorOS;
 800a11e:	23ff      	movs	r3, #255	@ 0xff
 800a120:	e000      	b.n	800a124 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b08b      	sub	sp, #44	@ 0x2c
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a14a:	2380      	movs	r3, #128	@ 0x80
 800a14c:	617b      	str	r3, [r7, #20]
    return event;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	461c      	mov	r4, r3
 800a152:	f107 0314 	add.w	r3, r7, #20
 800a156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a15a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a15e:	e054      	b.n	800a20a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a160:	2300      	movs	r3, #0
 800a162:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16e:	d103      	bne.n	800a178 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
 800a176:	e009      	b.n	800a18c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d006      	beq.n	800a18c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <osMessageGet+0x5c>
      ticks = 1;
 800a188:	2301      	movs	r3, #1
 800a18a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a18c:	f7ff fe09 	bl	8009da2 <inHandlerMode>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d01c      	beq.n	800a1d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a196:	f107 0220 	add.w	r2, r7, #32
 800a19a:	f107 0314 	add.w	r3, r7, #20
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	68b8      	ldr	r0, [r7, #8]
 800a1a4:	f000 fe5c 	bl	800ae60 <xQueueReceiveFromISR>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d102      	bne.n	800a1b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a1ae:	2310      	movs	r3, #16
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e001      	b.n	800a1b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01d      	beq.n	800a1fa <osMessageGet+0xca>
 800a1be:	4b15      	ldr	r3, [pc, #84]	@ (800a214 <osMessageGet+0xe4>)
 800a1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	e014      	b.n	800a1fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a1d0:	f107 0314 	add.w	r3, r7, #20
 800a1d4:	3304      	adds	r3, #4
 800a1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1d8:	4619      	mov	r1, r3
 800a1da:	68b8      	ldr	r0, [r7, #8]
 800a1dc:	f000 fc4e 	bl	800aa7c <xQueueReceive>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d102      	bne.n	800a1ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e006      	b.n	800a1fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <osMessageGet+0xc6>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e000      	b.n	800a1f8 <osMessageGet+0xc8>
 800a1f6:	2340      	movs	r3, #64	@ 0x40
 800a1f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	461c      	mov	r4, r3
 800a1fe:	f107 0314 	add.w	r3, r7, #20
 800a202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	372c      	adds	r7, #44	@ 0x2c
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd90      	pop	{r4, r7, pc}
 800a212:	bf00      	nop
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 f9e3 	bl	800b5ec <vTaskSuspend>
  
  return osOK;
 800a226:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f103 0208 	add.w	r2, r3, #8
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f04f 32ff 	mov.w	r2, #4294967295
 800a248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f103 0208 	add.w	r2, r3, #8
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f103 0208 	add.w	r2, r3, #8
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d103      	bne.n	800a2f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e00c      	b.n	800a30c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e002      	b.n	800a300 <vListInsert+0x2e>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d2f6      	bcs.n	800a2fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
}
 800a338:	bf00      	nop
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6892      	ldr	r2, [r2, #8]
 800a35a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6852      	ldr	r2, [r2, #4]
 800a364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d103      	bne.n	800a378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10b      	bne.n	800a3c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3be:	bf00      	nop
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3c4:	f002 f928 	bl	800c618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	68f9      	ldr	r1, [r7, #12]
 800a3d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a3d4:	fb01 f303 	mul.w	r3, r1, r3
 800a3d8:	441a      	add	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	68f9      	ldr	r1, [r7, #12]
 800a3f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a3fa:	fb01 f303 	mul.w	r3, r1, r3
 800a3fe:	441a      	add	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	22ff      	movs	r2, #255	@ 0xff
 800a408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	22ff      	movs	r2, #255	@ 0xff
 800a410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d114      	bne.n	800a444 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d01a      	beq.n	800a458 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3310      	adds	r3, #16
 800a426:	4618      	mov	r0, r3
 800a428:	f001 fbe0 	bl	800bbec <xTaskRemoveFromEventList>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d012      	beq.n	800a458 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a432:	4b0d      	ldr	r3, [pc, #52]	@ (800a468 <xQueueGenericReset+0xd0>)
 800a434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	e009      	b.n	800a458 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3310      	adds	r3, #16
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fef1 	bl	800a230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3324      	adds	r3, #36	@ 0x24
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff feec 	bl	800a230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a458:	f002 f910 	bl	800c67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a45c:	2301      	movs	r3, #1
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	@ 0x38
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <xQueueGenericCreateStatic+0x56>
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <xQueueGenericCreateStatic+0x5a>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueGenericCreateStatic+0x5c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10b      	bne.n	800a4e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <xQueueGenericCreateStatic+0x84>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <xQueueGenericCreateStatic+0x88>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e000      	b.n	800a4f6 <xQueueGenericCreateStatic+0x8a>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	61fb      	str	r3, [r7, #28]
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a512:	2348      	movs	r3, #72	@ 0x48
 800a514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b48      	cmp	r3, #72	@ 0x48
 800a51a:	d00b      	beq.n	800a534 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	61bb      	str	r3, [r7, #24]
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a534:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00d      	beq.n	800a55c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a548:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 f840 	bl	800a5dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a55e:	4618      	mov	r0, r3
 800a560:	3730      	adds	r7, #48	@ 0x30
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a566:	b580      	push	{r7, lr}
 800a568:	b08a      	sub	sp, #40	@ 0x28
 800a56a:	af02      	add	r7, sp, #8
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	4613      	mov	r3, r2
 800a572:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10b      	bne.n	800a592 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	613b      	str	r3, [r7, #16]
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	e7fd      	b.n	800a58e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	fb02 f303 	mul.w	r3, r2, r3
 800a59a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3348      	adds	r3, #72	@ 0x48
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f002 f95b 	bl	800c85c <pvPortMalloc>
 800a5a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d011      	beq.n	800a5d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	3348      	adds	r3, #72	@ 0x48
 800a5b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5c0:	79fa      	ldrb	r2, [r7, #7]
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f805 	bl	800a5dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	e002      	b.n	800a5fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a60a:	2101      	movs	r1, #1
 800a60c:	69b8      	ldr	r0, [r7, #24]
 800a60e:	f7ff fec3 	bl	800a398 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08e      	sub	sp, #56	@ 0x38
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a62a:	2300      	movs	r3, #0
 800a62c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10b      	bne.n	800a650 <xQueueGenericSend+0x34>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	e7fd      	b.n	800a64c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d103      	bne.n	800a65e <xQueueGenericSend+0x42>
 800a656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <xQueueGenericSend+0x46>
 800a65e:	2301      	movs	r3, #1
 800a660:	e000      	b.n	800a664 <xQueueGenericSend+0x48>
 800a662:	2300      	movs	r3, #0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <xQueueGenericSend+0x64>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d103      	bne.n	800a68e <xQueueGenericSend+0x72>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <xQueueGenericSend+0x76>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <xQueueGenericSend+0x78>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <xQueueGenericSend+0x94>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	623b      	str	r3, [r7, #32]
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6b0:	f001 fc5c 	bl	800bf6c <xTaskGetSchedulerState>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <xQueueGenericSend+0xa4>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <xQueueGenericSend+0xa8>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <xQueueGenericSend+0xaa>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10b      	bne.n	800a6e2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61fb      	str	r3, [r7, #28]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6e2:	f001 ff99 	bl	800c618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d302      	bcc.n	800a6f8 <xQueueGenericSend+0xdc>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d129      	bne.n	800a74c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6fe:	f000 fc6d 	bl	800afdc <prvCopyDataToQueue>
 800a702:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d010      	beq.n	800a72e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	3324      	adds	r3, #36	@ 0x24
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fa6b 	bl	800bbec <xTaskRemoveFromEventList>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d013      	beq.n	800a744 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a71c:	4b3f      	ldr	r3, [pc, #252]	@ (800a81c <xQueueGenericSend+0x200>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	e00a      	b.n	800a744 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a734:	4b39      	ldr	r3, [pc, #228]	@ (800a81c <xQueueGenericSend+0x200>)
 800a736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a744:	f001 ff9a 	bl	800c67c <vPortExitCritical>
				return pdPASS;
 800a748:	2301      	movs	r3, #1
 800a74a:	e063      	b.n	800a814 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d103      	bne.n	800a75a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a752:	f001 ff93 	bl	800c67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a756:	2300      	movs	r3, #0
 800a758:	e05c      	b.n	800a814 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a760:	f107 0314 	add.w	r3, r7, #20
 800a764:	4618      	mov	r0, r3
 800a766:	f001 faa5 	bl	800bcb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a76a:	2301      	movs	r3, #1
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a76e:	f001 ff85 	bl	800c67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a772:	f001 f831 	bl	800b7d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a776:	f001 ff4f 	bl	800c618 <vPortEnterCritical>
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a780:	b25b      	sxtb	r3, r3
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	d103      	bne.n	800a790 <xQueueGenericSend+0x174>
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a796:	b25b      	sxtb	r3, r3
 800a798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79c:	d103      	bne.n	800a7a6 <xQueueGenericSend+0x18a>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7a6:	f001 ff69 	bl	800c67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7aa:	1d3a      	adds	r2, r7, #4
 800a7ac:	f107 0314 	add.w	r3, r7, #20
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 fa94 	bl	800bce0 <xTaskCheckForTimeOut>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d124      	bne.n	800a808 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7c0:	f000 fd04 	bl	800b1cc <prvIsQueueFull>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d018      	beq.n	800a7fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	3310      	adds	r3, #16
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 f9e4 	bl	800bba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7da:	f000 fc8f 	bl	800b0fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7de:	f001 f809 	bl	800b7f4 <xTaskResumeAll>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f af7c 	bne.w	800a6e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a7ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a81c <xQueueGenericSend+0x200>)
 800a7ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	e772      	b.n	800a6e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7fe:	f000 fc7d 	bl	800b0fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a802:	f000 fff7 	bl	800b7f4 <xTaskResumeAll>
 800a806:	e76c      	b.n	800a6e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a80a:	f000 fc77 	bl	800b0fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a80e:	f000 fff1 	bl	800b7f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a812:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a814:	4618      	mov	r0, r3
 800a816:	3738      	adds	r7, #56	@ 0x38
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b090      	sub	sp, #64	@ 0x40
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d103      	bne.n	800a85e <xQueueGenericSendFromISR+0x3e>
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <xQueueGenericSendFromISR+0x42>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueGenericSendFromISR+0x44>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	e7fd      	b.n	800a87c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2b02      	cmp	r3, #2
 800a884:	d103      	bne.n	800a88e <xQueueGenericSendFromISR+0x6e>
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <xQueueGenericSendFromISR+0x72>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGenericSendFromISR+0x74>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	623b      	str	r3, [r7, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	e7fd      	b.n	800a8ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8b0:	f001 ff92 	bl	800c7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8b4:	f3ef 8211 	mrs	r2, BASEPRI
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	61fa      	str	r2, [r7, #28]
 800a8ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <xQueueGenericSendFromISR+0xc2>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d12f      	bne.n	800a942 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a8f8:	f000 fb70 	bl	800afdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d112      	bne.n	800a92c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d016      	beq.n	800a93c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	3324      	adds	r3, #36	@ 0x24
 800a912:	4618      	mov	r0, r3
 800a914:	f001 f96a 	bl	800bbec <xTaskRemoveFromEventList>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00e      	beq.n	800a93c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00b      	beq.n	800a93c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	e007      	b.n	800a93c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a92c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a930:	3301      	adds	r3, #1
 800a932:	b2db      	uxtb	r3, r3
 800a934:	b25a      	sxtb	r2, r3
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a93c:	2301      	movs	r3, #1
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a940:	e001      	b.n	800a946 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a948:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a954:	4618      	mov	r0, r3
 800a956:	3740      	adds	r7, #64	@ 0x40
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	@ 0x38
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	623b      	str	r3, [r7, #32]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	61fb      	str	r3, [r7, #28]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d103      	bne.n	800a9b8 <xQueueGiveFromISR+0x5c>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <xQueueGiveFromISR+0x60>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <xQueueGiveFromISR+0x62>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10b      	bne.n	800a9da <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61bb      	str	r3, [r7, #24]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9da:	f001 fefd 	bl	800c7d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a9de:	f3ef 8211 	mrs	r2, BASEPRI
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	617a      	str	r2, [r7, #20]
 800a9f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a9f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d22b      	bcs.n	800aa62 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa24:	d112      	bne.n	800aa4c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d016      	beq.n	800aa5c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	3324      	adds	r3, #36	@ 0x24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f001 f8da 	bl	800bbec <xTaskRemoveFromEventList>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00e      	beq.n	800aa5c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e007      	b.n	800aa5c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa50:	3301      	adds	r3, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	b25a      	sxtb	r2, r3
 800aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa60:	e001      	b.n	800aa66 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f383 8811 	msr	BASEPRI, r3
}
 800aa70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3738      	adds	r7, #56	@ 0x38
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08c      	sub	sp, #48	@ 0x30
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10b      	bne.n	800aaae <xQueueReceive+0x32>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	623b      	str	r3, [r7, #32]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d103      	bne.n	800aabc <xQueueReceive+0x40>
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <xQueueReceive+0x44>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <xQueueReceive+0x46>
 800aac0:	2300      	movs	r3, #0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <xQueueReceive+0x62>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	61fb      	str	r3, [r7, #28]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aade:	f001 fa45 	bl	800bf6c <xTaskGetSchedulerState>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <xQueueReceive+0x72>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <xQueueReceive+0x76>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <xQueueReceive+0x78>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10b      	bne.n	800ab10 <xQueueReceive+0x94>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	61bb      	str	r3, [r7, #24]
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	e7fd      	b.n	800ab0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab10:	f001 fd82 	bl	800c618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01f      	beq.n	800ab60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab20:	68b9      	ldr	r1, [r7, #8]
 800ab22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab24:	f000 fac4 	bl	800b0b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	1e5a      	subs	r2, r3, #1
 800ab2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00f      	beq.n	800ab58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	3310      	adds	r3, #16
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f855 	bl	800bbec <xTaskRemoveFromEventList>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab48:	4b3c      	ldr	r3, [pc, #240]	@ (800ac3c <xQueueReceive+0x1c0>)
 800ab4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab58:	f001 fd90 	bl	800c67c <vPortExitCritical>
				return pdPASS;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e069      	b.n	800ac34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab66:	f001 fd89 	bl	800c67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e062      	b.n	800ac34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab74:	f107 0310 	add.w	r3, r7, #16
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f89b 	bl	800bcb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab82:	f001 fd7b 	bl	800c67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab86:	f000 fe27 	bl	800b7d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab8a:	f001 fd45 	bl	800c618 <vPortEnterCritical>
 800ab8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab94:	b25b      	sxtb	r3, r3
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d103      	bne.n	800aba4 <xQueueReceive+0x128>
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abaa:	b25b      	sxtb	r3, r3
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d103      	bne.n	800abba <xQueueReceive+0x13e>
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abba:	f001 fd5f 	bl	800c67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abbe:	1d3a      	adds	r2, r7, #4
 800abc0:	f107 0310 	add.w	r3, r7, #16
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f001 f88a 	bl	800bce0 <xTaskCheckForTimeOut>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d123      	bne.n	800ac1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd4:	f000 fae4 	bl	800b1a0 <prvIsQueueEmpty>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d017      	beq.n	800ac0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	3324      	adds	r3, #36	@ 0x24
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 ffda 	bl	800bba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abee:	f000 fa85 	bl	800b0fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abf2:	f000 fdff 	bl	800b7f4 <xTaskResumeAll>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d189      	bne.n	800ab10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800abfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ac3c <xQueueReceive+0x1c0>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	e780      	b.n	800ab10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac10:	f000 fa74 	bl	800b0fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac14:	f000 fdee 	bl	800b7f4 <xTaskResumeAll>
 800ac18:	e77a      	b.n	800ab10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac1c:	f000 fa6e 	bl	800b0fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac20:	f000 fde8 	bl	800b7f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac26:	f000 fabb 	bl	800b1a0 <prvIsQueueEmpty>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f43f af6f 	beq.w	800ab10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3730      	adds	r7, #48	@ 0x30
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	@ 0x38
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10b      	bne.n	800ac74 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	623b      	str	r3, [r7, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	bf00      	nop
 800ac72:	e7fd      	b.n	800ac70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00b      	beq.n	800ac94 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	61fb      	str	r3, [r7, #28]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac94:	f001 f96a 	bl	800bf6c <xTaskGetSchedulerState>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <xQueueSemaphoreTake+0x64>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <xQueueSemaphoreTake+0x68>
 800aca4:	2301      	movs	r3, #1
 800aca6:	e000      	b.n	800acaa <xQueueSemaphoreTake+0x6a>
 800aca8:	2300      	movs	r3, #0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10b      	bne.n	800acc6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	61bb      	str	r3, [r7, #24]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc6:	f001 fca7 	bl	800c618 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d024      	beq.n	800ad20 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acdc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d104      	bne.n	800acf0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ace6:	f001 faed 	bl	800c2c4 <pvTaskIncrementMutexHeldCount>
 800acea:	4602      	mov	r2, r0
 800acec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfa:	3310      	adds	r3, #16
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 ff75 	bl	800bbec <xTaskRemoveFromEventList>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d007      	beq.n	800ad18 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad08:	4b54      	ldr	r3, [pc, #336]	@ (800ae5c <xQueueSemaphoreTake+0x21c>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad18:	f001 fcb0 	bl	800c67c <vPortExitCritical>
				return pdPASS;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e098      	b.n	800ae52 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d112      	bne.n	800ad4c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	617b      	str	r3, [r7, #20]
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad44:	f001 fc9a 	bl	800c67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e082      	b.n	800ae52 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad52:	f107 030c 	add.w	r3, r7, #12
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 ffac 	bl	800bcb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad60:	f001 fc8c 	bl	800c67c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad64:	f000 fd38 	bl	800b7d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad68:	f001 fc56 	bl	800c618 <vPortEnterCritical>
 800ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad72:	b25b      	sxtb	r3, r3
 800ad74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad78:	d103      	bne.n	800ad82 <xQueueSemaphoreTake+0x142>
 800ad7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d103      	bne.n	800ad98 <xQueueSemaphoreTake+0x158>
 800ad90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad98:	f001 fc70 	bl	800c67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad9c:	463a      	mov	r2, r7
 800ad9e:	f107 030c 	add.w	r3, r7, #12
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 ff9b 	bl	800bce0 <xTaskCheckForTimeOut>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d132      	bne.n	800ae16 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adb2:	f000 f9f5 	bl	800b1a0 <prvIsQueueEmpty>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d026      	beq.n	800ae0a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800adc4:	f001 fc28 	bl	800c618 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	4618      	mov	r0, r3
 800adce:	f001 f8eb 	bl	800bfa8 <xTaskPriorityInherit>
 800add2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800add4:	f001 fc52 	bl	800c67c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	3324      	adds	r3, #36	@ 0x24
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fedd 	bl	800bba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ade6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ade8:	f000 f988 	bl	800b0fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adec:	f000 fd02 	bl	800b7f4 <xTaskResumeAll>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f47f af67 	bne.w	800acc6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800adf8:	4b18      	ldr	r3, [pc, #96]	@ (800ae5c <xQueueSemaphoreTake+0x21c>)
 800adfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	e75d      	b.n	800acc6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae0c:	f000 f976 	bl	800b0fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae10:	f000 fcf0 	bl	800b7f4 <xTaskResumeAll>
 800ae14:	e757      	b.n	800acc6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae18:	f000 f970 	bl	800b0fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae1c:	f000 fcea 	bl	800b7f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae22:	f000 f9bd 	bl	800b1a0 <prvIsQueueEmpty>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f43f af4c 	beq.w	800acc6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00d      	beq.n	800ae50 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ae34:	f001 fbf0 	bl	800c618 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae3a:	f000 f8b7 	bl	800afac <prvGetDisinheritPriorityAfterTimeout>
 800ae3e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 f9ac 	bl	800c1a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae4c:	f001 fc16 	bl	800c67c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3738      	adds	r7, #56	@ 0x38
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08e      	sub	sp, #56	@ 0x38
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10b      	bne.n	800ae8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	623b      	str	r3, [r7, #32]
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	e7fd      	b.n	800ae8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d103      	bne.n	800ae9c <xQueueReceiveFromISR+0x3c>
 800ae94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <xQueueReceiveFromISR+0x40>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <xQueueReceiveFromISR+0x42>
 800aea0:	2300      	movs	r3, #0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10b      	bne.n	800aebe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	61fb      	str	r3, [r7, #28]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aebe:	f001 fc8b 	bl	800c7d8 <vPortValidateInterruptPriority>
	__asm volatile
 800aec2:	f3ef 8211 	mrs	r2, BASEPRI
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	61ba      	str	r2, [r7, #24]
 800aed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aeda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d02f      	beq.n	800af4a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aef8:	f000 f8da 	bl	800b0b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefe:	1e5a      	subs	r2, r3, #1
 800af00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af04:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d112      	bne.n	800af34 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	3310      	adds	r3, #16
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fe66 	bl	800bbec <xTaskRemoveFromEventList>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e007      	b.n	800af44 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af38:	3301      	adds	r3, #1
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	b25a      	sxtb	r2, r3
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	637b      	str	r3, [r7, #52]	@ 0x34
 800af48:	e001      	b.n	800af4e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f383 8811 	msr	BASEPRI, r3
}
 800af58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3738      	adds	r7, #56	@ 0x38
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <vQueueDelete+0x2a>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	60bb      	str	r3, [r7, #8]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 f934 	bl	800b1fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d102      	bne.n	800afa4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f001 fd2a 	bl	800c9f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d006      	beq.n	800afca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f1c3 0307 	rsb	r3, r3, #7
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e001      	b.n	800afce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afce:	68fb      	ldr	r3, [r7, #12]
	}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10d      	bne.n	800b016 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d14d      	bne.n	800b09e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f001 f844 	bl	800c094 <xTaskPriorityDisinherit>
 800b00c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	609a      	str	r2, [r3, #8]
 800b014:	e043      	b.n	800b09e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d119      	bne.n	800b050 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6858      	ldr	r0, [r3, #4]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b024:	461a      	mov	r2, r3
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	f001 ff99 	bl	800cf5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b034:	441a      	add	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	429a      	cmp	r2, r3
 800b044:	d32b      	bcc.n	800b09e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	e026      	b.n	800b09e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	68d8      	ldr	r0, [r3, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b058:	461a      	mov	r2, r3
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	f001 ff7f 	bl	800cf5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68da      	ldr	r2, [r3, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b068:	425b      	negs	r3, r3
 800b06a:	441a      	add	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d207      	bcs.n	800b08c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b084:	425b      	negs	r3, r3
 800b086:	441a      	add	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d105      	bne.n	800b09e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b0a6:	697b      	ldr	r3, [r7, #20]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3718      	adds	r7, #24
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d018      	beq.n	800b0f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ca:	441a      	add	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68da      	ldr	r2, [r3, #12]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d303      	bcc.n	800b0e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68d9      	ldr	r1, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6838      	ldr	r0, [r7, #0]
 800b0f0:	f001 ff35 	bl	800cf5e <memcpy>
	}
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b104:	f001 fa88 	bl	800c618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b10e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b110:	e011      	b.n	800b136 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	2b00      	cmp	r3, #0
 800b118:	d012      	beq.n	800b140 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3324      	adds	r3, #36	@ 0x24
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 fd64 	bl	800bbec <xTaskRemoveFromEventList>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b12a:	f000 fe3d 	bl	800bda8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	3b01      	subs	r3, #1
 800b132:	b2db      	uxtb	r3, r3
 800b134:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dce9      	bgt.n	800b112 <prvUnlockQueue+0x16>
 800b13e:	e000      	b.n	800b142 <prvUnlockQueue+0x46>
					break;
 800b140:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	22ff      	movs	r2, #255	@ 0xff
 800b146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b14a:	f001 fa97 	bl	800c67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b14e:	f001 fa63 	bl	800c618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b158:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b15a:	e011      	b.n	800b180 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d012      	beq.n	800b18a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3310      	adds	r3, #16
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 fd3f 	bl	800bbec <xTaskRemoveFromEventList>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b174:	f000 fe18 	bl	800bda8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b184:	2b00      	cmp	r3, #0
 800b186:	dce9      	bgt.n	800b15c <prvUnlockQueue+0x60>
 800b188:	e000      	b.n	800b18c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b18a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	22ff      	movs	r2, #255	@ 0xff
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b194:	f001 fa72 	bl	800c67c <vPortExitCritical>
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1a8:	f001 fa36 	bl	800c618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e001      	b.n	800b1be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1be:	f001 fa5d 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1d4:	f001 fa20 	bl	800c618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d102      	bne.n	800b1ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	e001      	b.n	800b1ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1ee:	f001 fa45 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	e016      	b.n	800b238 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b20a:	4a10      	ldr	r2, [pc, #64]	@ (800b24c <vQueueUnregisterQueue+0x50>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	4413      	add	r3, r2
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d10b      	bne.n	800b232 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b21a:	4a0c      	ldr	r2, [pc, #48]	@ (800b24c <vQueueUnregisterQueue+0x50>)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2100      	movs	r1, #0
 800b220:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b224:	4a09      	ldr	r2, [pc, #36]	@ (800b24c <vQueueUnregisterQueue+0x50>)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	4413      	add	r3, r2
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
				break;
 800b230:	e006      	b.n	800b240 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3301      	adds	r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b07      	cmp	r3, #7
 800b23c:	d9e5      	bls.n	800b20a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b23e:	bf00      	nop
 800b240:	bf00      	nop
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	200005b4 	.word	0x200005b4

0800b250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	@ 0x38
 800b254:	af04      	add	r7, sp, #16
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	623b      	str	r3, [r7, #32]
}
 800b276:	bf00      	nop
 800b278:	bf00      	nop
 800b27a:	e7fd      	b.n	800b278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61fb      	str	r3, [r7, #28]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b29a:	2354      	movs	r3, #84	@ 0x54
 800b29c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b54      	cmp	r3, #84	@ 0x54
 800b2a2:	d00b      	beq.n	800b2bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	61bb      	str	r3, [r7, #24]
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01e      	beq.n	800b302 <xTaskCreateStatic+0xb2>
 800b2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d01b      	beq.n	800b302 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9303      	str	r3, [sp, #12]
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e2:	9302      	str	r3, [sp, #8]
 800b2e4:	f107 0314 	add.w	r3, r7, #20
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f850 	bl	800b39a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2fc:	f000 f8d6 	bl	800b4ac <prvAddNewTaskToReadyList>
 800b300:	e001      	b.n	800b306 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b306:	697b      	ldr	r3, [r7, #20]
	}
 800b308:	4618      	mov	r0, r3
 800b30a:	3728      	adds	r7, #40	@ 0x28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08c      	sub	sp, #48	@ 0x30
 800b314:	af04      	add	r7, sp, #16
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4618      	mov	r0, r3
 800b326:	f001 fa99 	bl	800c85c <pvPortMalloc>
 800b32a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00e      	beq.n	800b350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b332:	2054      	movs	r0, #84	@ 0x54
 800b334:	f001 fa92 	bl	800c85c <pvPortMalloc>
 800b338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	631a      	str	r2, [r3, #48]	@ 0x30
 800b346:	e005      	b.n	800b354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b348:	6978      	ldr	r0, [r7, #20]
 800b34a:	f001 fb55 	bl	800c9f8 <vPortFree>
 800b34e:	e001      	b.n	800b354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d017      	beq.n	800b38a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b362:	88fa      	ldrh	r2, [r7, #6]
 800b364:	2300      	movs	r3, #0
 800b366:	9303      	str	r3, [sp, #12]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	9302      	str	r3, [sp, #8]
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68b9      	ldr	r1, [r7, #8]
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 f80e 	bl	800b39a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b37e:	69f8      	ldr	r0, [r7, #28]
 800b380:	f000 f894 	bl	800b4ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b384:	2301      	movs	r3, #1
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	e002      	b.n	800b390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b38a:	f04f 33ff 	mov.w	r3, #4294967295
 800b38e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b390:	69bb      	ldr	r3, [r7, #24]
	}
 800b392:	4618      	mov	r0, r3
 800b394:	3720      	adds	r7, #32
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b088      	sub	sp, #32
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	60f8      	str	r0, [r7, #12]
 800b3a2:	60b9      	str	r1, [r7, #8]
 800b3a4:	607a      	str	r2, [r7, #4]
 800b3a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	f023 0307 	bic.w	r3, r3, #7
 800b3c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	617b      	str	r3, [r7, #20]
}
 800b3de:	bf00      	nop
 800b3e0:	bf00      	nop
 800b3e2:	e7fd      	b.n	800b3e0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d01f      	beq.n	800b42a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	61fb      	str	r3, [r7, #28]
 800b3ee:	e012      	b.n	800b416 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	7819      	ldrb	r1, [r3, #0]
 800b3f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3334      	adds	r3, #52	@ 0x34
 800b400:	460a      	mov	r2, r1
 800b402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	4413      	add	r3, r2
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d006      	beq.n	800b41e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	3301      	adds	r3, #1
 800b414:	61fb      	str	r3, [r7, #28]
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	2b0f      	cmp	r3, #15
 800b41a:	d9e9      	bls.n	800b3f0 <prvInitialiseNewTask+0x56>
 800b41c:	e000      	b.n	800b420 <prvInitialiseNewTask+0x86>
			{
				break;
 800b41e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b422:	2200      	movs	r2, #0
 800b424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b428:	e003      	b.n	800b432 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	2b06      	cmp	r3, #6
 800b436:	d901      	bls.n	800b43c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b438:	2306      	movs	r3, #6
 800b43a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b440:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b446:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	2200      	movs	r2, #0
 800b44c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	3304      	adds	r3, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe ff0c 	bl	800a270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45a:	3318      	adds	r3, #24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe ff07 	bl	800a270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46a:	f1c3 0207 	rsb	r2, r3, #7
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b476:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	2200      	movs	r2, #0
 800b47c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	68f9      	ldr	r1, [r7, #12]
 800b48a:	69b8      	ldr	r0, [r7, #24]
 800b48c:	f000 ff94 	bl	800c3b8 <pxPortInitialiseStack>
 800b490:	4602      	mov	r2, r0
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4a2:	bf00      	nop
 800b4a4:	3720      	adds	r7, #32
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b4:	f001 f8b0 	bl	800c618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b564 <prvAddNewTaskToReadyList+0xb8>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	4a29      	ldr	r2, [pc, #164]	@ (800b564 <prvAddNewTaskToReadyList+0xb8>)
 800b4c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4c2:	4b29      	ldr	r3, [pc, #164]	@ (800b568 <prvAddNewTaskToReadyList+0xbc>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d109      	bne.n	800b4de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4ca:	4a27      	ldr	r2, [pc, #156]	@ (800b568 <prvAddNewTaskToReadyList+0xbc>)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4d0:	4b24      	ldr	r3, [pc, #144]	@ (800b564 <prvAddNewTaskToReadyList+0xb8>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d110      	bne.n	800b4fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4d8:	f000 fc8a 	bl	800bdf0 <prvInitialiseTaskLists>
 800b4dc:	e00d      	b.n	800b4fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4de:	4b23      	ldr	r3, [pc, #140]	@ (800b56c <prvAddNewTaskToReadyList+0xc0>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4e6:	4b20      	ldr	r3, [pc, #128]	@ (800b568 <prvAddNewTaskToReadyList+0xbc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d802      	bhi.n	800b4fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b568 <prvAddNewTaskToReadyList+0xbc>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b570 <prvAddNewTaskToReadyList+0xc4>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	4a1b      	ldr	r2, [pc, #108]	@ (800b570 <prvAddNewTaskToReadyList+0xc4>)
 800b502:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	2201      	movs	r2, #1
 800b50a:	409a      	lsls	r2, r3
 800b50c:	4b19      	ldr	r3, [pc, #100]	@ (800b574 <prvAddNewTaskToReadyList+0xc8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4313      	orrs	r3, r2
 800b512:	4a18      	ldr	r2, [pc, #96]	@ (800b574 <prvAddNewTaskToReadyList+0xc8>)
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51a:	4613      	mov	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4a15      	ldr	r2, [pc, #84]	@ (800b578 <prvAddNewTaskToReadyList+0xcc>)
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3304      	adds	r3, #4
 800b52a:	4619      	mov	r1, r3
 800b52c:	4610      	mov	r0, r2
 800b52e:	f7fe feac 	bl	800a28a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b532:	f001 f8a3 	bl	800c67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b536:	4b0d      	ldr	r3, [pc, #52]	@ (800b56c <prvAddNewTaskToReadyList+0xc0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00e      	beq.n	800b55c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b53e:	4b0a      	ldr	r3, [pc, #40]	@ (800b568 <prvAddNewTaskToReadyList+0xbc>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b548:	429a      	cmp	r2, r3
 800b54a:	d207      	bcs.n	800b55c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b54c:	4b0b      	ldr	r3, [pc, #44]	@ (800b57c <prvAddNewTaskToReadyList+0xd0>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	200006f4 	.word	0x200006f4
 800b568:	200005f4 	.word	0x200005f4
 800b56c:	20000700 	.word	0x20000700
 800b570:	20000710 	.word	0x20000710
 800b574:	200006fc 	.word	0x200006fc
 800b578:	200005f8 	.word	0x200005f8
 800b57c:	e000ed04 	.word	0xe000ed04

0800b580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b588:	2300      	movs	r3, #0
 800b58a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d018      	beq.n	800b5c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b592:	4b14      	ldr	r3, [pc, #80]	@ (800b5e4 <vTaskDelay+0x64>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <vTaskDelay+0x32>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	60bb      	str	r3, [r7, #8]
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	e7fd      	b.n	800b5ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5b2:	f000 f911 	bl	800b7d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fe97 	bl	800c2ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5be:	f000 f919 	bl	800b7f4 <xTaskResumeAll>
 800b5c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d107      	bne.n	800b5da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b5ca:	4b07      	ldr	r3, [pc, #28]	@ (800b5e8 <vTaskDelay+0x68>)
 800b5cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	2000071c 	.word	0x2000071c
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b5f4:	f001 f810 	bl	800c618 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d102      	bne.n	800b604 <vTaskSuspend+0x18>
 800b5fe:	4b3d      	ldr	r3, [pc, #244]	@ (800b6f4 <vTaskSuspend+0x108>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	e000      	b.n	800b606 <vTaskSuspend+0x1a>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3304      	adds	r3, #4
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fe fe99 	bl	800a344 <uxListRemove>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d115      	bne.n	800b644 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b61c:	4936      	ldr	r1, [pc, #216]	@ (800b6f8 <vTaskSuspend+0x10c>)
 800b61e:	4613      	mov	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4413      	add	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	440b      	add	r3, r1
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10a      	bne.n	800b644 <vTaskSuspend+0x58>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b632:	2201      	movs	r2, #1
 800b634:	fa02 f303 	lsl.w	r3, r2, r3
 800b638:	43da      	mvns	r2, r3
 800b63a:	4b30      	ldr	r3, [pc, #192]	@ (800b6fc <vTaskSuspend+0x110>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4013      	ands	r3, r2
 800b640:	4a2e      	ldr	r2, [pc, #184]	@ (800b6fc <vTaskSuspend+0x110>)
 800b642:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d004      	beq.n	800b656 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3318      	adds	r3, #24
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe fe77 	bl	800a344 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3304      	adds	r3, #4
 800b65a:	4619      	mov	r1, r3
 800b65c:	4828      	ldr	r0, [pc, #160]	@ (800b700 <vTaskSuspend+0x114>)
 800b65e:	f7fe fe14 	bl	800a28a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d103      	bne.n	800b676 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b676:	f001 f801 	bl	800c67c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b67a:	4b22      	ldr	r3, [pc, #136]	@ (800b704 <vTaskSuspend+0x118>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d005      	beq.n	800b68e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b682:	f000 ffc9 	bl	800c618 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b686:	f000 fc51 	bl	800bf2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b68a:	f000 fff7 	bl	800c67c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b68e:	4b19      	ldr	r3, [pc, #100]	@ (800b6f4 <vTaskSuspend+0x108>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	429a      	cmp	r2, r3
 800b696:	d128      	bne.n	800b6ea <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800b698:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <vTaskSuspend+0x118>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d018      	beq.n	800b6d2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b6a0:	4b19      	ldr	r3, [pc, #100]	@ (800b708 <vTaskSuspend+0x11c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <vTaskSuspend+0xd4>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60bb      	str	r3, [r7, #8]
}
 800b6ba:	bf00      	nop
 800b6bc:	bf00      	nop
 800b6be:	e7fd      	b.n	800b6bc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b6c0:	4b12      	ldr	r3, [pc, #72]	@ (800b70c <vTaskSuspend+0x120>)
 800b6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6d0:	e00b      	b.n	800b6ea <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b700 <vTaskSuspend+0x114>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b710 <vTaskSuspend+0x124>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d103      	bne.n	800b6e6 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800b6de:	4b05      	ldr	r3, [pc, #20]	@ (800b6f4 <vTaskSuspend+0x108>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
	}
 800b6e4:	e001      	b.n	800b6ea <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800b6e6:	f000 f9ff 	bl	800bae8 <vTaskSwitchContext>
	}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200005f4 	.word	0x200005f4
 800b6f8:	200005f8 	.word	0x200005f8
 800b6fc:	200006fc 	.word	0x200006fc
 800b700:	200006e0 	.word	0x200006e0
 800b704:	20000700 	.word	0x20000700
 800b708:	2000071c 	.word	0x2000071c
 800b70c:	e000ed04 	.word	0xe000ed04
 800b710:	200006f4 	.word	0x200006f4

0800b714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08a      	sub	sp, #40	@ 0x28
 800b718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b722:	463a      	mov	r2, r7
 800b724:	1d39      	adds	r1, r7, #4
 800b726:	f107 0308 	add.w	r3, r7, #8
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f5 f94e 	bl	80009cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	9202      	str	r2, [sp, #8]
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	2300      	movs	r3, #0
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2300      	movs	r3, #0
 800b740:	460a      	mov	r2, r1
 800b742:	491f      	ldr	r1, [pc, #124]	@ (800b7c0 <vTaskStartScheduler+0xac>)
 800b744:	481f      	ldr	r0, [pc, #124]	@ (800b7c4 <vTaskStartScheduler+0xb0>)
 800b746:	f7ff fd83 	bl	800b250 <xTaskCreateStatic>
 800b74a:	4603      	mov	r3, r0
 800b74c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c8 <vTaskStartScheduler+0xb4>)
 800b74e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b750:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c8 <vTaskStartScheduler+0xb4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b758:	2301      	movs	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e001      	b.n	800b762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d116      	bne.n	800b796 <vTaskStartScheduler+0x82>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	613b      	str	r3, [r7, #16]
}
 800b77a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b77c:	4b13      	ldr	r3, [pc, #76]	@ (800b7cc <vTaskStartScheduler+0xb8>)
 800b77e:	f04f 32ff 	mov.w	r2, #4294967295
 800b782:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b784:	4b12      	ldr	r3, [pc, #72]	@ (800b7d0 <vTaskStartScheduler+0xbc>)
 800b786:	2201      	movs	r2, #1
 800b788:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b78a:	4b12      	ldr	r3, [pc, #72]	@ (800b7d4 <vTaskStartScheduler+0xc0>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b790:	f000 fe9e 	bl	800c4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b794:	e00f      	b.n	800b7b6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79c:	d10b      	bne.n	800b7b6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	60fb      	str	r3, [r7, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	e7fd      	b.n	800b7b2 <vTaskStartScheduler+0x9e>
}
 800b7b6:	bf00      	nop
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	0800dc50 	.word	0x0800dc50
 800b7c4:	0800bdc1 	.word	0x0800bdc1
 800b7c8:	20000718 	.word	0x20000718
 800b7cc:	20000714 	.word	0x20000714
 800b7d0:	20000700 	.word	0x20000700
 800b7d4:	200006f8 	.word	0x200006f8

0800b7d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7dc:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <vTaskSuspendAll+0x18>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	4a03      	ldr	r2, [pc, #12]	@ (800b7f0 <vTaskSuspendAll+0x18>)
 800b7e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7e6:	bf00      	nop
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	2000071c 	.word	0x2000071c

0800b7f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b802:	4b42      	ldr	r3, [pc, #264]	@ (800b90c <xTaskResumeAll+0x118>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10b      	bne.n	800b822 <xTaskResumeAll+0x2e>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	603b      	str	r3, [r7, #0]
}
 800b81c:	bf00      	nop
 800b81e:	bf00      	nop
 800b820:	e7fd      	b.n	800b81e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b822:	f000 fef9 	bl	800c618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b826:	4b39      	ldr	r3, [pc, #228]	@ (800b90c <xTaskResumeAll+0x118>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	4a37      	ldr	r2, [pc, #220]	@ (800b90c <xTaskResumeAll+0x118>)
 800b82e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b830:	4b36      	ldr	r3, [pc, #216]	@ (800b90c <xTaskResumeAll+0x118>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d161      	bne.n	800b8fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b838:	4b35      	ldr	r3, [pc, #212]	@ (800b910 <xTaskResumeAll+0x11c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05d      	beq.n	800b8fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b840:	e02e      	b.n	800b8a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b842:	4b34      	ldr	r3, [pc, #208]	@ (800b914 <xTaskResumeAll+0x120>)
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3318      	adds	r3, #24
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fd78 	bl	800a344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fd73 	bl	800a344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b862:	2201      	movs	r2, #1
 800b864:	409a      	lsls	r2, r3
 800b866:	4b2c      	ldr	r3, [pc, #176]	@ (800b918 <xTaskResumeAll+0x124>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	4a2a      	ldr	r2, [pc, #168]	@ (800b918 <xTaskResumeAll+0x124>)
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4a27      	ldr	r2, [pc, #156]	@ (800b91c <xTaskResumeAll+0x128>)
 800b87e:	441a      	add	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3304      	adds	r3, #4
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fcff 	bl	800a28a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b890:	4b23      	ldr	r3, [pc, #140]	@ (800b920 <xTaskResumeAll+0x12c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	429a      	cmp	r2, r3
 800b898:	d302      	bcc.n	800b8a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b89a:	4b22      	ldr	r3, [pc, #136]	@ (800b924 <xTaskResumeAll+0x130>)
 800b89c:	2201      	movs	r2, #1
 800b89e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <xTaskResumeAll+0x120>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1cc      	bne.n	800b842 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8ae:	f000 fb3d 	bl	800bf2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b928 <xTaskResumeAll+0x134>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d010      	beq.n	800b8e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8be:	f000 f859 	bl	800b974 <xTaskIncrementTick>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b8c8:	4b16      	ldr	r3, [pc, #88]	@ (800b924 <xTaskResumeAll+0x130>)
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1f1      	bne.n	800b8be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b8da:	4b13      	ldr	r3, [pc, #76]	@ (800b928 <xTaskResumeAll+0x134>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8e0:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <xTaskResumeAll+0x130>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b92c <xTaskResumeAll+0x138>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8fc:	f000 febe 	bl	800c67c <vPortExitCritical>

	return xAlreadyYielded;
 800b900:	68bb      	ldr	r3, [r7, #8]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	2000071c 	.word	0x2000071c
 800b910:	200006f4 	.word	0x200006f4
 800b914:	200006b4 	.word	0x200006b4
 800b918:	200006fc 	.word	0x200006fc
 800b91c:	200005f8 	.word	0x200005f8
 800b920:	200005f4 	.word	0x200005f4
 800b924:	20000708 	.word	0x20000708
 800b928:	20000704 	.word	0x20000704
 800b92c:	e000ed04 	.word	0xe000ed04

0800b930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b936:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <xTaskGetTickCount+0x1c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b93c:	687b      	ldr	r3, [r7, #4]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	200006f8 	.word	0x200006f8

0800b950 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b956:	f000 ff3f 	bl	800c7d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b95a:	2300      	movs	r3, #0
 800b95c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b95e:	4b04      	ldr	r3, [pc, #16]	@ (800b970 <xTaskGetTickCountFromISR+0x20>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b964:	683b      	ldr	r3, [r7, #0]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	200006f8 	.word	0x200006f8

0800b974 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b97a:	2300      	movs	r3, #0
 800b97c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97e:	4b4f      	ldr	r3, [pc, #316]	@ (800babc <xTaskIncrementTick+0x148>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f040 808f 	bne.w	800baa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b988:	4b4d      	ldr	r3, [pc, #308]	@ (800bac0 <xTaskIncrementTick+0x14c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3301      	adds	r3, #1
 800b98e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b990:	4a4b      	ldr	r2, [pc, #300]	@ (800bac0 <xTaskIncrementTick+0x14c>)
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d121      	bne.n	800b9e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b99c:	4b49      	ldr	r3, [pc, #292]	@ (800bac4 <xTaskIncrementTick+0x150>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00b      	beq.n	800b9be <xTaskIncrementTick+0x4a>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	603b      	str	r3, [r7, #0]
}
 800b9b8:	bf00      	nop
 800b9ba:	bf00      	nop
 800b9bc:	e7fd      	b.n	800b9ba <xTaskIncrementTick+0x46>
 800b9be:	4b41      	ldr	r3, [pc, #260]	@ (800bac4 <xTaskIncrementTick+0x150>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	4b40      	ldr	r3, [pc, #256]	@ (800bac8 <xTaskIncrementTick+0x154>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a3e      	ldr	r2, [pc, #248]	@ (800bac4 <xTaskIncrementTick+0x150>)
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	4a3e      	ldr	r2, [pc, #248]	@ (800bac8 <xTaskIncrementTick+0x154>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	4b3e      	ldr	r3, [pc, #248]	@ (800bacc <xTaskIncrementTick+0x158>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	4a3c      	ldr	r2, [pc, #240]	@ (800bacc <xTaskIncrementTick+0x158>)
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	f000 faa6 	bl	800bf2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9e0:	4b3b      	ldr	r3, [pc, #236]	@ (800bad0 <xTaskIncrementTick+0x15c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d348      	bcc.n	800ba7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ea:	4b36      	ldr	r3, [pc, #216]	@ (800bac4 <xTaskIncrementTick+0x150>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d104      	bne.n	800b9fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9f4:	4b36      	ldr	r3, [pc, #216]	@ (800bad0 <xTaskIncrementTick+0x15c>)
 800b9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fa:	601a      	str	r2, [r3, #0]
					break;
 800b9fc:	e03e      	b.n	800ba7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fe:	4b31      	ldr	r3, [pc, #196]	@ (800bac4 <xTaskIncrementTick+0x150>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d203      	bcs.n	800ba1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba16:	4a2e      	ldr	r2, [pc, #184]	@ (800bad0 <xTaskIncrementTick+0x15c>)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba1c:	e02e      	b.n	800ba7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	3304      	adds	r3, #4
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe fc8e 	bl	800a344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	3318      	adds	r3, #24
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fc85 	bl	800a344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3e:	2201      	movs	r2, #1
 800ba40:	409a      	lsls	r2, r3
 800ba42:	4b24      	ldr	r3, [pc, #144]	@ (800bad4 <xTaskIncrementTick+0x160>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	4a22      	ldr	r2, [pc, #136]	@ (800bad4 <xTaskIncrementTick+0x160>)
 800ba4a:	6013      	str	r3, [r2, #0]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4a1f      	ldr	r2, [pc, #124]	@ (800bad8 <xTaskIncrementTick+0x164>)
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f7fe fc11 	bl	800a28a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6c:	4b1b      	ldr	r3, [pc, #108]	@ (800badc <xTaskIncrementTick+0x168>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d3b9      	bcc.n	800b9ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ba76:	2301      	movs	r3, #1
 800ba78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba7a:	e7b6      	b.n	800b9ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba7c:	4b17      	ldr	r3, [pc, #92]	@ (800badc <xTaskIncrementTick+0x168>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba82:	4915      	ldr	r1, [pc, #84]	@ (800bad8 <xTaskIncrementTick+0x164>)
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d901      	bls.n	800ba98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba94:	2301      	movs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba98:	4b11      	ldr	r3, [pc, #68]	@ (800bae0 <xTaskIncrementTick+0x16c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e004      	b.n	800bab0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800baa6:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <xTaskIncrementTick+0x170>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3301      	adds	r3, #1
 800baac:	4a0d      	ldr	r2, [pc, #52]	@ (800bae4 <xTaskIncrementTick+0x170>)
 800baae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bab0:	697b      	ldr	r3, [r7, #20]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000071c 	.word	0x2000071c
 800bac0:	200006f8 	.word	0x200006f8
 800bac4:	200006ac 	.word	0x200006ac
 800bac8:	200006b0 	.word	0x200006b0
 800bacc:	2000070c 	.word	0x2000070c
 800bad0:	20000714 	.word	0x20000714
 800bad4:	200006fc 	.word	0x200006fc
 800bad8:	200005f8 	.word	0x200005f8
 800badc:	200005f4 	.word	0x200005f4
 800bae0:	20000708 	.word	0x20000708
 800bae4:	20000704 	.word	0x20000704

0800bae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	b087      	sub	sp, #28
 800baec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baee:	4b27      	ldr	r3, [pc, #156]	@ (800bb8c <vTaskSwitchContext+0xa4>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800baf6:	4b26      	ldr	r3, [pc, #152]	@ (800bb90 <vTaskSwitchContext+0xa8>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bafc:	e040      	b.n	800bb80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bafe:	4b24      	ldr	r3, [pc, #144]	@ (800bb90 <vTaskSwitchContext+0xa8>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb04:	4b23      	ldr	r3, [pc, #140]	@ (800bb94 <vTaskSwitchContext+0xac>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	fab3 f383 	clz	r3, r3
 800bb10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb12:	7afb      	ldrb	r3, [r7, #11]
 800bb14:	f1c3 031f 	rsb	r3, r3, #31
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	491f      	ldr	r1, [pc, #124]	@ (800bb98 <vTaskSwitchContext+0xb0>)
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	440b      	add	r3, r1
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10b      	bne.n	800bb46 <vTaskSwitchContext+0x5e>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	607b      	str	r3, [r7, #4]
}
 800bb40:	bf00      	nop
 800bb42:	bf00      	nop
 800bb44:	e7fd      	b.n	800bb42 <vTaskSwitchContext+0x5a>
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4a11      	ldr	r2, [pc, #68]	@ (800bb98 <vTaskSwitchContext+0xb0>)
 800bb52:	4413      	add	r3, r2
 800bb54:	613b      	str	r3, [r7, #16]
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	605a      	str	r2, [r3, #4]
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3308      	adds	r3, #8
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d104      	bne.n	800bb76 <vTaskSwitchContext+0x8e>
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	605a      	str	r2, [r3, #4]
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	4a07      	ldr	r2, [pc, #28]	@ (800bb9c <vTaskSwitchContext+0xb4>)
 800bb7e:	6013      	str	r3, [r2, #0]
}
 800bb80:	bf00      	nop
 800bb82:	371c      	adds	r7, #28
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	2000071c 	.word	0x2000071c
 800bb90:	20000708 	.word	0x20000708
 800bb94:	200006fc 	.word	0x200006fc
 800bb98:	200005f8 	.word	0x200005f8
 800bb9c:	200005f4 	.word	0x200005f4

0800bba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10b      	bne.n	800bbc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60fb      	str	r3, [r7, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbc8:	4b07      	ldr	r3, [pc, #28]	@ (800bbe8 <vTaskPlaceOnEventList+0x48>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3318      	adds	r3, #24
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe fb7e 	bl	800a2d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	6838      	ldr	r0, [r7, #0]
 800bbda:	f000 fb87 	bl	800c2ec <prvAddCurrentTaskToDelayedList>
}
 800bbde:	bf00      	nop
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200005f4 	.word	0x200005f4

0800bbec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10b      	bne.n	800bc1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	60fb      	str	r3, [r7, #12]
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	e7fd      	b.n	800bc16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fb90 	bl	800a344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc24:	4b1d      	ldr	r3, [pc, #116]	@ (800bc9c <xTaskRemoveFromEventList+0xb0>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d11c      	bne.n	800bc66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe fb87 	bl	800a344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	4b18      	ldr	r3, [pc, #96]	@ (800bca0 <xTaskRemoveFromEventList+0xb4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	4a16      	ldr	r2, [pc, #88]	@ (800bca0 <xTaskRemoveFromEventList+0xb4>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4a13      	ldr	r2, [pc, #76]	@ (800bca4 <xTaskRemoveFromEventList+0xb8>)
 800bc56:	441a      	add	r2, r3
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fe fb13 	bl	800a28a <vListInsertEnd>
 800bc64:	e005      	b.n	800bc72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3318      	adds	r3, #24
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	480e      	ldr	r0, [pc, #56]	@ (800bca8 <xTaskRemoveFromEventList+0xbc>)
 800bc6e:	f7fe fb0c 	bl	800a28a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc76:	4b0d      	ldr	r3, [pc, #52]	@ (800bcac <xTaskRemoveFromEventList+0xc0>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d905      	bls.n	800bc8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc80:	2301      	movs	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc84:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb0 <xTaskRemoveFromEventList+0xc4>)
 800bc86:	2201      	movs	r2, #1
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	e001      	b.n	800bc90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc90:	697b      	ldr	r3, [r7, #20]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000071c 	.word	0x2000071c
 800bca0:	200006fc 	.word	0x200006fc
 800bca4:	200005f8 	.word	0x200005f8
 800bca8:	200006b4 	.word	0x200006b4
 800bcac:	200005f4 	.word	0x200005f4
 800bcb0:	20000708 	.word	0x20000708

0800bcb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcbc:	4b06      	ldr	r3, [pc, #24]	@ (800bcd8 <vTaskInternalSetTimeOutState+0x24>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcc4:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <vTaskInternalSetTimeOutState+0x28>)
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	605a      	str	r2, [r3, #4]
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	2000070c 	.word	0x2000070c
 800bcdc:	200006f8 	.word	0x200006f8

0800bce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10b      	bne.n	800bd08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	613b      	str	r3, [r7, #16]
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10b      	bne.n	800bd26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	e7fd      	b.n	800bd22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bd26:	f000 fc77 	bl	800c618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bda0 <xTaskCheckForTimeOut+0xc0>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	69ba      	ldr	r2, [r7, #24]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd42:	d102      	bne.n	800bd4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd44:	2300      	movs	r3, #0
 800bd46:	61fb      	str	r3, [r7, #28]
 800bd48:	e023      	b.n	800bd92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	4b15      	ldr	r3, [pc, #84]	@ (800bda4 <xTaskCheckForTimeOut+0xc4>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d007      	beq.n	800bd66 <xTaskCheckForTimeOut+0x86>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd60:	2301      	movs	r3, #1
 800bd62:	61fb      	str	r3, [r7, #28]
 800bd64:	e015      	b.n	800bd92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d20b      	bcs.n	800bd88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	1ad2      	subs	r2, r2, r3
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff ff99 	bl	800bcb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	61fb      	str	r3, [r7, #28]
 800bd86:	e004      	b.n	800bd92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd92:	f000 fc73 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800bd96:	69fb      	ldr	r3, [r7, #28]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3720      	adds	r7, #32
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	200006f8 	.word	0x200006f8
 800bda4:	2000070c 	.word	0x2000070c

0800bda8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdac:	4b03      	ldr	r3, [pc, #12]	@ (800bdbc <vTaskMissedYield+0x14>)
 800bdae:	2201      	movs	r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000708 	.word	0x20000708

0800bdc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdc8:	f000 f852 	bl	800be70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdcc:	4b06      	ldr	r3, [pc, #24]	@ (800bde8 <prvIdleTask+0x28>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d9f9      	bls.n	800bdc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <prvIdleTask+0x2c>)
 800bdd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bde4:	e7f0      	b.n	800bdc8 <prvIdleTask+0x8>
 800bde6:	bf00      	nop
 800bde8:	200005f8 	.word	0x200005f8
 800bdec:	e000ed04 	.word	0xe000ed04

0800bdf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
 800bdfa:	e00c      	b.n	800be16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4a12      	ldr	r2, [pc, #72]	@ (800be50 <prvInitialiseTaskLists+0x60>)
 800be08:	4413      	add	r3, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe fa10 	bl	800a230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3301      	adds	r3, #1
 800be14:	607b      	str	r3, [r7, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b06      	cmp	r3, #6
 800be1a:	d9ef      	bls.n	800bdfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be1c:	480d      	ldr	r0, [pc, #52]	@ (800be54 <prvInitialiseTaskLists+0x64>)
 800be1e:	f7fe fa07 	bl	800a230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be22:	480d      	ldr	r0, [pc, #52]	@ (800be58 <prvInitialiseTaskLists+0x68>)
 800be24:	f7fe fa04 	bl	800a230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be28:	480c      	ldr	r0, [pc, #48]	@ (800be5c <prvInitialiseTaskLists+0x6c>)
 800be2a:	f7fe fa01 	bl	800a230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be2e:	480c      	ldr	r0, [pc, #48]	@ (800be60 <prvInitialiseTaskLists+0x70>)
 800be30:	f7fe f9fe 	bl	800a230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be34:	480b      	ldr	r0, [pc, #44]	@ (800be64 <prvInitialiseTaskLists+0x74>)
 800be36:	f7fe f9fb 	bl	800a230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be3a:	4b0b      	ldr	r3, [pc, #44]	@ (800be68 <prvInitialiseTaskLists+0x78>)
 800be3c:	4a05      	ldr	r2, [pc, #20]	@ (800be54 <prvInitialiseTaskLists+0x64>)
 800be3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be40:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <prvInitialiseTaskLists+0x7c>)
 800be42:	4a05      	ldr	r2, [pc, #20]	@ (800be58 <prvInitialiseTaskLists+0x68>)
 800be44:	601a      	str	r2, [r3, #0]
}
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	200005f8 	.word	0x200005f8
 800be54:	20000684 	.word	0x20000684
 800be58:	20000698 	.word	0x20000698
 800be5c:	200006b4 	.word	0x200006b4
 800be60:	200006c8 	.word	0x200006c8
 800be64:	200006e0 	.word	0x200006e0
 800be68:	200006ac 	.word	0x200006ac
 800be6c:	200006b0 	.word	0x200006b0

0800be70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be76:	e019      	b.n	800beac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be78:	f000 fbce 	bl	800c618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7c:	4b10      	ldr	r3, [pc, #64]	@ (800bec0 <prvCheckTasksWaitingTermination+0x50>)
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3304      	adds	r3, #4
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fe fa5b 	bl	800a344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bec4 <prvCheckTasksWaitingTermination+0x54>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3b01      	subs	r3, #1
 800be94:	4a0b      	ldr	r2, [pc, #44]	@ (800bec4 <prvCheckTasksWaitingTermination+0x54>)
 800be96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be98:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <prvCheckTasksWaitingTermination+0x58>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bec8 <prvCheckTasksWaitingTermination+0x58>)
 800bea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bea2:	f000 fbeb 	bl	800c67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f810 	bl	800becc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beac:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <prvCheckTasksWaitingTermination+0x58>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e1      	bne.n	800be78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	200006c8 	.word	0x200006c8
 800bec4:	200006f4 	.word	0x200006f4
 800bec8:	200006dc 	.word	0x200006dc

0800becc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d108      	bne.n	800bef0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fd88 	bl	800c9f8 <vPortFree>
				vPortFree( pxTCB );
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fd85 	bl	800c9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800beee:	e019      	b.n	800bf24 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d103      	bne.n	800bf02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fd7c 	bl	800c9f8 <vPortFree>
	}
 800bf00:	e010      	b.n	800bf24 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d00b      	beq.n	800bf24 <prvDeleteTCB+0x58>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60fb      	str	r3, [r7, #12]
}
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
 800bf22:	e7fd      	b.n	800bf20 <prvDeleteTCB+0x54>
	}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf32:	4b0c      	ldr	r3, [pc, #48]	@ (800bf64 <prvResetNextTaskUnblockTime+0x38>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d104      	bne.n	800bf46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf68 <prvResetNextTaskUnblockTime+0x3c>)
 800bf3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf44:	e008      	b.n	800bf58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf46:	4b07      	ldr	r3, [pc, #28]	@ (800bf64 <prvResetNextTaskUnblockTime+0x38>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	4a04      	ldr	r2, [pc, #16]	@ (800bf68 <prvResetNextTaskUnblockTime+0x3c>)
 800bf56:	6013      	str	r3, [r2, #0]
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	200006ac 	.word	0x200006ac
 800bf68:	20000714 	.word	0x20000714

0800bf6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf72:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <xTaskGetSchedulerState+0x34>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	e008      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf80:	4b08      	ldr	r3, [pc, #32]	@ (800bfa4 <xTaskGetSchedulerState+0x38>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	e001      	b.n	800bf92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf92:	687b      	ldr	r3, [r7, #4]
	}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	20000700 	.word	0x20000700
 800bfa4:	2000071c 	.word	0x2000071c

0800bfa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d05e      	beq.n	800c07c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc2:	4b31      	ldr	r3, [pc, #196]	@ (800c088 <xTaskPriorityInherit+0xe0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d24e      	bcs.n	800c06a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db06      	blt.n	800bfe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	4b2c      	ldr	r3, [pc, #176]	@ (800c088 <xTaskPriorityInherit+0xe0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfda:	f1c3 0207 	rsb	r2, r3, #7
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4a26      	ldr	r2, [pc, #152]	@ (800c08c <xTaskPriorityInherit+0xe4>)
 800bff4:	4413      	add	r3, r2
 800bff6:	4299      	cmp	r1, r3
 800bff8:	d12f      	bne.n	800c05a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe f9a0 	bl	800a344 <uxListRemove>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10a      	bne.n	800c020 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00e:	2201      	movs	r2, #1
 800c010:	fa02 f303 	lsl.w	r3, r2, r3
 800c014:	43da      	mvns	r2, r3
 800c016:	4b1e      	ldr	r3, [pc, #120]	@ (800c090 <xTaskPriorityInherit+0xe8>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4013      	ands	r3, r2
 800c01c:	4a1c      	ldr	r2, [pc, #112]	@ (800c090 <xTaskPriorityInherit+0xe8>)
 800c01e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c020:	4b19      	ldr	r3, [pc, #100]	@ (800c088 <xTaskPriorityInherit+0xe0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c02e:	2201      	movs	r2, #1
 800c030:	409a      	lsls	r2, r3
 800c032:	4b17      	ldr	r3, [pc, #92]	@ (800c090 <xTaskPriorityInherit+0xe8>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4313      	orrs	r3, r2
 800c038:	4a15      	ldr	r2, [pc, #84]	@ (800c090 <xTaskPriorityInherit+0xe8>)
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4a10      	ldr	r2, [pc, #64]	@ (800c08c <xTaskPriorityInherit+0xe4>)
 800c04a:	441a      	add	r2, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	3304      	adds	r3, #4
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7fe f919 	bl	800a28a <vListInsertEnd>
 800c058:	e004      	b.n	800c064 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c05a:	4b0b      	ldr	r3, [pc, #44]	@ (800c088 <xTaskPriorityInherit+0xe0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c064:	2301      	movs	r3, #1
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	e008      	b.n	800c07c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c06e:	4b06      	ldr	r3, [pc, #24]	@ (800c088 <xTaskPriorityInherit+0xe0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c074:	429a      	cmp	r2, r3
 800c076:	d201      	bcs.n	800c07c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c07c:	68fb      	ldr	r3, [r7, #12]
	}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	200005f4 	.word	0x200005f4
 800c08c:	200005f8 	.word	0x200005f8
 800c090:	200006fc 	.word	0x200006fc

0800c094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d070      	beq.n	800c18c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0aa:	4b3b      	ldr	r3, [pc, #236]	@ (800c198 <xTaskPriorityDisinherit+0x104>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d00b      	beq.n	800c0cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	e7fd      	b.n	800c0c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10b      	bne.n	800c0ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60bb      	str	r3, [r7, #8]
}
 800c0e6:	bf00      	nop
 800c0e8:	bf00      	nop
 800c0ea:	e7fd      	b.n	800c0e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0f0:	1e5a      	subs	r2, r3, #1
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d044      	beq.n	800c18c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c106:	2b00      	cmp	r3, #0
 800c108:	d140      	bne.n	800c18c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3304      	adds	r3, #4
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe f918 	bl	800a344 <uxListRemove>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d115      	bne.n	800c146 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c11e:	491f      	ldr	r1, [pc, #124]	@ (800c19c <xTaskPriorityDisinherit+0x108>)
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xTaskPriorityDisinherit+0xb2>
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c134:	2201      	movs	r2, #1
 800c136:	fa02 f303 	lsl.w	r3, r2, r3
 800c13a:	43da      	mvns	r2, r3
 800c13c:	4b18      	ldr	r3, [pc, #96]	@ (800c1a0 <xTaskPriorityDisinherit+0x10c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4013      	ands	r3, r2
 800c142:	4a17      	ldr	r2, [pc, #92]	@ (800c1a0 <xTaskPriorityDisinherit+0x10c>)
 800c144:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c152:	f1c3 0207 	rsb	r2, r3, #7
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15e:	2201      	movs	r2, #1
 800c160:	409a      	lsls	r2, r3
 800c162:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a0 <xTaskPriorityDisinherit+0x10c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4313      	orrs	r3, r2
 800c168:	4a0d      	ldr	r2, [pc, #52]	@ (800c1a0 <xTaskPriorityDisinherit+0x10c>)
 800c16a:	6013      	str	r3, [r2, #0]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c170:	4613      	mov	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4a08      	ldr	r2, [pc, #32]	@ (800c19c <xTaskPriorityDisinherit+0x108>)
 800c17a:	441a      	add	r2, r3
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3304      	adds	r3, #4
 800c180:	4619      	mov	r1, r3
 800c182:	4610      	mov	r0, r2
 800c184:	f7fe f881 	bl	800a28a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c188:	2301      	movs	r3, #1
 800c18a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c18c:	697b      	ldr	r3, [r7, #20]
	}
 800c18e:	4618      	mov	r0, r3
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200005f4 	.word	0x200005f4
 800c19c:	200005f8 	.word	0x200005f8
 800c1a0:	200006fc 	.word	0x200006fc

0800c1a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d079      	beq.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10b      	bne.n	800c1dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	60fb      	str	r3, [r7, #12]
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e0:	683a      	ldr	r2, [r7, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d902      	bls.n	800c1ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e002      	b.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f6:	69fa      	ldr	r2, [r7, #28]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d059      	beq.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	429a      	cmp	r2, r3
 800c204:	d154      	bne.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c206:	4b2c      	ldr	r3, [pc, #176]	@ (800c2b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	69ba      	ldr	r2, [r7, #24]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d10b      	bne.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60bb      	str	r3, [r7, #8]
}
 800c222:	bf00      	nop
 800c224:	bf00      	nop
 800c226:	e7fd      	b.n	800c224 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c22c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	69fa      	ldr	r2, [r7, #28]
 800c232:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db04      	blt.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	f1c3 0207 	rsb	r2, r3, #7
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	6959      	ldr	r1, [r3, #20]
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4613      	mov	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4a19      	ldr	r2, [pc, #100]	@ (800c2bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c256:	4413      	add	r3, r2
 800c258:	4299      	cmp	r1, r3
 800c25a:	d129      	bne.n	800c2b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	3304      	adds	r3, #4
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe f86f 	bl	800a344 <uxListRemove>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d10a      	bne.n	800c282 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c270:	2201      	movs	r2, #1
 800c272:	fa02 f303 	lsl.w	r3, r2, r3
 800c276:	43da      	mvns	r2, r3
 800c278:	4b11      	ldr	r3, [pc, #68]	@ (800c2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4013      	ands	r3, r2
 800c27e:	4a10      	ldr	r2, [pc, #64]	@ (800c2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c280:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c286:	2201      	movs	r2, #1
 800c288:	409a      	lsls	r2, r3
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4313      	orrs	r3, r2
 800c290:	4a0b      	ldr	r2, [pc, #44]	@ (800c2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4a06      	ldr	r2, [pc, #24]	@ (800c2bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c2a2:	441a      	add	r2, r3
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	f7fd ffed 	bl	800a28a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2b0:	bf00      	nop
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	200005f4 	.word	0x200005f4
 800c2bc:	200005f8 	.word	0x200005f8
 800c2c0:	200006fc 	.word	0x200006fc

0800c2c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2c8:	4b07      	ldr	r3, [pc, #28]	@ (800c2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d004      	beq.n	800c2da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2d0:	4b05      	ldr	r3, [pc, #20]	@ (800c2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2d6:	3201      	adds	r2, #1
 800c2d8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c2da:	4b03      	ldr	r3, [pc, #12]	@ (800c2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
	}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	200005f4 	.word	0x200005f4

0800c2ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2f6:	4b29      	ldr	r3, [pc, #164]	@ (800c39c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2fc:	4b28      	ldr	r3, [pc, #160]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3304      	adds	r3, #4
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe f81e 	bl	800a344 <uxListRemove>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10b      	bne.n	800c326 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c30e:	4b24      	ldr	r3, [pc, #144]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c314:	2201      	movs	r2, #1
 800c316:	fa02 f303 	lsl.w	r3, r2, r3
 800c31a:	43da      	mvns	r2, r3
 800c31c:	4b21      	ldr	r3, [pc, #132]	@ (800c3a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4013      	ands	r3, r2
 800c322:	4a20      	ldr	r2, [pc, #128]	@ (800c3a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c324:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32c:	d10a      	bne.n	800c344 <prvAddCurrentTaskToDelayedList+0x58>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d007      	beq.n	800c344 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c334:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	481a      	ldr	r0, [pc, #104]	@ (800c3a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c33e:	f7fd ffa4 	bl	800a28a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c342:	e026      	b.n	800c392 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4413      	add	r3, r2
 800c34a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c34c:	4b14      	ldr	r3, [pc, #80]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d209      	bcs.n	800c370 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c35c:	4b13      	ldr	r3, [pc, #76]	@ (800c3ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	4610      	mov	r0, r2
 800c36a:	f7fd ffb2 	bl	800a2d2 <vListInsert>
}
 800c36e:	e010      	b.n	800c392 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c370:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3304      	adds	r3, #4
 800c37a:	4619      	mov	r1, r3
 800c37c:	4610      	mov	r0, r2
 800c37e:	f7fd ffa8 	bl	800a2d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c382:	4b0c      	ldr	r3, [pc, #48]	@ (800c3b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d202      	bcs.n	800c392 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c38c:	4a09      	ldr	r2, [pc, #36]	@ (800c3b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6013      	str	r3, [r2, #0]
}
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	200006f8 	.word	0x200006f8
 800c3a0:	200005f4 	.word	0x200005f4
 800c3a4:	200006fc 	.word	0x200006fc
 800c3a8:	200006e0 	.word	0x200006e0
 800c3ac:	200006b0 	.word	0x200006b0
 800c3b0:	200006ac 	.word	0x200006ac
 800c3b4:	20000714 	.word	0x20000714

0800c3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3b04      	subs	r3, #4
 800c3c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3b04      	subs	r3, #4
 800c3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f023 0201 	bic.w	r2, r3, #1
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3b04      	subs	r3, #4
 800c3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c41c <pxPortInitialiseStack+0x64>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3b14      	subs	r3, #20
 800c3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3b04      	subs	r3, #4
 800c3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f06f 0202 	mvn.w	r2, #2
 800c406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3b20      	subs	r3, #32
 800c40c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c40e:	68fb      	ldr	r3, [r7, #12]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	0800c421 	.word	0x0800c421

0800c420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c42a:	4b13      	ldr	r3, [pc, #76]	@ (800c478 <prvTaskExitError+0x58>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c432:	d00b      	beq.n	800c44c <prvTaskExitError+0x2c>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60fb      	str	r3, [r7, #12]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <prvTaskExitError+0x28>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	60bb      	str	r3, [r7, #8]
}
 800c45e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c460:	bf00      	nop
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0fc      	beq.n	800c462 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	2000000c 	.word	0x2000000c
 800c47c:	00000000 	.word	0x00000000

0800c480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c480:	4b07      	ldr	r3, [pc, #28]	@ (800c4a0 <pxCurrentTCBConst2>)
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	6808      	ldr	r0, [r1, #0]
 800c486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	f380 8809 	msr	PSP, r0
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8811 	msr	BASEPRI, r0
 800c49a:	4770      	bx	lr
 800c49c:	f3af 8000 	nop.w

0800c4a0 <pxCurrentTCBConst2>:
 800c4a0:	200005f4 	.word	0x200005f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop

0800c4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4a8:	4808      	ldr	r0, [pc, #32]	@ (800c4cc <prvPortStartFirstTask+0x24>)
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f380 8808 	msr	MSP, r0
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8814 	msr	CONTROL, r0
 800c4ba:	b662      	cpsie	i
 800c4bc:	b661      	cpsie	f
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	df00      	svc	0
 800c4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ca:	bf00      	nop
 800c4cc:	e000ed08 	.word	0xe000ed08

0800c4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4d6:	4b47      	ldr	r3, [pc, #284]	@ (800c5f4 <xPortStartScheduler+0x124>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a47      	ldr	r2, [pc, #284]	@ (800c5f8 <xPortStartScheduler+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10b      	bne.n	800c4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c5f4 <xPortStartScheduler+0x124>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c5fc <xPortStartScheduler+0x12c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d10b      	bne.n	800c51a <xPortStartScheduler+0x4a>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	613b      	str	r3, [r7, #16]
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	e7fd      	b.n	800c516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c51a:	4b39      	ldr	r3, [pc, #228]	@ (800c600 <xPortStartScheduler+0x130>)
 800c51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	22ff      	movs	r2, #255	@ 0xff
 800c52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	4b31      	ldr	r3, [pc, #196]	@ (800c604 <xPortStartScheduler+0x134>)
 800c540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c542:	4b31      	ldr	r3, [pc, #196]	@ (800c608 <xPortStartScheduler+0x138>)
 800c544:	2207      	movs	r2, #7
 800c546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c548:	e009      	b.n	800c55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c54a:	4b2f      	ldr	r3, [pc, #188]	@ (800c608 <xPortStartScheduler+0x138>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3b01      	subs	r3, #1
 800c550:	4a2d      	ldr	r2, [pc, #180]	@ (800c608 <xPortStartScheduler+0x138>)
 800c552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c554:	78fb      	ldrb	r3, [r7, #3]
 800c556:	b2db      	uxtb	r3, r3
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c55e:	78fb      	ldrb	r3, [r7, #3]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c566:	2b80      	cmp	r3, #128	@ 0x80
 800c568:	d0ef      	beq.n	800c54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c56a:	4b27      	ldr	r3, [pc, #156]	@ (800c608 <xPortStartScheduler+0x138>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f1c3 0307 	rsb	r3, r3, #7
 800c572:	2b04      	cmp	r3, #4
 800c574:	d00b      	beq.n	800c58e <xPortStartScheduler+0xbe>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60bb      	str	r3, [r7, #8]
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	e7fd      	b.n	800c58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c58e:	4b1e      	ldr	r3, [pc, #120]	@ (800c608 <xPortStartScheduler+0x138>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	4a1c      	ldr	r2, [pc, #112]	@ (800c608 <xPortStartScheduler+0x138>)
 800c596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c598:	4b1b      	ldr	r3, [pc, #108]	@ (800c608 <xPortStartScheduler+0x138>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5a0:	4a19      	ldr	r2, [pc, #100]	@ (800c608 <xPortStartScheduler+0x138>)
 800c5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5ac:	4b17      	ldr	r3, [pc, #92]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a16      	ldr	r2, [pc, #88]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5b8:	4b14      	ldr	r3, [pc, #80]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a13      	ldr	r2, [pc, #76]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5c4:	f000 f8da 	bl	800c77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5c8:	4b11      	ldr	r3, [pc, #68]	@ (800c610 <xPortStartScheduler+0x140>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5ce:	f000 f8f9 	bl	800c7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5d2:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <xPortStartScheduler+0x144>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c614 <xPortStartScheduler+0x144>)
 800c5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5de:	f7ff ff63 	bl	800c4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5e2:	f7ff fa81 	bl	800bae8 <vTaskSwitchContext>
	prvTaskExitError();
 800c5e6:	f7ff ff1b 	bl	800c420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	e000ed00 	.word	0xe000ed00
 800c5f8:	410fc271 	.word	0x410fc271
 800c5fc:	410fc270 	.word	0x410fc270
 800c600:	e000e400 	.word	0xe000e400
 800c604:	20000720 	.word	0x20000720
 800c608:	20000724 	.word	0x20000724
 800c60c:	e000ed20 	.word	0xe000ed20
 800c610:	2000000c 	.word	0x2000000c
 800c614:	e000ef34 	.word	0xe000ef34

0800c618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	607b      	str	r3, [r7, #4]
}
 800c630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	4a0e      	ldr	r2, [pc, #56]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c63c:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d110      	bne.n	800c666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c644:	4b0c      	ldr	r3, [pc, #48]	@ (800c678 <vPortEnterCritical+0x60>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00b      	beq.n	800c666 <vPortEnterCritical+0x4e>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	603b      	str	r3, [r7, #0]
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	e7fd      	b.n	800c662 <vPortEnterCritical+0x4a>
	}
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	2000000c 	.word	0x2000000c
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c682:	4b12      	ldr	r3, [pc, #72]	@ (800c6cc <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10b      	bne.n	800c6a2 <vPortExitCritical+0x26>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	607b      	str	r3, [r7, #4]
}
 800c69c:	bf00      	nop
 800c69e:	bf00      	nop
 800c6a0:	e7fd      	b.n	800c69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	4a08      	ldr	r2, [pc, #32]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6ac:	4b07      	ldr	r3, [pc, #28]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d105      	bne.n	800c6c0 <vPortExitCritical+0x44>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	2000000c 	.word	0x2000000c

0800c6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6d0:	f3ef 8009 	mrs	r0, PSP
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	4b15      	ldr	r3, [pc, #84]	@ (800c730 <pxCurrentTCBConst>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f01e 0f10 	tst.w	lr, #16
 800c6e0:	bf08      	it	eq
 800c6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	6010      	str	r0, [r2, #0]
 800c6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c6f4:	f380 8811 	msr	BASEPRI, r0
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f7ff f9f2 	bl	800bae8 <vTaskSwitchContext>
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f380 8811 	msr	BASEPRI, r0
 800c70c:	bc09      	pop	{r0, r3}
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	6808      	ldr	r0, [r1, #0]
 800c712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c716:	f01e 0f10 	tst.w	lr, #16
 800c71a:	bf08      	it	eq
 800c71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c720:	f380 8809 	msr	PSP, r0
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst>:
 800c730:	200005f4 	.word	0x200005f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c752:	f7ff f90f 	bl	800b974 <xTaskIncrementTick>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c75c:	4b06      	ldr	r3, [pc, #24]	@ (800c778 <xPortSysTickHandler+0x40>)
 800c75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	2300      	movs	r3, #0
 800c766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f383 8811 	msr	BASEPRI, r3
}
 800c76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c77c:	b480      	push	{r7}
 800c77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c780:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c786:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b4 <vPortSetupTimerInterrupt+0x38>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c78c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b8 <vPortSetupTimerInterrupt+0x3c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a0a      	ldr	r2, [pc, #40]	@ (800c7bc <vPortSetupTimerInterrupt+0x40>)
 800c792:	fba2 2303 	umull	r2, r3, r2, r3
 800c796:	099b      	lsrs	r3, r3, #6
 800c798:	4a09      	ldr	r2, [pc, #36]	@ (800c7c0 <vPortSetupTimerInterrupt+0x44>)
 800c79a:	3b01      	subs	r3, #1
 800c79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c79e:	4b04      	ldr	r3, [pc, #16]	@ (800c7b0 <vPortSetupTimerInterrupt+0x34>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
}
 800c7a4:	bf00      	nop
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	e000e010 	.word	0xe000e010
 800c7b4:	e000e018 	.word	0xe000e018
 800c7b8:	20000000 	.word	0x20000000
 800c7bc:	10624dd3 	.word	0x10624dd3
 800c7c0:	e000e014 	.word	0xe000e014

0800c7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c7d4 <vPortEnableVFP+0x10>
 800c7c8:	6801      	ldr	r1, [r0, #0]
 800c7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c7ce:	6001      	str	r1, [r0, #0]
 800c7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7d2:	bf00      	nop
 800c7d4:	e000ed88 	.word	0xe000ed88

0800c7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7de:	f3ef 8305 	mrs	r3, IPSR
 800c7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b0f      	cmp	r3, #15
 800c7e8:	d915      	bls.n	800c816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ea:	4a18      	ldr	r2, [pc, #96]	@ (800c84c <vPortValidateInterruptPriority+0x74>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7f4:	4b16      	ldr	r3, [pc, #88]	@ (800c850 <vPortValidateInterruptPriority+0x78>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	7afa      	ldrb	r2, [r7, #11]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d20b      	bcs.n	800c816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	607b      	str	r3, [r7, #4]
}
 800c810:	bf00      	nop
 800c812:	bf00      	nop
 800c814:	e7fd      	b.n	800c812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c816:	4b0f      	ldr	r3, [pc, #60]	@ (800c854 <vPortValidateInterruptPriority+0x7c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c81e:	4b0e      	ldr	r3, [pc, #56]	@ (800c858 <vPortValidateInterruptPriority+0x80>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	429a      	cmp	r2, r3
 800c824:	d90b      	bls.n	800c83e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	603b      	str	r3, [r7, #0]
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <vPortValidateInterruptPriority+0x62>
	}
 800c83e:	bf00      	nop
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	e000e3f0 	.word	0xe000e3f0
 800c850:	20000720 	.word	0x20000720
 800c854:	e000ed0c 	.word	0xe000ed0c
 800c858:	20000724 	.word	0x20000724

0800c85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	@ 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c868:	f7fe ffb6 	bl	800b7d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c86c:	4b5c      	ldr	r3, [pc, #368]	@ (800c9e0 <pvPortMalloc+0x184>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c874:	f000 f924 	bl	800cac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c878:	4b5a      	ldr	r3, [pc, #360]	@ (800c9e4 <pvPortMalloc+0x188>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4013      	ands	r3, r2
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 8095 	bne.w	800c9b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01e      	beq.n	800c8ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c88c:	2208      	movs	r2, #8
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4413      	add	r3, r2
 800c892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d015      	beq.n	800c8ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f023 0307 	bic.w	r3, r3, #7
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00b      	beq.n	800c8ca <pvPortMalloc+0x6e>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	617b      	str	r3, [r7, #20]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d06f      	beq.n	800c9b0 <pvPortMalloc+0x154>
 800c8d0:	4b45      	ldr	r3, [pc, #276]	@ (800c9e8 <pvPortMalloc+0x18c>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d86a      	bhi.n	800c9b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8da:	4b44      	ldr	r3, [pc, #272]	@ (800c9ec <pvPortMalloc+0x190>)
 800c8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8de:	4b43      	ldr	r3, [pc, #268]	@ (800c9ec <pvPortMalloc+0x190>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8e4:	e004      	b.n	800c8f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d903      	bls.n	800c902 <pvPortMalloc+0xa6>
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1f1      	bne.n	800c8e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c902:	4b37      	ldr	r3, [pc, #220]	@ (800c9e0 <pvPortMalloc+0x184>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c908:	429a      	cmp	r2, r3
 800c90a:	d051      	beq.n	800c9b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2208      	movs	r2, #8
 800c912:	4413      	add	r3, r2
 800c914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	1ad2      	subs	r2, r2, r3
 800c926:	2308      	movs	r3, #8
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d920      	bls.n	800c970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4413      	add	r3, r2
 800c934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f003 0307 	and.w	r3, r3, #7
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <pvPortMalloc+0xfc>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	613b      	str	r3, [r7, #16]
}
 800c952:	bf00      	nop
 800c954:	bf00      	nop
 800c956:	e7fd      	b.n	800c954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c96a:	69b8      	ldr	r0, [r7, #24]
 800c96c:	f000 f90a 	bl	800cb84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c970:	4b1d      	ldr	r3, [pc, #116]	@ (800c9e8 <pvPortMalloc+0x18c>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9e8 <pvPortMalloc+0x18c>)
 800c97c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c97e:	4b1a      	ldr	r3, [pc, #104]	@ (800c9e8 <pvPortMalloc+0x18c>)
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f0 <pvPortMalloc+0x194>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d203      	bcs.n	800c992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c98a:	4b17      	ldr	r3, [pc, #92]	@ (800c9e8 <pvPortMalloc+0x18c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a18      	ldr	r2, [pc, #96]	@ (800c9f0 <pvPortMalloc+0x194>)
 800c990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	4b13      	ldr	r3, [pc, #76]	@ (800c9e4 <pvPortMalloc+0x188>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	431a      	orrs	r2, r3
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9a6:	4b13      	ldr	r3, [pc, #76]	@ (800c9f4 <pvPortMalloc+0x198>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	4a11      	ldr	r2, [pc, #68]	@ (800c9f4 <pvPortMalloc+0x198>)
 800c9ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9b0:	f7fe ff20 	bl	800b7f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00b      	beq.n	800c9d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	60fb      	str	r3, [r7, #12]
}
 800c9d0:	bf00      	nop
 800c9d2:	bf00      	nop
 800c9d4:	e7fd      	b.n	800c9d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c9d6:	69fb      	ldr	r3, [r7, #28]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3728      	adds	r7, #40	@ 0x28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20004330 	.word	0x20004330
 800c9e4:	20004344 	.word	0x20004344
 800c9e8:	20004334 	.word	0x20004334
 800c9ec:	20004328 	.word	0x20004328
 800c9f0:	20004338 	.word	0x20004338
 800c9f4:	2000433c 	.word	0x2000433c

0800c9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d04f      	beq.n	800caaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca0a:	2308      	movs	r3, #8
 800ca0c:	425b      	negs	r3, r3
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	4413      	add	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	4b25      	ldr	r3, [pc, #148]	@ (800cab4 <vPortFree+0xbc>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4013      	ands	r3, r2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10b      	bne.n	800ca3e <vPortFree+0x46>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	60fb      	str	r3, [r7, #12]
}
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	e7fd      	b.n	800ca3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <vPortFree+0x66>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	60bb      	str	r3, [r7, #8]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	4b14      	ldr	r3, [pc, #80]	@ (800cab4 <vPortFree+0xbc>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4013      	ands	r3, r2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01e      	beq.n	800caaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d11a      	bne.n	800caaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	4b0e      	ldr	r3, [pc, #56]	@ (800cab4 <vPortFree+0xbc>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	43db      	mvns	r3, r3
 800ca7e:	401a      	ands	r2, r3
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca84:	f7fe fea8 	bl	800b7d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cab8 <vPortFree+0xc0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4413      	add	r3, r2
 800ca92:	4a09      	ldr	r2, [pc, #36]	@ (800cab8 <vPortFree+0xc0>)
 800ca94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca96:	6938      	ldr	r0, [r7, #16]
 800ca98:	f000 f874 	bl	800cb84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca9c:	4b07      	ldr	r3, [pc, #28]	@ (800cabc <vPortFree+0xc4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3301      	adds	r3, #1
 800caa2:	4a06      	ldr	r2, [pc, #24]	@ (800cabc <vPortFree+0xc4>)
 800caa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800caa6:	f7fe fea5 	bl	800b7f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800caaa:	bf00      	nop
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20004344 	.word	0x20004344
 800cab8:	20004334 	.word	0x20004334
 800cabc:	20004340 	.word	0x20004340

0800cac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800caca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cacc:	4b27      	ldr	r3, [pc, #156]	@ (800cb6c <prvHeapInit+0xac>)
 800cace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f003 0307 	and.w	r3, r3, #7
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00c      	beq.n	800caf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3307      	adds	r3, #7
 800cade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0307 	bic.w	r3, r3, #7
 800cae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	4a1f      	ldr	r2, [pc, #124]	@ (800cb6c <prvHeapInit+0xac>)
 800caf0:	4413      	add	r3, r2
 800caf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caf8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb70 <prvHeapInit+0xb0>)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cafe:	4b1c      	ldr	r3, [pc, #112]	@ (800cb70 <prvHeapInit+0xb0>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	4413      	add	r3, r2
 800cb0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb0c:	2208      	movs	r2, #8
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f023 0307 	bic.w	r3, r3, #7
 800cb1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4a15      	ldr	r2, [pc, #84]	@ (800cb74 <prvHeapInit+0xb4>)
 800cb20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb22:	4b14      	ldr	r3, [pc, #80]	@ (800cb74 <prvHeapInit+0xb4>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2200      	movs	r2, #0
 800cb28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb2a:	4b12      	ldr	r3, [pc, #72]	@ (800cb74 <prvHeapInit+0xb4>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	1ad2      	subs	r2, r2, r3
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb40:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <prvHeapInit+0xb4>)
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	4a0a      	ldr	r2, [pc, #40]	@ (800cb78 <prvHeapInit+0xb8>)
 800cb4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	4a09      	ldr	r2, [pc, #36]	@ (800cb7c <prvHeapInit+0xbc>)
 800cb56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb58:	4b09      	ldr	r3, [pc, #36]	@ (800cb80 <prvHeapInit+0xc0>)
 800cb5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cb5e:	601a      	str	r2, [r3, #0]
}
 800cb60:	bf00      	nop
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	20000728 	.word	0x20000728
 800cb70:	20004328 	.word	0x20004328
 800cb74:	20004330 	.word	0x20004330
 800cb78:	20004338 	.word	0x20004338
 800cb7c:	20004334 	.word	0x20004334
 800cb80:	20004344 	.word	0x20004344

0800cb84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb8c:	4b28      	ldr	r3, [pc, #160]	@ (800cc30 <prvInsertBlockIntoFreeList+0xac>)
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	e002      	b.n	800cb98 <prvInsertBlockIntoFreeList+0x14>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	60fb      	str	r3, [r7, #12]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d8f7      	bhi.n	800cb92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	4413      	add	r3, r2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d108      	bne.n	800cbc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	685a      	ldr	r2, [r3, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	441a      	add	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d118      	bne.n	800cc0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	4b15      	ldr	r3, [pc, #84]	@ (800cc34 <prvInsertBlockIntoFreeList+0xb0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d00d      	beq.n	800cc02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	441a      	add	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	e008      	b.n	800cc14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc02:	4b0c      	ldr	r3, [pc, #48]	@ (800cc34 <prvInsertBlockIntoFreeList+0xb0>)
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	e003      	b.n	800cc14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d002      	beq.n	800cc22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc22:	bf00      	nop
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	20004328 	.word	0x20004328
 800cc34:	20004330 	.word	0x20004330

0800cc38 <std>:
 800cc38:	2300      	movs	r3, #0
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc46:	6083      	str	r3, [r0, #8]
 800cc48:	8181      	strh	r1, [r0, #12]
 800cc4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc4c:	81c2      	strh	r2, [r0, #14]
 800cc4e:	6183      	str	r3, [r0, #24]
 800cc50:	4619      	mov	r1, r3
 800cc52:	2208      	movs	r2, #8
 800cc54:	305c      	adds	r0, #92	@ 0x5c
 800cc56:	f000 f906 	bl	800ce66 <memset>
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <std+0x58>)
 800cc5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <std+0x5c>)
 800cc60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc62:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <std+0x60>)
 800cc64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <std+0x64>)
 800cc68:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <std+0x68>)
 800cc6c:	6224      	str	r4, [r4, #32]
 800cc6e:	429c      	cmp	r4, r3
 800cc70:	d006      	beq.n	800cc80 <std+0x48>
 800cc72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc76:	4294      	cmp	r4, r2
 800cc78:	d002      	beq.n	800cc80 <std+0x48>
 800cc7a:	33d0      	adds	r3, #208	@ 0xd0
 800cc7c:	429c      	cmp	r4, r3
 800cc7e:	d105      	bne.n	800cc8c <std+0x54>
 800cc80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc88:	f000 b966 	b.w	800cf58 <__retarget_lock_init_recursive>
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800cde1 	.word	0x0800cde1
 800cc94:	0800ce03 	.word	0x0800ce03
 800cc98:	0800ce3b 	.word	0x0800ce3b
 800cc9c:	0800ce5f 	.word	0x0800ce5f
 800cca0:	20004348 	.word	0x20004348

0800cca4 <stdio_exit_handler>:
 800cca4:	4a02      	ldr	r2, [pc, #8]	@ (800ccb0 <stdio_exit_handler+0xc>)
 800cca6:	4903      	ldr	r1, [pc, #12]	@ (800ccb4 <stdio_exit_handler+0x10>)
 800cca8:	4803      	ldr	r0, [pc, #12]	@ (800ccb8 <stdio_exit_handler+0x14>)
 800ccaa:	f000 b869 	b.w	800cd80 <_fwalk_sglue>
 800ccae:	bf00      	nop
 800ccb0:	20000010 	.word	0x20000010
 800ccb4:	0800d811 	.word	0x0800d811
 800ccb8:	20000020 	.word	0x20000020

0800ccbc <cleanup_stdio>:
 800ccbc:	6841      	ldr	r1, [r0, #4]
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <cleanup_stdio+0x34>)
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	d001      	beq.n	800cccc <cleanup_stdio+0x10>
 800ccc8:	f000 fda2 	bl	800d810 <_fflush_r>
 800cccc:	68a1      	ldr	r1, [r4, #8]
 800ccce:	4b09      	ldr	r3, [pc, #36]	@ (800ccf4 <cleanup_stdio+0x38>)
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	d002      	beq.n	800ccda <cleanup_stdio+0x1e>
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 fd9b 	bl	800d810 <_fflush_r>
 800ccda:	68e1      	ldr	r1, [r4, #12]
 800ccdc:	4b06      	ldr	r3, [pc, #24]	@ (800ccf8 <cleanup_stdio+0x3c>)
 800ccde:	4299      	cmp	r1, r3
 800cce0:	d004      	beq.n	800ccec <cleanup_stdio+0x30>
 800cce2:	4620      	mov	r0, r4
 800cce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce8:	f000 bd92 	b.w	800d810 <_fflush_r>
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	bf00      	nop
 800ccf0:	20004348 	.word	0x20004348
 800ccf4:	200043b0 	.word	0x200043b0
 800ccf8:	20004418 	.word	0x20004418

0800ccfc <global_stdio_init.part.0>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	@ (800cd2c <global_stdio_init.part.0+0x30>)
 800cd00:	4c0b      	ldr	r4, [pc, #44]	@ (800cd30 <global_stdio_init.part.0+0x34>)
 800cd02:	4a0c      	ldr	r2, [pc, #48]	@ (800cd34 <global_stdio_init.part.0+0x38>)
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	4620      	mov	r0, r4
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2104      	movs	r1, #4
 800cd0c:	f7ff ff94 	bl	800cc38 <std>
 800cd10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd14:	2201      	movs	r2, #1
 800cd16:	2109      	movs	r1, #9
 800cd18:	f7ff ff8e 	bl	800cc38 <std>
 800cd1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd20:	2202      	movs	r2, #2
 800cd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd26:	2112      	movs	r1, #18
 800cd28:	f7ff bf86 	b.w	800cc38 <std>
 800cd2c:	20004480 	.word	0x20004480
 800cd30:	20004348 	.word	0x20004348
 800cd34:	0800cca5 	.word	0x0800cca5

0800cd38 <__sfp_lock_acquire>:
 800cd38:	4801      	ldr	r0, [pc, #4]	@ (800cd40 <__sfp_lock_acquire+0x8>)
 800cd3a:	f000 b90e 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800cd3e:	bf00      	nop
 800cd40:	20004489 	.word	0x20004489

0800cd44 <__sfp_lock_release>:
 800cd44:	4801      	ldr	r0, [pc, #4]	@ (800cd4c <__sfp_lock_release+0x8>)
 800cd46:	f000 b909 	b.w	800cf5c <__retarget_lock_release_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20004489 	.word	0x20004489

0800cd50 <__sinit>:
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4604      	mov	r4, r0
 800cd54:	f7ff fff0 	bl	800cd38 <__sfp_lock_acquire>
 800cd58:	6a23      	ldr	r3, [r4, #32]
 800cd5a:	b11b      	cbz	r3, 800cd64 <__sinit+0x14>
 800cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd60:	f7ff bff0 	b.w	800cd44 <__sfp_lock_release>
 800cd64:	4b04      	ldr	r3, [pc, #16]	@ (800cd78 <__sinit+0x28>)
 800cd66:	6223      	str	r3, [r4, #32]
 800cd68:	4b04      	ldr	r3, [pc, #16]	@ (800cd7c <__sinit+0x2c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f5      	bne.n	800cd5c <__sinit+0xc>
 800cd70:	f7ff ffc4 	bl	800ccfc <global_stdio_init.part.0>
 800cd74:	e7f2      	b.n	800cd5c <__sinit+0xc>
 800cd76:	bf00      	nop
 800cd78:	0800ccbd 	.word	0x0800ccbd
 800cd7c:	20004480 	.word	0x20004480

0800cd80 <_fwalk_sglue>:
 800cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	4607      	mov	r7, r0
 800cd86:	4688      	mov	r8, r1
 800cd88:	4614      	mov	r4, r2
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd90:	f1b9 0901 	subs.w	r9, r9, #1
 800cd94:	d505      	bpl.n	800cda2 <_fwalk_sglue+0x22>
 800cd96:	6824      	ldr	r4, [r4, #0]
 800cd98:	2c00      	cmp	r4, #0
 800cd9a:	d1f7      	bne.n	800cd8c <_fwalk_sglue+0xc>
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d907      	bls.n	800cdb8 <_fwalk_sglue+0x38>
 800cda8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdac:	3301      	adds	r3, #1
 800cdae:	d003      	beq.n	800cdb8 <_fwalk_sglue+0x38>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	47c0      	blx	r8
 800cdb6:	4306      	orrs	r6, r0
 800cdb8:	3568      	adds	r5, #104	@ 0x68
 800cdba:	e7e9      	b.n	800cd90 <_fwalk_sglue+0x10>

0800cdbc <iprintf>:
 800cdbc:	b40f      	push	{r0, r1, r2, r3}
 800cdbe:	b507      	push	{r0, r1, r2, lr}
 800cdc0:	4906      	ldr	r1, [pc, #24]	@ (800cddc <iprintf+0x20>)
 800cdc2:	ab04      	add	r3, sp, #16
 800cdc4:	6808      	ldr	r0, [r1, #0]
 800cdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdca:	6881      	ldr	r1, [r0, #8]
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	f000 f9f7 	bl	800d1c0 <_vfiprintf_r>
 800cdd2:	b003      	add	sp, #12
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b004      	add	sp, #16
 800cdda:	4770      	bx	lr
 800cddc:	2000001c 	.word	0x2000001c

0800cde0 <__sread>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	460c      	mov	r4, r1
 800cde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde8:	f000 f868 	bl	800cebc <_read_r>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	bfab      	itete	ge
 800cdf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cdf2:	89a3      	ldrhlt	r3, [r4, #12]
 800cdf4:	181b      	addge	r3, r3, r0
 800cdf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cdfa:	bfac      	ite	ge
 800cdfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cdfe:	81a3      	strhlt	r3, [r4, #12]
 800ce00:	bd10      	pop	{r4, pc}

0800ce02 <__swrite>:
 800ce02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce06:	461f      	mov	r7, r3
 800ce08:	898b      	ldrh	r3, [r1, #12]
 800ce0a:	05db      	lsls	r3, r3, #23
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	460c      	mov	r4, r1
 800ce10:	4616      	mov	r6, r2
 800ce12:	d505      	bpl.n	800ce20 <__swrite+0x1e>
 800ce14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce18:	2302      	movs	r3, #2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f000 f83c 	bl	800ce98 <_lseek_r>
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	463b      	mov	r3, r7
 800ce30:	4628      	mov	r0, r5
 800ce32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce36:	f000 b853 	b.w	800cee0 <_write_r>

0800ce3a <__sseek>:
 800ce3a:	b510      	push	{r4, lr}
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce42:	f000 f829 	bl	800ce98 <_lseek_r>
 800ce46:	1c43      	adds	r3, r0, #1
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	bf15      	itete	ne
 800ce4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce56:	81a3      	strheq	r3, [r4, #12]
 800ce58:	bf18      	it	ne
 800ce5a:	81a3      	strhne	r3, [r4, #12]
 800ce5c:	bd10      	pop	{r4, pc}

0800ce5e <__sclose>:
 800ce5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce62:	f000 b809 	b.w	800ce78 <_close_r>

0800ce66 <memset>:
 800ce66:	4402      	add	r2, r0
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d100      	bne.n	800ce70 <memset+0xa>
 800ce6e:	4770      	bx	lr
 800ce70:	f803 1b01 	strb.w	r1, [r3], #1
 800ce74:	e7f9      	b.n	800ce6a <memset+0x4>
	...

0800ce78 <_close_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d06      	ldr	r5, [pc, #24]	@ (800ce94 <_close_r+0x1c>)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4604      	mov	r4, r0
 800ce80:	4608      	mov	r0, r1
 800ce82:	602b      	str	r3, [r5, #0]
 800ce84:	f7f4 fecf 	bl	8001c26 <_close>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_close_r+0x1a>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_close_r+0x1a>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	20004484 	.word	0x20004484

0800ce98 <_lseek_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d07      	ldr	r5, [pc, #28]	@ (800ceb8 <_lseek_r+0x20>)
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	4608      	mov	r0, r1
 800cea0:	4611      	mov	r1, r2
 800cea2:	2200      	movs	r2, #0
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	f7f4 fee4 	bl	8001c74 <_lseek>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_lseek_r+0x1e>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_lseek_r+0x1e>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	20004484 	.word	0x20004484

0800cebc <_read_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	@ (800cedc <_read_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f4 fe72 	bl	8001bb4 <_read>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_read_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_read_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20004484 	.word	0x20004484

0800cee0 <_write_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	@ (800cf00 <_write_r+0x20>)
 800cee4:	4604      	mov	r4, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f4 fe7d 	bl	8001bee <_write>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_write_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_write_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20004484 	.word	0x20004484

0800cf04 <__errno>:
 800cf04:	4b01      	ldr	r3, [pc, #4]	@ (800cf0c <__errno+0x8>)
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	2000001c 	.word	0x2000001c

0800cf10 <__libc_init_array>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4d0d      	ldr	r5, [pc, #52]	@ (800cf48 <__libc_init_array+0x38>)
 800cf14:	4c0d      	ldr	r4, [pc, #52]	@ (800cf4c <__libc_init_array+0x3c>)
 800cf16:	1b64      	subs	r4, r4, r5
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	2600      	movs	r6, #0
 800cf1c:	42a6      	cmp	r6, r4
 800cf1e:	d109      	bne.n	800cf34 <__libc_init_array+0x24>
 800cf20:	4d0b      	ldr	r5, [pc, #44]	@ (800cf50 <__libc_init_array+0x40>)
 800cf22:	4c0c      	ldr	r4, [pc, #48]	@ (800cf54 <__libc_init_array+0x44>)
 800cf24:	f000 fdc4 	bl	800dab0 <_init>
 800cf28:	1b64      	subs	r4, r4, r5
 800cf2a:	10a4      	asrs	r4, r4, #2
 800cf2c:	2600      	movs	r6, #0
 800cf2e:	42a6      	cmp	r6, r4
 800cf30:	d105      	bne.n	800cf3e <__libc_init_array+0x2e>
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf38:	4798      	blx	r3
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7ee      	b.n	800cf1c <__libc_init_array+0xc>
 800cf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf42:	4798      	blx	r3
 800cf44:	3601      	adds	r6, #1
 800cf46:	e7f2      	b.n	800cf2e <__libc_init_array+0x1e>
 800cf48:	0800e108 	.word	0x0800e108
 800cf4c:	0800e108 	.word	0x0800e108
 800cf50:	0800e108 	.word	0x0800e108
 800cf54:	0800e10c 	.word	0x0800e10c

0800cf58 <__retarget_lock_init_recursive>:
 800cf58:	4770      	bx	lr

0800cf5a <__retarget_lock_acquire_recursive>:
 800cf5a:	4770      	bx	lr

0800cf5c <__retarget_lock_release_recursive>:
 800cf5c:	4770      	bx	lr

0800cf5e <memcpy>:
 800cf5e:	440a      	add	r2, r1
 800cf60:	4291      	cmp	r1, r2
 800cf62:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf66:	d100      	bne.n	800cf6a <memcpy+0xc>
 800cf68:	4770      	bx	lr
 800cf6a:	b510      	push	{r4, lr}
 800cf6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf74:	4291      	cmp	r1, r2
 800cf76:	d1f9      	bne.n	800cf6c <memcpy+0xe>
 800cf78:	bd10      	pop	{r4, pc}
	...

0800cf7c <_free_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4605      	mov	r5, r0
 800cf80:	2900      	cmp	r1, #0
 800cf82:	d041      	beq.n	800d008 <_free_r+0x8c>
 800cf84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf88:	1f0c      	subs	r4, r1, #4
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfb8      	it	lt
 800cf8e:	18e4      	addlt	r4, r4, r3
 800cf90:	f000 f8e0 	bl	800d154 <__malloc_lock>
 800cf94:	4a1d      	ldr	r2, [pc, #116]	@ (800d00c <_free_r+0x90>)
 800cf96:	6813      	ldr	r3, [r2, #0]
 800cf98:	b933      	cbnz	r3, 800cfa8 <_free_r+0x2c>
 800cf9a:	6063      	str	r3, [r4, #4]
 800cf9c:	6014      	str	r4, [r2, #0]
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfa4:	f000 b8dc 	b.w	800d160 <__malloc_unlock>
 800cfa8:	42a3      	cmp	r3, r4
 800cfaa:	d908      	bls.n	800cfbe <_free_r+0x42>
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	1821      	adds	r1, r4, r0
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf01      	itttt	eq
 800cfb4:	6819      	ldreq	r1, [r3, #0]
 800cfb6:	685b      	ldreq	r3, [r3, #4]
 800cfb8:	1809      	addeq	r1, r1, r0
 800cfba:	6021      	streq	r1, [r4, #0]
 800cfbc:	e7ed      	b.n	800cf9a <_free_r+0x1e>
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	b10b      	cbz	r3, 800cfc8 <_free_r+0x4c>
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	d9fa      	bls.n	800cfbe <_free_r+0x42>
 800cfc8:	6811      	ldr	r1, [r2, #0]
 800cfca:	1850      	adds	r0, r2, r1
 800cfcc:	42a0      	cmp	r0, r4
 800cfce:	d10b      	bne.n	800cfe8 <_free_r+0x6c>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	4401      	add	r1, r0
 800cfd4:	1850      	adds	r0, r2, r1
 800cfd6:	4283      	cmp	r3, r0
 800cfd8:	6011      	str	r1, [r2, #0]
 800cfda:	d1e0      	bne.n	800cf9e <_free_r+0x22>
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	6053      	str	r3, [r2, #4]
 800cfe2:	4408      	add	r0, r1
 800cfe4:	6010      	str	r0, [r2, #0]
 800cfe6:	e7da      	b.n	800cf9e <_free_r+0x22>
 800cfe8:	d902      	bls.n	800cff0 <_free_r+0x74>
 800cfea:	230c      	movs	r3, #12
 800cfec:	602b      	str	r3, [r5, #0]
 800cfee:	e7d6      	b.n	800cf9e <_free_r+0x22>
 800cff0:	6820      	ldr	r0, [r4, #0]
 800cff2:	1821      	adds	r1, r4, r0
 800cff4:	428b      	cmp	r3, r1
 800cff6:	bf04      	itt	eq
 800cff8:	6819      	ldreq	r1, [r3, #0]
 800cffa:	685b      	ldreq	r3, [r3, #4]
 800cffc:	6063      	str	r3, [r4, #4]
 800cffe:	bf04      	itt	eq
 800d000:	1809      	addeq	r1, r1, r0
 800d002:	6021      	streq	r1, [r4, #0]
 800d004:	6054      	str	r4, [r2, #4]
 800d006:	e7ca      	b.n	800cf9e <_free_r+0x22>
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	20004490 	.word	0x20004490

0800d010 <sbrk_aligned>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	4e0f      	ldr	r6, [pc, #60]	@ (800d050 <sbrk_aligned+0x40>)
 800d014:	460c      	mov	r4, r1
 800d016:	6831      	ldr	r1, [r6, #0]
 800d018:	4605      	mov	r5, r0
 800d01a:	b911      	cbnz	r1, 800d022 <sbrk_aligned+0x12>
 800d01c:	f000 fcb4 	bl	800d988 <_sbrk_r>
 800d020:	6030      	str	r0, [r6, #0]
 800d022:	4621      	mov	r1, r4
 800d024:	4628      	mov	r0, r5
 800d026:	f000 fcaf 	bl	800d988 <_sbrk_r>
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	d103      	bne.n	800d036 <sbrk_aligned+0x26>
 800d02e:	f04f 34ff 	mov.w	r4, #4294967295
 800d032:	4620      	mov	r0, r4
 800d034:	bd70      	pop	{r4, r5, r6, pc}
 800d036:	1cc4      	adds	r4, r0, #3
 800d038:	f024 0403 	bic.w	r4, r4, #3
 800d03c:	42a0      	cmp	r0, r4
 800d03e:	d0f8      	beq.n	800d032 <sbrk_aligned+0x22>
 800d040:	1a21      	subs	r1, r4, r0
 800d042:	4628      	mov	r0, r5
 800d044:	f000 fca0 	bl	800d988 <_sbrk_r>
 800d048:	3001      	adds	r0, #1
 800d04a:	d1f2      	bne.n	800d032 <sbrk_aligned+0x22>
 800d04c:	e7ef      	b.n	800d02e <sbrk_aligned+0x1e>
 800d04e:	bf00      	nop
 800d050:	2000448c 	.word	0x2000448c

0800d054 <_malloc_r>:
 800d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d058:	1ccd      	adds	r5, r1, #3
 800d05a:	f025 0503 	bic.w	r5, r5, #3
 800d05e:	3508      	adds	r5, #8
 800d060:	2d0c      	cmp	r5, #12
 800d062:	bf38      	it	cc
 800d064:	250c      	movcc	r5, #12
 800d066:	2d00      	cmp	r5, #0
 800d068:	4606      	mov	r6, r0
 800d06a:	db01      	blt.n	800d070 <_malloc_r+0x1c>
 800d06c:	42a9      	cmp	r1, r5
 800d06e:	d904      	bls.n	800d07a <_malloc_r+0x26>
 800d070:	230c      	movs	r3, #12
 800d072:	6033      	str	r3, [r6, #0]
 800d074:	2000      	movs	r0, #0
 800d076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d07a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d150 <_malloc_r+0xfc>
 800d07e:	f000 f869 	bl	800d154 <__malloc_lock>
 800d082:	f8d8 3000 	ldr.w	r3, [r8]
 800d086:	461c      	mov	r4, r3
 800d088:	bb44      	cbnz	r4, 800d0dc <_malloc_r+0x88>
 800d08a:	4629      	mov	r1, r5
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff ffbf 	bl	800d010 <sbrk_aligned>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	4604      	mov	r4, r0
 800d096:	d158      	bne.n	800d14a <_malloc_r+0xf6>
 800d098:	f8d8 4000 	ldr.w	r4, [r8]
 800d09c:	4627      	mov	r7, r4
 800d09e:	2f00      	cmp	r7, #0
 800d0a0:	d143      	bne.n	800d12a <_malloc_r+0xd6>
 800d0a2:	2c00      	cmp	r4, #0
 800d0a4:	d04b      	beq.n	800d13e <_malloc_r+0xea>
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	eb04 0903 	add.w	r9, r4, r3
 800d0b0:	f000 fc6a 	bl	800d988 <_sbrk_r>
 800d0b4:	4581      	cmp	r9, r0
 800d0b6:	d142      	bne.n	800d13e <_malloc_r+0xea>
 800d0b8:	6821      	ldr	r1, [r4, #0]
 800d0ba:	1a6d      	subs	r5, r5, r1
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7ff ffa6 	bl	800d010 <sbrk_aligned>
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d03a      	beq.n	800d13e <_malloc_r+0xea>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	442b      	add	r3, r5
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	bb62      	cbnz	r2, 800d130 <_malloc_r+0xdc>
 800d0d6:	f8c8 7000 	str.w	r7, [r8]
 800d0da:	e00f      	b.n	800d0fc <_malloc_r+0xa8>
 800d0dc:	6822      	ldr	r2, [r4, #0]
 800d0de:	1b52      	subs	r2, r2, r5
 800d0e0:	d420      	bmi.n	800d124 <_malloc_r+0xd0>
 800d0e2:	2a0b      	cmp	r2, #11
 800d0e4:	d917      	bls.n	800d116 <_malloc_r+0xc2>
 800d0e6:	1961      	adds	r1, r4, r5
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	6025      	str	r5, [r4, #0]
 800d0ec:	bf18      	it	ne
 800d0ee:	6059      	strne	r1, [r3, #4]
 800d0f0:	6863      	ldr	r3, [r4, #4]
 800d0f2:	bf08      	it	eq
 800d0f4:	f8c8 1000 	streq.w	r1, [r8]
 800d0f8:	5162      	str	r2, [r4, r5]
 800d0fa:	604b      	str	r3, [r1, #4]
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f000 f82f 	bl	800d160 <__malloc_unlock>
 800d102:	f104 000b 	add.w	r0, r4, #11
 800d106:	1d23      	adds	r3, r4, #4
 800d108:	f020 0007 	bic.w	r0, r0, #7
 800d10c:	1ac2      	subs	r2, r0, r3
 800d10e:	bf1c      	itt	ne
 800d110:	1a1b      	subne	r3, r3, r0
 800d112:	50a3      	strne	r3, [r4, r2]
 800d114:	e7af      	b.n	800d076 <_malloc_r+0x22>
 800d116:	6862      	ldr	r2, [r4, #4]
 800d118:	42a3      	cmp	r3, r4
 800d11a:	bf0c      	ite	eq
 800d11c:	f8c8 2000 	streq.w	r2, [r8]
 800d120:	605a      	strne	r2, [r3, #4]
 800d122:	e7eb      	b.n	800d0fc <_malloc_r+0xa8>
 800d124:	4623      	mov	r3, r4
 800d126:	6864      	ldr	r4, [r4, #4]
 800d128:	e7ae      	b.n	800d088 <_malloc_r+0x34>
 800d12a:	463c      	mov	r4, r7
 800d12c:	687f      	ldr	r7, [r7, #4]
 800d12e:	e7b6      	b.n	800d09e <_malloc_r+0x4a>
 800d130:	461a      	mov	r2, r3
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	42a3      	cmp	r3, r4
 800d136:	d1fb      	bne.n	800d130 <_malloc_r+0xdc>
 800d138:	2300      	movs	r3, #0
 800d13a:	6053      	str	r3, [r2, #4]
 800d13c:	e7de      	b.n	800d0fc <_malloc_r+0xa8>
 800d13e:	230c      	movs	r3, #12
 800d140:	6033      	str	r3, [r6, #0]
 800d142:	4630      	mov	r0, r6
 800d144:	f000 f80c 	bl	800d160 <__malloc_unlock>
 800d148:	e794      	b.n	800d074 <_malloc_r+0x20>
 800d14a:	6005      	str	r5, [r0, #0]
 800d14c:	e7d6      	b.n	800d0fc <_malloc_r+0xa8>
 800d14e:	bf00      	nop
 800d150:	20004490 	.word	0x20004490

0800d154 <__malloc_lock>:
 800d154:	4801      	ldr	r0, [pc, #4]	@ (800d15c <__malloc_lock+0x8>)
 800d156:	f7ff bf00 	b.w	800cf5a <__retarget_lock_acquire_recursive>
 800d15a:	bf00      	nop
 800d15c:	20004488 	.word	0x20004488

0800d160 <__malloc_unlock>:
 800d160:	4801      	ldr	r0, [pc, #4]	@ (800d168 <__malloc_unlock+0x8>)
 800d162:	f7ff befb 	b.w	800cf5c <__retarget_lock_release_recursive>
 800d166:	bf00      	nop
 800d168:	20004488 	.word	0x20004488

0800d16c <__sfputc_r>:
 800d16c:	6893      	ldr	r3, [r2, #8]
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	b410      	push	{r4}
 800d174:	6093      	str	r3, [r2, #8]
 800d176:	da08      	bge.n	800d18a <__sfputc_r+0x1e>
 800d178:	6994      	ldr	r4, [r2, #24]
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	db01      	blt.n	800d182 <__sfputc_r+0x16>
 800d17e:	290a      	cmp	r1, #10
 800d180:	d103      	bne.n	800d18a <__sfputc_r+0x1e>
 800d182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d186:	f000 bb6b 	b.w	800d860 <__swbuf_r>
 800d18a:	6813      	ldr	r3, [r2, #0]
 800d18c:	1c58      	adds	r0, r3, #1
 800d18e:	6010      	str	r0, [r2, #0]
 800d190:	7019      	strb	r1, [r3, #0]
 800d192:	4608      	mov	r0, r1
 800d194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <__sfputs_r>:
 800d19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19c:	4606      	mov	r6, r0
 800d19e:	460f      	mov	r7, r1
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	18d5      	adds	r5, r2, r3
 800d1a4:	42ac      	cmp	r4, r5
 800d1a6:	d101      	bne.n	800d1ac <__sfputs_r+0x12>
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	e007      	b.n	800d1bc <__sfputs_r+0x22>
 800d1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b0:	463a      	mov	r2, r7
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ffda 	bl	800d16c <__sfputc_r>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d1f3      	bne.n	800d1a4 <__sfputs_r+0xa>
 800d1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1c0 <_vfiprintf_r>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	b09d      	sub	sp, #116	@ 0x74
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	4698      	mov	r8, r3
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b118      	cbz	r0, 800d1d8 <_vfiprintf_r+0x18>
 800d1d0:	6a03      	ldr	r3, [r0, #32]
 800d1d2:	b90b      	cbnz	r3, 800d1d8 <_vfiprintf_r+0x18>
 800d1d4:	f7ff fdbc 	bl	800cd50 <__sinit>
 800d1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1e6:	f7ff feb8 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	071b      	lsls	r3, r3, #28
 800d1ee:	d501      	bpl.n	800d1f4 <_vfiprintf_r+0x34>
 800d1f0:	692b      	ldr	r3, [r5, #16]
 800d1f2:	b99b      	cbnz	r3, 800d21c <_vfiprintf_r+0x5c>
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 fb70 	bl	800d8dc <__swsetup_r>
 800d1fc:	b170      	cbz	r0, 800d21c <_vfiprintf_r+0x5c>
 800d1fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d200:	07dc      	lsls	r4, r3, #31
 800d202:	d504      	bpl.n	800d20e <_vfiprintf_r+0x4e>
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	b01d      	add	sp, #116	@ 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	0598      	lsls	r0, r3, #22
 800d212:	d4f7      	bmi.n	800d204 <_vfiprintf_r+0x44>
 800d214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d216:	f7ff fea1 	bl	800cf5c <__retarget_lock_release_recursive>
 800d21a:	e7f3      	b.n	800d204 <_vfiprintf_r+0x44>
 800d21c:	2300      	movs	r3, #0
 800d21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d220:	2320      	movs	r3, #32
 800d222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d226:	f8cd 800c 	str.w	r8, [sp, #12]
 800d22a:	2330      	movs	r3, #48	@ 0x30
 800d22c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3dc <_vfiprintf_r+0x21c>
 800d230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d234:	f04f 0901 	mov.w	r9, #1
 800d238:	4623      	mov	r3, r4
 800d23a:	469a      	mov	sl, r3
 800d23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d240:	b10a      	cbz	r2, 800d246 <_vfiprintf_r+0x86>
 800d242:	2a25      	cmp	r2, #37	@ 0x25
 800d244:	d1f9      	bne.n	800d23a <_vfiprintf_r+0x7a>
 800d246:	ebba 0b04 	subs.w	fp, sl, r4
 800d24a:	d00b      	beq.n	800d264 <_vfiprintf_r+0xa4>
 800d24c:	465b      	mov	r3, fp
 800d24e:	4622      	mov	r2, r4
 800d250:	4629      	mov	r1, r5
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ffa1 	bl	800d19a <__sfputs_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	f000 80a7 	beq.w	800d3ac <_vfiprintf_r+0x1ec>
 800d25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d260:	445a      	add	r2, fp
 800d262:	9209      	str	r2, [sp, #36]	@ 0x24
 800d264:	f89a 3000 	ldrb.w	r3, [sl]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 809f 	beq.w	800d3ac <_vfiprintf_r+0x1ec>
 800d26e:	2300      	movs	r3, #0
 800d270:	f04f 32ff 	mov.w	r2, #4294967295
 800d274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d278:	f10a 0a01 	add.w	sl, sl, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	9307      	str	r3, [sp, #28]
 800d280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d284:	931a      	str	r3, [sp, #104]	@ 0x68
 800d286:	4654      	mov	r4, sl
 800d288:	2205      	movs	r2, #5
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	4853      	ldr	r0, [pc, #332]	@ (800d3dc <_vfiprintf_r+0x21c>)
 800d290:	f7f2 ffa6 	bl	80001e0 <memchr>
 800d294:	9a04      	ldr	r2, [sp, #16]
 800d296:	b9d8      	cbnz	r0, 800d2d0 <_vfiprintf_r+0x110>
 800d298:	06d1      	lsls	r1, r2, #27
 800d29a:	bf44      	itt	mi
 800d29c:	2320      	movmi	r3, #32
 800d29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a2:	0713      	lsls	r3, r2, #28
 800d2a4:	bf44      	itt	mi
 800d2a6:	232b      	movmi	r3, #43	@ 0x2b
 800d2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2b2:	d015      	beq.n	800d2e0 <_vfiprintf_r+0x120>
 800d2b4:	9a07      	ldr	r2, [sp, #28]
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f04f 0c0a 	mov.w	ip, #10
 800d2be:	4621      	mov	r1, r4
 800d2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c4:	3b30      	subs	r3, #48	@ 0x30
 800d2c6:	2b09      	cmp	r3, #9
 800d2c8:	d94b      	bls.n	800d362 <_vfiprintf_r+0x1a2>
 800d2ca:	b1b0      	cbz	r0, 800d2fa <_vfiprintf_r+0x13a>
 800d2cc:	9207      	str	r2, [sp, #28]
 800d2ce:	e014      	b.n	800d2fa <_vfiprintf_r+0x13a>
 800d2d0:	eba0 0308 	sub.w	r3, r0, r8
 800d2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	46a2      	mov	sl, r4
 800d2de:	e7d2      	b.n	800d286 <_vfiprintf_r+0xc6>
 800d2e0:	9b03      	ldr	r3, [sp, #12]
 800d2e2:	1d19      	adds	r1, r3, #4
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	9103      	str	r1, [sp, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bfbb      	ittet	lt
 800d2ec:	425b      	neglt	r3, r3
 800d2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d2f2:	9307      	strge	r3, [sp, #28]
 800d2f4:	9307      	strlt	r3, [sp, #28]
 800d2f6:	bfb8      	it	lt
 800d2f8:	9204      	strlt	r2, [sp, #16]
 800d2fa:	7823      	ldrb	r3, [r4, #0]
 800d2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2fe:	d10a      	bne.n	800d316 <_vfiprintf_r+0x156>
 800d300:	7863      	ldrb	r3, [r4, #1]
 800d302:	2b2a      	cmp	r3, #42	@ 0x2a
 800d304:	d132      	bne.n	800d36c <_vfiprintf_r+0x1ac>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	1d1a      	adds	r2, r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9203      	str	r2, [sp, #12]
 800d30e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d312:	3402      	adds	r4, #2
 800d314:	9305      	str	r3, [sp, #20]
 800d316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3ec <_vfiprintf_r+0x22c>
 800d31a:	7821      	ldrb	r1, [r4, #0]
 800d31c:	2203      	movs	r2, #3
 800d31e:	4650      	mov	r0, sl
 800d320:	f7f2 ff5e 	bl	80001e0 <memchr>
 800d324:	b138      	cbz	r0, 800d336 <_vfiprintf_r+0x176>
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	eba0 000a 	sub.w	r0, r0, sl
 800d32c:	2240      	movs	r2, #64	@ 0x40
 800d32e:	4082      	lsls	r2, r0
 800d330:	4313      	orrs	r3, r2
 800d332:	3401      	adds	r4, #1
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33a:	4829      	ldr	r0, [pc, #164]	@ (800d3e0 <_vfiprintf_r+0x220>)
 800d33c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d340:	2206      	movs	r2, #6
 800d342:	f7f2 ff4d 	bl	80001e0 <memchr>
 800d346:	2800      	cmp	r0, #0
 800d348:	d03f      	beq.n	800d3ca <_vfiprintf_r+0x20a>
 800d34a:	4b26      	ldr	r3, [pc, #152]	@ (800d3e4 <_vfiprintf_r+0x224>)
 800d34c:	bb1b      	cbnz	r3, 800d396 <_vfiprintf_r+0x1d6>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	3307      	adds	r3, #7
 800d352:	f023 0307 	bic.w	r3, r3, #7
 800d356:	3308      	adds	r3, #8
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d35c:	443b      	add	r3, r7
 800d35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d360:	e76a      	b.n	800d238 <_vfiprintf_r+0x78>
 800d362:	fb0c 3202 	mla	r2, ip, r2, r3
 800d366:	460c      	mov	r4, r1
 800d368:	2001      	movs	r0, #1
 800d36a:	e7a8      	b.n	800d2be <_vfiprintf_r+0xfe>
 800d36c:	2300      	movs	r3, #0
 800d36e:	3401      	adds	r4, #1
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	4619      	mov	r1, r3
 800d374:	f04f 0c0a 	mov.w	ip, #10
 800d378:	4620      	mov	r0, r4
 800d37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d37e:	3a30      	subs	r2, #48	@ 0x30
 800d380:	2a09      	cmp	r2, #9
 800d382:	d903      	bls.n	800d38c <_vfiprintf_r+0x1cc>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0c6      	beq.n	800d316 <_vfiprintf_r+0x156>
 800d388:	9105      	str	r1, [sp, #20]
 800d38a:	e7c4      	b.n	800d316 <_vfiprintf_r+0x156>
 800d38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d390:	4604      	mov	r4, r0
 800d392:	2301      	movs	r3, #1
 800d394:	e7f0      	b.n	800d378 <_vfiprintf_r+0x1b8>
 800d396:	ab03      	add	r3, sp, #12
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	462a      	mov	r2, r5
 800d39c:	4b12      	ldr	r3, [pc, #72]	@ (800d3e8 <_vfiprintf_r+0x228>)
 800d39e:	a904      	add	r1, sp, #16
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f3af 8000 	nop.w
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	1c78      	adds	r0, r7, #1
 800d3aa:	d1d6      	bne.n	800d35a <_vfiprintf_r+0x19a>
 800d3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3ae:	07d9      	lsls	r1, r3, #31
 800d3b0:	d405      	bmi.n	800d3be <_vfiprintf_r+0x1fe>
 800d3b2:	89ab      	ldrh	r3, [r5, #12]
 800d3b4:	059a      	lsls	r2, r3, #22
 800d3b6:	d402      	bmi.n	800d3be <_vfiprintf_r+0x1fe>
 800d3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ba:	f7ff fdcf 	bl	800cf5c <__retarget_lock_release_recursive>
 800d3be:	89ab      	ldrh	r3, [r5, #12]
 800d3c0:	065b      	lsls	r3, r3, #25
 800d3c2:	f53f af1f 	bmi.w	800d204 <_vfiprintf_r+0x44>
 800d3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3c8:	e71e      	b.n	800d208 <_vfiprintf_r+0x48>
 800d3ca:	ab03      	add	r3, sp, #12
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4b05      	ldr	r3, [pc, #20]	@ (800d3e8 <_vfiprintf_r+0x228>)
 800d3d2:	a904      	add	r1, sp, #16
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f000 f879 	bl	800d4cc <_printf_i>
 800d3da:	e7e4      	b.n	800d3a6 <_vfiprintf_r+0x1e6>
 800d3dc:	0800e0cc 	.word	0x0800e0cc
 800d3e0:	0800e0d6 	.word	0x0800e0d6
 800d3e4:	00000000 	.word	0x00000000
 800d3e8:	0800d19b 	.word	0x0800d19b
 800d3ec:	0800e0d2 	.word	0x0800e0d2

0800d3f0 <_printf_common>:
 800d3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	4616      	mov	r6, r2
 800d3f6:	4698      	mov	r8, r3
 800d3f8:	688a      	ldr	r2, [r1, #8]
 800d3fa:	690b      	ldr	r3, [r1, #16]
 800d3fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d400:	4293      	cmp	r3, r2
 800d402:	bfb8      	it	lt
 800d404:	4613      	movlt	r3, r2
 800d406:	6033      	str	r3, [r6, #0]
 800d408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d40c:	4607      	mov	r7, r0
 800d40e:	460c      	mov	r4, r1
 800d410:	b10a      	cbz	r2, 800d416 <_printf_common+0x26>
 800d412:	3301      	adds	r3, #1
 800d414:	6033      	str	r3, [r6, #0]
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	0699      	lsls	r1, r3, #26
 800d41a:	bf42      	ittt	mi
 800d41c:	6833      	ldrmi	r3, [r6, #0]
 800d41e:	3302      	addmi	r3, #2
 800d420:	6033      	strmi	r3, [r6, #0]
 800d422:	6825      	ldr	r5, [r4, #0]
 800d424:	f015 0506 	ands.w	r5, r5, #6
 800d428:	d106      	bne.n	800d438 <_printf_common+0x48>
 800d42a:	f104 0a19 	add.w	sl, r4, #25
 800d42e:	68e3      	ldr	r3, [r4, #12]
 800d430:	6832      	ldr	r2, [r6, #0]
 800d432:	1a9b      	subs	r3, r3, r2
 800d434:	42ab      	cmp	r3, r5
 800d436:	dc26      	bgt.n	800d486 <_printf_common+0x96>
 800d438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d43c:	6822      	ldr	r2, [r4, #0]
 800d43e:	3b00      	subs	r3, #0
 800d440:	bf18      	it	ne
 800d442:	2301      	movne	r3, #1
 800d444:	0692      	lsls	r2, r2, #26
 800d446:	d42b      	bmi.n	800d4a0 <_printf_common+0xb0>
 800d448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d44c:	4641      	mov	r1, r8
 800d44e:	4638      	mov	r0, r7
 800d450:	47c8      	blx	r9
 800d452:	3001      	adds	r0, #1
 800d454:	d01e      	beq.n	800d494 <_printf_common+0xa4>
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	6922      	ldr	r2, [r4, #16]
 800d45a:	f003 0306 	and.w	r3, r3, #6
 800d45e:	2b04      	cmp	r3, #4
 800d460:	bf02      	ittt	eq
 800d462:	68e5      	ldreq	r5, [r4, #12]
 800d464:	6833      	ldreq	r3, [r6, #0]
 800d466:	1aed      	subeq	r5, r5, r3
 800d468:	68a3      	ldr	r3, [r4, #8]
 800d46a:	bf0c      	ite	eq
 800d46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d470:	2500      	movne	r5, #0
 800d472:	4293      	cmp	r3, r2
 800d474:	bfc4      	itt	gt
 800d476:	1a9b      	subgt	r3, r3, r2
 800d478:	18ed      	addgt	r5, r5, r3
 800d47a:	2600      	movs	r6, #0
 800d47c:	341a      	adds	r4, #26
 800d47e:	42b5      	cmp	r5, r6
 800d480:	d11a      	bne.n	800d4b8 <_printf_common+0xc8>
 800d482:	2000      	movs	r0, #0
 800d484:	e008      	b.n	800d498 <_printf_common+0xa8>
 800d486:	2301      	movs	r3, #1
 800d488:	4652      	mov	r2, sl
 800d48a:	4641      	mov	r1, r8
 800d48c:	4638      	mov	r0, r7
 800d48e:	47c8      	blx	r9
 800d490:	3001      	adds	r0, #1
 800d492:	d103      	bne.n	800d49c <_printf_common+0xac>
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49c:	3501      	adds	r5, #1
 800d49e:	e7c6      	b.n	800d42e <_printf_common+0x3e>
 800d4a0:	18e1      	adds	r1, r4, r3
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	2030      	movs	r0, #48	@ 0x30
 800d4a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4aa:	4422      	add	r2, r4
 800d4ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4b4:	3302      	adds	r3, #2
 800d4b6:	e7c7      	b.n	800d448 <_printf_common+0x58>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	4641      	mov	r1, r8
 800d4be:	4638      	mov	r0, r7
 800d4c0:	47c8      	blx	r9
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d0e6      	beq.n	800d494 <_printf_common+0xa4>
 800d4c6:	3601      	adds	r6, #1
 800d4c8:	e7d9      	b.n	800d47e <_printf_common+0x8e>
	...

0800d4cc <_printf_i>:
 800d4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d0:	7e0f      	ldrb	r7, [r1, #24]
 800d4d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4d4:	2f78      	cmp	r7, #120	@ 0x78
 800d4d6:	4691      	mov	r9, r2
 800d4d8:	4680      	mov	r8, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	469a      	mov	sl, r3
 800d4de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4e2:	d807      	bhi.n	800d4f4 <_printf_i+0x28>
 800d4e4:	2f62      	cmp	r7, #98	@ 0x62
 800d4e6:	d80a      	bhi.n	800d4fe <_printf_i+0x32>
 800d4e8:	2f00      	cmp	r7, #0
 800d4ea:	f000 80d1 	beq.w	800d690 <_printf_i+0x1c4>
 800d4ee:	2f58      	cmp	r7, #88	@ 0x58
 800d4f0:	f000 80b8 	beq.w	800d664 <_printf_i+0x198>
 800d4f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d4fc:	e03a      	b.n	800d574 <_printf_i+0xa8>
 800d4fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d502:	2b15      	cmp	r3, #21
 800d504:	d8f6      	bhi.n	800d4f4 <_printf_i+0x28>
 800d506:	a101      	add	r1, pc, #4	@ (adr r1, 800d50c <_printf_i+0x40>)
 800d508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d50c:	0800d565 	.word	0x0800d565
 800d510:	0800d579 	.word	0x0800d579
 800d514:	0800d4f5 	.word	0x0800d4f5
 800d518:	0800d4f5 	.word	0x0800d4f5
 800d51c:	0800d4f5 	.word	0x0800d4f5
 800d520:	0800d4f5 	.word	0x0800d4f5
 800d524:	0800d579 	.word	0x0800d579
 800d528:	0800d4f5 	.word	0x0800d4f5
 800d52c:	0800d4f5 	.word	0x0800d4f5
 800d530:	0800d4f5 	.word	0x0800d4f5
 800d534:	0800d4f5 	.word	0x0800d4f5
 800d538:	0800d677 	.word	0x0800d677
 800d53c:	0800d5a3 	.word	0x0800d5a3
 800d540:	0800d631 	.word	0x0800d631
 800d544:	0800d4f5 	.word	0x0800d4f5
 800d548:	0800d4f5 	.word	0x0800d4f5
 800d54c:	0800d699 	.word	0x0800d699
 800d550:	0800d4f5 	.word	0x0800d4f5
 800d554:	0800d5a3 	.word	0x0800d5a3
 800d558:	0800d4f5 	.word	0x0800d4f5
 800d55c:	0800d4f5 	.word	0x0800d4f5
 800d560:	0800d639 	.word	0x0800d639
 800d564:	6833      	ldr	r3, [r6, #0]
 800d566:	1d1a      	adds	r2, r3, #4
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6032      	str	r2, [r6, #0]
 800d56c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d574:	2301      	movs	r3, #1
 800d576:	e09c      	b.n	800d6b2 <_printf_i+0x1e6>
 800d578:	6833      	ldr	r3, [r6, #0]
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	1d19      	adds	r1, r3, #4
 800d57e:	6031      	str	r1, [r6, #0]
 800d580:	0606      	lsls	r6, r0, #24
 800d582:	d501      	bpl.n	800d588 <_printf_i+0xbc>
 800d584:	681d      	ldr	r5, [r3, #0]
 800d586:	e003      	b.n	800d590 <_printf_i+0xc4>
 800d588:	0645      	lsls	r5, r0, #25
 800d58a:	d5fb      	bpl.n	800d584 <_printf_i+0xb8>
 800d58c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d590:	2d00      	cmp	r5, #0
 800d592:	da03      	bge.n	800d59c <_printf_i+0xd0>
 800d594:	232d      	movs	r3, #45	@ 0x2d
 800d596:	426d      	negs	r5, r5
 800d598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d59c:	4858      	ldr	r0, [pc, #352]	@ (800d700 <_printf_i+0x234>)
 800d59e:	230a      	movs	r3, #10
 800d5a0:	e011      	b.n	800d5c6 <_printf_i+0xfa>
 800d5a2:	6821      	ldr	r1, [r4, #0]
 800d5a4:	6833      	ldr	r3, [r6, #0]
 800d5a6:	0608      	lsls	r0, r1, #24
 800d5a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5ac:	d402      	bmi.n	800d5b4 <_printf_i+0xe8>
 800d5ae:	0649      	lsls	r1, r1, #25
 800d5b0:	bf48      	it	mi
 800d5b2:	b2ad      	uxthmi	r5, r5
 800d5b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5b6:	4852      	ldr	r0, [pc, #328]	@ (800d700 <_printf_i+0x234>)
 800d5b8:	6033      	str	r3, [r6, #0]
 800d5ba:	bf14      	ite	ne
 800d5bc:	230a      	movne	r3, #10
 800d5be:	2308      	moveq	r3, #8
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5c6:	6866      	ldr	r6, [r4, #4]
 800d5c8:	60a6      	str	r6, [r4, #8]
 800d5ca:	2e00      	cmp	r6, #0
 800d5cc:	db05      	blt.n	800d5da <_printf_i+0x10e>
 800d5ce:	6821      	ldr	r1, [r4, #0]
 800d5d0:	432e      	orrs	r6, r5
 800d5d2:	f021 0104 	bic.w	r1, r1, #4
 800d5d6:	6021      	str	r1, [r4, #0]
 800d5d8:	d04b      	beq.n	800d672 <_printf_i+0x1a6>
 800d5da:	4616      	mov	r6, r2
 800d5dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5e0:	fb03 5711 	mls	r7, r3, r1, r5
 800d5e4:	5dc7      	ldrb	r7, [r0, r7]
 800d5e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5ea:	462f      	mov	r7, r5
 800d5ec:	42bb      	cmp	r3, r7
 800d5ee:	460d      	mov	r5, r1
 800d5f0:	d9f4      	bls.n	800d5dc <_printf_i+0x110>
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	d10b      	bne.n	800d60e <_printf_i+0x142>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	07df      	lsls	r7, r3, #31
 800d5fa:	d508      	bpl.n	800d60e <_printf_i+0x142>
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	6861      	ldr	r1, [r4, #4]
 800d600:	4299      	cmp	r1, r3
 800d602:	bfde      	ittt	le
 800d604:	2330      	movle	r3, #48	@ 0x30
 800d606:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d60a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d60e:	1b92      	subs	r2, r2, r6
 800d610:	6122      	str	r2, [r4, #16]
 800d612:	f8cd a000 	str.w	sl, [sp]
 800d616:	464b      	mov	r3, r9
 800d618:	aa03      	add	r2, sp, #12
 800d61a:	4621      	mov	r1, r4
 800d61c:	4640      	mov	r0, r8
 800d61e:	f7ff fee7 	bl	800d3f0 <_printf_common>
 800d622:	3001      	adds	r0, #1
 800d624:	d14a      	bne.n	800d6bc <_printf_i+0x1f0>
 800d626:	f04f 30ff 	mov.w	r0, #4294967295
 800d62a:	b004      	add	sp, #16
 800d62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d630:	6823      	ldr	r3, [r4, #0]
 800d632:	f043 0320 	orr.w	r3, r3, #32
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	4832      	ldr	r0, [pc, #200]	@ (800d704 <_printf_i+0x238>)
 800d63a:	2778      	movs	r7, #120	@ 0x78
 800d63c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	6831      	ldr	r1, [r6, #0]
 800d644:	061f      	lsls	r7, r3, #24
 800d646:	f851 5b04 	ldr.w	r5, [r1], #4
 800d64a:	d402      	bmi.n	800d652 <_printf_i+0x186>
 800d64c:	065f      	lsls	r7, r3, #25
 800d64e:	bf48      	it	mi
 800d650:	b2ad      	uxthmi	r5, r5
 800d652:	6031      	str	r1, [r6, #0]
 800d654:	07d9      	lsls	r1, r3, #31
 800d656:	bf44      	itt	mi
 800d658:	f043 0320 	orrmi.w	r3, r3, #32
 800d65c:	6023      	strmi	r3, [r4, #0]
 800d65e:	b11d      	cbz	r5, 800d668 <_printf_i+0x19c>
 800d660:	2310      	movs	r3, #16
 800d662:	e7ad      	b.n	800d5c0 <_printf_i+0xf4>
 800d664:	4826      	ldr	r0, [pc, #152]	@ (800d700 <_printf_i+0x234>)
 800d666:	e7e9      	b.n	800d63c <_printf_i+0x170>
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	f023 0320 	bic.w	r3, r3, #32
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	e7f6      	b.n	800d660 <_printf_i+0x194>
 800d672:	4616      	mov	r6, r2
 800d674:	e7bd      	b.n	800d5f2 <_printf_i+0x126>
 800d676:	6833      	ldr	r3, [r6, #0]
 800d678:	6825      	ldr	r5, [r4, #0]
 800d67a:	6961      	ldr	r1, [r4, #20]
 800d67c:	1d18      	adds	r0, r3, #4
 800d67e:	6030      	str	r0, [r6, #0]
 800d680:	062e      	lsls	r6, r5, #24
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	d501      	bpl.n	800d68a <_printf_i+0x1be>
 800d686:	6019      	str	r1, [r3, #0]
 800d688:	e002      	b.n	800d690 <_printf_i+0x1c4>
 800d68a:	0668      	lsls	r0, r5, #25
 800d68c:	d5fb      	bpl.n	800d686 <_printf_i+0x1ba>
 800d68e:	8019      	strh	r1, [r3, #0]
 800d690:	2300      	movs	r3, #0
 800d692:	6123      	str	r3, [r4, #16]
 800d694:	4616      	mov	r6, r2
 800d696:	e7bc      	b.n	800d612 <_printf_i+0x146>
 800d698:	6833      	ldr	r3, [r6, #0]
 800d69a:	1d1a      	adds	r2, r3, #4
 800d69c:	6032      	str	r2, [r6, #0]
 800d69e:	681e      	ldr	r6, [r3, #0]
 800d6a0:	6862      	ldr	r2, [r4, #4]
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7f2 fd9b 	bl	80001e0 <memchr>
 800d6aa:	b108      	cbz	r0, 800d6b0 <_printf_i+0x1e4>
 800d6ac:	1b80      	subs	r0, r0, r6
 800d6ae:	6060      	str	r0, [r4, #4]
 800d6b0:	6863      	ldr	r3, [r4, #4]
 800d6b2:	6123      	str	r3, [r4, #16]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6ba:	e7aa      	b.n	800d612 <_printf_i+0x146>
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	4632      	mov	r2, r6
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	47d0      	blx	sl
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d0ad      	beq.n	800d626 <_printf_i+0x15a>
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	079b      	lsls	r3, r3, #30
 800d6ce:	d413      	bmi.n	800d6f8 <_printf_i+0x22c>
 800d6d0:	68e0      	ldr	r0, [r4, #12]
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	4298      	cmp	r0, r3
 800d6d6:	bfb8      	it	lt
 800d6d8:	4618      	movlt	r0, r3
 800d6da:	e7a6      	b.n	800d62a <_printf_i+0x15e>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	4632      	mov	r2, r6
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	4640      	mov	r0, r8
 800d6e4:	47d0      	blx	sl
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d09d      	beq.n	800d626 <_printf_i+0x15a>
 800d6ea:	3501      	adds	r5, #1
 800d6ec:	68e3      	ldr	r3, [r4, #12]
 800d6ee:	9903      	ldr	r1, [sp, #12]
 800d6f0:	1a5b      	subs	r3, r3, r1
 800d6f2:	42ab      	cmp	r3, r5
 800d6f4:	dcf2      	bgt.n	800d6dc <_printf_i+0x210>
 800d6f6:	e7eb      	b.n	800d6d0 <_printf_i+0x204>
 800d6f8:	2500      	movs	r5, #0
 800d6fa:	f104 0619 	add.w	r6, r4, #25
 800d6fe:	e7f5      	b.n	800d6ec <_printf_i+0x220>
 800d700:	0800e0dd 	.word	0x0800e0dd
 800d704:	0800e0ee 	.word	0x0800e0ee

0800d708 <__sflush_r>:
 800d708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d710:	0716      	lsls	r6, r2, #28
 800d712:	4605      	mov	r5, r0
 800d714:	460c      	mov	r4, r1
 800d716:	d454      	bmi.n	800d7c2 <__sflush_r+0xba>
 800d718:	684b      	ldr	r3, [r1, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	dc02      	bgt.n	800d724 <__sflush_r+0x1c>
 800d71e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d720:	2b00      	cmp	r3, #0
 800d722:	dd48      	ble.n	800d7b6 <__sflush_r+0xae>
 800d724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d726:	2e00      	cmp	r6, #0
 800d728:	d045      	beq.n	800d7b6 <__sflush_r+0xae>
 800d72a:	2300      	movs	r3, #0
 800d72c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d730:	682f      	ldr	r7, [r5, #0]
 800d732:	6a21      	ldr	r1, [r4, #32]
 800d734:	602b      	str	r3, [r5, #0]
 800d736:	d030      	beq.n	800d79a <__sflush_r+0x92>
 800d738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	0759      	lsls	r1, r3, #29
 800d73e:	d505      	bpl.n	800d74c <__sflush_r+0x44>
 800d740:	6863      	ldr	r3, [r4, #4]
 800d742:	1ad2      	subs	r2, r2, r3
 800d744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d746:	b10b      	cbz	r3, 800d74c <__sflush_r+0x44>
 800d748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d74a:	1ad2      	subs	r2, r2, r3
 800d74c:	2300      	movs	r3, #0
 800d74e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d750:	6a21      	ldr	r1, [r4, #32]
 800d752:	4628      	mov	r0, r5
 800d754:	47b0      	blx	r6
 800d756:	1c43      	adds	r3, r0, #1
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	d106      	bne.n	800d76a <__sflush_r+0x62>
 800d75c:	6829      	ldr	r1, [r5, #0]
 800d75e:	291d      	cmp	r1, #29
 800d760:	d82b      	bhi.n	800d7ba <__sflush_r+0xb2>
 800d762:	4a2a      	ldr	r2, [pc, #168]	@ (800d80c <__sflush_r+0x104>)
 800d764:	40ca      	lsrs	r2, r1
 800d766:	07d6      	lsls	r6, r2, #31
 800d768:	d527      	bpl.n	800d7ba <__sflush_r+0xb2>
 800d76a:	2200      	movs	r2, #0
 800d76c:	6062      	str	r2, [r4, #4]
 800d76e:	04d9      	lsls	r1, r3, #19
 800d770:	6922      	ldr	r2, [r4, #16]
 800d772:	6022      	str	r2, [r4, #0]
 800d774:	d504      	bpl.n	800d780 <__sflush_r+0x78>
 800d776:	1c42      	adds	r2, r0, #1
 800d778:	d101      	bne.n	800d77e <__sflush_r+0x76>
 800d77a:	682b      	ldr	r3, [r5, #0]
 800d77c:	b903      	cbnz	r3, 800d780 <__sflush_r+0x78>
 800d77e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d782:	602f      	str	r7, [r5, #0]
 800d784:	b1b9      	cbz	r1, 800d7b6 <__sflush_r+0xae>
 800d786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d78a:	4299      	cmp	r1, r3
 800d78c:	d002      	beq.n	800d794 <__sflush_r+0x8c>
 800d78e:	4628      	mov	r0, r5
 800d790:	f7ff fbf4 	bl	800cf7c <_free_r>
 800d794:	2300      	movs	r3, #0
 800d796:	6363      	str	r3, [r4, #52]	@ 0x34
 800d798:	e00d      	b.n	800d7b6 <__sflush_r+0xae>
 800d79a:	2301      	movs	r3, #1
 800d79c:	4628      	mov	r0, r5
 800d79e:	47b0      	blx	r6
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	1c50      	adds	r0, r2, #1
 800d7a4:	d1c9      	bne.n	800d73a <__sflush_r+0x32>
 800d7a6:	682b      	ldr	r3, [r5, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d0c6      	beq.n	800d73a <__sflush_r+0x32>
 800d7ac:	2b1d      	cmp	r3, #29
 800d7ae:	d001      	beq.n	800d7b4 <__sflush_r+0xac>
 800d7b0:	2b16      	cmp	r3, #22
 800d7b2:	d11e      	bne.n	800d7f2 <__sflush_r+0xea>
 800d7b4:	602f      	str	r7, [r5, #0]
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	e022      	b.n	800d800 <__sflush_r+0xf8>
 800d7ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7be:	b21b      	sxth	r3, r3
 800d7c0:	e01b      	b.n	800d7fa <__sflush_r+0xf2>
 800d7c2:	690f      	ldr	r7, [r1, #16]
 800d7c4:	2f00      	cmp	r7, #0
 800d7c6:	d0f6      	beq.n	800d7b6 <__sflush_r+0xae>
 800d7c8:	0793      	lsls	r3, r2, #30
 800d7ca:	680e      	ldr	r6, [r1, #0]
 800d7cc:	bf08      	it	eq
 800d7ce:	694b      	ldreq	r3, [r1, #20]
 800d7d0:	600f      	str	r7, [r1, #0]
 800d7d2:	bf18      	it	ne
 800d7d4:	2300      	movne	r3, #0
 800d7d6:	eba6 0807 	sub.w	r8, r6, r7
 800d7da:	608b      	str	r3, [r1, #8]
 800d7dc:	f1b8 0f00 	cmp.w	r8, #0
 800d7e0:	dde9      	ble.n	800d7b6 <__sflush_r+0xae>
 800d7e2:	6a21      	ldr	r1, [r4, #32]
 800d7e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7e6:	4643      	mov	r3, r8
 800d7e8:	463a      	mov	r2, r7
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	47b0      	blx	r6
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	dc08      	bgt.n	800d804 <__sflush_r+0xfc>
 800d7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d804:	4407      	add	r7, r0
 800d806:	eba8 0800 	sub.w	r8, r8, r0
 800d80a:	e7e7      	b.n	800d7dc <__sflush_r+0xd4>
 800d80c:	20400001 	.word	0x20400001

0800d810 <_fflush_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	690b      	ldr	r3, [r1, #16]
 800d814:	4605      	mov	r5, r0
 800d816:	460c      	mov	r4, r1
 800d818:	b913      	cbnz	r3, 800d820 <_fflush_r+0x10>
 800d81a:	2500      	movs	r5, #0
 800d81c:	4628      	mov	r0, r5
 800d81e:	bd38      	pop	{r3, r4, r5, pc}
 800d820:	b118      	cbz	r0, 800d82a <_fflush_r+0x1a>
 800d822:	6a03      	ldr	r3, [r0, #32]
 800d824:	b90b      	cbnz	r3, 800d82a <_fflush_r+0x1a>
 800d826:	f7ff fa93 	bl	800cd50 <__sinit>
 800d82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d0f3      	beq.n	800d81a <_fflush_r+0xa>
 800d832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d834:	07d0      	lsls	r0, r2, #31
 800d836:	d404      	bmi.n	800d842 <_fflush_r+0x32>
 800d838:	0599      	lsls	r1, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_fflush_r+0x32>
 800d83c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d83e:	f7ff fb8c 	bl	800cf5a <__retarget_lock_acquire_recursive>
 800d842:	4628      	mov	r0, r5
 800d844:	4621      	mov	r1, r4
 800d846:	f7ff ff5f 	bl	800d708 <__sflush_r>
 800d84a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d84c:	07da      	lsls	r2, r3, #31
 800d84e:	4605      	mov	r5, r0
 800d850:	d4e4      	bmi.n	800d81c <_fflush_r+0xc>
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	059b      	lsls	r3, r3, #22
 800d856:	d4e1      	bmi.n	800d81c <_fflush_r+0xc>
 800d858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d85a:	f7ff fb7f 	bl	800cf5c <__retarget_lock_release_recursive>
 800d85e:	e7dd      	b.n	800d81c <_fflush_r+0xc>

0800d860 <__swbuf_r>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	460e      	mov	r6, r1
 800d864:	4614      	mov	r4, r2
 800d866:	4605      	mov	r5, r0
 800d868:	b118      	cbz	r0, 800d872 <__swbuf_r+0x12>
 800d86a:	6a03      	ldr	r3, [r0, #32]
 800d86c:	b90b      	cbnz	r3, 800d872 <__swbuf_r+0x12>
 800d86e:	f7ff fa6f 	bl	800cd50 <__sinit>
 800d872:	69a3      	ldr	r3, [r4, #24]
 800d874:	60a3      	str	r3, [r4, #8]
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	071a      	lsls	r2, r3, #28
 800d87a:	d501      	bpl.n	800d880 <__swbuf_r+0x20>
 800d87c:	6923      	ldr	r3, [r4, #16]
 800d87e:	b943      	cbnz	r3, 800d892 <__swbuf_r+0x32>
 800d880:	4621      	mov	r1, r4
 800d882:	4628      	mov	r0, r5
 800d884:	f000 f82a 	bl	800d8dc <__swsetup_r>
 800d888:	b118      	cbz	r0, 800d892 <__swbuf_r+0x32>
 800d88a:	f04f 37ff 	mov.w	r7, #4294967295
 800d88e:	4638      	mov	r0, r7
 800d890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	6922      	ldr	r2, [r4, #16]
 800d896:	1a98      	subs	r0, r3, r2
 800d898:	6963      	ldr	r3, [r4, #20]
 800d89a:	b2f6      	uxtb	r6, r6
 800d89c:	4283      	cmp	r3, r0
 800d89e:	4637      	mov	r7, r6
 800d8a0:	dc05      	bgt.n	800d8ae <__swbuf_r+0x4e>
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f7ff ffb3 	bl	800d810 <_fflush_r>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d1ed      	bne.n	800d88a <__swbuf_r+0x2a>
 800d8ae:	68a3      	ldr	r3, [r4, #8]
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	60a3      	str	r3, [r4, #8]
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	701e      	strb	r6, [r3, #0]
 800d8bc:	6962      	ldr	r2, [r4, #20]
 800d8be:	1c43      	adds	r3, r0, #1
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d004      	beq.n	800d8ce <__swbuf_r+0x6e>
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	07db      	lsls	r3, r3, #31
 800d8c8:	d5e1      	bpl.n	800d88e <__swbuf_r+0x2e>
 800d8ca:	2e0a      	cmp	r6, #10
 800d8cc:	d1df      	bne.n	800d88e <__swbuf_r+0x2e>
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f7ff ff9d 	bl	800d810 <_fflush_r>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d0d9      	beq.n	800d88e <__swbuf_r+0x2e>
 800d8da:	e7d6      	b.n	800d88a <__swbuf_r+0x2a>

0800d8dc <__swsetup_r>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4b29      	ldr	r3, [pc, #164]	@ (800d984 <__swsetup_r+0xa8>)
 800d8e0:	4605      	mov	r5, r0
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	b118      	cbz	r0, 800d8f0 <__swsetup_r+0x14>
 800d8e8:	6a03      	ldr	r3, [r0, #32]
 800d8ea:	b90b      	cbnz	r3, 800d8f0 <__swsetup_r+0x14>
 800d8ec:	f7ff fa30 	bl	800cd50 <__sinit>
 800d8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f4:	0719      	lsls	r1, r3, #28
 800d8f6:	d422      	bmi.n	800d93e <__swsetup_r+0x62>
 800d8f8:	06da      	lsls	r2, r3, #27
 800d8fa:	d407      	bmi.n	800d90c <__swsetup_r+0x30>
 800d8fc:	2209      	movs	r2, #9
 800d8fe:	602a      	str	r2, [r5, #0]
 800d900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	f04f 30ff 	mov.w	r0, #4294967295
 800d90a:	e033      	b.n	800d974 <__swsetup_r+0x98>
 800d90c:	0758      	lsls	r0, r3, #29
 800d90e:	d512      	bpl.n	800d936 <__swsetup_r+0x5a>
 800d910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d912:	b141      	cbz	r1, 800d926 <__swsetup_r+0x4a>
 800d914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d918:	4299      	cmp	r1, r3
 800d91a:	d002      	beq.n	800d922 <__swsetup_r+0x46>
 800d91c:	4628      	mov	r0, r5
 800d91e:	f7ff fb2d 	bl	800cf7c <_free_r>
 800d922:	2300      	movs	r3, #0
 800d924:	6363      	str	r3, [r4, #52]	@ 0x34
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d92c:	81a3      	strh	r3, [r4, #12]
 800d92e:	2300      	movs	r3, #0
 800d930:	6063      	str	r3, [r4, #4]
 800d932:	6923      	ldr	r3, [r4, #16]
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	f043 0308 	orr.w	r3, r3, #8
 800d93c:	81a3      	strh	r3, [r4, #12]
 800d93e:	6923      	ldr	r3, [r4, #16]
 800d940:	b94b      	cbnz	r3, 800d956 <__swsetup_r+0x7a>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d94c:	d003      	beq.n	800d956 <__swsetup_r+0x7a>
 800d94e:	4621      	mov	r1, r4
 800d950:	4628      	mov	r0, r5
 800d952:	f000 f84f 	bl	800d9f4 <__smakebuf_r>
 800d956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d95a:	f013 0201 	ands.w	r2, r3, #1
 800d95e:	d00a      	beq.n	800d976 <__swsetup_r+0x9a>
 800d960:	2200      	movs	r2, #0
 800d962:	60a2      	str	r2, [r4, #8]
 800d964:	6962      	ldr	r2, [r4, #20]
 800d966:	4252      	negs	r2, r2
 800d968:	61a2      	str	r2, [r4, #24]
 800d96a:	6922      	ldr	r2, [r4, #16]
 800d96c:	b942      	cbnz	r2, 800d980 <__swsetup_r+0xa4>
 800d96e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d972:	d1c5      	bne.n	800d900 <__swsetup_r+0x24>
 800d974:	bd38      	pop	{r3, r4, r5, pc}
 800d976:	0799      	lsls	r1, r3, #30
 800d978:	bf58      	it	pl
 800d97a:	6962      	ldrpl	r2, [r4, #20]
 800d97c:	60a2      	str	r2, [r4, #8]
 800d97e:	e7f4      	b.n	800d96a <__swsetup_r+0x8e>
 800d980:	2000      	movs	r0, #0
 800d982:	e7f7      	b.n	800d974 <__swsetup_r+0x98>
 800d984:	2000001c 	.word	0x2000001c

0800d988 <_sbrk_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d06      	ldr	r5, [pc, #24]	@ (800d9a4 <_sbrk_r+0x1c>)
 800d98c:	2300      	movs	r3, #0
 800d98e:	4604      	mov	r4, r0
 800d990:	4608      	mov	r0, r1
 800d992:	602b      	str	r3, [r5, #0]
 800d994:	f7f4 f97c 	bl	8001c90 <_sbrk>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_sbrk_r+0x1a>
 800d99c:	682b      	ldr	r3, [r5, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_sbrk_r+0x1a>
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	20004484 	.word	0x20004484

0800d9a8 <__swhatbuf_r>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	b096      	sub	sp, #88	@ 0x58
 800d9b4:	4615      	mov	r5, r2
 800d9b6:	461e      	mov	r6, r3
 800d9b8:	da0d      	bge.n	800d9d6 <__swhatbuf_r+0x2e>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9c0:	f04f 0100 	mov.w	r1, #0
 800d9c4:	bf14      	ite	ne
 800d9c6:	2340      	movne	r3, #64	@ 0x40
 800d9c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	6031      	str	r1, [r6, #0]
 800d9d0:	602b      	str	r3, [r5, #0]
 800d9d2:	b016      	add	sp, #88	@ 0x58
 800d9d4:	bd70      	pop	{r4, r5, r6, pc}
 800d9d6:	466a      	mov	r2, sp
 800d9d8:	f000 f848 	bl	800da6c <_fstat_r>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	dbec      	blt.n	800d9ba <__swhatbuf_r+0x12>
 800d9e0:	9901      	ldr	r1, [sp, #4]
 800d9e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9ea:	4259      	negs	r1, r3
 800d9ec:	4159      	adcs	r1, r3
 800d9ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9f2:	e7eb      	b.n	800d9cc <__swhatbuf_r+0x24>

0800d9f4 <__smakebuf_r>:
 800d9f4:	898b      	ldrh	r3, [r1, #12]
 800d9f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9f8:	079d      	lsls	r5, r3, #30
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	d507      	bpl.n	800da10 <__smakebuf_r+0x1c>
 800da00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	2301      	movs	r3, #1
 800da0a:	6163      	str	r3, [r4, #20]
 800da0c:	b003      	add	sp, #12
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da10:	ab01      	add	r3, sp, #4
 800da12:	466a      	mov	r2, sp
 800da14:	f7ff ffc8 	bl	800d9a8 <__swhatbuf_r>
 800da18:	9f00      	ldr	r7, [sp, #0]
 800da1a:	4605      	mov	r5, r0
 800da1c:	4639      	mov	r1, r7
 800da1e:	4630      	mov	r0, r6
 800da20:	f7ff fb18 	bl	800d054 <_malloc_r>
 800da24:	b948      	cbnz	r0, 800da3a <__smakebuf_r+0x46>
 800da26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da2a:	059a      	lsls	r2, r3, #22
 800da2c:	d4ee      	bmi.n	800da0c <__smakebuf_r+0x18>
 800da2e:	f023 0303 	bic.w	r3, r3, #3
 800da32:	f043 0302 	orr.w	r3, r3, #2
 800da36:	81a3      	strh	r3, [r4, #12]
 800da38:	e7e2      	b.n	800da00 <__smakebuf_r+0xc>
 800da3a:	89a3      	ldrh	r3, [r4, #12]
 800da3c:	6020      	str	r0, [r4, #0]
 800da3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da42:	81a3      	strh	r3, [r4, #12]
 800da44:	9b01      	ldr	r3, [sp, #4]
 800da46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da4a:	b15b      	cbz	r3, 800da64 <__smakebuf_r+0x70>
 800da4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da50:	4630      	mov	r0, r6
 800da52:	f000 f81d 	bl	800da90 <_isatty_r>
 800da56:	b128      	cbz	r0, 800da64 <__smakebuf_r+0x70>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f023 0303 	bic.w	r3, r3, #3
 800da5e:	f043 0301 	orr.w	r3, r3, #1
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	431d      	orrs	r5, r3
 800da68:	81a5      	strh	r5, [r4, #12]
 800da6a:	e7cf      	b.n	800da0c <__smakebuf_r+0x18>

0800da6c <_fstat_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	@ (800da8c <_fstat_r+0x20>)
 800da70:	2300      	movs	r3, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f4 f8e0 	bl	8001c3e <_fstat>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d102      	bne.n	800da88 <_fstat_r+0x1c>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	b103      	cbz	r3, 800da88 <_fstat_r+0x1c>
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	20004484 	.word	0x20004484

0800da90 <_isatty_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d06      	ldr	r5, [pc, #24]	@ (800daac <_isatty_r+0x1c>)
 800da94:	2300      	movs	r3, #0
 800da96:	4604      	mov	r4, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	f7f4 f8df 	bl	8001c5e <_isatty>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_isatty_r+0x1a>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_isatty_r+0x1a>
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	20004484 	.word	0x20004484

0800dab0 <_init>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	bf00      	nop
 800dab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab6:	bc08      	pop	{r3}
 800dab8:	469e      	mov	lr, r3
 800daba:	4770      	bx	lr

0800dabc <_fini>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	bf00      	nop
 800dac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac2:	bc08      	pop	{r3}
 800dac4:	469e      	mov	lr, r3
 800dac6:	4770      	bx	lr
