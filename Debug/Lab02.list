
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  08012280  08012280  00013280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cc4  08012cc4  000141d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012cc4  08012cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ccc  08012ccc  000141d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ccc  08012ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012cd0  08012cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08012cd4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141d8  2**0
                  CONTENTS
 10 .bss          00004450  200001d8  200001d8  000141d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004628  20004628  000141d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021cf1  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dd6  00000000  00000000  00035ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f88  00000000  00000000  0003acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001893  00000000  00000000  0003cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b5d  00000000  00000000  0003e4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002836a  00000000  00000000  00066048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e1c  00000000  00000000  0008e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001701ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009a30  00000000  00000000  00170214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00179c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012264 	.word	0x08012264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08012264 	.word	0x08012264

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <sr04_init>:

#include "sr04.h"
#include "stm32f4xx_hal.h" // Adicionado para HAL_RCC_GetPCLK1Freq()
#define DISTANCE_LIMIT 5000

void sr04_init(sr04_t *sr04_struct){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  // Enable trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	889b      	ldrh	r3, [r3, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	f002 fbd2 	bl	80037dc <HAL_GPIO_WritePin>
  // Set input capture edge to rising
  __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	899b      	ldrh	r3, [r3, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <sr04_init+0x36>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 020a 	bic.w	r2, r2, #10
 8001052:	621a      	str	r2, [r3, #32]
 8001054:	e027      	b.n	80010a6 <sr04_init+0x86>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	899b      	ldrh	r3, [r3, #12]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d10a      	bne.n	8001074 <sr04_init+0x54>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6892      	ldr	r2, [r2, #8]
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	e018      	b.n	80010a6 <sr04_init+0x86>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	899b      	ldrh	r3, [r3, #12]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d10a      	bne.n	8001092 <sr04_init+0x72>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6892      	ldr	r2, [r2, #8]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	e009      	b.n	80010a6 <sr04_init+0x86>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6892      	ldr	r2, [r2, #8]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	899b      	ldrh	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d108      	bne.n	80010c0 <sr04_init+0xa0>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a12      	ldr	r2, [r2, #32]
 80010bc:	621a      	str	r2, [r3, #32]
 80010be:	e021      	b.n	8001104 <sr04_init+0xe4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	899b      	ldrh	r3, [r3, #12]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d108      	bne.n	80010da <sr04_init+0xba>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6892      	ldr	r2, [r2, #8]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	e014      	b.n	8001104 <sr04_init+0xe4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	899b      	ldrh	r3, [r3, #12]
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d108      	bne.n	80010f4 <sr04_init+0xd4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6892      	ldr	r2, [r2, #8]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	e007      	b.n	8001104 <sr04_init+0xe4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6892      	ldr	r2, [r2, #8]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	6213      	str	r3, [r2, #32]
  // Set capture flag to 0
  sr04_struct->capture_flag = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	739a      	strb	r2, [r3, #14]
  // Enable echo pin
  HAL_TIM_IC_Start_IT(sr04_struct->echo_htim, sr04_struct->echo_channel);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	899b      	ldrh	r3, [r3, #12]
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f004 fbab 	bl	8005870 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(sr04_struct->echo_htim);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fadc 	bl	80056dc <HAL_TIM_Base_Start_IT>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <sr04_trigger>:

void sr04_trigger(sr04_t *sr04_struct){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  // Send pulse to trigger pin
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_SET);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	889b      	ldrh	r3, [r3, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	4619      	mov	r1, r3
 8001140:	f002 fb4c 	bl	80037dc <HAL_GPIO_WritePin>
  for (uint8_t i=0; i<15; i++) { __NOP(); } // Pequeno delay de ~10us
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e003      	b.n	8001152 <sr04_trigger+0x26>
 800114a:	bf00      	nop
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b0e      	cmp	r3, #14
 8001156:	d9f8      	bls.n	800114a <sr04_trigger+0x1e>
  HAL_GPIO_WritePin(sr04_struct->trig_port, sr04_struct->trig_pin, GPIO_PIN_RESET);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f002 fb3a 	bl	80037dc <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <sr04_read_distance>:

// SUBSTITUA A FUNÇÃO ANTIGA POR ESTA
void sr04_read_distance(sr04_t *sr04_struct){
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b08a      	sub	sp, #40	@ 0x28
 8001176:	af00      	add	r7, sp, #0
 8001178:	6178      	str	r0, [r7, #20]
  // This function should be called in the timer input capture callback
  switch (sr04_struct->capture_flag){
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	7b9b      	ldrb	r3, [r3, #14]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <sr04_read_distance+0x1a>
 8001182:	2b01      	cmp	r3, #1
 8001184:	f000 8081 	beq.w	800128a <sr04_read_distance+0x11a>

      // Volta a polaridade para detectar a borda de subida do próximo pulso
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
      break;
  }
 8001188:	e172      	b.n	8001470 <sr04_read_distance+0x300>
      sr04_struct->start_counter = HAL_TIM_ReadCapturedValue(sr04_struct->echo_htim, sr04_struct->echo_channel);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	899b      	ldrh	r3, [r3, #12]
 8001192:	4619      	mov	r1, r3
 8001194:	4610      	mov	r0, r2
 8001196:	f004 fee7 	bl	8005f68 <HAL_TIM_ReadCapturedValue>
 800119a:	4602      	mov	r2, r0
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	611a      	str	r2, [r3, #16]
      sr04_struct->capture_flag = 1;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2201      	movs	r2, #1
 80011a4:	739a      	strb	r2, [r3, #14]
      sr04_struct->tim_update_count = 0;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2200      	movs	r2, #0
 80011aa:	841a      	strh	r2, [r3, #32]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	899b      	ldrh	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10a      	bne.n	80011ca <sr04_read_distance+0x5a>
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020a 	bic.w	r2, r2, #10
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	e027      	b.n	800121a <sr04_read_distance+0xaa>
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	899b      	ldrh	r3, [r3, #12]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d10a      	bne.n	80011e8 <sr04_read_distance+0x78>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	6892      	ldr	r2, [r2, #8]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80011e4:	6213      	str	r3, [r2, #32]
 80011e6:	e018      	b.n	800121a <sr04_read_distance+0xaa>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	899b      	ldrh	r3, [r3, #12]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d10a      	bne.n	8001206 <sr04_read_distance+0x96>
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	6892      	ldr	r2, [r2, #8]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e009      	b.n	800121a <sr04_read_distance+0xaa>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	6892      	ldr	r2, [r2, #8]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	899b      	ldrh	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10a      	bne.n	8001238 <sr04_read_distance+0xc8>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a1a      	ldr	r2, [r3, #32]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0202 	orr.w	r2, r2, #2
 8001234:	621a      	str	r2, [r3, #32]
      break;
 8001236:	e11b      	b.n	8001470 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	899b      	ldrh	r3, [r3, #12]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d10a      	bne.n	8001256 <sr04_read_distance+0xe6>
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	6892      	ldr	r2, [r2, #8]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6213      	str	r3, [r2, #32]
      break;
 8001254:	e10c      	b.n	8001470 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	899b      	ldrh	r3, [r3, #12]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d10a      	bne.n	8001274 <sr04_read_distance+0x104>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	6892      	ldr	r2, [r2, #8]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001270:	6213      	str	r3, [r2, #32]
      break;
 8001272:	e0fd      	b.n	8001470 <sr04_read_distance+0x300>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	6892      	ldr	r2, [r2, #8]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001286:	6213      	str	r3, [r2, #32]
      break;
 8001288:	e0f2      	b.n	8001470 <sr04_read_distance+0x300>
      sr04_struct->end_counter = HAL_TIM_ReadCapturedValue(sr04_struct->echo_htim, sr04_struct->echo_channel);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	899b      	ldrh	r3, [r3, #12]
 8001292:	4619      	mov	r1, r3
 8001294:	4610      	mov	r0, r2
 8001296:	f004 fe67 	bl	8005f68 <HAL_TIM_ReadCapturedValue>
 800129a:	4602      	mov	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	615a      	str	r2, [r3, #20]
      sr04_struct->capture_flag = 0;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2200      	movs	r2, #0
 80012a4:	739a      	strb	r2, [r3, #14]
      if (sr04_struct->end_counter > sr04_struct->start_counter) {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d910      	bls.n	80012d4 <sr04_read_distance+0x164>
          delta_ticks = (sr04_struct->end_counter - sr04_struct->start_counter) + sr04_struct->tim_update_count * (sr04_struct->echo_htim->Init.Period + 1);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	8c1b      	ldrh	r3, [r3, #32]
 80012c0:	4619      	mov	r1, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d2:	e014      	b.n	80012fe <sr04_read_distance+0x18e>
          delta_ticks = (sr04_struct->echo_htim->Init.Period - sr04_struct->start_counter + sr04_struct->end_counter) + (sr04_struct->tim_update_count -1) * (sr04_struct->echo_htim->Init.Period + 1);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	1ad2      	subs	r2, r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	441a      	add	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	8c1b      	ldrh	r3, [r3, #32]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t timer_clock = HAL_RCC_GetPCLK1Freq();
 80012fe:	f003 f855 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8001302:	6238      	str	r0, [r7, #32]
      if ((RCC->CFGR & RCC_CFGR_PPRE1) != RCC_CFGR_PPRE1_DIV1) {
 8001304:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <sr04_read_distance+0x30c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <sr04_read_distance+0x1a6>
          timer_clock *= 2; // O clock do timer é dobrado se o prescaler APB1 > 1
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	623b      	str	r3, [r7, #32]
      uint64_t numerator = (uint64_t)delta_ticks * (sr04_struct->echo_htim->Init.Prescaler + 1) * 343000;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	2200      	movs	r2, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	60fa      	str	r2, [r7, #12]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	2200      	movs	r2, #0
 8001328:	469a      	mov	sl, r3
 800132a:	4693      	mov	fp, r2
 800132c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001330:	460b      	mov	r3, r1
 8001332:	fb0a f203 	mul.w	r2, sl, r3
 8001336:	4603      	mov	r3, r0
 8001338:	fb03 f30b 	mul.w	r3, r3, fp
 800133c:	4413      	add	r3, r2
 800133e:	4602      	mov	r2, r0
 8001340:	fba2 450a 	umull	r4, r5, r2, sl
 8001344:	442b      	add	r3, r5
 8001346:	461d      	mov	r5, r3
 8001348:	4b4d      	ldr	r3, [pc, #308]	@ (8001480 <sr04_read_distance+0x310>)
 800134a:	fb03 f205 	mul.w	r2, r3, r5
 800134e:	2300      	movs	r3, #0
 8001350:	fb04 f303 	mul.w	r3, r4, r3
 8001354:	4413      	add	r3, r2
 8001356:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <sr04_read_distance+0x310>)
 8001358:	fba4 8902 	umull	r8, r9, r4, r2
 800135c:	444b      	add	r3, r9
 800135e:	4699      	mov	r9, r3
 8001360:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8001364:	e9c7 8906 	strd	r8, r9, [r7, #24]
      sr04_struct->distance = numerator / (timer_clock * 2);
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2200      	movs	r2, #0
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137a:	f7ff fc85 	bl	8000c88 <__aeabi_uldivmod>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	619a      	str	r2, [r3, #24]
      if(sr04_struct->distance > DISTANCE_LIMIT){
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d903      	bls.n	800139a <sr04_read_distance+0x22a>
        sr04_struct->distance = sr04_struct->last_distance;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	619a      	str	r2, [r3, #24]
      sr04_struct->last_distance = sr04_struct->distance;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	61da      	str	r2, [r3, #28]
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	899b      	ldrh	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <sr04_read_distance+0x250>
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020a 	bic.w	r2, r2, #10
 80013bc:	621a      	str	r2, [r3, #32]
 80013be:	e027      	b.n	8001410 <sr04_read_distance+0x2a0>
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	899b      	ldrh	r3, [r3, #12]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d10a      	bne.n	80013de <sr04_read_distance+0x26e>
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	6892      	ldr	r2, [r2, #8]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e018      	b.n	8001410 <sr04_read_distance+0x2a0>
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	899b      	ldrh	r3, [r3, #12]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d10a      	bne.n	80013fc <sr04_read_distance+0x28c>
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	6892      	ldr	r2, [r2, #8]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	e009      	b.n	8001410 <sr04_read_distance+0x2a0>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	6892      	ldr	r2, [r2, #8]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d108      	bne.n	800142a <sr04_read_distance+0x2ba>
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a12      	ldr	r2, [r2, #32]
 8001426:	621a      	str	r2, [r3, #32]
      break;
 8001428:	e021      	b.n	800146e <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	899b      	ldrh	r3, [r3, #12]
 800142e:	2b04      	cmp	r3, #4
 8001430:	d108      	bne.n	8001444 <sr04_read_distance+0x2d4>
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	6892      	ldr	r2, [r2, #8]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	6213      	str	r3, [r2, #32]
      break;
 8001442:	e014      	b.n	800146e <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	899b      	ldrh	r3, [r3, #12]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d108      	bne.n	800145e <sr04_read_distance+0x2ee>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	6892      	ldr	r2, [r2, #8]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	6213      	str	r3, [r2, #32]
      break;
 800145c:	e007      	b.n	800146e <sr04_read_distance+0x2fe>
      __HAL_TIM_SET_CAPTUREPOLARITY(sr04_struct->echo_htim, sr04_struct->echo_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	6892      	ldr	r2, [r2, #8]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	6213      	str	r3, [r2, #32]
      break;
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	00053bd8 	.word	0x00053bd8

08001484 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <vApplicationGetIdleTaskMemory+0x30>)
 800149a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200001f4 	.word	0x200001f4
 80014b4:	20000248 	.word	0x20000248

080014b8 <mpu6050_accel_g>:

int  mpu6050_init(void);
int  mpu6050_read_all(mpu6050_raw_t *out);

/* Conversões úteis (assumindo ±2g e ±250 dps) */
static inline float mpu6050_accel_g(int16_t raw) { return raw / 16384.0f; }
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80014e8 <mpu6050_accel_g+0x30>
 80014d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014d6:	eef0 7a66 	vmov.f32	s15, s13
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	46800000 	.word	0x46800000

080014ec <mpu6050_gyro_dps>:
static inline float mpu6050_gyro_dps(int16_t raw) { return raw / 131.0f; }
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800151c <mpu6050_gyro_dps+0x30>
 8001506:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800150a:	eef0 7a66 	vmov.f32	s15, s13
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	43030000 	.word	0x43030000

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b0a0      	sub	sp, #128	@ 0x80
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001526:	f001 fa99 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152a:	f000 f899 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152e:	f000 fa4d 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001532:	f000 fa23 	bl	800197c <MX_DMA_Init>
  MX_I2C1_Init();
 8001536:	f000 f8fd 	bl	8001734 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800153a:	f000 f929 	bl	8001790 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800153e:	f000 f949 	bl	80017d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001542:	f000 f97d 	bl	8001840 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001546:	f000 f9ef 	bl	8001928 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800154a:	f006 fa07 	bl	800795c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  sr04_sensor.trig_port = HC_TRIG_GPIO_Port; // Ex: GPIOA
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <main+0x10c>)
 8001550:	4a37      	ldr	r2, [pc, #220]	@ (8001630 <main+0x110>)
 8001552:	601a      	str	r2, [r3, #0]
  sr04_sensor.trig_pin = HC_TRIG_Pin;       // Ex: GPIO_PIN_1
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <main+0x10c>)
 8001556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155a:	809a      	strh	r2, [r3, #4]
  sr04_sensor.echo_htim = &htim1;           // Handle do Timer
 800155c:	4b33      	ldr	r3, [pc, #204]	@ (800162c <main+0x10c>)
 800155e:	4a35      	ldr	r2, [pc, #212]	@ (8001634 <main+0x114>)
 8001560:	609a      	str	r2, [r3, #8]
  sr04_sensor.echo_channel = TIM_CHANNEL_1; // Canal do Timer
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <main+0x10c>)
 8001564:	2200      	movs	r2, #0
 8001566:	819a      	strh	r2, [r3, #12]

  mpu6050_init(); // Assumindo que o MPU6050 usa o I2C1
 8001568:	f000 fe5c 	bl	8002224 <mpu6050_init>
  sr04_init(&sr04_sensor);    // Assumindo que o HC-SR04 usa o TIM1 para a medição de tempo
 800156c:	482f      	ldr	r0, [pc, #188]	@ (800162c <main+0x10c>)
 800156e:	f7ff fd57 	bl	8001020 <sr04_init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(sensorDataQueue, 1, sizeof(SensorData_t));
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <main+0x118>)
 8001574:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sensorDataQueueHandle = osMessageCreate(osMessageQ(sensorDataQueue), NULL);
 800157e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fd1c 	bl	800afc2 <osMessageCreate>
 800158a:	4603      	mov	r3, r0
 800158c:	4a2b      	ldr	r2, [pc, #172]	@ (800163c <main+0x11c>)
 800158e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(SDCardTask, StartSDCardTask, osPriorityAboveNormal, 0, 1024);
 8001590:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <main+0x120>)
 8001592:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001596:	461d      	mov	r5, r3
 8001598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardTaskHandle = osThreadCreate(osThread(SDCardTask), NULL);
 80015a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f009 fbe0 	bl	800ad70 <osThreadCreate>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a24      	ldr	r2, [pc, #144]	@ (8001644 <main+0x124>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 512);
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <main+0x128>)
 80015b8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 80015ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f009 fbcd 	bl	800ad70 <osThreadCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <main+0x12c>)
 80015da:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 512);
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <main+0x130>)
 80015de:	f107 041c 	add.w	r4, r7, #28
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f009 fbba 	bl	800ad70 <osThreadCreate>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <main+0x134>)
 8001600:	6013      	str	r3, [r2, #0]

  osThreadDef(EventDetectTask, StartEventDetectTask, osPriorityAboveNormal, 0, 512);
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <main+0x138>)
 8001604:	463c      	mov	r4, r7
 8001606:	461d      	mov	r5, r3
 8001608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventDetectTaskHandle = osThreadCreate(osThread(EventDetectTask), NULL);
 8001614:	463b      	mov	r3, r7
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f009 fba9 	bl	800ad70 <osThreadCreate>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <main+0x13c>)
 8001622:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001624:	f009 fb81 	bl	800ad2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <main+0x108>
 800162c:	200006d8 	.word	0x200006d8
 8001630:	40021000 	.word	0x40021000
 8001634:	20000638 	.word	0x20000638
 8001638:	08012280 	.word	0x08012280
 800163c:	200006fc 	.word	0x200006fc
 8001640:	0801229c 	.word	0x0801229c
 8001644:	200006c8 	.word	0x200006c8
 8001648:	080122c4 	.word	0x080122c4
 800164c:	200006cc 	.word	0x200006cc
 8001650:	080122ec 	.word	0x080122ec
 8001654:	200006d0 	.word	0x200006d0
 8001658:	08012318 	.word	0x08012318
 800165c:	200006d4 	.word	0x200006d4

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	@ 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f00d fa1d 	bl	800eaae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a27      	ldr	r2, [pc, #156]	@ (800172c <SystemClock_Config+0xcc>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <SystemClock_Config+0xd0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <SystemClock_Config+0xd0>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d4:	23a8      	movs	r3, #168	@ 0xa8
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016dc:	2307      	movs	r3, #7
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 f9f1 	bl	8003acc <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f0:	f000 fb7e 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2105      	movs	r1, #5
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fc52 	bl	8003fbc <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171e:	f000 fb67 	bl	8001df0 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	@ 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2C1_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	@ (8001788 <MX_I2C1_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	@ (800178c <MX_I2C1_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_I2C1_Init+0x50>)
 8001772:	f002 f867 	bl	8003844 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fb38 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000448 	.word	0x20000448
 8001788:	40005400 	.word	0x40005400
 800178c:	000186a0 	.word	0x000186a0

08001790 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <MX_SDIO_SD_Init+0x40>)
 8001798:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 80017b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017b8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <MX_SDIO_SD_Init+0x3c>)
 80017bc:	2202      	movs	r2, #2
 80017be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  /* USER CODE END SDIO_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	2000049c 	.word	0x2000049c
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017da:	4a18      	ldr	r2, [pc, #96]	@ (800183c <MX_SPI1_Init+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001820:	220a      	movs	r2, #10
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001826:	f003 fe81 	bl	800552c <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001830:	f000 fade 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200005e0 	.word	0x200005e0
 800183c:	40013000 	.word	0x40013000

08001840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <MX_TIM1_Init+0xe0>)
 800186c:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <MX_TIM1_Init+0xe4>)
 800186e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800187c:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <MX_TIM1_Init+0xe0>)
 800187e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001882:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <MX_TIM1_Init+0xe0>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001896:	4822      	ldr	r0, [pc, #136]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001898:	f003 fed1 	bl	800563e <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80018a2:	f000 faa5 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	4619      	mov	r1, r3
 80018b2:	481b      	ldr	r0, [pc, #108]	@ (8001920 <MX_TIM1_Init+0xe0>)
 80018b4:	f004 fa90 	bl	8005dd8 <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018be:	f000 fa97 	bl	8001df0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018c2:	4817      	ldr	r0, [pc, #92]	@ (8001920 <MX_TIM1_Init+0xe0>)
 80018c4:	f003 ff7a 	bl	80057bc <HAL_TIM_IC_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018ce:	f000 fa8f 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	@ (8001920 <MX_TIM1_Init+0xe0>)
 80018e2:	f004 fe3d 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80018ec:	f000 fa80 	bl	8001df0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <MX_TIM1_Init+0xe0>)
 8001908:	f004 f9ca 	bl	8005ca0 <HAL_TIM_IC_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001912:	f000 fa6d 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	@ 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000638 	.word	0x20000638
 8001924:	40010000 	.word	0x40010000

08001928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <MX_USART1_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	@ (8001974 <MX_USART1_UART_Init+0x4c>)
 8001960:	f004 fe8e 	bl	8006680 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f000 fa41 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000680 	.word	0x20000680
 8001978:	40011000 	.word	0x40011000

0800197c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <MX_DMA_Init+0x4c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <MX_DMA_Init+0x4c>)
 800198c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <MX_DMA_Init+0x4c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2105      	movs	r1, #5
 80019a2:	203b      	movs	r0, #59	@ 0x3b
 80019a4:	f001 f9cb 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019a8:	203b      	movs	r0, #59	@ 0x3b
 80019aa:	f001 f9e4 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2045      	movs	r0, #69	@ 0x45
 80019b4:	f001 f9c3 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80019b8:	2045      	movs	r0, #69	@ 0x45
 80019ba:	f001 f9dc 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	@ 0x30
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b24 <MX_GPIO_Init+0x158>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001b24 <MX_GPIO_Init+0x158>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b24 <MX_GPIO_Init+0x158>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a47      	ldr	r2, [pc, #284]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a40      	ldr	r2, [pc, #256]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a39      	ldr	r2, [pc, #228]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a32      	ldr	r2, [pc, #200]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <MX_GPIO_Init+0x158>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2130      	movs	r1, #48	@ 0x30
 8001a8e:	4826      	ldr	r0, [pc, #152]	@ (8001b28 <MX_GPIO_Init+0x15c>)
 8001a90:	f001 fea4 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2101      	movs	r1, #1
 8001a98:	4824      	ldr	r0, [pc, #144]	@ (8001b2c <MX_GPIO_Init+0x160>)
 8001a9a:	f001 fe9f 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001aa4:	4822      	ldr	r0, [pc, #136]	@ (8001b30 <MX_GPIO_Init+0x164>)
 8001aa6:	f001 fe99 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 8001aaa:	2330      	movs	r3, #48	@ 0x30
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4819      	ldr	r0, [pc, #100]	@ (8001b28 <MX_GPIO_Init+0x15c>)
 8001ac2:	f001 fcef 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4813      	ldr	r0, [pc, #76]	@ (8001b2c <MX_GPIO_Init+0x160>)
 8001ade:	f001 fce1 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_TRIG_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin;
 8001ae2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HC_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	480f      	ldr	r0, [pc, #60]	@ (8001b34 <MX_GPIO_Init+0x168>)
 8001af8:	f001 fcd4 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8001afc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <MX_GPIO_Init+0x164>)
 8001b16:	f001 fcc5 	bl	80034a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	@ 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  // Verifica se a interrupção veio do timer correto (o que está ligado ao HC-SR04)
  if (htim->Instance == sr04_sensor.echo_htim->Instance)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_TIM_IC_CaptureCallback+0x24>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d102      	bne.n	8001b54 <HAL_TIM_IC_CaptureCallback+0x1c>
  {
    // Chama a função que trata a lógica de captura e cálculo da distância
    sr04_read_distance(&sr04_sensor);
 8001b4e:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <HAL_TIM_IC_CaptureCallback+0x24>)
 8001b50:	f7ff fb0e 	bl	8001170 <sr04_read_distance>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200006d8 	.word	0x200006d8

08001b60 <StartEventDetectTask>:

void StartEventDetectTask(void const * argument)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b0c0      	sub	sp, #256	@ 0x100
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    // --- RECEBE DADOS DA FILA ---
    // A tarefa ficará bloqueada aqui até que novos dados cheguem
    event = osMessageGet(sensorDataQueueHandle, osWaitForever);
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <StartEventDetectTask+0x74>)
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fa8d 	bl	800b094 <osMessageGet>

    if (event.status == osEventMessage)
 8001b7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d1f2      	bne.n	8001b68 <StartEventDetectTask+0x8>
    {
      // Copia os dados recebidos para a struct local
      received_data = *(SensorData_t*)event.value.p;
 8001b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b86:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      // Imprime os dados recebidos para confirmar o funcionamento
      sprintf(uart_buf, "Received | Accel Z: %.2f | Dist: %lu mm\r\n",
             received_data.accel_z,
 8001b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
      sprintf(uart_buf, "Received | Accel Z: %.2f | Dist: %lu mm\r\n",
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcd3 	bl	8000548 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8001baa:	f107 0008 	add.w	r0, r7, #8
 8001bae:	9100      	str	r1, [sp, #0]
 8001bb0:	4909      	ldr	r1, [pc, #36]	@ (8001bd8 <StartEventDetectTask+0x78>)
 8001bb2:	f00c ff17 	bl	800e9e4 <siprintf>
             received_data.distance_mm);
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb58 	bl	8000270 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <StartEventDetectTask+0x7c>)
 8001bce:	f004 fda7 	bl	8006720 <HAL_UART_Transmit>
    event = osMessageGet(sensorDataQueueHandle, osWaitForever);
 8001bd2:	e7c9      	b.n	8001b68 <StartEventDetectTask+0x8>
 8001bd4:	200006fc 	.word	0x200006fc
 8001bd8:	08012334 	.word	0x08012334
 8001bdc:	20000680 	.word	0x20000680

08001be0 <StartDisplayTask>:
  }

}

void StartDisplayTask(void const * argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  osEvent event;
  event = osMessageGet(sensorDataQueueHandle, osWaitForever);
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <StartDisplayTask+0x24>)
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 fa4d 	bl	800b094 <osMessageGet>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200006fc 	.word	0x200006fc

08001c08 <StartSensorsTask>:

void StartSensorsTask(void const * argument)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0c2      	sub	sp, #264	@ 0x108
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
  char uart_buf[200];

  /* Infinite loop */
  for(;;)
  {
    sr04_trigger(&sr04_sensor);
 8001c10:	4837      	ldr	r0, [pc, #220]	@ (8001cf0 <StartSensorsTask+0xe8>)
 8001c12:	f7ff fa8b 	bl	800112c <sr04_trigger>
    osDelay(50);
 8001c16:	2032      	movs	r0, #50	@ 0x32
 8001c18:	f009 f8f6 	bl	800ae08 <osDelay>
    mpu6050_read_all(&mpu_raw_data);
 8001c1c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fb3b 	bl	800229c <mpu6050_read_all>

    // Preenche a struct com os dados convertidos
    current_sensor_data.accel_x = mpu6050_accel_g(mpu_raw_data.ax);
 8001c26:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	@ 0xf0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc44 	bl	80014b8 <mpu6050_accel_g>
 8001c30:	eef0 7a40 	vmov.f32	s15, s0
 8001c34:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
    current_sensor_data.accel_y = mpu6050_accel_g(mpu_raw_data.ay);
 8001c38:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	@ 0xf2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fc3b 	bl	80014b8 <mpu6050_accel_g>
 8001c42:	eef0 7a40 	vmov.f32	s15, s0
 8001c46:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
    current_sensor_data.accel_z = mpu6050_accel_g(mpu_raw_data.az);
 8001c4a:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	@ 0xf4
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fc32 	bl	80014b8 <mpu6050_accel_g>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
    current_sensor_data.gyro_x = mpu6050_gyro_dps(mpu_raw_data.gx);
 8001c5c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fc43 	bl	80014ec <mpu6050_gyro_dps>
 8001c66:	eef0 7a40 	vmov.f32	s15, s0
 8001c6a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
    current_sensor_data.gyro_y = mpu6050_gyro_dps(mpu_raw_data.gy);
 8001c6e:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc3a 	bl	80014ec <mpu6050_gyro_dps>
 8001c78:	eef0 7a40 	vmov.f32	s15, s0
 8001c7c:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
    current_sensor_data.gyro_z = mpu6050_gyro_dps(mpu_raw_data.gz);
 8001c80:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc31 	bl	80014ec <mpu6050_gyro_dps>
 8001c8a:	eef0 7a40 	vmov.f32	s15, s0
 8001c8e:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
    current_sensor_data.distance_mm = sr04_sensor.distance;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <StartSensorsTask+0xe8>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    // --- ENVIA OS DADOS PARA A FILA ---
    // O osMessagePut substitui o conteúdo da fila (já que o tamanho é 1)
    osMessagePut(sensorDataQueueHandle, (uint32_t)&current_sensor_data, 0);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <StartSensorsTask+0xec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 f9b5 	bl	800b014 <osMessagePut>

    // (Opcional) Manter a depuração via UART para verificar se a leitura ainda funciona
    sprintf(uart_buf, "Sent | Accel Z: %.2f | Dist: %lu mm\r\n",
           current_sensor_data.accel_z,
 8001caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
    sprintf(uart_buf, "Sent | Accel Z: %.2f | Dist: %lu mm\r\n",
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8001cbc:	f107 000c 	add.w	r0, r7, #12
 8001cc0:	9100      	str	r1, [sp, #0]
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <StartSensorsTask+0xf0>)
 8001cc4:	f00c fe8e 	bl	800e9e4 <siprintf>
           current_sensor_data.distance_mm);
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe facf 	bl	8000270 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	f107 010c 	add.w	r1, r7, #12
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <StartSensorsTask+0xf4>)
 8001ce0:	f004 fd1e 	bl	8006720 <HAL_UART_Transmit>

    osDelay(50);
 8001ce4:	2032      	movs	r0, #50	@ 0x32
 8001ce6:	f009 f88f 	bl	800ae08 <osDelay>
    sr04_trigger(&sr04_sensor);
 8001cea:	bf00      	nop
 8001cec:	e790      	b.n	8001c10 <StartSensorsTask+0x8>
 8001cee:	bf00      	nop
 8001cf0:	200006d8 	.word	0x200006d8
 8001cf4:	200006fc 	.word	0x200006fc
 8001cf8:	08012360 	.word	0x08012360
 8001cfc:	20000680 	.word	0x20000680

08001d00 <StartSDCardTask>:
  }
}

void StartSDCardTask(void const * argument)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001d0c:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8001d10:	6018      	str	r0, [r3, #0]
    FRESULT res;
    UINT bytesWritten;
    // A variável SDPath é o caminho correto para o drive (geralmente "0:")
    extern char SDPath[4];
    
    char writeBuffer[] = "Sucesso! O cartao SD esta funcionando com FATFS!";
 8001d12:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001d16:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 8001d1a:	4a31      	ldr	r2, [pc, #196]	@ (8001de0 <StartSDCardTask+0xe0>)
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4615      	mov	r5, r2
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	7023      	strb	r3, [r4, #0]
    
    // Um pequeno delay para garantir que tudo estabilizou
    osDelay(1000);
 8001d30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d34:	f009 f868 	bl	800ae08 <osDelay>
    
    // 1. Monta o sistema de arquivos
    res = f_mount(&myFATFS, (TCHAR const*)SDPath, 1);
 8001d38:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4929      	ldr	r1, [pc, #164]	@ (8001de4 <StartSDCardTask+0xe4>)
 8001d40:	4618      	mov	r0, r3
 8001d42:	f008 f9ad 	bl	800a0a0 <f_mount>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (res != FR_OK)
 8001d4c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <StartSDCardTask+0x68>
    {
      // Falha ao montar - Pisca LED de erro (PD15)
      while(1)
      {
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d58:	4823      	ldr	r0, [pc, #140]	@ (8001de8 <StartSDCardTask+0xe8>)
 8001d5a:	f001 fd58 	bl	800380e <HAL_GPIO_TogglePin>
        osDelay(200);
 8001d5e:	20c8      	movs	r0, #200	@ 0xc8
 8001d60:	f009 f852 	bl	800ae08 <osDelay>
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001d64:	bf00      	nop
 8001d66:	e7f5      	b.n	8001d54 <StartSDCardTask+0x54>
      }
    }
    
    // 2. Abre (ou cria) um arquivo para escrita
    res = f_open(&myFILE, "log.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001d68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	491f      	ldr	r1, [pc, #124]	@ (8001dec <StartSDCardTask+0xec>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f008 f9f9 	bl	800a168 <f_open>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
    if (res != FR_OK)
 8001d7c:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <StartSDCardTask+0x9a>
    {
      // Falha ao abrir o arquivo - Pisca LED de erro (PD15)
      while(1)
      {
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001d84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d88:	4817      	ldr	r0, [pc, #92]	@ (8001de8 <StartSDCardTask+0xe8>)
 8001d8a:	f001 fd40 	bl	800380e <HAL_GPIO_TogglePin>
        osDelay(400);
 8001d8e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d92:	f009 f839 	bl	800ae08 <osDelay>
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001d96:	bf00      	nop
 8001d98:	e7f4      	b.n	8001d84 <StartSDCardTask+0x84>
      }
    }
    
    // 3. Escreve no arquivo
    f_write(&myFILE, writeBuffer, strlen(writeBuffer), &bytesWritten);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa66 	bl	8000270 <strlen>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001daa:	f107 010c 	add.w	r1, r7, #12
 8001dae:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001db2:	f008 fbaf 	bl	800a514 <f_write>
    
    // 4. Fecha o arquivo (MUITO IMPORTANTE!)
    f_close(&myFILE);
 8001db6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f008 fdd7 	bl	800a96e <f_close>
    
    // 5. Desmonta o sistema de arquivos (boa prática)
    f_mount(NULL, (TCHAR const*)SDPath, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <StartSDCardTask+0xe4>)
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f008 f96b 	bl	800a0a0 <f_mount>
    
    // Se tudo deu certo, acende o LED de sucesso (PD14) permanentemente
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <StartSDCardTask+0xe8>)
 8001dd2:	f001 fd03 	bl	80037dc <HAL_GPIO_WritePin>
    
    // Suspende a tarefa, pois o teste foi concluído com sucesso
    osThreadSuspend(NULL);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f009 f9d0 	bl	800b17c <osThreadSuspend>
  {
 8001ddc:	e799      	b.n	8001d12 <StartSDCardTask+0x12>
 8001dde:	bf00      	nop
 8001de0:	08012390 	.word	0x08012390
 8001de4:	2000070c 	.word	0x2000070c
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	08012388 	.word	0x08012388

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>

08001dfc <i2c_timeout>:
#include "mpu6050.h"
#include "stm32f4xx.h"

static int i2c_timeout(uint32_t *t) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    if ((*t)-- == 0) return -1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	1e59      	subs	r1, r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6011      	str	r1, [r2, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <i2c_timeout+0x1c>
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e000      	b.n	8001e1a <i2c_timeout+0x1e>
    return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <i2c1_start_addr>:

    // Habilita
    I2C1->CR1 |= I2C_CR1_PE;
}

static int i2c1_start_addr(uint8_t addr7, int read) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
    uint32_t to = 1000000;
 8001e34:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <i2c1_start_addr+0xc4>)
 8001e36:	60fb      	str	r3, [r7, #12]

    // START
    I2C1->CR1 |= I2C_CR1_START;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB)) if (i2c_timeout(&to)) return -1;
 8001e44:	e00a      	b.n	8001e5c <i2c1_start_addr+0x34>
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ffd6 	bl	8001dfc <i2c_timeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <i2c1_start_addr+0x34>
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e042      	b.n	8001ee2 <i2c1_start_addr+0xba>
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <i2c1_start_addr+0x1e>
    (void)I2C1->SR1;
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001e6a:	695b      	ldr	r3, [r3, #20]

    // Endereço
    I2C1->DR = (addr7<<1) | (read?1:0);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2201      	movne	r2, #1
 8001e78:	2200      	moveq	r2, #0
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001e80:	611a      	str	r2, [r3, #16]
    if (!read) {
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d121      	bne.n	8001ecc <i2c1_start_addr+0xa4>
        while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) return -1;
 8001e88:	e00a      	b.n	8001ea0 <i2c1_start_addr+0x78>
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffb4 	bl	8001dfc <i2c_timeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <i2c1_start_addr+0x78>
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e020      	b.n	8001ee2 <i2c1_start_addr+0xba>
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <i2c1_start_addr+0x62>
        (void)I2C1->SR1; (void)I2C1->SR2;
 8001eac:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	e014      	b.n	8001ee0 <i2c1_start_addr+0xb8>
    } else {
        while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) return -1;
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff9e 	bl	8001dfc <i2c_timeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <i2c1_start_addr+0xa4>
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e00a      	b.n	8001ee2 <i2c1_start_addr+0xba>
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ee      	beq.n	8001eb6 <i2c1_start_addr+0x8e>
        (void)I2C1->SR1; (void)I2C1->SR2;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <i2c1_start_addr+0xc8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
    }
    return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	000f4240 	.word	0x000f4240
 8001ef0:	40005400 	.word	0x40005400

08001ef4 <i2c1_stop>:

static void i2c1_stop(void) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <i2c1_stop+0x1c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <i2c1_stop+0x1c>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40005400 	.word	0x40005400

08001f14 <i2c1_write_reg>:

int i2c1_write_reg(uint8_t addr7, uint8_t reg, uint8_t data) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	71bb      	strb	r3, [r7, #6]
 8001f22:	4613      	mov	r3, r2
 8001f24:	717b      	strb	r3, [r7, #5]
    uint32_t to = 1000000;
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <i2c1_write_reg+0xc0>)
 8001f28:	60fb      	str	r3, [r7, #12]

    if (i2c1_start_addr(addr7, 0) < 0) { i2c1_stop(); return -1; }
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff7a 	bl	8001e28 <i2c1_start_addr>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da11      	bge.n	8001f5e <i2c1_write_reg+0x4a>
 8001f3a:	f7ff ffdb 	bl	8001ef4 <i2c1_stop>
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e043      	b.n	8001fcc <i2c1_write_reg+0xb8>

    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff57 	bl	8001dfc <i2c_timeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <i2c1_write_reg+0x4a>
 8001f54:	f7ff ffce 	bl	8001ef4 <i2c1_stop>
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e036      	b.n	8001fcc <i2c1_write_reg+0xb8>
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <i2c1_write_reg+0xc4>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0ec      	beq.n	8001f44 <i2c1_write_reg+0x30>
    I2C1->DR = reg;
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <i2c1_write_reg+0xc4>)
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8001f70:	e00c      	b.n	8001f8c <i2c1_write_reg+0x78>
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff40 	bl	8001dfc <i2c_timeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <i2c1_write_reg+0x78>
 8001f82:	f7ff ffb7 	bl	8001ef4 <i2c1_stop>
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	e01f      	b.n	8001fcc <i2c1_write_reg+0xb8>
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <i2c1_write_reg+0xc4>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ec      	beq.n	8001f72 <i2c1_write_reg+0x5e>
    I2C1->DR = data;
 8001f98:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd8 <i2c1_write_reg+0xc4>)
 8001f9a:	797b      	ldrb	r3, [r7, #5]
 8001f9c:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8001f9e:	e00c      	b.n	8001fba <i2c1_write_reg+0xa6>
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff29 	bl	8001dfc <i2c_timeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <i2c1_write_reg+0xa6>
 8001fb0:	f7ff ffa0 	bl	8001ef4 <i2c1_stop>
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb8:	e008      	b.n	8001fcc <i2c1_write_reg+0xb8>
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <i2c1_write_reg+0xc4>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ec      	beq.n	8001fa0 <i2c1_write_reg+0x8c>
    i2c1_stop();
 8001fc6:	f7ff ff95 	bl	8001ef4 <i2c1_stop>
    return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	000f4240 	.word	0x000f4240
 8001fd8:	40005400 	.word	0x40005400

08001fdc <i2c1_read_multi>:
    *data = (uint8_t)I2C1->DR;

    return 0;
}

int i2c1_read_multi(uint8_t addr7, uint8_t reg, uint8_t *buf, uint32_t len) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	460b      	mov	r3, r1
 8001fec:	73bb      	strb	r3, [r7, #14]
    if (len == 0) return 0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <i2c1_read_multi+0x1c>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e10c      	b.n	8002212 <i2c1_read_multi+0x236>
    uint32_t to = 1000000;
 8001ff8:	4b88      	ldr	r3, [pc, #544]	@ (800221c <i2c1_read_multi+0x240>)
 8001ffa:	613b      	str	r3, [r7, #16]

    // Write reg
    if (i2c1_start_addr(addr7, 0) < 0) { i2c1_stop(); return -1; }
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff11 	bl	8001e28 <i2c1_start_addr>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	da11      	bge.n	8002030 <i2c1_read_multi+0x54>
 800200c:	f7ff ff72 	bl	8001ef4 <i2c1_stop>
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e0fd      	b.n	8002212 <i2c1_read_multi+0x236>
    while (!(I2C1->SR1 & I2C_SR1_TXE)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff feee 	bl	8001dfc <i2c_timeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <i2c1_read_multi+0x54>
 8002026:	f7ff ff65 	bl	8001ef4 <i2c1_stop>
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e0f0      	b.n	8002212 <i2c1_read_multi+0x236>
 8002030:	4b7b      	ldr	r3, [pc, #492]	@ (8002220 <i2c1_read_multi+0x244>)
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ec      	beq.n	8002016 <i2c1_read_multi+0x3a>
    I2C1->DR = reg;
 800203c:	4a78      	ldr	r2, [pc, #480]	@ (8002220 <i2c1_read_multi+0x244>)
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8002042:	e00c      	b.n	800205e <i2c1_read_multi+0x82>
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fed7 	bl	8001dfc <i2c_timeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <i2c1_read_multi+0x82>
 8002054:	f7ff ff4e 	bl	8001ef4 <i2c1_stop>
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	e0d9      	b.n	8002212 <i2c1_read_multi+0x236>
 800205e:	4b70      	ldr	r3, [pc, #448]	@ (8002220 <i2c1_read_multi+0x244>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ec      	beq.n	8002044 <i2c1_read_multi+0x68>

    // Restart leitura
    I2C1->CR1 |= I2C_CR1_START;
 800206a:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <i2c1_read_multi+0x244>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6c      	ldr	r2, [pc, #432]	@ (8002220 <i2c1_read_multi+0x244>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 8002076:	e00c      	b.n	8002092 <i2c1_read_multi+0xb6>
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff febd 	bl	8001dfc <i2c_timeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <i2c1_read_multi+0xb6>
 8002088:	f7ff ff34 	bl	8001ef4 <i2c1_stop>
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	e0bf      	b.n	8002212 <i2c1_read_multi+0x236>
 8002092:	4b63      	ldr	r3, [pc, #396]	@ (8002220 <i2c1_read_multi+0x244>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ec      	beq.n	8002078 <i2c1_read_multi+0x9c>
    (void)I2C1->SR1;
 800209e:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <i2c1_read_multi+0x244>)
 80020a0:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = (addr7<<1) | 1;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002220 <i2c1_read_multi+0x244>)
 80020ac:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) if (i2c_timeout(&to)) { i2c1_stop(); return -1; }
 80020ae:	e00c      	b.n	80020ca <i2c1_read_multi+0xee>
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fea1 	bl	8001dfc <i2c_timeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <i2c1_read_multi+0xee>
 80020c0:	f7ff ff18 	bl	8001ef4 <i2c1_stop>
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e0a3      	b.n	8002212 <i2c1_read_multi+0x236>
 80020ca:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <i2c1_read_multi+0x244>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ec      	beq.n	80020b0 <i2c1_read_multi+0xd4>

    if (len == 1) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d128      	bne.n	800212e <i2c1_read_multi+0x152>
        // NACK single
        I2C1->CR1 &= ~I2C_CR1_ACK;
 80020dc:	4b50      	ldr	r3, [pc, #320]	@ (8002220 <i2c1_read_multi+0x244>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002220 <i2c1_read_multi+0x244>)
 80020e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020e6:	6013      	str	r3, [r2, #0]
        (void)I2C1->SR1; (void)I2C1->SR2;
 80020e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <i2c1_read_multi+0x244>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002220 <i2c1_read_multi+0x244>)
 80020ee:	699b      	ldr	r3, [r3, #24]
        I2C1->CR1 |= I2C_CR1_STOP;
 80020f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002220 <i2c1_read_multi+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002220 <i2c1_read_multi+0x244>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fa:	6013      	str	r3, [r2, #0]
        while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 80020fc:	e00a      	b.n	8002114 <i2c1_read_multi+0x138>
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe7a 	bl	8001dfc <i2c_timeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <i2c1_read_multi+0x138>
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e07e      	b.n	8002212 <i2c1_read_multi+0x236>
 8002114:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <i2c1_read_multi+0x244>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ee      	beq.n	80020fe <i2c1_read_multi+0x122>
        buf[0] = (uint8_t)I2C1->DR;
 8002120:	4b3f      	ldr	r3, [pc, #252]	@ (8002220 <i2c1_read_multi+0x244>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	701a      	strb	r2, [r3, #0]
        return 0;
 800212a:	2300      	movs	r3, #0
 800212c:	e071      	b.n	8002212 <i2c1_read_multi+0x236>
    }

    // ACK para múltiplos
    I2C1->CR1 |= I2C_CR1_ACK;
 800212e:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <i2c1_read_multi+0x244>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3b      	ldr	r2, [pc, #236]	@ (8002220 <i2c1_read_multi+0x244>)
 8002134:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002138:	6013      	str	r3, [r2, #0]
    (void)I2C1->SR1; (void)I2C1->SR2;
 800213a:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <i2c1_read_multi+0x244>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <i2c1_read_multi+0x244>)
 8002140:	699b      	ldr	r3, [r3, #24]

    for (uint32_t i=0; i<len; i++) {
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e05f      	b.n	8002208 <i2c1_read_multi+0x22c>
        if (i == (len-2)) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b02      	subs	r3, #2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	429a      	cmp	r2, r3
 8002150:	d14a      	bne.n	80021e8 <i2c1_read_multi+0x20c>
            // preparar NACK para o último byte
            while (!(I2C1->SR1 & I2C_SR1_BTF)) if (i2c_timeout(&to)) return -1;
 8002152:	e00a      	b.n	800216a <i2c1_read_multi+0x18e>
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe4f 	bl	8001dfc <i2c_timeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <i2c1_read_multi+0x18e>
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	e053      	b.n	8002212 <i2c1_read_multi+0x236>
 800216a:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <i2c1_read_multi+0x244>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ee      	beq.n	8002154 <i2c1_read_multi+0x178>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 8002176:	4b2a      	ldr	r3, [pc, #168]	@ (8002220 <i2c1_read_multi+0x244>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <i2c1_read_multi+0x244>)
 800217c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002180:	6013      	str	r3, [r2, #0]
            buf[i] = (uint8_t)I2C1->DR;
 8002182:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <i2c1_read_multi+0x244>)
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	4413      	add	r3, r2
 800218c:	b2ca      	uxtb	r2, r1
 800218e:	701a      	strb	r2, [r3, #0]
            I2C1->CR1 |= I2C_CR1_STOP;
 8002190:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <i2c1_read_multi+0x244>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <i2c1_read_multi+0x244>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219a:	6013      	str	r3, [r2, #0]
            while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 800219c:	e00a      	b.n	80021b4 <i2c1_read_multi+0x1d8>
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe2a 	bl	8001dfc <i2c_timeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <i2c1_read_multi+0x1d8>
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e02e      	b.n	8002212 <i2c1_read_multi+0x236>
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <i2c1_read_multi+0x244>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <i2c1_read_multi+0x1c2>
            buf[i+1] = (uint8_t)I2C1->DR;
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <i2c1_read_multi+0x244>)
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4413      	add	r3, r2
 80021cc:	b2ca      	uxtb	r2, r1
 80021ce:	701a      	strb	r2, [r3, #0]
            break;
 80021d0:	e01e      	b.n	8002210 <i2c1_read_multi+0x234>
        } else {
            while (!(I2C1->SR1 & I2C_SR1_RXNE)) if (i2c_timeout(&to)) return -1;
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe10 	bl	8001dfc <i2c_timeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <i2c1_read_multi+0x20c>
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e014      	b.n	8002212 <i2c1_read_multi+0x236>
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <i2c1_read_multi+0x244>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <i2c1_read_multi+0x1f6>
            buf[i] = (uint8_t)I2C1->DR;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <i2c1_read_multi+0x244>)
 80021f6:	6919      	ldr	r1, [r3, #16]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
    for (uint32_t i=0; i<len; i++) {
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d39b      	bcc.n	8002148 <i2c1_read_multi+0x16c>
        }
    }
    return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	000f4240 	.word	0x000f4240
 8002220:	40005400 	.word	0x40005400

08002224 <mpu6050_init>:

int mpu6050_init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    // Wake up
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_PWR1, 0x00) < 0) return -1;
 8002228:	2200      	movs	r2, #0
 800222a:	216b      	movs	r1, #107	@ 0x6b
 800222c:	2068      	movs	r0, #104	@ 0x68
 800222e:	f7ff fe71 	bl	8001f14 <i2c1_write_reg>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	da02      	bge.n	800223e <mpu6050_init+0x1a>
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e02c      	b.n	8002298 <mpu6050_init+0x74>
    // LPF ~42 Hz, gyro ±250 dps, accel ±2g, SampleRate 1k/(1+SMPLRT_DIV) -> 100 Hz (div=9)
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_CONFIG, 0x03) < 0) return -1;
 800223e:	2203      	movs	r2, #3
 8002240:	211a      	movs	r1, #26
 8002242:	2068      	movs	r0, #104	@ 0x68
 8002244:	f7ff fe66 	bl	8001f14 <i2c1_write_reg>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <mpu6050_init+0x30>
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e021      	b.n	8002298 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_GYROCFG, 0x00) < 0) return -1;
 8002254:	2200      	movs	r2, #0
 8002256:	211b      	movs	r1, #27
 8002258:	2068      	movs	r0, #104	@ 0x68
 800225a:	f7ff fe5b 	bl	8001f14 <i2c1_write_reg>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	da02      	bge.n	800226a <mpu6050_init+0x46>
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	e016      	b.n	8002298 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_ACCELCFG, 0x00) < 0) return -1;
 800226a:	2200      	movs	r2, #0
 800226c:	211c      	movs	r1, #28
 800226e:	2068      	movs	r0, #104	@ 0x68
 8002270:	f7ff fe50 	bl	8001f14 <i2c1_write_reg>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	da02      	bge.n	8002280 <mpu6050_init+0x5c>
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e00b      	b.n	8002298 <mpu6050_init+0x74>
    if (i2c1_write_reg(MPU6050_ADDR, MPU6050_REG_SMPLRT, 9)    < 0) return -1;
 8002280:	2209      	movs	r2, #9
 8002282:	2119      	movs	r1, #25
 8002284:	2068      	movs	r0, #104	@ 0x68
 8002286:	f7ff fe45 	bl	8001f14 <i2c1_write_reg>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	da02      	bge.n	8002296 <mpu6050_init+0x72>
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	e000      	b.n	8002298 <mpu6050_init+0x74>
    return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}

0800229c <mpu6050_read_all>:

int mpu6050_read_all(mpu6050_raw_t *out) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    uint8_t buf[14];
    if (i2c1_read_multi(MPU6050_ADDR, MPU6050_REG_ACCEL, buf, 14) < 0) return -1;
 80022a4:	f107 0208 	add.w	r2, r7, #8
 80022a8:	230e      	movs	r3, #14
 80022aa:	213b      	movs	r1, #59	@ 0x3b
 80022ac:	2068      	movs	r0, #104	@ 0x68
 80022ae:	f7ff fe95 	bl	8001fdc <i2c1_read_multi>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da02      	bge.n	80022be <mpu6050_read_all+0x22>
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e046      	b.n	800234c <mpu6050_read_all+0xb0>

    out->ax = (int16_t)((buf[0]<<8) | buf[1]);
 80022be:	7a3b      	ldrb	r3, [r7, #8]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	7a7b      	ldrb	r3, [r7, #9]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	801a      	strh	r2, [r3, #0]
    out->ay = (int16_t)((buf[2]<<8) | buf[3]);
 80022d2:	7abb      	ldrb	r3, [r7, #10]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	b21b      	sxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	805a      	strh	r2, [r3, #2]
    out->az = (int16_t)((buf[4]<<8) | buf[5]);
 80022e6:	7b3b      	ldrb	r3, [r7, #12]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	7b7b      	ldrb	r3, [r7, #13]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	809a      	strh	r2, [r3, #4]
    out->temp_raw = (int16_t)((buf[6]<<8) | buf[7]);
 80022fa:	7bbb      	ldrb	r3, [r7, #14]
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	819a      	strh	r2, [r3, #12]
    out->gx = (int16_t)((buf[8]<<8) | buf[9]);
 800230e:	7c3b      	ldrb	r3, [r7, #16]
 8002310:	b21b      	sxth	r3, r3
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	7c7b      	ldrb	r3, [r7, #17]
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	80da      	strh	r2, [r3, #6]
    out->gy = (int16_t)((buf[10]<<8) | buf[11]);
 8002322:	7cbb      	ldrb	r3, [r7, #18]
 8002324:	b21b      	sxth	r3, r3
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	b21a      	sxth	r2, r3
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21a      	sxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	811a      	strh	r2, [r3, #8]
    out->gz = (int16_t)((buf[12]<<8) | buf[13]);
 8002336:	7d3b      	ldrb	r3, [r7, #20]
 8002338:	b21b      	sxth	r3, r3
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	7d7b      	ldrb	r3, [r7, #21]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21a      	sxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	815a      	strh	r2, [r3, #10]
    return 0;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_MspInit+0x54>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a11      	ldr	r2, [pc, #68]	@ (80023a8 <HAL_MspInit+0x54>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <HAL_MspInit+0x54>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_MspInit+0x54>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_MspInit+0x54>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_MspInit+0x54>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	210f      	movs	r1, #15
 8002396:	f06f 0001 	mvn.w	r0, #1
 800239a:	f000 fcd0 	bl	8002d3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	@ (8002430 <HAL_I2C_MspInit+0x84>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d12b      	bne.n	8002426 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MP_SCL_Pin|MP_SDA_Pin;
 80023ea:	23c0      	movs	r3, #192	@ 0xc0
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ee:	2312      	movs	r3, #18
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023fa:	2304      	movs	r3, #4
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	@ (8002438 <HAL_I2C_MspInit+0x8c>)
 8002406:	f001 f84d 	bl	80034a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 8002414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_I2C_MspInit+0x88>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002426:	bf00      	nop
 8002428:	3728      	adds	r7, #40	@ 0x28
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40005400 	.word	0x40005400
 8002434:	40023800 	.word	0x40023800
 8002438:	40020400 	.word	0x40020400

0800243c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a64      	ldr	r2, [pc, #400]	@ (80025ec <HAL_SD_MspInit+0x1b0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f040 80c1 	bne.w	80025e2 <HAL_SD_MspInit+0x1a6>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	4b62      	ldr	r3, [pc, #392]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 800246a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800246e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002470:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6313      	str	r3, [r2, #48]	@ 0x30
 800248c:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	4b54      	ldr	r3, [pc, #336]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4a53      	ldr	r2, [pc, #332]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_SD_MspInit+0x1b4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024b4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80024b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024be:	2301      	movs	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024c6:	230c      	movs	r3, #12
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4848      	ldr	r0, [pc, #288]	@ (80025f4 <HAL_SD_MspInit+0x1b8>)
 80024d2:	f000 ffe7 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024d6:	2304      	movs	r3, #4
 80024d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024de:	2301      	movs	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024e6:	230c      	movs	r3, #12
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4841      	ldr	r0, [pc, #260]	@ (80025f8 <HAL_SD_MspInit+0x1bc>)
 80024f2:	f000 ffd7 	bl	80034a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80024f6:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 80024f8:	4a41      	ldr	r2, [pc, #260]	@ (8002600 <HAL_SD_MspInit+0x1c4>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80024fc:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 80024fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002502:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002504:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250a:	4b3c      	ldr	r3, [pc, #240]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002510:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002516:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002518:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 800251a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002520:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002522:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002526:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002528:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 800252a:	2220      	movs	r2, #32
 800252c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800252e:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002536:	2204      	movs	r2, #4
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800253a:	4b30      	ldr	r3, [pc, #192]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 800253c:	2203      	movs	r2, #3
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002540:	4b2e      	ldr	r3, [pc, #184]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002542:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002548:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 800254a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002550:	482a      	ldr	r0, [pc, #168]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002552:	f000 fc2b 	bl	8002dac <HAL_DMA_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800255c:	f7ff fc48 	bl	8001df0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a26      	ldr	r2, [pc, #152]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
 8002566:	4a25      	ldr	r2, [pc, #148]	@ (80025fc <HAL_SD_MspInit+0x1c0>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 800256e:	4a26      	ldr	r2, [pc, #152]	@ (8002608 <HAL_SD_MspInit+0x1cc>)
 8002570:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002572:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 8002574:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002578:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257a:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 800257c:	2240      	movs	r2, #64	@ 0x40
 800257e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002580:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002586:	4b1f      	ldr	r3, [pc, #124]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 8002588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800258c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800258e:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 8002590:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002594:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002596:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 8002598:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800259c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800259e:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025a0:	2220      	movs	r2, #32
 80025a2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a4:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025aa:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025ac:	2204      	movs	r2, #4
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025b2:	2203      	movs	r2, #3
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80025c6:	480f      	ldr	r0, [pc, #60]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025c8:	f000 fbf0 	bl	8002dac <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80025d2:	f7ff fc0d 	bl	8001df0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025dc:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_SD_MspInit+0x1c8>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	@ 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	20000520 	.word	0x20000520
 8002600:	40026458 	.word	0x40026458
 8002604:	20000580 	.word	0x20000580
 8002608:	400264a0 	.word	0x400264a0

0800260c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	@ 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_SPI_MspInit+0x84>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d12b      	bne.n	8002686 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 8002638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a10      	ldr	r2, [pc, #64]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <HAL_SPI_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002666:	23e0      	movs	r3, #224	@ 0xe0
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002676:	2305      	movs	r3, #5
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	@ (8002698 <HAL_SPI_MspInit+0x8c>)
 8002682:	f000 ff0f 	bl	80034a4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	@ 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40013000 	.word	0x40013000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_TIM_Base_MspInit+0x94>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d134      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_TIM_Base_MspInit+0x98>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_ECHO_Pin;
 80026f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002708:	2301      	movs	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4809      	ldr	r0, [pc, #36]	@ (8002738 <HAL_TIM_Base_MspInit+0x9c>)
 8002714:	f000 fec6 	bl	80034a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2105      	movs	r1, #5
 800271c:	201b      	movs	r0, #27
 800271e:	f000 fb0e 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002722:	201b      	movs	r0, #27
 8002724:	f000 fb27 	bl	8002d76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40010000 	.word	0x40010000
 8002734:	40023800 	.word	0x40023800
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_UART_MspInit+0x84>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12c      	bne.n	80027b8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_UART_MspInit+0x88>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002796:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a8:	2307      	movs	r3, #7
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4619      	mov	r1, r3
 80027b2:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_UART_MspInit+0x8c>)
 80027b4:	f000 fe76 	bl	80034a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002806:	f000 f97b 	bl	8002b00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800280a:	f00a fb61 	bl	800ced0 <xTaskGetSchedulerState>
 800280e:	4603      	mov	r3, r0
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002814:	f00a ff40 	bl	800d698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <TIM1_CC_IRQHandler+0x10>)
 8002822:	f003 f94d 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000638 	.word	0x20000638

08002830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <DMA2_Stream3_IRQHandler+0x10>)
 8002836:	f000 fbbf 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000520 	.word	0x20000520

08002844 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA2_Stream6_IRQHandler+0x10>)
 800284a:	f000 fbb5 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000580 	.word	0x20000580

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <_kill>:

int _kill(int pid, int sig)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002872:	f00c f96f 	bl	800eb54 <__errno>
 8002876:	4603      	mov	r3, r0
 8002878:	2216      	movs	r2, #22
 800287a:	601a      	str	r2, [r3, #0]
  return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_exit>:

void _exit (int status)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002890:	f04f 31ff 	mov.w	r1, #4294967295
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ffe7 	bl	8002868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <_exit+0x12>

0800289e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e00a      	b.n	80028c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b0:	f3af 8000 	nop.w
 80028b4:	4601      	mov	r1, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dbf0      	blt.n	80028b0 <_read+0x12>
  }

  return len;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e009      	b.n	80028fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	60ba      	str	r2, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf1      	blt.n	80028ea <_write+0x12>
  }
  return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_close>:

int _close(int file)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002938:	605a      	str	r2, [r3, #4]
  return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_isatty>:

int _isatty(int file)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f00c f8d4 	bl	800eb54 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20020000 	.word	0x20020000
 80029d8:	00000400 	.word	0x00000400
 80029dc:	20000700 	.word	0x20000700
 80029e0:	20004628 	.word	0x20004628

080029e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a0c:	f7ff ffea 	bl	80029e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a10:	480c      	ldr	r0, [pc, #48]	@ (8002a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a12:	490d      	ldr	r1, [pc, #52]	@ (8002a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a14:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a28:	4c0a      	ldr	r4, [pc, #40]	@ (8002a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a36:	f00c f893 	bl	800eb60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3a:	f7fe fd71 	bl	8001520 <main>
  bx  lr    
 8002a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a4c:	08012cd4 	.word	0x08012cd4
  ldr r2, =_sbss
 8002a50:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a54:	20004628 	.word	0x20004628

08002a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC_IRQHandler>
	...

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_Init+0x40>)
 8002a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <HAL_Init+0x40>)
 8002a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_Init+0x40>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 f94f 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f000 f808 	bl	8002aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7ff fc60 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_InitTick+0x54>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_InitTick+0x58>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f967 	bl	8002d92 <HAL_SYSTICK_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00e      	b.n	8002aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b0f      	cmp	r3, #15
 8002ad2:	d80a      	bhi.n	8002aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f000 f92f 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae0:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <HAL_InitTick+0x5c>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000008 	.word	0x20000008
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x20>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_IncTick+0x24>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_IncTick+0x24>)
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000008 	.word	0x20000008
 8002b24:	20000704 	.word	0x20000704

08002b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_GetTick+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000704 	.word	0x20000704

08002b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff ffee 	bl	8002b28 <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d005      	beq.n	8002b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_Delay+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b66:	bf00      	nop
 8002b68:	f7ff ffde 	bl	8002b28 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d8f7      	bhi.n	8002b68 <HAL_Delay+0x28>
  {
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000008 	.word	0x20000008

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <__NVIC_EnableIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff29 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d50:	f7ff ff3e 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff ff8e 	bl	8002c7c <NVIC_EncodePriority>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff31 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <SysTick_Config>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff feb6 	bl	8002b28 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e099      	b.n	8002efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de8:	e00f      	b.n	8002e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dea:	f7ff fe9d 	bl	8002b28 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d908      	bls.n	8002e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e078      	b.n	8002efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e8      	bne.n	8002dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4b38      	ldr	r3, [pc, #224]	@ (8002f04 <HAL_DMA_Init+0x158>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0307 	bic.w	r3, r3, #7
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d117      	bne.n	8002ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa7b 	bl	80033ac <DMA_CheckFifoParam>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2240      	movs	r2, #64	@ 0x40
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e016      	b.n	8002efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fa32 	bl	8003340 <DMA_CalcBaseAndBitshift>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	223f      	movs	r2, #63	@ 0x3f
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	f010803f 	.word	0xf010803f

08002f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Start_IT+0x26>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e040      	b.n	8002fb0 <HAL_DMA_Start_IT+0xa8>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12f      	bne.n	8002fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9c4 	bl	80032e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	223f      	movs	r2, #63	@ 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0216 	orr.w	r2, r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e005      	b.n	8002fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003200 <HAL_DMA_IRQHandler+0x248>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a8e      	ldr	r2, [pc, #568]	@ (8003204 <HAL_DMA_IRQHandler+0x24c>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a9b      	lsrs	r3, r3, #10
 8002fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01a      	beq.n	8003024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2208      	movs	r2, #8
 8003012:	409a      	lsls	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d012      	beq.n	800305a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	2201      	movs	r2, #1
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	2204      	movs	r2, #4
 8003060:	409a      	lsls	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2204      	movs	r2, #4
 800307e:	409a      	lsls	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	2210      	movs	r2, #16
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d043      	beq.n	8003128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03c      	beq.n	8003128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	2210      	movs	r2, #16
 80030b4:	409a      	lsls	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d018      	beq.n	80030fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d024      	beq.n	8003128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
 80030e6:	e01f      	b.n	8003128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
 80030f8:	e016      	b.n	8003128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0208 	bic.w	r2, r2, #8
 8003116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	2220      	movs	r2, #32
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 808f 	beq.w	8003258 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8087 	beq.w	8003258 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	2220      	movs	r2, #32
 8003150:	409a      	lsls	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b05      	cmp	r3, #5
 8003160:	d136      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0216 	bic.w	r2, r2, #22
 8003170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_DMA_IRQHandler+0x1da>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0208 	bic.w	r2, r2, #8
 80031a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	223f      	movs	r2, #63	@ 0x3f
 80031a8:	409a      	lsls	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07e      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
        }
        return;
 80031ce:	e079      	b.n	80032c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d031      	beq.n	8003258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
 80031fc:	e02c      	b.n	8003258 <HAL_DMA_IRQHandler+0x2a0>
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000
 8003204:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e01e      	b.n	8003258 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0210 	bic.w	r2, r2, #16
 8003236:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	2b00      	cmp	r3, #0
 800325e:	d032      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2205      	movs	r2, #5
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3301      	adds	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	d307      	bcc.n	80032a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f2      	bne.n	8003284 <HAL_DMA_IRQHandler+0x2cc>
 800329e:	e000      	b.n	80032a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032c4:	bf00      	nop
    }
  }
}
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d108      	bne.n	8003324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003322:	e007      	b.n	8003334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3b10      	subs	r3, #16
 8003350:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <DMA_CalcBaseAndBitshift+0x68>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d909      	bls.n	8003382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003380:	e007      	b.n	8003392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	aaaaaaab 	.word	0xaaaaaaab
 80033a8:	0801243c 	.word	0x0801243c

080033ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d856      	bhi.n	800347a <DMA_CheckFifoParam+0xce>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <DMA_CheckFifoParam+0x28>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	0800347b 	.word	0x0800347b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d046      	beq.n	800347e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f4:	e043      	b.n	800347e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033fe:	d140      	bne.n	8003482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e03d      	b.n	8003482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800340e:	d121      	bne.n	8003454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d837      	bhi.n	8003486 <DMA_CheckFifoParam+0xda>
 8003416:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <DMA_CheckFifoParam+0x70>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003433 	.word	0x08003433
 8003424:	0800342d 	.word	0x0800342d
 8003428:	08003445 	.word	0x08003445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e030      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d025      	beq.n	800348a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e022      	b.n	800348a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003452:	e01c      	b.n	800348e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d903      	bls.n	8003462 <DMA_CheckFifoParam+0xb6>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003460:	e018      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      break;
 8003466:	e015      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e00b      	b.n	8003492 <DMA_CheckFifoParam+0xe6>
      break;
 800347a:	bf00      	nop
 800347c:	e00a      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
 8003480:	e008      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e006      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;   
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
    }
  } 
  
  return status; 
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e16b      	b.n	8003798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c0:	2201      	movs	r2, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	f040 815a 	bne.w	8003792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d005      	beq.n	80034f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d130      	bne.n	8003558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 0201 	and.w	r2, r3, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b03      	cmp	r3, #3
 8003562:	d017      	beq.n	8003594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d123      	bne.n	80035e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80b4 	beq.w	8003792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b60      	ldr	r3, [pc, #384]	@ (80037b0 <HAL_GPIO_Init+0x30c>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	4a5f      	ldr	r2, [pc, #380]	@ (80037b0 <HAL_GPIO_Init+0x30c>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003638:	6453      	str	r3, [r2, #68]	@ 0x44
 800363a:	4b5d      	ldr	r3, [pc, #372]	@ (80037b0 <HAL_GPIO_Init+0x30c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003646:	4a5b      	ldr	r2, [pc, #364]	@ (80037b4 <HAL_GPIO_Init+0x310>)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a52      	ldr	r2, [pc, #328]	@ (80037b8 <HAL_GPIO_Init+0x314>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02b      	beq.n	80036ca <HAL_GPIO_Init+0x226>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a51      	ldr	r2, [pc, #324]	@ (80037bc <HAL_GPIO_Init+0x318>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d025      	beq.n	80036c6 <HAL_GPIO_Init+0x222>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a50      	ldr	r2, [pc, #320]	@ (80037c0 <HAL_GPIO_Init+0x31c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01f      	beq.n	80036c2 <HAL_GPIO_Init+0x21e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	@ (80037c4 <HAL_GPIO_Init+0x320>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d019      	beq.n	80036be <HAL_GPIO_Init+0x21a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4e      	ldr	r2, [pc, #312]	@ (80037c8 <HAL_GPIO_Init+0x324>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_GPIO_Init+0x216>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4d      	ldr	r2, [pc, #308]	@ (80037cc <HAL_GPIO_Init+0x328>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00d      	beq.n	80036b6 <HAL_GPIO_Init+0x212>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4c      	ldr	r2, [pc, #304]	@ (80037d0 <HAL_GPIO_Init+0x32c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <HAL_GPIO_Init+0x20e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4b      	ldr	r2, [pc, #300]	@ (80037d4 <HAL_GPIO_Init+0x330>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_GPIO_Init+0x20a>
 80036aa:	2307      	movs	r3, #7
 80036ac:	e00e      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036ae:	2308      	movs	r3, #8
 80036b0:	e00c      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036b2:	2306      	movs	r3, #6
 80036b4:	e00a      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e008      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036ba:	2304      	movs	r3, #4
 80036bc:	e006      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036be:	2303      	movs	r3, #3
 80036c0:	e004      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e002      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_GPIO_Init+0x228>
 80036ca:	2300      	movs	r3, #0
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f002 0203 	and.w	r2, r2, #3
 80036d2:	0092      	lsls	r2, r2, #2
 80036d4:	4093      	lsls	r3, r2
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036dc:	4935      	ldr	r1, [pc, #212]	@ (80037b4 <HAL_GPIO_Init+0x310>)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ea:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800370e:	4a32      	ldr	r2, [pc, #200]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003714:	4b30      	ldr	r3, [pc, #192]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003738:	4a27      	ldr	r2, [pc, #156]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800373e:	4b26      	ldr	r3, [pc, #152]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003762:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800378c:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <HAL_GPIO_Init+0x334>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	f67f ae90 	bls.w	80034c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3724      	adds	r7, #36	@ 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40013800 	.word	0x40013800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400
 80037c0:	40020800 	.word	0x40020800
 80037c4:	40020c00 	.word	0x40020c00
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40021400 	.word	0x40021400
 80037d0:	40021800 	.word	0x40021800
 80037d4:	40021c00 	.word	0x40021c00
 80037d8:	40013c00 	.word	0x40013c00

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f8:	e003      	b.n	8003802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	041a      	lsls	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	619a      	str	r2, [r3, #24]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4013      	ands	r3, r2
 8003826:	041a      	lsls	r2, r3, #16
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43d9      	mvns	r1, r3
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	400b      	ands	r3, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	619a      	str	r2, [r3, #24]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e12b      	b.n	8003aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fd9e 	bl	80023ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	@ 0x24
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a8:	f000 fd80 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 80038ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a81      	ldr	r2, [pc, #516]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d807      	bhi.n	80038c8 <HAL_I2C_Init+0x84>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a80      	ldr	r2, [pc, #512]	@ (8003abc <HAL_I2C_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e006      	b.n	80038d6 <HAL_I2C_Init+0x92>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac0 <HAL_I2C_Init+0x27c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bf94      	ite	ls
 80038d0:	2301      	movls	r3, #1
 80038d2:	2300      	movhi	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0e7      	b.n	8003aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a78      	ldr	r2, [pc, #480]	@ (8003ac4 <HAL_I2C_Init+0x280>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d802      	bhi.n	8003918 <HAL_I2C_Init+0xd4>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3301      	adds	r3, #1
 8003916:	e009      	b.n	800392c <HAL_I2C_Init+0xe8>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a69      	ldr	r2, [pc, #420]	@ (8003ac8 <HAL_I2C_Init+0x284>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	3301      	adds	r3, #1
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	430b      	orrs	r3, r1
 8003932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800393e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	495c      	ldr	r1, [pc, #368]	@ (8003ab8 <HAL_I2C_Init+0x274>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d819      	bhi.n	8003980 <HAL_I2C_Init+0x13c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e59      	subs	r1, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fbb1 f3f3 	udiv	r3, r1, r3
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003960:	400b      	ands	r3, r1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_I2C_Init+0x138>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e59      	subs	r1, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb1 f3f3 	udiv	r3, r1, r3
 8003974:	3301      	adds	r3, #1
 8003976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397a:	e051      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 800397c:	2304      	movs	r3, #4
 800397e:	e04f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_I2C_Init+0x168>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e012      	b.n	80039d2 <HAL_I2C_Init+0x18e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e58      	subs	r0, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	0099      	lsls	r1, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_Init+0x196>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_I2C_Init+0x1bc>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e58      	subs	r0, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6859      	ldr	r1, [r3, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039fe:	e00f      	b.n	8003a20 <HAL_I2C_Init+0x1dc>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	0099      	lsls	r1, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6809      	ldr	r1, [r1, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6911      	ldr	r1, [r2, #16]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	001e847f 	.word	0x001e847f
 8003ac0:	003d08ff 	.word	0x003d08ff
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e267      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d075      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aea:	4b88      	ldr	r3, [pc, #544]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d00c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af6:	4b85      	ldr	r3, [pc, #532]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d112      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b02:	4b82      	ldr	r3, [pc, #520]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	4b7e      	ldr	r3, [pc, #504]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05b      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x108>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d157      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e242      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x74>
 8003b32:	4b76      	ldr	r3, [pc, #472]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a75      	ldr	r2, [pc, #468]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xb0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x98>
 8003b4a:	4b70      	ldr	r3, [pc, #448]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b6d      	ldr	r3, [pc, #436]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xb0>
 8003b64:	4b69      	ldr	r3, [pc, #420]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a68      	ldr	r2, [pc, #416]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe ffd0 	bl	8002b28 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe ffcc 	bl	8002b28 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e207      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe ffbc 	bl	8002b28 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe ffb8 	bl	8002b28 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	@ 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1f3      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	4b51      	ldr	r3, [pc, #324]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xe8>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003be2:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfa:	4b44      	ldr	r3, [pc, #272]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	4b41      	ldr	r3, [pc, #260]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x152>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1c7      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4937      	ldr	r1, [pc, #220]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e03a      	b.n	8003caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b34      	ldr	r3, [pc, #208]	@ (8003d10 <HAL_RCC_OscConfig+0x244>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe ff71 	bl	8002b28 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe ff6d 	bl	8002b28 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e1a8      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b28      	ldr	r3, [pc, #160]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4925      	ldr	r1, [pc, #148]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_RCC_OscConfig+0x244>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe ff50 	bl	8002b28 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fe ff4c 	bl	8002b28 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e187      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d036      	beq.n	8003d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <HAL_RCC_OscConfig+0x248>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fe ff30 	bl	8002b28 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fe ff2c 	bl	8002b28 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e167      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x200>
 8003cea:	e01b      	b.n	8003d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <HAL_RCC_OscConfig+0x248>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe ff19 	bl	8002b28 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	e00e      	b.n	8003d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfa:	f7fe ff15 	bl	8002b28 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d907      	bls.n	8003d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e150      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	42470000 	.word	0x42470000
 8003d14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b88      	ldr	r3, [pc, #544]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ea      	bne.n	8003cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8097 	beq.w	8003e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b81      	ldr	r3, [pc, #516]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b7d      	ldr	r3, [pc, #500]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d52:	4b7a      	ldr	r3, [pc, #488]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b77      	ldr	r3, [pc, #476]	@ (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b74      	ldr	r3, [pc, #464]	@ (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a73      	ldr	r2, [pc, #460]	@ (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fed5 	bl	8002b28 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe fed1 	bl	8002b28 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e10c      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	4b6a      	ldr	r3, [pc, #424]	@ (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2ea>
 8003da8:	4b64      	ldr	r3, [pc, #400]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	4a63      	ldr	r2, [pc, #396]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db4:	e01c      	b.n	8003df0 <HAL_RCC_OscConfig+0x324>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x30c>
 8003dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dca:	4b5c      	ldr	r3, [pc, #368]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4a5b      	ldr	r2, [pc, #364]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0x324>
 8003dd8:	4b58      	ldr	r3, [pc, #352]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	4a57      	ldr	r2, [pc, #348]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	4b55      	ldr	r3, [pc, #340]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a54      	ldr	r2, [pc, #336]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dea:	f023 0304 	bic.w	r3, r3, #4
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fe fe96 	bl	8002b28 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe fe92 	bl	8002b28 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0cb      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	4b49      	ldr	r3, [pc, #292]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ee      	beq.n	8003e00 <HAL_RCC_OscConfig+0x334>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fe fe80 	bl	8002b28 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fe7c 	bl	8002b28 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0b5      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e42:	4b3e      	ldr	r3, [pc, #248]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	4a38      	ldr	r2, [pc, #224]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a1 	beq.w	8003fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e6a:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d05c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d141      	bne.n	8003f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe fe50 	bl	8002b28 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe fe4c 	bl	8002b28 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e087      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b27      	ldr	r3, [pc, #156]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	491b      	ldr	r1, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe fe25 	bl	8002b28 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fe fe21 	bl	8002b28 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e05c      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef4:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x416>
 8003f00:	e054      	b.n	8003fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fe0e 	bl	8002b28 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe fe0a 	bl	8002b28 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e045      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x444>
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e038      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_RCC_OscConfig+0x4ec>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d028      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d121      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d11a      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0cc      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b68      	ldr	r3, [pc, #416]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d90c      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b65      	ldr	r3, [pc, #404]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b63      	ldr	r3, [pc, #396]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b8      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004010:	4b59      	ldr	r3, [pc, #356]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a58      	ldr	r2, [pc, #352]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800401a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004028:	4b53      	ldr	r3, [pc, #332]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a52      	ldr	r2, [pc, #328]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b50      	ldr	r3, [pc, #320]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	494d      	ldr	r1, [pc, #308]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d044      	beq.n	80040dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b47      	ldr	r3, [pc, #284]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d119      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d003      	beq.n	800407a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004076:	2b03      	cmp	r3, #3
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b3f      	ldr	r3, [pc, #252]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e067      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b37      	ldr	r3, [pc, #220]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4934      	ldr	r1, [pc, #208]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fe fd3c 	bl	8002b28 <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b4:	f7fe fd38 	bl	8002b28 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e04f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 020c 	and.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1eb      	bne.n	80040b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d20c      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b22      	ldr	r3, [pc, #136]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	@ (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e032      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004110:	4b19      	ldr	r3, [pc, #100]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4916      	ldr	r1, [pc, #88]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412e:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	490e      	ldr	r1, [pc, #56]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004142:	f000 f821 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490a      	ldr	r1, [pc, #40]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a09      	ldr	r2, [pc, #36]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fc9c 	bl	8002aa0 <HAL_InitTick>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023c00 	.word	0x40023c00
 8004178:	40023800 	.word	0x40023800
 800417c:	08012424 	.word	0x08012424
 8004180:	20000000 	.word	0x20000000
 8004184:	20000004 	.word	0x20000004

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b094      	sub	sp, #80	@ 0x50
 800418e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a0:	4b79      	ldr	r3, [pc, #484]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d00d      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x40>
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	f200 80e1 	bhi.w	8004374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x34>
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ba:	e0db      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b73      	ldr	r3, [pc, #460]	@ (800438c <HAL_RCC_GetSysClockFreq+0x204>)
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041c0:	e0db      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c2:	4b73      	ldr	r3, [pc, #460]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x208>)
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041c6:	e0d8      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b6a      	ldr	r3, [pc, #424]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	2200      	movs	r2, #0
 80041e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4621      	mov	r1, r4
 8004214:	1a51      	subs	r1, r2, r1
 8004216:	6139      	str	r1, [r7, #16]
 8004218:	4629      	mov	r1, r5
 800421a:	eb63 0301 	sbc.w	r3, r3, r1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800422c:	4659      	mov	r1, fp
 800422e:	018b      	lsls	r3, r1, #6
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004236:	4651      	mov	r1, sl
 8004238:	018a      	lsls	r2, r1, #6
 800423a:	4651      	mov	r1, sl
 800423c:	ebb2 0801 	subs.w	r8, r2, r1
 8004240:	4659      	mov	r1, fp
 8004242:	eb63 0901 	sbc.w	r9, r3, r1
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800425a:	4690      	mov	r8, r2
 800425c:	4699      	mov	r9, r3
 800425e:	4623      	mov	r3, r4
 8004260:	eb18 0303 	adds.w	r3, r8, r3
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	462b      	mov	r3, r5
 8004268:	eb49 0303 	adc.w	r3, r9, r3
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800427a:	4629      	mov	r1, r5
 800427c:	024b      	lsls	r3, r1, #9
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004284:	4621      	mov	r1, r4
 8004286:	024a      	lsls	r2, r1, #9
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428e:	2200      	movs	r2, #0
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004298:	f7fc fcf6 	bl	8000c88 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a4:	e058      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b38      	ldr	r3, [pc, #224]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	4611      	mov	r1, r2
 80042b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80042bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	0159      	lsls	r1, r3, #5
 80042ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d2:	0150      	lsls	r0, r2, #5
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4641      	mov	r1, r8
 80042da:	ebb2 0a01 	subs.w	sl, r2, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042f8:	ebb2 040a 	subs.w	r4, r2, sl
 80042fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	00eb      	lsls	r3, r5, #3
 800430a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430e:	00e2      	lsls	r2, r4, #3
 8004310:	4614      	mov	r4, r2
 8004312:	461d      	mov	r5, r3
 8004314:	4643      	mov	r3, r8
 8004316:	18e3      	adds	r3, r4, r3
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	464b      	mov	r3, r9
 800431c:	eb45 0303 	adc.w	r3, r5, r3
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800432e:	4629      	mov	r1, r5
 8004330:	028b      	lsls	r3, r1, #10
 8004332:	4621      	mov	r1, r4
 8004334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004338:	4621      	mov	r1, r4
 800433a:	028a      	lsls	r2, r1, #10
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004342:	2200      	movs	r2, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	61fa      	str	r2, [r7, #28]
 8004348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434c:	f7fc fc9c 	bl	8000c88 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800436a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <HAL_RCC_GetSysClockFreq+0x204>)
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800437c:	4618      	mov	r0, r3
 800437e:	3750      	adds	r7, #80	@ 0x50
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400
 8004390:	007a1200 	.word	0x007a1200

08004394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000000 	.word	0x20000000

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b0:	f7ff fff0 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	@ (80043d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08012434 	.word	0x08012434

080043d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d8:	f7ff ffdc 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0b5b      	lsrs	r3, r3, #13
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08012434 	.word	0x08012434

080043fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e022      	b.n	8004454 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fe f80b 	bl	800243c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2203      	movs	r2, #3
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f814 	bl	800445c <HAL_SD_InitCard>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e00a      	b.n	8004454 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b08e      	sub	sp, #56	@ 0x38
 8004460:	af04      	add	r7, sp, #16
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004478:	2376      	movs	r3, #118	@ 0x76
 800447a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681d      	ldr	r5, [r3, #0]
 8004480:	466c      	mov	r4, sp
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800448a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004494:	4628      	mov	r0, r5
 8004496:	f002 fcff 	bl	8006e98 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800449a:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <HAL_SD_InitCard+0xe8>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f002 fd2f 	bl	8006f08 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80044aa:	4b26      	ldr	r3, [pc, #152]	@ (8004544 <HAL_SD_InitCard+0xe8>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80044b0:	2002      	movs	r0, #2
 80044b2:	f7fe fb45 	bl	8002b40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fe12 	bl	80050e0 <SD_PowerON>
 80044bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e02e      	b.n	800453a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fd31 	bl	8004f44 <SD_InitCard>
 80044e2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e01b      	b.n	800453a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800450a:	4618      	mov	r0, r3
 800450c:	f002 fd8e 	bl	800702c <SDMMC_CmdBlockLength>
 8004510:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00f      	beq.n	8004538 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <HAL_SD_InitCard+0xec>)
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3728      	adds	r7, #40	@ 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bdb0      	pop	{r4, r5, r7, pc}
 8004542:	bf00      	nop
 8004544:	422580a0 	.word	0x422580a0
 8004548:	004005ff 	.word	0x004005ff

0800454c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0c0      	b.n	80046f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 80b9 	bne.w	80046f4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004592:	429a      	cmp	r2, r3
 8004594:	d907      	bls.n	80045a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0a7      	b.n	80046f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004700 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004704 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80045d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2200      	movs	r2, #0
 80045e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3380      	adds	r3, #128	@ 0x80
 8004610:	4619      	mov	r1, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	025b      	lsls	r3, r3, #9
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	f7fe fc75 	bl	8002f08 <HAL_DMA_Start_IT>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004632:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a33      	ldr	r2, [pc, #204]	@ (8004708 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800463a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e050      	b.n	80046f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004654:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	2b01      	cmp	r3, #1
 8004660:	d002      	beq.n	8004668 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	025b      	lsls	r3, r3, #9
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004674:	2390      	movs	r3, #144	@ 0x90
 8004676:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004678:	2302      	movs	r3, #2
 800467a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800467c:	2300      	movs	r3, #0
 800467e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004680:	2301      	movs	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f107 0210 	add.w	r2, r7, #16
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f002 fca0 	bl	8006fd4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d90a      	bls.n	80046b0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2282      	movs	r2, #130	@ 0x82
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 fd04 	bl	80070b4 <SDMMC_CmdReadMultiBlock>
 80046ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80046ae:	e009      	b.n	80046c4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2281      	movs	r2, #129	@ 0x81
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fcd7 	bl	8007070 <SDMMC_CmdReadSingleBlock>
 80046c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004708 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e002      	b.n	80046f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3730      	adds	r7, #48	@ 0x30
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	08004e2f 	.word	0x08004e2f
 8004704:	08004ea1 	.word	0x08004ea1
 8004708:	004005ff 	.word	0x004005ff
 800470c:	4225858c 	.word	0x4225858c

08004710 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	@ 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0c5      	b.n	80048c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 80be 	bne.w	80048c2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800474c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	429a      	cmp	r2, r3
 8004758:	d907      	bls.n	800476a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0ac      	b.n	80048c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2203      	movs	r2, #3
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004788:	f043 0302 	orr.w	r3, r3, #2
 800478c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004792:	4a4e      	ldr	r2, [pc, #312]	@ (80048cc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004794:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	4a4d      	ldr	r2, [pc, #308]	@ (80048d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800479c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	2200      	movs	r2, #0
 80047a4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	025b      	lsls	r3, r3, #9
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d90a      	bls.n	80047d0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22a0      	movs	r2, #160	@ 0xa0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 fcb8 	bl	800713c <SDMMC_CmdWriteMultiBlock>
 80047cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80047ce:	e009      	b.n	80047e4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2290      	movs	r2, #144	@ 0x90
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 fc8b 	bl	80070f8 <SDMMC_CmdWriteSingleBlock>
 80047e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a39      	ldr	r2, [pc, #228]	@ (80048d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80047f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e059      	b.n	80048c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004810:	4b31      	ldr	r3, [pc, #196]	@ (80048d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	2240      	movs	r2, #64	@ 0x40
 800481c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3380      	adds	r3, #128	@ 0x80
 8004846:	461a      	mov	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	f7fe fb5b 	bl	8002f08 <HAL_DMA_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01c      	beq.n	8004892 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004866:	f023 0302 	bic.w	r3, r3, #2
 800486a:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e018      	b.n	80048c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800489e:	2390      	movs	r3, #144	@ 0x90
 80048a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80048aa:	2301      	movs	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f107 0210 	add.w	r2, r7, #16
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f002 fb8b 	bl	8006fd4 <SDIO_ConfigData>

      return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3730      	adds	r7, #48	@ 0x30
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08004e05 	.word	0x08004e05
 80048d0:	08004ea1 	.word	0x08004ea1
 80048d4:	004005ff 	.word	0x004005ff
 80048d8:	4225858c 	.word	0x4225858c

080048dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048fe:	0f9b      	lsrs	r3, r3, #30
 8004900:	b2da      	uxtb	r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	b2da      	uxtb	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	b2da      	uxtb	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b2da      	uxtb	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004946:	b2da      	uxtb	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004950:	0d1b      	lsrs	r3, r3, #20
 8004952:	b29a      	uxth	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	b2da      	uxtb	r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800496e:	0bdb      	lsrs	r3, r3, #15
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004980:	0b9b      	lsrs	r3, r3, #14
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	b2da      	uxtb	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a4:	0b1b      	lsrs	r3, r3, #12
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d163      	bne.n	8004a88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c4:	009a      	lsls	r2, r3, #2
 80049c6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049ca:	4013      	ands	r3, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80049d0:	0f92      	lsrs	r2, r2, #30
 80049d2:	431a      	orrs	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	0edb      	lsrs	r3, r3, #27
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ee:	0e1b      	lsrs	r3, r3, #24
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a00:	0d5b      	lsrs	r3, r3, #21
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a12:	0c9b      	lsrs	r3, r3, #18
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a24:	0bdb      	lsrs	r3, r3, #15
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7e1b      	ldrb	r3, [r3, #24]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	3302      	adds	r3, #2
 8004a48:	2201      	movs	r2, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004a52:	fb03 f202 	mul.w	r2, r3, r2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7a1b      	ldrb	r3, [r3, #8]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004a74:	0a52      	lsrs	r2, r2, #9
 8004a76:	fb03 f202 	mul.w	r2, r3, r2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a84:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a86:	e031      	b.n	8004aec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d11d      	bne.n	8004acc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	029a      	lsls	r2, r3, #10
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	@ 0x60
 8004aca:	e00f      	b.n	8004aec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	@ (8004c34 <HAL_SD_GetCardCSD+0x344>)
 8004ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e09d      	b.n	8004c28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af0:	0b9b      	lsrs	r3, r3, #14
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b02:	09db      	lsrs	r3, r3, #7
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	0fdb      	lsrs	r3, r3, #31
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b30:	0f5b      	lsrs	r3, r3, #29
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	0e9b      	lsrs	r3, r3, #26
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	0d9b      	lsrs	r3, r3, #22
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	0d5b      	lsrs	r3, r3, #21
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	0bdb      	lsrs	r3, r3, #15
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	0b9b      	lsrs	r3, r3, #14
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	0b1b      	lsrs	r3, r3, #12
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	0a9b      	lsrs	r3, r3, #10
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	004005ff 	.word	0x004005ff

08004c38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004c90:	b5b0      	push	{r4, r5, r7, lr}
 8004c92:	b08e      	sub	sp, #56	@ 0x38
 8004c94:	af04      	add	r7, sp, #16
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d02e      	beq.n	8004d0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d106      	bne.n	8004cc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cc4:	e029      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fabc 	bl	800524c <SD_WideBus_Enable>
 8004cd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ce2:	e01a      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 faf9 	bl	80052e2 <SD_WideBus_Disable>
 8004cf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cfe:	e00c      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d0c:	e005      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a26      	ldr	r2, [pc, #152]	@ (8004dc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004d38:	e01f      	b.n	8004d7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681d      	ldr	r5, [r3, #0]
 8004d60:	466c      	mov	r4, sp
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d74:	4628      	mov	r0, r5
 8004d76:	f002 f88f 	bl	8006e98 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d82:	4618      	mov	r0, r3
 8004d84:	f002 f952 	bl	800702c <SDMMC_CmdBlockLength>
 8004d88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	@ 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	004005ff 	.word	0x004005ff

08004dc4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004dd0:	f107 030c 	add.w	r3, r7, #12
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa10 	bl	80051fc <SD_SendStatus>
 8004ddc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	0a5b      	lsrs	r3, r3, #9
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004dfa:	693b      	ldr	r3, [r7, #16]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e20:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	2b82      	cmp	r3, #130	@ 0x82
 8004e42:	d111      	bne.n	8004e68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f002 f999 	bl	8007180 <SDMMC_CmdStopTransfer>
 8004e4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fd3a 	bl	80048dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0208 	bic.w	r2, r2, #8
 8004e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f002 fdf5 	bl	8007a80 <HAL_SD_RxCpltCallback>
#endif
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fe fa0c 	bl	80032cc <HAL_DMA_GetError>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d03e      	beq.n	8004f38 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d002      	beq.n	8004ed6 <SD_DMAError+0x36>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d12d      	bne.n	8004f32 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	@ (8004f40 <SD_DMAError+0xa0>)
 8004edc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004eec:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f7ff ff62 	bl	8004dc4 <HAL_SD_GetCardState>
 8004f00:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d002      	beq.n	8004f0e <SD_DMAError+0x6e>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d10a      	bne.n	8004f24 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 f934 	bl	8007180 <SDMMC_CmdStopTransfer>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7ff fcd2 	bl	80048dc <HAL_SD_ErrorCallback>
#endif
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	004005ff 	.word	0x004005ff

08004f44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b094      	sub	sp, #80	@ 0x50
 8004f48:	af04      	add	r7, sp, #16
 8004f4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 ffe5 	bl	8006f24 <SDIO_GetPowerState>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004f64:	e0b8      	b.n	80050d8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d02f      	beq.n	8004fce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f002 fa0e 	bl	8007394 <SDMMC_CmdSendCID>
 8004f78:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <SD_InitCard+0x40>
    {
      return errorstate;
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	e0a9      	b.n	80050d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 f80f 	bl	8006fae <SDIO_GetResponse>
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2104      	movs	r1, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 f806 	bl	8006fae <SDIO_GetResponse>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2108      	movs	r1, #8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 fffd 	bl	8006fae <SDIO_GetResponse>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	210c      	movs	r1, #12
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fff4 	bl	8006fae <SDIO_GetResponse>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d00d      	beq.n	8004ff2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f107 020e 	add.w	r2, r7, #14
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 fa14 	bl	800740e <SDMMC_CmdSetRelAdd>
 8004fe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff0:	e072      	b.n	80050d8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d036      	beq.n	8005068 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004ffa:	89fb      	ldrh	r3, [r7, #14]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f002 f9de 	bl	80073d0 <SDMMC_CmdSendCSD>
 8005014:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <SD_InitCard+0xdc>
    {
      return errorstate;
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	e05b      	b.n	80050d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f001 ffc1 	bl	8006fae <SDIO_GetResponse>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2104      	movs	r1, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f001 ffb8 	bl	8006fae <SDIO_GetResponse>
 800503e:	4602      	mov	r2, r0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2108      	movs	r1, #8
 800504a:	4618      	mov	r0, r3
 800504c:	f001 ffaf 	bl	8006fae <SDIO_GetResponse>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	210c      	movs	r1, #12
 800505c:	4618      	mov	r0, r3
 800505e:	f001 ffa6 	bl	8006fae <SDIO_GetResponse>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2104      	movs	r1, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f001 ff9d 	bl	8006fae <SDIO_GetResponse>
 8005074:	4603      	mov	r3, r0
 8005076:	0d1a      	lsrs	r2, r3, #20
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800507c:	f107 0310 	add.w	r3, r7, #16
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fc34 	bl	80048f0 <HAL_SD_GetCardCSD>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800508e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005092:	e021      	b.n	80050d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	2200      	movs	r2, #0
 80050a0:	461c      	mov	r4, r3
 80050a2:	4615      	mov	r5, r2
 80050a4:	4622      	mov	r2, r4
 80050a6:	462b      	mov	r3, r5
 80050a8:	4608      	mov	r0, r1
 80050aa:	f002 f88b 	bl	80071c4 <SDMMC_CmdSelDesel>
 80050ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <SD_InitCard+0x176>
  {
    return errorstate;
 80050b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b8:	e00e      	b.n	80050d8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681d      	ldr	r5, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	466c      	mov	r4, sp
 80050c2:	f103 0210 	add.w	r2, r3, #16
 80050c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80050c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050cc:	3304      	adds	r3, #4
 80050ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050d0:	4628      	mov	r0, r5
 80050d2:	f001 fee1 	bl	8006e98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3740      	adds	r7, #64	@ 0x40
 80050dc:	46bd      	mov	sp, r7
 80050de:	bdb0      	pop	{r4, r5, r7, pc}

080050e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f002 f886 	bl	800720a <SDMMC_CmdGoIdleState>
 80050fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	e072      	b.n	80051f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f002 f899 	bl	8007246 <SDMMC_CmdOperCond>
 8005114:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f002 f86f 	bl	800720a <SDMMC_CmdGoIdleState>
 800512c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	e05b      	b.n	80051f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005142:	2b01      	cmp	r3, #1
 8005144:	d137      	bne.n	80051b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f002 f899 	bl	8007284 <SDMMC_CmdAppCommand>
 8005152:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d02d      	beq.n	80051b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800515a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800515e:	e047      	b.n	80051f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f002 f88c 	bl	8007284 <SDMMC_CmdAppCommand>
 800516c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <SD_PowerON+0x98>
    {
      return errorstate;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e03b      	b.n	80051f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	491e      	ldr	r1, [pc, #120]	@ (80051f8 <SD_PowerON+0x118>)
 800517e:	4618      	mov	r0, r3
 8005180:	f002 f8a2 	bl	80072c8 <SDMMC_CmdAppOperCommand>
 8005184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800518c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005190:	e02e      	b.n	80051f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f001 ff08 	bl	8006fae <SDIO_GetResponse>
 800519e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	0fdb      	lsrs	r3, r3, #31
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <SD_PowerON+0xcc>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <SD_PowerON+0xce>
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]

    count++;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80051bc:	4293      	cmp	r3, r2
 80051be:	d802      	bhi.n	80051c6 <SD_PowerON+0xe6>
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0cc      	beq.n	8005160 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d902      	bls.n	80051d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80051d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051d4:	e00c      	b.n	80051f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80051e6:	e002      	b.n	80051ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	c1100000 	.word	0xc1100000

080051fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800520c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005210:	e018      	b.n	8005244 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f002 f916 	bl	8007450 <SDMMC_CmdSendStatus>
 8005224:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <SD_SendStatus+0x34>
  {
    return errorstate;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	e009      	b.n	8005244 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f001 feb9 	bl	8006fae <SDIO_GetResponse>
 800523c:	4602      	mov	r2, r0
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fea3 	bl	8006fae <SDIO_GetResponse>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005272:	d102      	bne.n	800527a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005274:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005278:	e02f      	b.n	80052da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800527a:	f107 030c 	add.w	r3, r7, #12
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f879 	bl	8005378 <SD_FindSCR>
 8005286:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	e023      	b.n	80052da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01c      	beq.n	80052d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f001 ffeb 	bl	8007284 <SDMMC_CmdAppCommand>
 80052ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	e00f      	b.n	80052da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2102      	movs	r1, #2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 f824 	bl	800730e <SDMMC_CmdBusWidth>
 80052c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e003      	b.n	80052da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e001      	b.n	80052da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80052d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 fe58 	bl	8006fae <SDIO_GetResponse>
 80052fe:	4603      	mov	r3, r0
 8005300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005308:	d102      	bne.n	8005310 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800530a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800530e:	e02f      	b.n	8005370 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f82e 	bl	8005378 <SD_FindSCR>
 800531c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	e023      	b.n	8005370 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01c      	beq.n	800536c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f001 ffa0 	bl	8007284 <SDMMC_CmdAppCommand>
 8005344:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	e00f      	b.n	8005370 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f001 ffd9 	bl	800730e <SDMMC_CmdBusWidth>
 800535c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	e003      	b.n	8005370 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005368:	2300      	movs	r3, #0
 800536a:	e001      	b.n	8005370 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800536c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b08f      	sub	sp, #60	@ 0x3c
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005382:	f7fd fbd1 	bl	8002b28 <HAL_GetTick>
 8005386:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2108      	movs	r1, #8
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 fe44 	bl	800702c <SDMMC_CmdBlockLength>
 80053a4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	e0b9      	b.n	8005524 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f001 ff61 	bl	8007284 <SDMMC_CmdAppCommand>
 80053c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	e0aa      	b.n	8005524 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80053d4:	2308      	movs	r3, #8
 80053d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80053d8:	2330      	movs	r3, #48	@ 0x30
 80053da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80053dc:	2302      	movs	r3, #2
 80053de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f107 0210 	add.w	r2, r7, #16
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fdee 	bl	8006fd4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 ffa8 	bl	8007352 <SDMMC_CmdSendSCR>
 8005402:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02a      	beq.n	8005460 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	e08a      	b.n	8005524 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00f      	beq.n	800543c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	f107 0208 	add.w	r2, r7, #8
 8005428:	18d4      	adds	r4, r2, r3
 800542a:	4608      	mov	r0, r1
 800542c:	f001 fd5f 	bl	8006eee <SDIO_ReadFIFO>
 8005430:	4603      	mov	r3, r0
 8005432:	6023      	str	r3, [r4, #0]
      index++;
 8005434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005436:	3301      	adds	r3, #1
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
 800543a:	e006      	b.n	800544a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800544a:	f7fd fb6d 	bl	8002b28 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d102      	bne.n	8005460 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800545a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800545e:	e061      	b.n	8005524 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005466:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0cf      	beq.n	800540e <SD_FindSCR+0x96>
 800546e:	e000      	b.n	8005472 <SD_FindSCR+0xfa>
      break;
 8005470:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <SD_FindSCR+0x116>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2208      	movs	r2, #8
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005496:	2308      	movs	r3, #8
 8005498:	e044      	b.n	8005524 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2202      	movs	r2, #2
 80054ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e037      	b.n	8005524 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2220      	movs	r2, #32
 80054c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80054ca:	2320      	movs	r3, #32
 80054cc:	e02a      	b.n	8005524 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80054d6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	061a      	lsls	r2, r3, #24
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80054ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	0e1b      	lsrs	r3, r3, #24
 80054f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80054f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f8:	601a      	str	r2, [r3, #0]
    scr++;
 80054fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fc:	3304      	adds	r3, #4
 80054fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	061a      	lsls	r2, r3, #24
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800550c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	0a1b      	lsrs	r3, r3, #8
 8005512:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005516:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	0e1b      	lsrs	r3, r3, #24
 800551c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005520:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	373c      	adds	r7, #60	@ 0x3c
 8005528:	46bd      	mov	sp, r7
 800552a:	bd90      	pop	{r4, r7, pc}

0800552c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e07b      	b.n	8005636 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554e:	d009      	beq.n	8005564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
 8005556:	e005      	b.n	8005564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fd f844 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e8:	ea42 0103 	orr.w	r1, r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	f003 0104 	and.w	r1, r3, #4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	f003 0210 	and.w	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005624:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e041      	b.n	80056d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fd f819 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f000 fcdf 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d001      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e04e      	b.n	8005792 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a23      	ldr	r2, [pc, #140]	@ (80057a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571e:	d01d      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <HAL_TIM_Base_Start_IT+0xd0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a19      	ldr	r2, [pc, #100]	@ (80057b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIM_Base_Start_IT+0x80>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d111      	bne.n	8005780 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d010      	beq.n	8005790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577e:	e007      	b.n	8005790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40010400 	.word	0x40010400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40001800 	.word	0x40001800

080057bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e041      	b.n	8005852 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f839 	bl	800585a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f000 fc20 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_TIM_IC_Start_IT+0x1e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e013      	b.n	80058b6 <HAL_TIM_IC_Start_IT+0x46>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d104      	bne.n	800589e <HAL_TIM_IC_Start_IT+0x2e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e00b      	b.n	80058b6 <HAL_TIM_IC_Start_IT+0x46>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_IC_Start_IT+0x3e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	e003      	b.n	80058b6 <HAL_TIM_IC_Start_IT+0x46>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_TIM_IC_Start_IT+0x58>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	e013      	b.n	80058f0 <HAL_TIM_IC_Start_IT+0x80>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d104      	bne.n	80058d8 <HAL_TIM_IC_Start_IT+0x68>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e00b      	b.n	80058f0 <HAL_TIM_IC_Start_IT+0x80>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d104      	bne.n	80058e8 <HAL_TIM_IC_Start_IT+0x78>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	e003      	b.n	80058f0 <HAL_TIM_IC_Start_IT+0x80>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	7bbb      	ldrb	r3, [r7, #14]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d102      	bne.n	80058fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f8:	7b7b      	ldrb	r3, [r7, #13]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0cc      	b.n	8005a9c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_TIM_IC_Start_IT+0xa2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005910:	e013      	b.n	800593a <HAL_TIM_IC_Start_IT+0xca>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d104      	bne.n	8005922 <HAL_TIM_IC_Start_IT+0xb2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005920:	e00b      	b.n	800593a <HAL_TIM_IC_Start_IT+0xca>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d104      	bne.n	8005932 <HAL_TIM_IC_Start_IT+0xc2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005930:	e003      	b.n	800593a <HAL_TIM_IC_Start_IT+0xca>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_TIM_IC_Start_IT+0xda>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005948:	e013      	b.n	8005972 <HAL_TIM_IC_Start_IT+0x102>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <HAL_TIM_IC_Start_IT+0xea>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005958:	e00b      	b.n	8005972 <HAL_TIM_IC_Start_IT+0x102>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d104      	bne.n	800596a <HAL_TIM_IC_Start_IT+0xfa>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005968:	e003      	b.n	8005972 <HAL_TIM_IC_Start_IT+0x102>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b0c      	cmp	r3, #12
 8005976:	d841      	bhi.n	80059fc <HAL_TIM_IC_Start_IT+0x18c>
 8005978:	a201      	add	r2, pc, #4	@ (adr r2, 8005980 <HAL_TIM_IC_Start_IT+0x110>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059fd 	.word	0x080059fd
 8005988:	080059fd 	.word	0x080059fd
 800598c:	080059fd 	.word	0x080059fd
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059fd 	.word	0x080059fd
 8005998:	080059fd 	.word	0x080059fd
 800599c:	080059fd 	.word	0x080059fd
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	080059fd 	.word	0x080059fd
 80059b0:	080059eb 	.word	0x080059eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0202 	orr.w	r2, r2, #2
 80059c2:	60da      	str	r2, [r3, #12]
      break;
 80059c4:	e01d      	b.n	8005a02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0204 	orr.w	r2, r2, #4
 80059d4:	60da      	str	r2, [r3, #12]
      break;
 80059d6:	e014      	b.n	8005a02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	60da      	str	r2, [r3, #12]
      break;
 80059e8:	e00b      	b.n	8005a02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0210 	orr.w	r2, r2, #16
 80059f8:	60da      	str	r2, [r3, #12]
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005a00:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d148      	bne.n	8005a9a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fd7f 	bl	8006514 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a22      	ldr	r2, [pc, #136]	@ (8005aa4 <HAL_TIM_IC_Start_IT+0x234>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d022      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a28:	d01d      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <HAL_TIM_IC_Start_IT+0x238>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d018      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_TIM_IC_Start_IT+0x23c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIM_IC_Start_IT+0x240>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	@ (8005ab4 <HAL_TIM_IC_Start_IT+0x244>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <HAL_TIM_IC_Start_IT+0x248>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <HAL_TIM_IC_Start_IT+0x24c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d111      	bne.n	8005a8a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d010      	beq.n	8005a9a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a88:	e007      	b.n	8005a9a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0201 	orr.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40010400 	.word	0x40010400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40001800 	.word	0x40001800

08005ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d020      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01b      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0202 	mvn.w	r2, #2
 8005af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc f814 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa76 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa7d 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d020      	beq.n	8005b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0204 	mvn.w	r2, #4
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb ffee 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa50 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa57 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0208 	mvn.w	r2, #8
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2204      	movs	r2, #4
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb ffc8 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa2a 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa31 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0210 	mvn.w	r2, #16
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb ffa2 	bl	8001b38 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa04 	bl	8006004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa0b 	bl	8006018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00c      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0201 	mvn.w	r2, #1
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9e2 	bl	8005ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fd0e 	bl	800666c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9dc 	bl	800602c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0220 	mvn.w	r2, #32
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fce0 	bl	8006658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_IC_ConfigChannel+0x1e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e088      	b.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005cdc:	f000 fa56 	bl	800618c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 020c 	bic.w	r2, r2, #12
 8005cee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6999      	ldr	r1, [r3, #24]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	619a      	str	r2, [r3, #24]
 8005d02:	e060      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d11c      	bne.n	8005d44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d1a:	f000 fada 	bl	80062d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	021a      	lsls	r2, r3, #8
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	619a      	str	r2, [r3, #24]
 8005d42:	e040      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d11b      	bne.n	8005d82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005d5a:	f000 fb27 	bl	80063ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 020c 	bic.w	r2, r2, #12
 8005d6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
 8005d80:	e021      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d11c      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d98:	f000 fb44 	bl	8006424 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005daa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69d9      	ldr	r1, [r3, #28]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	61da      	str	r2, [r3, #28]
 8005dc0:	e001      	b.n	8005dc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e0b4      	b.n	8005f5e <HAL_TIM_ConfigClockSource+0x186>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2c:	d03e      	beq.n	8005eac <HAL_TIM_ConfigClockSource+0xd4>
 8005e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e32:	f200 8087 	bhi.w	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	f000 8086 	beq.w	8005f4a <HAL_TIM_ConfigClockSource+0x172>
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e42:	d87f      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b70      	cmp	r3, #112	@ 0x70
 8005e46:	d01a      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0xa6>
 8005e48:	2b70      	cmp	r3, #112	@ 0x70
 8005e4a:	d87b      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b60      	cmp	r3, #96	@ 0x60
 8005e4e:	d050      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e50:	2b60      	cmp	r3, #96	@ 0x60
 8005e52:	d877      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e54:	2b50      	cmp	r3, #80	@ 0x50
 8005e56:	d03c      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8005e58:	2b50      	cmp	r3, #80	@ 0x50
 8005e5a:	d873      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d058      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0x13a>
 8005e60:	2b40      	cmp	r3, #64	@ 0x40
 8005e62:	d86f      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e64:	2b30      	cmp	r3, #48	@ 0x30
 8005e66:	d064      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x15a>
 8005e68:	2b30      	cmp	r3, #48	@ 0x30
 8005e6a:	d86b      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d060      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x15a>
 8005e70:	2b20      	cmp	r3, #32
 8005e72:	d867      	bhi.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05c      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x15a>
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d05a      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x15a>
 8005e7c:	e062      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e8e:	f000 fb21 	bl	80064d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	609a      	str	r2, [r3, #8]
      break;
 8005eaa:	e04f      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ebc:	f000 fb0a 	bl	80064d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ece:	609a      	str	r2, [r3, #8]
      break;
 8005ed0:	e03c      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 f9c8 	bl	8006274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2150      	movs	r1, #80	@ 0x50
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fad7 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e02c      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efe:	461a      	mov	r2, r3
 8005f00:	f000 fa24 	bl	800634c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2160      	movs	r1, #96	@ 0x60
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fac7 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005f10:	e01c      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 f9a8 	bl	8006274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2140      	movs	r1, #64	@ 0x40
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fab7 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005f30:	e00c      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f000 faae 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005f42:	e003      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	73fb      	strb	r3, [r7, #15]
      break;
 8005f48:	e000      	b.n	8005f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d831      	bhi.n	8005fe0 <HAL_TIM_ReadCapturedValue+0x78>
 8005f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fb9 	.word	0x08005fb9
 8005f88:	08005fe1 	.word	0x08005fe1
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fc3 	.word	0x08005fc3
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08005fe1 	.word	0x08005fe1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fe1 	.word	0x08005fe1
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fd7 	.word	0x08005fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fbe:	60fb      	str	r3, [r7, #12]

      break;
 8005fc0:	e00f      	b.n	8005fe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	60fb      	str	r3, [r7, #12]

      break;
 8005fca:	e00a      	b.n	8005fe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd2:	60fb      	str	r3, [r7, #12]

      break;
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	60fb      	str	r3, [r7, #12]

      break;
 8005fde:	e000      	b.n	8005fe2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005fe0:	bf00      	nop
  }

  return tmpreg;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a43      	ldr	r2, [pc, #268]	@ (8006160 <TIM_Base_SetConfig+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d00f      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a40      	ldr	r2, [pc, #256]	@ (8006164 <TIM_Base_SetConfig+0x124>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00b      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3f      	ldr	r2, [pc, #252]	@ (8006168 <TIM_Base_SetConfig+0x128>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d007      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3e      	ldr	r2, [pc, #248]	@ (800616c <TIM_Base_SetConfig+0x12c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0x40>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a3d      	ldr	r2, [pc, #244]	@ (8006170 <TIM_Base_SetConfig+0x130>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a32      	ldr	r2, [pc, #200]	@ (8006160 <TIM_Base_SetConfig+0x120>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a0:	d027      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006164 <TIM_Base_SetConfig+0x124>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d023      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006168 <TIM_Base_SetConfig+0x128>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <TIM_Base_SetConfig+0x12c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <TIM_Base_SetConfig+0x130>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d017      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006174 <TIM_Base_SetConfig+0x134>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006178 <TIM_Base_SetConfig+0x138>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a29      	ldr	r2, [pc, #164]	@ (800617c <TIM_Base_SetConfig+0x13c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a28      	ldr	r2, [pc, #160]	@ (8006180 <TIM_Base_SetConfig+0x140>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a27      	ldr	r2, [pc, #156]	@ (8006184 <TIM_Base_SetConfig+0x144>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a26      	ldr	r2, [pc, #152]	@ (8006188 <TIM_Base_SetConfig+0x148>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a0e      	ldr	r2, [pc, #56]	@ (8006160 <TIM_Base_SetConfig+0x120>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_Base_SetConfig+0xf2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <TIM_Base_SetConfig+0x130>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d103      	bne.n	800613a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800
 8006180:	40001800 	.word	0x40001800
 8006184:	40001c00 	.word	0x40001c00
 8006188:	40002000 	.word	0x40002000

0800618c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f023 0201 	bic.w	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <TIM_TI1_SetConfig+0xcc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c0:	d017      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a25      	ldr	r2, [pc, #148]	@ (800625c <TIM_TI1_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a24      	ldr	r2, [pc, #144]	@ (8006260 <TIM_TI1_SetConfig+0xd4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a23      	ldr	r2, [pc, #140]	@ (8006264 <TIM_TI1_SetConfig+0xd8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a22      	ldr	r2, [pc, #136]	@ (8006268 <TIM_TI1_SetConfig+0xdc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a21      	ldr	r2, [pc, #132]	@ (800626c <TIM_TI1_SetConfig+0xe0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_TI1_SetConfig+0x66>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a20      	ldr	r2, [pc, #128]	@ (8006270 <TIM_TI1_SetConfig+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <TIM_TI1_SetConfig+0x6a>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <TIM_TI1_SetConfig+0x6c>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e003      	b.n	8006216 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	b2db      	uxtb	r3, r3
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f023 030a 	bic.w	r3, r3, #10
 8006230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 030a 	and.w	r3, r3, #10
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40010400 	.word	0x40010400
 800626c:	40014000 	.word	0x40014000
 8006270:	40001800 	.word	0x40001800

08006274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800629e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 030a 	bic.w	r3, r3, #10
 80062b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	621a      	str	r2, [r3, #32]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b087      	sub	sp, #28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0210 	bic.w	r2, r3, #16
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	b29b      	uxth	r3, r3
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006324:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0210 	bic.w	r2, r3, #16
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	031b      	lsls	r3, r3, #12
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006388:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	011b      	lsls	r3, r3, #4
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	bf00      	nop
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006450:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	031b      	lsls	r3, r3, #12
 8006468:	b29b      	uxth	r3, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006476:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	031b      	lsls	r3, r3, #12
 800647c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f043 0307 	orr.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
	...

08006560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e05a      	b.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a21      	ldr	r2, [pc, #132]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d01d      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d018      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1a      	ldr	r2, [pc, #104]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10c      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40001800 	.word	0x40001800

08006658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e042      	b.n	8006718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc f848 	bl	800273c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2224      	movs	r2, #36	@ 0x24
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f973 	bl	80069b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	@ 0x28
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b20      	cmp	r3, #32
 800673e:	d175      	bne.n	800682c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_UART_Transmit+0x2c>
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e06e      	b.n	800682e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2221      	movs	r2, #33	@ 0x21
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800675e:	f7fc f9e3 	bl	8002b28 <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006778:	d108      	bne.n	800678c <HAL_UART_Transmit+0x6c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e003      	b.n	8006794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006794:	e02e      	b.n	80067f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	2180      	movs	r1, #128	@ 0x80
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f848 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e03a      	b.n	800682e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	3302      	adds	r3, #2
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	e007      	b.n	80067e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3301      	adds	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1cb      	bne.n	8006796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2200      	movs	r2, #0
 8006806:	2140      	movs	r1, #64	@ 0x40
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f814 	bl	8006836 <UART_WaitOnFlagUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e006      	b.n	800682e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	e000      	b.n	800682e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800682c:	2302      	movs	r3, #2
  }
}
 800682e:	4618      	mov	r0, r3
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006846:	e03b      	b.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d037      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006850:	f7fc f96a 	bl	8002b28 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	429a      	cmp	r2, r3
 800685e:	d302      	bcc.n	8006866 <UART_WaitOnFlagUntilTimeout+0x30>
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e03a      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d023      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b80      	cmp	r3, #128	@ 0x80
 800687c:	d020      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b40      	cmp	r3, #64	@ 0x40
 8006882:	d01d      	beq.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b08      	cmp	r3, #8
 8006890:	d116      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f81d 	bl	80068e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2208      	movs	r2, #8
 80068b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e00f      	b.n	80068e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4013      	ands	r3, r2
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d0b4      	beq.n	8006848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b095      	sub	sp, #84	@ 0x54
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006910:	643a      	str	r2, [r7, #64]	@ 0x40
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e5      	bne.n	80068f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	61fb      	str	r3, [r7, #28]
   return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006944:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800694a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	2b01      	cmp	r3, #1
 800695e:	d119      	bne.n	8006994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	647b      	str	r3, [r7, #68]	@ 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006980:	61ba      	str	r2, [r7, #24]
 8006982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6979      	ldr	r1, [r7, #20]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069a2:	bf00      	nop
 80069a4:	3754      	adds	r7, #84	@ 0x54
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b0c0      	sub	sp, #256	@ 0x100
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	68d9      	ldr	r1, [r3, #12]
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	ea40 0301 	orr.w	r3, r0, r1
 80069d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a08:	f021 010c 	bic.w	r1, r1, #12
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a16:	430b      	orrs	r3, r1
 8006a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2a:	6999      	ldr	r1, [r3, #24]
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	ea40 0301 	orr.w	r3, r0, r1
 8006a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d005      	beq.n	8006a50 <UART_SetConfig+0xa0>
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c80 <UART_SetConfig+0x2d0>)
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d104      	bne.n	8006a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a50:	f7fd fcc0 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 8006a54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a58:	e003      	b.n	8006a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fd fca7 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8006a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a6c:	f040 810c 	bne.w	8006c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a82:	4622      	mov	r2, r4
 8006a84:	462b      	mov	r3, r5
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a92:	4621      	mov	r1, r4
 8006a94:	eb12 0801 	adds.w	r8, r2, r1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	eb43 0901 	adc.w	r9, r3, r1
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab2:	4690      	mov	r8, r2
 8006ab4:	4699      	mov	r9, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	eb18 0303 	adds.w	r3, r8, r3
 8006abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	eb49 0303 	adc.w	r3, r9, r3
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ade:	460b      	mov	r3, r1
 8006ae0:	18db      	adds	r3, r3, r3
 8006ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	eb42 0303 	adc.w	r3, r2, r3
 8006aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006af4:	f7fa f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b61      	ldr	r3, [pc, #388]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011c      	lsls	r4, r3, #4
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b20:	415b      	adcs	r3, r3
 8006b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b28:	4641      	mov	r1, r8
 8006b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2e:	4649      	mov	r1, r9
 8006b30:	eb43 0b01 	adc.w	fp, r3, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b48:	4692      	mov	sl, r2
 8006b4a:	469b      	mov	fp, r3
 8006b4c:	4643      	mov	r3, r8
 8006b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b56:	464b      	mov	r3, r9
 8006b58:	eb4b 0303 	adc.w	r3, fp, r3
 8006b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b74:	460b      	mov	r3, r1
 8006b76:	18db      	adds	r3, r3, r3
 8006b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	eb42 0303 	adc.w	r3, r2, r3
 8006b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b8a:	f7fa f87d 	bl	8000c88 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006b96:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	2264      	movs	r2, #100	@ 0x64
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	1acb      	subs	r3, r1, r3
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006baa:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006bac:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bb8:	441c      	add	r4, r3
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c30:	460b      	mov	r3, r1
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c36:	4613      	mov	r3, r2
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c46:	f7fa f81f 	bl	8000c88 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	@ 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	3332      	adds	r3, #50	@ 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 0207 	and.w	r2, r3, #7
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c78:	e106      	b.n	8006e88 <UART_SetConfig+0x4d8>
 8006c7a:	bf00      	nop
 8006c7c:	40011000 	.word	0x40011000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	6239      	str	r1, [r7, #32]
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006caa:	4641      	mov	r1, r8
 8006cac:	1854      	adds	r4, r2, r1
 8006cae:	4649      	mov	r1, r9
 8006cb0:	eb43 0501 	adc.w	r5, r3, r1
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	00eb      	lsls	r3, r5, #3
 8006cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cc2:	00e2      	lsls	r2, r4, #3
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	4643      	mov	r3, r8
 8006cca:	18e3      	adds	r3, r4, r3
 8006ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	eb45 0303 	adc.w	r3, r5, r3
 8006cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d00:	4621      	mov	r1, r4
 8006d02:	008a      	lsls	r2, r1, #2
 8006d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d08:	f7f9 ffbe 	bl	8000c88 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4b60      	ldr	r3, [pc, #384]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006d12:	fba3 2302 	umull	r2, r3, r3, r2
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	011c      	lsls	r4, r3, #4
 8006d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	61b9      	str	r1, [r7, #24]
 8006d34:	415b      	adcs	r3, r3
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6139      	str	r1, [r7, #16]
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d70:	464b      	mov	r3, r9
 8006d72:	460a      	mov	r2, r1
 8006d74:	eb42 0303 	adc.w	r3, r2, r3
 8006d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d94:	4649      	mov	r1, r9
 8006d96:	008b      	lsls	r3, r1, #2
 8006d98:	4641      	mov	r1, r8
 8006d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9e:	4641      	mov	r1, r8
 8006da0:	008a      	lsls	r2, r1, #2
 8006da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006da6:	f7f9 ff6f 	bl	8000c88 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	4b38      	ldr	r3, [pc, #224]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006db2:	fba3 2301 	umull	r2, r3, r3, r1
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2264      	movs	r2, #100	@ 0x64
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	1acb      	subs	r3, r1, r3
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	3332      	adds	r3, #50	@ 0x32
 8006dc4:	4a33      	ldr	r2, [pc, #204]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dd0:	441c      	add	r4, r3
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dda:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ddc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	1891      	adds	r1, r2, r2
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	415b      	adcs	r3, r3
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df0:	4641      	mov	r1, r8
 8006df2:	1851      	adds	r1, r2, r1
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	4649      	mov	r1, r9
 8006df8:	414b      	adcs	r3, r1
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e08:	4659      	mov	r1, fp
 8006e0a:	00cb      	lsls	r3, r1, #3
 8006e0c:	4651      	mov	r1, sl
 8006e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e12:	4651      	mov	r1, sl
 8006e14:	00ca      	lsls	r2, r1, #3
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e22:	464b      	mov	r3, r9
 8006e24:	460a      	mov	r2, r1
 8006e26:	eb42 0303 	adc.w	r3, r2, r3
 8006e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e36:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e44:	4649      	mov	r1, r9
 8006e46:	008b      	lsls	r3, r1, #2
 8006e48:	4641      	mov	r1, r8
 8006e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4e:	4641      	mov	r1, r8
 8006e50:	008a      	lsls	r2, r1, #2
 8006e52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e56:	f7f9 ff17 	bl	8000c88 <__aeabi_uldivmod>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006e60:	fba3 1302 	umull	r1, r3, r3, r2
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	2164      	movs	r1, #100	@ 0x64
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	3332      	adds	r3, #50	@ 0x32
 8006e72:	4a08      	ldr	r2, [pc, #32]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006e74:	fba2 2303 	umull	r2, r3, r2, r3
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4422      	add	r2, r4
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006e98:	b084      	sub	sp, #16
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	f107 001c 	add.w	r0, r7, #28
 8006ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006eae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006eb2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006eb6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006eba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006ebe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006ec2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006ed2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	b004      	add	sp, #16
 8006eec:	4770      	bx	lr

08006eee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2203      	movs	r2, #3
 8006f14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0303 	and.w	r3, r3, #3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006f64:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006f6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006f7a:	f023 030f 	bic.w	r3, r3, #15
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	b2db      	uxtb	r3, r3
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
}  
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ffa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007000:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007006:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800701e:	2300      	movs	r3, #0

}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800703a:	2310      	movs	r3, #16
 800703c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800703e:	2340      	movs	r3, #64	@ 0x40
 8007040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800704a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff ff74 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800705c:	2110      	movs	r1, #16
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa18 	bl	8007494 <SDMMC_GetCmdResp1>
 8007064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007066:	69fb      	ldr	r3, [r7, #28]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3720      	adds	r7, #32
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800707e:	2311      	movs	r3, #17
 8007080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007082:	2340      	movs	r3, #64	@ 0x40
 8007084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800708a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800708e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007090:	f107 0308 	add.w	r3, r7, #8
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff ff52 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800709c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a0:	2111      	movs	r1, #17
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9f6 	bl	8007494 <SDMMC_GetCmdResp1>
 80070a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070aa:	69fb      	ldr	r3, [r7, #28]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80070c2:	2312      	movs	r3, #18
 80070c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070c6:	2340      	movs	r3, #64	@ 0x40
 80070c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ff30 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80070e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e4:	2112      	movs	r1, #18
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9d4 	bl	8007494 <SDMMC_GetCmdResp1>
 80070ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070ee:	69fb      	ldr	r3, [r7, #28]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007106:	2318      	movs	r3, #24
 8007108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800710a:	2340      	movs	r3, #64	@ 0x40
 800710c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff0e 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007128:	2118      	movs	r1, #24
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9b2 	bl	8007494 <SDMMC_GetCmdResp1>
 8007130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007132:	69fb      	ldr	r3, [r7, #28]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800714a:	2319      	movs	r3, #25
 800714c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800714e:	2340      	movs	r3, #64	@ 0x40
 8007150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800715a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800715c:	f107 0308 	add.w	r3, r7, #8
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff feec 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716c:	2119      	movs	r1, #25
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f990 	bl	8007494 <SDMMC_GetCmdResp1>
 8007174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800718c:	230c      	movs	r3, #12
 800718e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007190:	2340      	movs	r3, #64	@ 0x40
 8007192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800719c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800719e:	f107 0308 	add.w	r3, r7, #8
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fecb 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80071aa:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <SDMMC_CmdStopTransfer+0x40>)
 80071ac:	210c      	movs	r1, #12
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f970 	bl	8007494 <SDMMC_GetCmdResp1>
 80071b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071b6:	69fb      	ldr	r3, [r7, #28]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	05f5e100 	.word	0x05f5e100

080071c4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	@ 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80071d4:	2307      	movs	r3, #7
 80071d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071d8:	2340      	movs	r3, #64	@ 0x40
 80071da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071dc:	2300      	movs	r3, #0
 80071de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071e4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071e6:	f107 0310 	add.w	r3, r7, #16
 80071ea:	4619      	mov	r1, r3
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fea7 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80071f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071f6:	2107      	movs	r1, #7
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f94b 	bl	8007494 <SDMMC_GetCmdResp1>
 80071fe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007202:	4618      	mov	r0, r3
 8007204:	3728      	adds	r7, #40	@ 0x28
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b088      	sub	sp, #32
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007226:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fe86 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb65 	bl	8007904 <SDMMC_GetCmdError>
 800723a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800723c:	69fb      	ldr	r3, [r7, #28]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b088      	sub	sp, #32
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800724e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007254:	2308      	movs	r3, #8
 8007256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007258:	2340      	movs	r3, #64	@ 0x40
 800725a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007266:	f107 0308 	add.w	r3, r7, #8
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff fe67 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 faf8 	bl	8007868 <SDMMC_GetCmdResp7>
 8007278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007292:	2337      	movs	r3, #55	@ 0x37
 8007294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007296:	2340      	movs	r3, #64	@ 0x40
 8007298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800729e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072a4:	f107 0308 	add.w	r3, r7, #8
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fe48 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80072b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b4:	2137      	movs	r1, #55	@ 0x37
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8ec 	bl	8007494 <SDMMC_GetCmdResp1>
 80072bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072be:	69fb      	ldr	r3, [r7, #28]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80072de:	2329      	movs	r3, #41	@ 0x29
 80072e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072e2:	2340      	movs	r3, #64	@ 0x40
 80072e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fe22 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9ff 	bl	8007700 <SDMMC_GetCmdResp3>
 8007302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007304:	69fb      	ldr	r3, [r7, #28]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b088      	sub	sp, #32
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800731c:	2306      	movs	r3, #6
 800731e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007320:	2340      	movs	r3, #64	@ 0x40
 8007322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800732c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800732e:	f107 0308 	add.w	r3, r7, #8
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fe03 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800733a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733e:	2106      	movs	r1, #6
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8a7 	bl	8007494 <SDMMC_GetCmdResp1>
 8007346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007348:	69fb      	ldr	r3, [r7, #28]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b088      	sub	sp, #32
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800735e:	2333      	movs	r3, #51	@ 0x33
 8007360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007362:	2340      	movs	r3, #64	@ 0x40
 8007364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800736a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800736e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fde2 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800737c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007380:	2133      	movs	r1, #51	@ 0x33
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f886 	bl	8007494 <SDMMC_GetCmdResp1>
 8007388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80073a0:	2302      	movs	r3, #2
 80073a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073a4:	23c0      	movs	r3, #192	@ 0xc0
 80073a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fdc1 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f956 	bl	8007670 <SDMMC_GetCmdResp2>
 80073c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073c6:	69fb      	ldr	r3, [r7, #28]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073de:	2309      	movs	r3, #9
 80073e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073e2:	23c0      	movs	r3, #192	@ 0xc0
 80073e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff fda2 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f937 	bl	8007670 <SDMMC_GetCmdResp2>
 8007402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007404:	69fb      	ldr	r3, [r7, #28]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800741c:	2303      	movs	r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007420:	2340      	movs	r3, #64	@ 0x40
 8007422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800742c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fd83 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	2103      	movs	r1, #3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f99c 	bl	800777c <SDMMC_GetCmdResp6>
 8007444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007446:	69fb      	ldr	r3, [r7, #28]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800745e:	230d      	movs	r3, #13
 8007460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007462:	2340      	movs	r3, #64	@ 0x40
 8007464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800746a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800746e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007470:	f107 0308 	add.w	r3, r7, #8
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fd62 	bl	8006f40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800747c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007480:	210d      	movs	r1, #13
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f806 	bl	8007494 <SDMMC_GetCmdResp1>
 8007488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	460b      	mov	r3, r1
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074a2:	4b70      	ldr	r3, [pc, #448]	@ (8007664 <SDMMC_GetCmdResp1+0x1d0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a70      	ldr	r2, [pc, #448]	@ (8007668 <SDMMC_GetCmdResp1+0x1d4>)
 80074a8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ac:	0a5a      	lsrs	r2, r3, #9
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	1e5a      	subs	r2, r3, #1
 80074ba:	61fa      	str	r2, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80074c4:	e0c9      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ef      	beq.n	80074b6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1ea      	bne.n	80074b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d004      	beq.n	80074f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2204      	movs	r2, #4
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074f2:	2304      	movs	r3, #4
 80074f4:	e0b1      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007508:	2301      	movs	r3, #1
 800750a:	e0a6      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	22c5      	movs	r2, #197	@ 0xc5
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fd3e 	bl	8006f94 <SDIO_GetCommandResponse>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	7afb      	ldrb	r3, [r7, #11]
 800751e:	4293      	cmp	r3, r2
 8007520:	d001      	beq.n	8007526 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007522:	2301      	movs	r3, #1
 8007524:	e099      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007526:	2100      	movs	r1, #0
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fd40 	bl	8006fae <SDIO_GetResponse>
 800752e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4b4e      	ldr	r3, [pc, #312]	@ (800766c <SDMMC_GetCmdResp1+0x1d8>)
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800753a:	2300      	movs	r3, #0
 800753c:	e08d      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	da02      	bge.n	800754a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007548:	e087      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007554:	2340      	movs	r3, #64	@ 0x40
 8007556:	e080      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007562:	2380      	movs	r3, #128	@ 0x80
 8007564:	e079      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007574:	e071      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007584:	e069      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007594:	e061      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80075a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075a4:	e059      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075b4:	e051      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80075c4:	e049      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80075d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80075d4:	e041      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80075e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e4:	e039      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80075f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075f4:	e031      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007600:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007604:	e029      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007610:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007614:	e021      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007620:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007624:	e019      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007630:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007634:	e011      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007640:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007644:	e009      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007650:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007654:	e001      	b.n	800765a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007656:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000000 	.word	0x20000000
 8007668:	10624dd3 	.word	0x10624dd3
 800766c:	fdffe008 	.word	0xfdffe008

08007670 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007678:	4b1f      	ldr	r3, [pc, #124]	@ (80076f8 <SDMMC_GetCmdResp2+0x88>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1f      	ldr	r2, [pc, #124]	@ (80076fc <SDMMC_GetCmdResp2+0x8c>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0a5b      	lsrs	r3, r3, #9
 8007684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007688:	fb02 f303 	mul.w	r3, r2, r3
 800768c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1e5a      	subs	r2, r3, #1
 8007692:	60fa      	str	r2, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800769c:	e026      	b.n	80076ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ef      	beq.n	800768e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ea      	bne.n	800768e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2204      	movs	r2, #4
 80076c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076ca:	2304      	movs	r3, #4
 80076cc:	e00e      	b.n	80076ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e003      	b.n	80076ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	22c5      	movs	r2, #197	@ 0xc5
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	20000000 	.word	0x20000000
 80076fc:	10624dd3 	.word	0x10624dd3

08007700 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007708:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <SDMMC_GetCmdResp3+0x74>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <SDMMC_GetCmdResp3+0x78>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0a5b      	lsrs	r3, r3, #9
 8007714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	60fa      	str	r2, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007728:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800772c:	e01b      	b.n	8007766 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007732:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0ef      	beq.n	800771e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1ea      	bne.n	800771e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2204      	movs	r2, #4
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800775a:	2304      	movs	r3, #4
 800775c:	e003      	b.n	8007766 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	22c5      	movs	r2, #197	@ 0xc5
 8007762:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000000 	.word	0x20000000
 8007778:	10624dd3 	.word	0x10624dd3

0800777c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	460b      	mov	r3, r1
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800778a:	4b35      	ldr	r3, [pc, #212]	@ (8007860 <SDMMC_GetCmdResp6+0xe4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a35      	ldr	r2, [pc, #212]	@ (8007864 <SDMMC_GetCmdResp6+0xe8>)
 8007790:	fba2 2303 	umull	r2, r3, r2, r3
 8007794:	0a5b      	lsrs	r3, r3, #9
 8007796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1e5a      	subs	r2, r3, #1
 80077a4:	61fa      	str	r2, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077ae:	e052      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0ef      	beq.n	80077a0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1ea      	bne.n	80077a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2204      	movs	r2, #4
 80077da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077dc:	2304      	movs	r3, #4
 80077de:	e03a      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e02f      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7ff fbcc 	bl	8006f94 <SDIO_GetCommandResponse>
 80077fc:	4603      	mov	r3, r0
 80077fe:	461a      	mov	r2, r3
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	4293      	cmp	r3, r2
 8007804:	d001      	beq.n	800780a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007806:	2301      	movs	r3, #1
 8007808:	e025      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22c5      	movs	r2, #197	@ 0xc5
 800780e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fbcb 	bl	8006fae <SDIO_GetResponse>
 8007818:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	e011      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800783c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007840:	e009      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800784c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007850:	e001      	b.n	8007856 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000000 	.word	0x20000000
 8007864:	10624dd3 	.word	0x10624dd3

08007868 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007870:	4b22      	ldr	r3, [pc, #136]	@ (80078fc <SDMMC_GetCmdResp7+0x94>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a22      	ldr	r2, [pc, #136]	@ (8007900 <SDMMC_GetCmdResp7+0x98>)
 8007876:	fba2 2303 	umull	r2, r3, r2, r3
 800787a:	0a5b      	lsrs	r3, r3, #9
 800787c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1e5a      	subs	r2, r3, #1
 800788a:	60fa      	str	r2, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007890:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007894:	e02c      	b.n	80078f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0ef      	beq.n	8007886 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1ea      	bne.n	8007886 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2204      	movs	r2, #4
 80078c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078c2:	2304      	movs	r3, #4
 80078c4:	e014      	b.n	80078f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078d8:	2301      	movs	r3, #1
 80078da:	e009      	b.n	80078f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2240      	movs	r2, #64	@ 0x40
 80078ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078ee:	2300      	movs	r3, #0
  
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	20000000 	.word	0x20000000
 8007900:	10624dd3 	.word	0x10624dd3

08007904 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800790c:	4b11      	ldr	r3, [pc, #68]	@ (8007954 <SDMMC_GetCmdError+0x50>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a11      	ldr	r2, [pc, #68]	@ (8007958 <SDMMC_GetCmdError+0x54>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	0a5b      	lsrs	r3, r3, #9
 8007918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800791c:	fb02 f303 	mul.w	r3, r2, r3
 8007920:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1e5a      	subs	r2, r3, #1
 8007926:	60fa      	str	r2, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800792c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007930:	e009      	b.n	8007946 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f1      	beq.n	8007922 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	22c5      	movs	r2, #197	@ 0xc5
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000000 	.word	0x20000000
 8007958:	10624dd3 	.word	0x10624dd3

0800795c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007960:	4904      	ldr	r1, [pc, #16]	@ (8007974 <MX_FATFS_Init+0x18>)
 8007962:	4805      	ldr	r0, [pc, #20]	@ (8007978 <MX_FATFS_Init+0x1c>)
 8007964:	f003 f87e 	bl	800aa64 <FATFS_LinkDriver>
 8007968:	4603      	mov	r3, r0
 800796a:	461a      	mov	r2, r3
 800796c:	4b03      	ldr	r3, [pc, #12]	@ (800797c <MX_FATFS_Init+0x20>)
 800796e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007970:	bf00      	nop
 8007972:	bd80      	pop	{r7, pc}
 8007974:	2000070c 	.word	0x2000070c
 8007978:	08012444 	.word	0x08012444
 800797c:	20000708 	.word	0x20000708

08007980 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007984:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007986:	4618      	mov	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800799a:	f000 f87b 	bl	8007a94 <BSP_SD_IsDetected>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e012      	b.n	80079ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80079a8:	480b      	ldr	r0, [pc, #44]	@ (80079d8 <BSP_SD_Init+0x48>)
 80079aa:	f7fc fd27 	bl	80043fc <HAL_SD_Init>
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80079b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80079bc:	4806      	ldr	r0, [pc, #24]	@ (80079d8 <BSP_SD_Init+0x48>)
 80079be:	f7fd f967 	bl	8004c90 <HAL_SD_ConfigWideBusOperation>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80079cc:	79fb      	ldrb	r3, [r7, #7]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000049c 	.word	0x2000049c

080079dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	4806      	ldr	r0, [pc, #24]	@ (8007a0c <BSP_SD_ReadBlocks_DMA+0x30>)
 80079f4:	f7fc fdaa 	bl	800454c <HAL_SD_ReadBlocks_DMA>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	2000049c 	.word	0x2000049c

08007a10 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	4806      	ldr	r0, [pc, #24]	@ (8007a40 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007a28:	f7fc fe72 	bl	8004710 <HAL_SD_WriteBlocks_DMA>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000049c 	.word	0x2000049c

08007a44 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a48:	4805      	ldr	r0, [pc, #20]	@ (8007a60 <BSP_SD_GetCardState+0x1c>)
 8007a4a:	f7fd f9bb 	bl	8004dc4 <HAL_SD_GetCardState>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	bf14      	ite	ne
 8007a54:	2301      	movne	r3, #1
 8007a56:	2300      	moveq	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	2000049c 	.word	0x2000049c

08007a64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	4803      	ldr	r0, [pc, #12]	@ (8007a7c <BSP_SD_GetCardInfo+0x18>)
 8007a70:	f7fd f8e2 	bl	8004c38 <HAL_SD_GetCardInfo>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	2000049c 	.word	0x2000049c

08007a80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007a88:	f000 f996 	bl	8007db8 <BSP_SD_ReadCpltCallback>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	b2db      	uxtb	r3, r3
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007ab6:	f003 f94b 	bl	800ad50 <osKernelSysTick>
 8007aba:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007abc:	e006      	b.n	8007acc <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007abe:	f7ff ffc1 	bl	8007a44 <BSP_SD_GetCardState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e009      	b.n	8007ae0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8007acc:	f003 f940 	bl	800ad50 <osKernelSysTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d8f0      	bhi.n	8007abe <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b20 <SD_CheckStatus+0x38>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007af8:	f7ff ffa4 	bl	8007a44 <BSP_SD_GetCardState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b02:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <SD_CheckStatus+0x38>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	4b04      	ldr	r3, [pc, #16]	@ (8007b20 <SD_CheckStatus+0x38>)
 8007b10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b12:	4b03      	ldr	r3, [pc, #12]	@ (8007b20 <SD_CheckStatus+0x38>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000009 	.word	0x20000009

08007b24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b24:	b590      	push	{r4, r7, lr}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007b2e:	4b20      	ldr	r3, [pc, #128]	@ (8007bb0 <SD_initialize+0x8c>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007b34:	f003 f900 	bl	800ad38 <osKernelRunning>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d030      	beq.n	8007ba0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007b3e:	f7ff ff27 	bl	8007990 <BSP_SD_Init>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d107      	bne.n	8007b58 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff ffcc 	bl	8007ae8 <SD_CheckStatus>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	4b16      	ldr	r3, [pc, #88]	@ (8007bb0 <SD_initialize+0x8c>)
 8007b56:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007b58:	4b15      	ldr	r3, [pc, #84]	@ (8007bb0 <SD_initialize+0x8c>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d01e      	beq.n	8007ba0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8007b62:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <SD_initialize+0x90>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10e      	bne.n	8007b88 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007b6a:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <SD_initialize+0x94>)
 8007b6c:	f107 0408 	add.w	r4, r7, #8
 8007b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f003 fa20 	bl	800afc2 <osMessageCreate>
 8007b82:	4603      	mov	r3, r0
 8007b84:	4a0b      	ldr	r2, [pc, #44]	@ (8007bb4 <SD_initialize+0x90>)
 8007b86:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <SD_initialize+0x90>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d107      	bne.n	8007ba0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <SD_initialize+0x8c>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	4b04      	ldr	r3, [pc, #16]	@ (8007bb0 <SD_initialize+0x8c>)
 8007b9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	@ (8007bb0 <SD_initialize+0x8c>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd90      	pop	{r4, r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000009 	.word	0x20000009
 8007bb4:	20000710 	.word	0x20000710
 8007bb8:	080123c4 	.word	0x080123c4

08007bbc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff ff8d 	bl	8007ae8 <SD_CheckStatus>
 8007bce:	4603      	mov	r3, r0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007bee:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007bf2:	f7ff ff5c 	bl	8007aae <SD_CheckStatusWithTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da02      	bge.n	8007c02 <SD_read+0x2a>
  {
    return res;
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c00:	e032      	b.n	8007c68 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f7ff fee8 	bl	80079dc <BSP_SD_ReadBlocks_DMA>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8007c12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d124      	bne.n	8007c64 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007c1a:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <SD_read+0x98>)
 8007c1c:	6819      	ldr	r1, [r3, #0]
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	f247 5230 	movw	r2, #30000	@ 0x7530
 8007c26:	4618      	mov	r0, r3
 8007c28:	f003 fa34 	bl	800b094 <osMessageGet>

    if (event.status == osEventMessage)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d118      	bne.n	8007c64 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d115      	bne.n	8007c64 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007c38:	f003 f88a 	bl	800ad50 <osKernelSysTick>
 8007c3c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007c3e:	e008      	b.n	8007c52 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c40:	f7ff ff00 	bl	8007a44 <BSP_SD_GetCardState>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <SD_read+0x7a>
              {
                res = RES_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007c50:	e008      	b.n	8007c64 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007c52:	f003 f87d 	bl	800ad50 <osKernelSysTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d9ed      	bls.n	8007c40 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3728      	adds	r7, #40	@ 0x28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000710 	.word	0x20000710

08007c74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	@ 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c8a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007c8e:	f7ff ff0e 	bl	8007aae <SD_CheckStatusWithTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da02      	bge.n	8007c9e <SD_write+0x2a>
  {
    return res;
 8007c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c9c:	e02e      	b.n	8007cfc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68b8      	ldr	r0, [r7, #8]
 8007ca4:	f7ff feb4 	bl	8007a10 <BSP_SD_WriteBlocks_DMA>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d124      	bne.n	8007cf8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007cae:	4b15      	ldr	r3, [pc, #84]	@ (8007d04 <SD_write+0x90>)
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	f107 0314 	add.w	r3, r7, #20
 8007cb6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f003 f9ea 	bl	800b094 <osMessageGet>

    if (event.status == osEventMessage)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b10      	cmp	r3, #16
 8007cc4:	d118      	bne.n	8007cf8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d115      	bne.n	8007cf8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007ccc:	f003 f840 	bl	800ad50 <osKernelSysTick>
 8007cd0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007cd2:	e008      	b.n	8007ce6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cd4:	f7ff feb6 	bl	8007a44 <BSP_SD_GetCardState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <SD_write+0x72>
          {
            res = RES_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8007ce4:	e008      	b.n	8007cf8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007ce6:	f003 f833 	bl	800ad50 <osKernelSysTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d9ed      	bls.n	8007cd4 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 8007cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	@ 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20000710 	.word	0x20000710

08007d08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08c      	sub	sp, #48	@ 0x30
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	603a      	str	r2, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
 8007d14:	460b      	mov	r3, r1
 8007d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d1e:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <SD_ioctl+0xac>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <SD_ioctl+0x28>
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e03c      	b.n	8007daa <SD_ioctl+0xa2>

  switch (cmd)
 8007d30:	79bb      	ldrb	r3, [r7, #6]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d834      	bhi.n	8007da0 <SD_ioctl+0x98>
 8007d36:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <SD_ioctl+0x34>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d55 	.word	0x08007d55
 8007d44:	08007d6d 	.word	0x08007d6d
 8007d48:	08007d87 	.word	0x08007d87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d52:	e028      	b.n	8007da6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d54:	f107 030c 	add.w	r3, r7, #12
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fe83 	bl	8007a64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d6a:	e01c      	b.n	8007da6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fe77 	bl	8007a64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d84:	e00f      	b.n	8007da6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fe6a 	bl	8007a64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	0a5a      	lsrs	r2, r3, #9
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007d9e:	e002      	b.n	8007da6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007da0:	2304      	movs	r3, #4
 8007da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3730      	adds	r7, #48	@ 0x30
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000009 	.word	0x20000009

08007db8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007dbc:	4b04      	ldr	r3, [pc, #16]	@ (8007dd0 <BSP_SD_ReadCpltCallback+0x18>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f003 f925 	bl	800b014 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000710 	.word	0x20000710

08007dd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4a08      	ldr	r2, [pc, #32]	@ (8007e04 <disk_status+0x30>)
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	79fa      	ldrb	r2, [r7, #7]
 8007dec:	4905      	ldr	r1, [pc, #20]	@ (8007e04 <disk_status+0x30>)
 8007dee:	440a      	add	r2, r1
 8007df0:	7a12      	ldrb	r2, [r2, #8]
 8007df2:	4610      	mov	r0, r2
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	2000073c 	.word	0x2000073c

08007e08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	4a0e      	ldr	r2, [pc, #56]	@ (8007e54 <disk_initialize+0x4c>)
 8007e1a:	5cd3      	ldrb	r3, [r2, r3]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d114      	bne.n	8007e4a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	4a0c      	ldr	r2, [pc, #48]	@ (8007e54 <disk_initialize+0x4c>)
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	79fa      	ldrb	r2, [r7, #7]
 8007e2e:	4909      	ldr	r1, [pc, #36]	@ (8007e54 <disk_initialize+0x4c>)
 8007e30:	440a      	add	r2, r1
 8007e32:	7a12      	ldrb	r2, [r2, #8]
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d103      	bne.n	8007e4a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	4a03      	ldr	r2, [pc, #12]	@ (8007e54 <disk_initialize+0x4c>)
 8007e46:	2101      	movs	r1, #1
 8007e48:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	2000073c 	.word	0x2000073c

08007e58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007e94 <disk_read+0x3c>)
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	689c      	ldr	r4, [r3, #8]
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4a07      	ldr	r2, [pc, #28]	@ (8007e94 <disk_read+0x3c>)
 8007e78:	4413      	add	r3, r2
 8007e7a:	7a18      	ldrb	r0, [r3, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	47a0      	blx	r4
 8007e84:	4603      	mov	r3, r0
 8007e86:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd90      	pop	{r4, r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000073c 	.word	0x2000073c

08007e98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed4 <disk_write+0x3c>)
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68dc      	ldr	r4, [r3, #12]
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <disk_write+0x3c>)
 8007eb8:	4413      	add	r3, r2
 8007eba:	7a18      	ldrb	r0, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	47a0      	blx	r4
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd90      	pop	{r4, r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	2000073c 	.word	0x2000073c

08007ed8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	603a      	str	r2, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <disk_ioctl+0x38>)
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	79fa      	ldrb	r2, [r7, #7]
 8007ef6:	4906      	ldr	r1, [pc, #24]	@ (8007f10 <disk_ioctl+0x38>)
 8007ef8:	440a      	add	r2, r1
 8007efa:	7a10      	ldrb	r0, [r2, #8]
 8007efc:	79b9      	ldrb	r1, [r7, #6]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000073c 	.word	0x2000073c

08007f14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007f24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	b21a      	sxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f38:	89fb      	ldrh	r3, [r7, #14]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3303      	adds	r3, #3
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	3202      	adds	r2, #2
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	887b      	ldrh	r3, [r7, #2]
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	887a      	ldrh	r2, [r7, #2]
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	701a      	strb	r2, [r3, #0]
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00d      	beq.n	8008050 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	1c53      	adds	r3, r2, #1
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	1c59      	adds	r1, r3, #1
 800803e:	6179      	str	r1, [r7, #20]
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3b01      	subs	r3, #1
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f1      	bne.n	8008034 <mem_cpy+0x1a>
	}
}
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	617a      	str	r2, [r7, #20]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	b2d2      	uxtb	r2, r2
 8008076:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3b01      	subs	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1f3      	bne.n	800806c <mem_set+0x10>
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008092:	b480      	push	{r7}
 8008094:	b089      	sub	sp, #36	@ 0x24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	61fa      	str	r2, [r7, #28]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	61ba      	str	r2, [r7, #24]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	1acb      	subs	r3, r1, r3
 80080be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <mem_cmp+0x40>
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0eb      	beq.n	80080aa <mem_cmp+0x18>

	return r;
 80080d2:	697b      	ldr	r3, [r7, #20]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3724      	adds	r7, #36	@ 0x24
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080ea:	e002      	b.n	80080f2 <chk_chr+0x12>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3301      	adds	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <chk_chr+0x26>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	4293      	cmp	r3, r2
 8008104:	d1f2      	bne.n	80080ec <chk_chr+0xc>
	return *str;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	781b      	ldrb	r3, [r3, #0]
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <lock_fs+0x22>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	4618      	mov	r0, r3
 800812a:	f002 fd9d 	bl	800ac68 <ff_req_grant>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <lock_fs+0x22>
 8008134:	2301      	movs	r3, #1
 8008136:	e000      	b.n	800813a <lock_fs+0x24>
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <unlock_fs+0x2e>
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	2b0c      	cmp	r3, #12
 8008158:	d00a      	beq.n	8008170 <unlock_fs+0x2e>
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	2b0b      	cmp	r3, #11
 800815e:	d007      	beq.n	8008170 <unlock_fs+0x2e>
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b0f      	cmp	r3, #15
 8008164:	d004      	beq.n	8008170 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	4618      	mov	r0, r3
 800816c:	f002 fd91 	bl	800ac92 <ff_rel_grant>
	}
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008182:	2300      	movs	r3, #0
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e029      	b.n	80081e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800818c:	4a27      	ldr	r2, [pc, #156]	@ (800822c <chk_lock+0xb4>)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	4413      	add	r3, r2
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01d      	beq.n	80081d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800819a:	4a24      	ldr	r2, [pc, #144]	@ (800822c <chk_lock+0xb4>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	4413      	add	r3, r2
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d116      	bne.n	80081da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80081ac:	4a1f      	ldr	r2, [pc, #124]	@ (800822c <chk_lock+0xb4>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081bc:	429a      	cmp	r2, r3
 80081be:	d10c      	bne.n	80081da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081c0:	4a1a      	ldr	r2, [pc, #104]	@ (800822c <chk_lock+0xb4>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4413      	add	r3, r2
 80081c8:	3308      	adds	r3, #8
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d102      	bne.n	80081da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081d4:	e007      	b.n	80081e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80081d6:	2301      	movs	r3, #1
 80081d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d9d2      	bls.n	800818c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d109      	bne.n	8008200 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <chk_lock+0x80>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d101      	bne.n	80081fc <chk_lock+0x84>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e010      	b.n	800821e <chk_lock+0xa6>
 80081fc:	2312      	movs	r3, #18
 80081fe:	e00e      	b.n	800821e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d108      	bne.n	8008218 <chk_lock+0xa0>
 8008206:	4a09      	ldr	r2, [pc, #36]	@ (800822c <chk_lock+0xb4>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	4413      	add	r3, r2
 800820e:	330c      	adds	r3, #12
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008216:	d101      	bne.n	800821c <chk_lock+0xa4>
 8008218:	2310      	movs	r3, #16
 800821a:	e000      	b.n	800821e <chk_lock+0xa6>
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000071c 	.word	0x2000071c

08008230 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008236:	2300      	movs	r3, #0
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	e002      	b.n	8008242 <enq_lock+0x12>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3301      	adds	r3, #1
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d806      	bhi.n	8008256 <enq_lock+0x26>
 8008248:	4a09      	ldr	r2, [pc, #36]	@ (8008270 <enq_lock+0x40>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	4413      	add	r3, r2
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f2      	bne.n	800823c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b02      	cmp	r3, #2
 800825a:	bf14      	ite	ne
 800825c:	2301      	movne	r3, #1
 800825e:	2300      	moveq	r3, #0
 8008260:	b2db      	uxtb	r3, r3
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	2000071c 	.word	0x2000071c

08008274 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	e01f      	b.n	80082c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008284:	4a41      	ldr	r2, [pc, #260]	@ (800838c <inc_lock+0x118>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	4413      	add	r3, r2
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d113      	bne.n	80082be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008296:	4a3d      	ldr	r2, [pc, #244]	@ (800838c <inc_lock+0x118>)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	4413      	add	r3, r2
 800829e:	3304      	adds	r3, #4
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d109      	bne.n	80082be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80082aa:	4a38      	ldr	r2, [pc, #224]	@ (800838c <inc_lock+0x118>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	4413      	add	r3, r2
 80082b2:	3308      	adds	r3, #8
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d006      	beq.n	80082cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d9dc      	bls.n	8008284 <inc_lock+0x10>
 80082ca:	e000      	b.n	80082ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80082cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d132      	bne.n	800833a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e002      	b.n	80082e0 <inc_lock+0x6c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d806      	bhi.n	80082f4 <inc_lock+0x80>
 80082e6:	4a29      	ldr	r2, [pc, #164]	@ (800838c <inc_lock+0x118>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	4413      	add	r3, r2
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f2      	bne.n	80082da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d101      	bne.n	80082fe <inc_lock+0x8a>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e040      	b.n	8008380 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4922      	ldr	r1, [pc, #136]	@ (800838c <inc_lock+0x118>)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	440b      	add	r3, r1
 800830a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	491e      	ldr	r1, [pc, #120]	@ (800838c <inc_lock+0x118>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	440b      	add	r3, r1
 8008318:	3304      	adds	r3, #4
 800831a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	491a      	ldr	r1, [pc, #104]	@ (800838c <inc_lock+0x118>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	440b      	add	r3, r1
 8008328:	3308      	adds	r3, #8
 800832a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800832c:	4a17      	ldr	r2, [pc, #92]	@ (800838c <inc_lock+0x118>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	4413      	add	r3, r2
 8008334:	330c      	adds	r3, #12
 8008336:	2200      	movs	r2, #0
 8008338:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <inc_lock+0xe0>
 8008340:	4a12      	ldr	r2, [pc, #72]	@ (800838c <inc_lock+0x118>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	4413      	add	r3, r2
 8008348:	330c      	adds	r3, #12
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <inc_lock+0xe0>
 8008350:	2300      	movs	r3, #0
 8008352:	e015      	b.n	8008380 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d108      	bne.n	800836c <inc_lock+0xf8>
 800835a:	4a0c      	ldr	r2, [pc, #48]	@ (800838c <inc_lock+0x118>)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	4413      	add	r3, r2
 8008362:	330c      	adds	r3, #12
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	e001      	b.n	8008370 <inc_lock+0xfc>
 800836c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008370:	4906      	ldr	r1, [pc, #24]	@ (800838c <inc_lock+0x118>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	440b      	add	r3, r1
 8008378:	330c      	adds	r3, #12
 800837a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	2000071c 	.word	0x2000071c

08008390 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3b01      	subs	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d825      	bhi.n	80083f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80083a4:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <dec_lock+0x74>)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	4413      	add	r3, r2
 80083ac:	330c      	adds	r3, #12
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083b2:	89fb      	ldrh	r3, [r7, #14]
 80083b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b8:	d101      	bne.n	80083be <dec_lock+0x2e>
 80083ba:	2300      	movs	r3, #0
 80083bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80083be:	89fb      	ldrh	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <dec_lock+0x3a>
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80083ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008404 <dec_lock+0x74>)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	4413      	add	r3, r2
 80083d2:	330c      	adds	r3, #12
 80083d4:	89fa      	ldrh	r2, [r7, #14]
 80083d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d105      	bne.n	80083ea <dec_lock+0x5a>
 80083de:	4a09      	ldr	r2, [pc, #36]	@ (8008404 <dec_lock+0x74>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	4413      	add	r3, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	737b      	strb	r3, [r7, #13]
 80083ee:	e001      	b.n	80083f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80083f0:	2302      	movs	r3, #2
 80083f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80083f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000071c 	.word	0x2000071c

08008408 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e010      	b.n	8008438 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008416:	4a0d      	ldr	r2, [pc, #52]	@ (800844c <clear_lock+0x44>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	4413      	add	r3, r2
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d105      	bne.n	8008432 <clear_lock+0x2a>
 8008426:	4a09      	ldr	r2, [pc, #36]	@ (800844c <clear_lock+0x44>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	4413      	add	r3, r2
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d9eb      	bls.n	8008416 <clear_lock+0xe>
	}
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	2000071c 	.word	0x2000071c

08008450 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	78db      	ldrb	r3, [r3, #3]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d034      	beq.n	80084ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008468:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7858      	ldrb	r0, [r3, #1]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008474:	2301      	movs	r3, #1
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	f7ff fd0e 	bl	8007e98 <disk_write>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
 8008486:	e022      	b.n	80084ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	429a      	cmp	r2, r3
 800849c:	d217      	bcs.n	80084ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	789b      	ldrb	r3, [r3, #2]
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	e010      	b.n	80084c8 <sync_window+0x78>
					wsect += fs->fsize;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7858      	ldrb	r0, [r3, #1]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80084ba:	2301      	movs	r3, #1
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	f7ff fceb 	bl	8007e98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d8eb      	bhi.n	80084a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d01b      	beq.n	8008528 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ffad 	bl	8008450 <sync_window>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d113      	bne.n	8008528 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7858      	ldrb	r0, [r3, #1]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800850a:	2301      	movs	r3, #1
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	f7ff fca3 	bl	8007e58 <disk_read>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008518:	f04f 33ff 	mov.w	r3, #4294967295
 800851c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800851e:	2301      	movs	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008528:	7bfb      	ldrb	r3, [r7, #15]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff ff87 	bl	8008450 <sync_window>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d158      	bne.n	80085fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d148      	bne.n	80085e6 <sync_fs+0xb2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	791b      	ldrb	r3, [r3, #4]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d144      	bne.n	80085e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3338      	adds	r3, #56	@ 0x38
 8008560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fd78 	bl	800805c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3338      	adds	r3, #56	@ 0x38
 8008570:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008574:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fd07 	bl	8007f8c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3338      	adds	r3, #56	@ 0x38
 8008582:	4921      	ldr	r1, [pc, #132]	@ (8008608 <sync_fs+0xd4>)
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fd1c 	bl	8007fc2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3338      	adds	r3, #56	@ 0x38
 800858e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008592:	491e      	ldr	r1, [pc, #120]	@ (800860c <sync_fs+0xd8>)
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fd14 	bl	8007fc2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3338      	adds	r3, #56	@ 0x38
 800859e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fd0a 	bl	8007fc2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3338      	adds	r3, #56	@ 0x38
 80085b2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7ff fd00 	bl	8007fc2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7858      	ldrb	r0, [r3, #1]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085da:	2301      	movs	r3, #1
 80085dc:	f7ff fc5c 	bl	8007e98 <disk_write>
			fs->fsi_flag = 0;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2200      	movs	r2, #0
 80085ec:	2100      	movs	r1, #0
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fc72 	bl	8007ed8 <disk_ioctl>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <sync_fs+0xca>
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	41615252 	.word	0x41615252
 800860c:	61417272 	.word	0x61417272

08008610 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	3b02      	subs	r3, #2
 800861e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	3b02      	subs	r3, #2
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d301      	bcc.n	8008630 <clust2sect+0x20>
 800862c:	2300      	movs	r3, #0
 800862e:	e008      	b.n	8008642 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	895b      	ldrh	r3, [r3, #10]
 8008634:	461a      	mov	r2, r3
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	fb03 f202 	mul.w	r2, r3, r2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008640:	4413      	add	r3, r2
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d904      	bls.n	800866e <get_fat+0x20>
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d302      	bcc.n	8008674 <get_fat+0x26>
		val = 1;	/* Internal error */
 800866e:	2301      	movs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e08e      	b.n	8008792 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008674:	f04f 33ff 	mov.w	r3, #4294967295
 8008678:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b03      	cmp	r3, #3
 8008680:	d061      	beq.n	8008746 <get_fat+0xf8>
 8008682:	2b03      	cmp	r3, #3
 8008684:	dc7b      	bgt.n	800877e <get_fat+0x130>
 8008686:	2b01      	cmp	r3, #1
 8008688:	d002      	beq.n	8008690 <get_fat+0x42>
 800868a:	2b02      	cmp	r3, #2
 800868c:	d041      	beq.n	8008712 <get_fat+0xc4>
 800868e:	e076      	b.n	800877e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	0a5b      	lsrs	r3, r3, #9
 80086a6:	4413      	add	r3, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	6938      	ldr	r0, [r7, #16]
 80086ac:	f7ff ff14 	bl	80084d8 <move_window>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d166      	bne.n	8008784 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	60fa      	str	r2, [r7, #12]
 80086bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4413      	add	r3, r2
 80086c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	0a5b      	lsrs	r3, r3, #9
 80086d2:	4413      	add	r3, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	6938      	ldr	r0, [r7, #16]
 80086d8:	f7ff fefe 	bl	80084d8 <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d152      	bne.n	8008788 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	4413      	add	r3, r2
 80086ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <get_fat+0xba>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	091b      	lsrs	r3, r3, #4
 8008706:	e002      	b.n	800870e <get_fat+0xc0>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800870e:	617b      	str	r3, [r7, #20]
			break;
 8008710:	e03f      	b.n	8008792 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	0a1b      	lsrs	r3, r3, #8
 800871a:	4413      	add	r3, r2
 800871c:	4619      	mov	r1, r3
 800871e:	6938      	ldr	r0, [r7, #16]
 8008720:	f7ff feda 	bl	80084d8 <move_window>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d130      	bne.n	800878c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008738:	4413      	add	r3, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fbea 	bl	8007f14 <ld_word>
 8008740:	4603      	mov	r3, r0
 8008742:	617b      	str	r3, [r7, #20]
			break;
 8008744:	e025      	b.n	8008792 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	09db      	lsrs	r3, r3, #7
 800874e:	4413      	add	r3, r2
 8008750:	4619      	mov	r1, r3
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f7ff fec0 	bl	80084d8 <move_window>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d118      	bne.n	8008790 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800876c:	4413      	add	r3, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fbe9 	bl	8007f46 <ld_dword>
 8008774:	4603      	mov	r3, r0
 8008776:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800877a:	617b      	str	r3, [r7, #20]
			break;
 800877c:	e009      	b.n	8008792 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e006      	b.n	8008792 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008784:	bf00      	nop
 8008786:	e004      	b.n	8008792 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008788:	bf00      	nop
 800878a:	e002      	b.n	8008792 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800878c:	bf00      	nop
 800878e:	e000      	b.n	8008792 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008790:	bf00      	nop
		}
	}

	return val;
 8008792:	697b      	ldr	r3, [r7, #20]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800879c:	b590      	push	{r4, r7, lr}
 800879e:	b089      	sub	sp, #36	@ 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80087a8:	2302      	movs	r3, #2
 80087aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	f240 80d9 	bls.w	8008966 <put_fat+0x1ca>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	f080 80d3 	bcs.w	8008966 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	f000 8096 	beq.w	80088f6 <put_fat+0x15a>
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	f300 80cb 	bgt.w	8008966 <put_fat+0x1ca>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d002      	beq.n	80087da <put_fat+0x3e>
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d06e      	beq.n	80088b6 <put_fat+0x11a>
 80087d8:	e0c5      	b.n	8008966 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	4413      	add	r3, r2
 80087e6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	0a5b      	lsrs	r3, r3, #9
 80087f0:	4413      	add	r3, r2
 80087f2:	4619      	mov	r1, r3
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff fe6f 	bl	80084d8 <move_window>
 80087fa:	4603      	mov	r3, r0
 80087fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087fe:	7ffb      	ldrb	r3, [r7, #31]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 80a9 	bne.w	8008958 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	1c59      	adds	r1, r3, #1
 8008810:	61b9      	str	r1, [r7, #24]
 8008812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008816:	4413      	add	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00d      	beq.n	8008840 <put_fat+0xa4>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b25b      	sxtb	r3, r3
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	b25a      	sxtb	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	b25b      	sxtb	r3, r3
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	b25b      	sxtb	r3, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	b25b      	sxtb	r3, r3
 800883c:	b2db      	uxtb	r3, r3
 800883e:	e001      	b.n	8008844 <put_fat+0xa8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	0a5b      	lsrs	r3, r3, #9
 8008856:	4413      	add	r3, r2
 8008858:	4619      	mov	r1, r3
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7ff fe3c 	bl	80084d8 <move_window>
 8008860:	4603      	mov	r3, r0
 8008862:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008864:	7ffb      	ldrb	r3, [r7, #31]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d178      	bne.n	800895c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	4413      	add	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <put_fat+0xf0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	091b      	lsrs	r3, r3, #4
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e00e      	b.n	80088aa <put_fat+0x10e>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f023 030f 	bic.w	r3, r3, #15
 8008896:	b25a      	sxtb	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	b25b      	sxtb	r3, r3
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b25b      	sxtb	r3, r3
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	70da      	strb	r2, [r3, #3]
			break;
 80088b4:	e057      	b.n	8008966 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0a1b      	lsrs	r3, r3, #8
 80088be:	4413      	add	r3, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fe08 	bl	80084d8 <move_window>
 80088c8:	4603      	mov	r3, r0
 80088ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088cc:	7ffb      	ldrb	r3, [r7, #31]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d146      	bne.n	8008960 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	b292      	uxth	r2, r2
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fb4f 	bl	8007f8c <st_word>
			fs->wflag = 1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	70da      	strb	r2, [r3, #3]
			break;
 80088f4:	e037      	b.n	8008966 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	09db      	lsrs	r3, r3, #7
 80088fe:	4413      	add	r3, r2
 8008900:	4619      	mov	r1, r3
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fde8 	bl	80084d8 <move_window>
 8008908:	4603      	mov	r3, r0
 800890a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800890c:	7ffb      	ldrb	r3, [r7, #31]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d128      	bne.n	8008964 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008926:	4413      	add	r3, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fb0c 	bl	8007f46 <ld_dword>
 800892e:	4603      	mov	r3, r0
 8008930:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008934:	4323      	orrs	r3, r4
 8008936:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008946:	4413      	add	r3, r2
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fb39 	bl	8007fc2 <st_dword>
			fs->wflag = 1;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	70da      	strb	r2, [r3, #3]
			break;
 8008956:	e006      	b.n	8008966 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008958:	bf00      	nop
 800895a:	e004      	b.n	8008966 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800895c:	bf00      	nop
 800895e:	e002      	b.n	8008966 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008964:	bf00      	nop
		}
	}
	return res;
 8008966:	7ffb      	ldrb	r3, [r7, #31]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3724      	adds	r7, #36	@ 0x24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd90      	pop	{r4, r7, pc}

08008970 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d904      	bls.n	8008996 <remove_chain+0x26>
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d301      	bcc.n	800899a <remove_chain+0x2a>
 8008996:	2302      	movs	r3, #2
 8008998:	e04b      	b.n	8008a32 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00c      	beq.n	80089ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	69b8      	ldr	r0, [r7, #24]
 80089a8:	f7ff fef8 	bl	800879c <put_fat>
 80089ac:	4603      	mov	r3, r0
 80089ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80089b0:	7ffb      	ldrb	r3, [r7, #31]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <remove_chain+0x4a>
 80089b6:	7ffb      	ldrb	r3, [r7, #31]
 80089b8:	e03b      	b.n	8008a32 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff fe46 	bl	800864e <get_fat>
 80089c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d031      	beq.n	8008a2e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <remove_chain+0x64>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e02e      	b.n	8008a32 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d101      	bne.n	80089e0 <remove_chain+0x70>
 80089dc:	2301      	movs	r3, #1
 80089de:	e028      	b.n	8008a32 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80089e0:	2200      	movs	r2, #0
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	f7ff fed9 	bl	800879c <put_fat>
 80089ea:	4603      	mov	r3, r0
 80089ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80089ee:	7ffb      	ldrb	r3, [r7, #31]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <remove_chain+0x88>
 80089f4:	7ffb      	ldrb	r3, [r7, #31]
 80089f6:	e01c      	b.n	8008a32 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	3b02      	subs	r3, #2
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d20b      	bcs.n	8008a1e <remove_chain+0xae>
			fs->free_clst++;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	791b      	ldrb	r3, [r3, #4]
 8008a14:	f043 0301 	orr.w	r3, r3, #1
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d3c6      	bcc.n	80089ba <remove_chain+0x4a>
 8008a2c:	e000      	b.n	8008a30 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a2e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b088      	sub	sp, #32
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10d      	bne.n	8008a6c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <create_chain+0x2c>
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d31b      	bcc.n	8008a9e <create_chain+0x64>
 8008a66:	2301      	movs	r3, #1
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	e018      	b.n	8008a9e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fded 	bl	800864e <get_fat>
 8008a74:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d801      	bhi.n	8008a80 <create_chain+0x46>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e070      	b.n	8008b62 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d101      	bne.n	8008a8c <create_chain+0x52>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	e06a      	b.n	8008b62 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d201      	bcs.n	8008a9a <create_chain+0x60>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	e063      	b.n	8008b62 <create_chain+0x128>
		scl = clst;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d307      	bcc.n	8008ac2 <create_chain+0x88>
				ncl = 2;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d901      	bls.n	8008ac2 <create_chain+0x88>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e04f      	b.n	8008b62 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ac2:	69f9      	ldr	r1, [r7, #28]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fdc2 	bl	800864e <get_fat>
 8008aca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d003      	beq.n	8008ae0 <create_chain+0xa6>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d101      	bne.n	8008ae4 <create_chain+0xaa>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e03e      	b.n	8008b62 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d1da      	bne.n	8008aa2 <create_chain+0x68>
 8008aec:	2300      	movs	r3, #0
 8008aee:	e038      	b.n	8008b62 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008af0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295
 8008af6:	69f9      	ldr	r1, [r7, #28]
 8008af8:	6938      	ldr	r0, [r7, #16]
 8008afa:	f7ff fe4f 	bl	800879c <put_fat>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <create_chain+0xe2>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6938      	ldr	r0, [r7, #16]
 8008b14:	f7ff fe42 	bl	800879c <put_fat>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d116      	bne.n	8008b50 <create_chain+0x116>
		fs->last_clst = ncl;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	3b02      	subs	r3, #2
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d804      	bhi.n	8008b40 <create_chain+0x106>
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	1e5a      	subs	r2, r3, #1
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	791b      	ldrb	r3, [r3, #4]
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	711a      	strb	r2, [r3, #4]
 8008b4e:	e007      	b.n	8008b60 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d102      	bne.n	8008b5c <create_chain+0x122>
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5a:	e000      	b.n	8008b5e <create_chain+0x124>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b60:	69fb      	ldr	r3, [r7, #28]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7e:	3304      	adds	r3, #4
 8008b80:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	8952      	ldrh	r2, [r2, #10]
 8008b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	613a      	str	r2, [r7, #16]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <clmt_clust+0x3a>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e010      	b.n	8008bc6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d307      	bcc.n	8008bbc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bba:	e7e9      	b.n	8008b90 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008bbc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	4413      	add	r3, r2
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008be8:	d204      	bcs.n	8008bf4 <dir_sdi+0x22>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	f003 031f 	and.w	r3, r3, #31
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e063      	b.n	8008cc0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <dir_sdi+0x46>
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d902      	bls.n	8008c18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10c      	bne.n	8008c38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	095b      	lsrs	r3, r3, #5
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	8912      	ldrh	r2, [r2, #8]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d301      	bcc.n	8008c2e <dir_sdi+0x5c>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e048      	b.n	8008cc0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	61da      	str	r2, [r3, #28]
 8008c36:	e029      	b.n	8008c8c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	895b      	ldrh	r3, [r3, #10]
 8008c3c:	025b      	lsls	r3, r3, #9
 8008c3e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c40:	e019      	b.n	8008c76 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6979      	ldr	r1, [r7, #20]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fd01 	bl	800864e <get_fat>
 8008c4c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d101      	bne.n	8008c5a <dir_sdi+0x88>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e032      	b.n	8008cc0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d904      	bls.n	8008c6a <dir_sdi+0x98>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d301      	bcc.n	8008c6e <dir_sdi+0x9c>
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	e028      	b.n	8008cc0 <dir_sdi+0xee>
			ofs -= csz;
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d2e1      	bcs.n	8008c42 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008c7e:	6979      	ldr	r1, [r7, #20]
 8008c80:	6938      	ldr	r0, [r7, #16]
 8008c82:	f7ff fcc5 	bl	8008610 <clust2sect>
 8008c86:	4602      	mov	r2, r0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <dir_sdi+0xcc>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e010      	b.n	8008cc0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	0a5b      	lsrs	r3, r3, #9
 8008ca6:	441a      	add	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb8:	441a      	add	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	3320      	adds	r3, #32
 8008cde:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <dir_next+0x28>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cee:	d301      	bcc.n	8008cf4 <dir_next+0x2c>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	e0aa      	b.n	8008e4a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 8098 	bne.w	8008e30 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	095b      	lsrs	r3, r3, #5
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	8912      	ldrh	r2, [r2, #8]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	f0c0 8088 	bcc.w	8008e30 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	61da      	str	r2, [r3, #28]
 8008d26:	2304      	movs	r3, #4
 8008d28:	e08f      	b.n	8008e4a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	0a5b      	lsrs	r3, r3, #9
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	8952      	ldrh	r2, [r2, #10]
 8008d32:	3a01      	subs	r2, #1
 8008d34:	4013      	ands	r3, r2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d17a      	bne.n	8008e30 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7ff fc83 	bl	800864e <get_fat>
 8008d48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d801      	bhi.n	8008d54 <dir_next+0x8c>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e07a      	b.n	8008e4a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d101      	bne.n	8008d60 <dir_next+0x98>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e074      	b.n	8008e4a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d358      	bcc.n	8008e1c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	61da      	str	r2, [r3, #28]
 8008d76:	2304      	movs	r3, #4
 8008d78:	e067      	b.n	8008e4a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7ff fe59 	bl	8008a3a <create_chain>
 8008d88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <dir_next+0xcc>
 8008d90:	2307      	movs	r3, #7
 8008d92:	e05a      	b.n	8008e4a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d101      	bne.n	8008d9e <dir_next+0xd6>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e055      	b.n	8008e4a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d101      	bne.n	8008daa <dir_next+0xe2>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e04f      	b.n	8008e4a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff fb50 	bl	8008450 <sync_window>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <dir_next+0xf2>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e047      	b.n	8008e4a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3338      	adds	r3, #56	@ 0x38
 8008dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff f949 	bl	800805c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	6979      	ldr	r1, [r7, #20]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fc1d 	bl	8008610 <clust2sect>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ddc:	e012      	b.n	8008e04 <dir_next+0x13c>
						fs->wflag = 1;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff fb33 	bl	8008450 <sync_window>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <dir_next+0x12c>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e02a      	b.n	8008e4a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3301      	adds	r3, #1
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	895b      	ldrh	r3, [r3, #10]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d3e6      	bcc.n	8008dde <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad2      	subs	r2, r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008e22:	6979      	ldr	r1, [r7, #20]
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff fbf3 	bl	8008610 <clust2sect>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e42:	441a      	add	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e62:	2100      	movs	r1, #0
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff feb4 	bl	8008bd2 <dir_sdi>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d12b      	bne.n	8008ecc <dir_alloc+0x7a>
		n = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fb2a 	bl	80084d8 <move_window>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d11d      	bne.n	8008eca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2be5      	cmp	r3, #229	@ 0xe5
 8008e96:	d004      	beq.n	8008ea2 <dir_alloc+0x50>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d107      	bne.n	8008eb2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d102      	bne.n	8008eb6 <dir_alloc+0x64>
 8008eb0:	e00c      	b.n	8008ecc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff ff05 	bl	8008cc8 <dir_next>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0d7      	beq.n	8008e78 <dir_alloc+0x26>
 8008ec8:	e000      	b.n	8008ecc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008eca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d101      	bne.n	8008ed6 <dir_alloc+0x84>
 8008ed2:	2307      	movs	r3, #7
 8008ed4:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	331a      	adds	r3, #26
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff f810 	bl	8007f14 <ld_word>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d109      	bne.n	8008f14 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	3314      	adds	r3, #20
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff f805 	bl	8007f14 <ld_word>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	331a      	adds	r3, #26
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	b292      	uxth	r2, r2
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff f829 	bl	8007f8c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d109      	bne.n	8008f56 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f103 0214 	add.w	r2, r3, #20
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f7ff f81b 	bl	8007f8c <st_word>
	}
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	331a      	adds	r3, #26
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe ffd0 	bl	8007f14 <ld_word>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <cmp_lfn+0x1e>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e059      	b.n	8009032 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f86:	1e5a      	subs	r2, r3, #1
 8008f88:	4613      	mov	r3, r2
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f94:	2301      	movs	r3, #1
 8008f96:	81fb      	strh	r3, [r7, #14]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	e033      	b.n	8009006 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f9e:	4a27      	ldr	r2, [pc, #156]	@ (800903c <cmp_lfn+0xdc>)
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	4413      	add	r3, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe ffb1 	bl	8007f14 <ld_word>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008fb6:	89fb      	ldrh	r3, [r7, #14]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01a      	beq.n	8008ff2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2bfe      	cmp	r3, #254	@ 0xfe
 8008fc0:	d812      	bhi.n	8008fe8 <cmp_lfn+0x88>
 8008fc2:	89bb      	ldrh	r3, [r7, #12]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 fd99 	bl	800aafc <ff_wtoupper>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461c      	mov	r4, r3
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	617a      	str	r2, [r7, #20]
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fd8d 	bl	800aafc <ff_wtoupper>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	d001      	beq.n	8008fec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e022      	b.n	8009032 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008fec:	89bb      	ldrh	r3, [r7, #12]
 8008fee:	81fb      	strh	r3, [r7, #14]
 8008ff0:	e006      	b.n	8009000 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008ff2:	89bb      	ldrh	r3, [r7, #12]
 8008ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d001      	beq.n	8009000 <cmp_lfn+0xa0>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e018      	b.n	8009032 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	3301      	adds	r3, #1
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	d9c8      	bls.n	8008f9e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <cmp_lfn+0xd0>
 8009018:	89fb      	ldrh	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d008      	beq.n	8009030 <cmp_lfn+0xd0>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	4413      	add	r3, r2
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <cmp_lfn+0xd0>
 800902c:	2300      	movs	r3, #0
 800902e:	e000      	b.n	8009032 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009030:	2301      	movs	r3, #1
}
 8009032:	4618      	mov	r0, r3
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	080124d8 	.word	0x080124d8

08009040 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4611      	mov	r1, r2
 800904c:	461a      	mov	r2, r3
 800904e:	460b      	mov	r3, r1
 8009050:	71fb      	strb	r3, [r7, #7]
 8009052:	4613      	mov	r3, r2
 8009054:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	330d      	adds	r3, #13
 800905a:	79ba      	ldrb	r2, [r7, #6]
 800905c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	330b      	adds	r3, #11
 8009062:	220f      	movs	r2, #15
 8009064:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	330c      	adds	r3, #12
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	331a      	adds	r3, #26
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe ff89 	bl	8007f8c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	4613      	mov	r3, r2
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	82fb      	strh	r3, [r7, #22]
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009092:	8afb      	ldrh	r3, [r7, #22]
 8009094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009098:	4293      	cmp	r3, r2
 800909a:	d007      	beq.n	80090ac <put_lfn+0x6c>
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	61fa      	str	r2, [r7, #28]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80090ac:	4a17      	ldr	r2, [pc, #92]	@ (800910c <put_lfn+0xcc>)
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	4413      	add	r3, r2
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4413      	add	r3, r2
 80090ba:	8afa      	ldrh	r2, [r7, #22]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe ff64 	bl	8007f8c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80090c4:	8afb      	ldrh	r3, [r7, #22]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <put_lfn+0x90>
 80090ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	3301      	adds	r3, #1
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b0c      	cmp	r3, #12
 80090da:	d9da      	bls.n	8009092 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80090dc:	8afb      	ldrh	r3, [r7, #22]
 80090de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d006      	beq.n	80090f4 <put_lfn+0xb4>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <put_lfn+0xbc>
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	79fa      	ldrb	r2, [r7, #7]
 8009100:	701a      	strb	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	080124d8 	.word	0x080124d8

08009110 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08c      	sub	sp, #48	@ 0x30
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800911e:	220b      	movs	r2, #11
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7fe ff79 	bl	800801a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b05      	cmp	r3, #5
 800912c:	d92b      	bls.n	8009186 <gen_numname+0x76>
		sr = seq;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009132:	e022      	b.n	800917a <gen_numname+0x6a>
			wc = *lfn++;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	1c9a      	adds	r2, r3, #2
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800913e:	2300      	movs	r3, #0
 8009140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009142:	e017      	b.n	8009174 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	005a      	lsls	r2, r3, #1
 8009148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	4413      	add	r3, r2
 8009150:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009152:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <gen_numname+0x5e>
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8009168:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800916c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	3301      	adds	r3, #1
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009176:	2b0f      	cmp	r3, #15
 8009178:	d9e4      	bls.n	8009144 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1d8      	bne.n	8009134 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009186:	2307      	movs	r3, #7
 8009188:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	b2db      	uxtb	r3, r3
 8009194:	3330      	adds	r3, #48	@ 0x30
 8009196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800919a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800919e:	2b39      	cmp	r3, #57	@ 0x39
 80091a0:	d904      	bls.n	80091ac <gen_numname+0x9c>
 80091a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091a6:	3307      	adds	r3, #7
 80091a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80091b2:	3330      	adds	r3, #48	@ 0x30
 80091b4:	443b      	add	r3, r7
 80091b6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80091ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	091b      	lsrs	r3, r3, #4
 80091c2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1df      	bne.n	800918a <gen_numname+0x7a>
	ns[i] = '~';
 80091ca:	f107 0214 	add.w	r2, r7, #20
 80091ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d0:	4413      	add	r3, r2
 80091d2:	227e      	movs	r2, #126	@ 0x7e
 80091d4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80091d6:	2300      	movs	r3, #0
 80091d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091da:	e002      	b.n	80091e2 <gen_numname+0xd2>
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	3301      	adds	r3, #1
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d205      	bcs.n	80091f6 <gen_numname+0xe6>
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d1f2      	bne.n	80091dc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80091f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f8:	2b07      	cmp	r3, #7
 80091fa:	d807      	bhi.n	800920c <gen_numname+0xfc>
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009202:	3330      	adds	r3, #48	@ 0x30
 8009204:	443b      	add	r3, r7
 8009206:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800920a:	e000      	b.n	800920e <gen_numname+0xfe>
 800920c:	2120      	movs	r1, #32
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	627a      	str	r2, [r7, #36]	@ 0x24
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	460a      	mov	r2, r1
 800921a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	2b07      	cmp	r3, #7
 8009220:	d9e9      	bls.n	80091f6 <gen_numname+0xe6>
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	3730      	adds	r7, #48	@ 0x30
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009238:	230b      	movs	r3, #11
 800923a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	0852      	lsrs	r2, r2, #1
 8009242:	01db      	lsls	r3, r3, #7
 8009244:	4313      	orrs	r3, r2
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1c59      	adds	r1, r3, #1
 800924c:	6079      	str	r1, [r7, #4]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4413      	add	r3, r2
 8009252:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3b01      	subs	r3, #1
 8009258:	60bb      	str	r3, [r7, #8]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1ed      	bne.n	800923c <sum_sfn+0x10>
	return sum;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800927c:	2100      	movs	r1, #0
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fca7 	bl	8008bd2 <dir_sdi>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <dir_find+0x24>
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	e0a9      	b.n	80093e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009292:	23ff      	movs	r3, #255	@ 0xff
 8009294:	753b      	strb	r3, [r7, #20]
 8009296:	7d3b      	ldrb	r3, [r7, #20]
 8009298:	757b      	strb	r3, [r7, #21]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6938      	ldr	r0, [r7, #16]
 80092aa:	f7ff f915 	bl	80084d8 <move_window>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 8090 	bne.w	80093da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092c2:	7dbb      	ldrb	r3, [r7, #22]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <dir_find+0x60>
 80092c8:	2304      	movs	r3, #4
 80092ca:	75fb      	strb	r3, [r7, #23]
 80092cc:	e08a      	b.n	80093e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	330b      	adds	r3, #11
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7bfa      	ldrb	r2, [r7, #15]
 80092e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80092e2:	7dbb      	ldrb	r3, [r7, #22]
 80092e4:	2be5      	cmp	r3, #229	@ 0xe5
 80092e6:	d007      	beq.n	80092f8 <dir_find+0x8a>
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	f003 0308 	and.w	r3, r3, #8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <dir_find+0x98>
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b0f      	cmp	r3, #15
 80092f6:	d006      	beq.n	8009306 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80092f8:	23ff      	movs	r3, #255	@ 0xff
 80092fa:	757b      	strb	r3, [r7, #21]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009302:	631a      	str	r2, [r3, #48]	@ 0x30
 8009304:	e05e      	b.n	80093c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	2b0f      	cmp	r3, #15
 800930a:	d136      	bne.n	800937a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d154      	bne.n	80093c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800931a:	7dbb      	ldrb	r3, [r7, #22]
 800931c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	7b5b      	ldrb	r3, [r3, #13]
 800932a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800932c:	7dbb      	ldrb	r3, [r7, #22]
 800932e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009332:	75bb      	strb	r3, [r7, #22]
 8009334:	7dbb      	ldrb	r3, [r7, #22]
 8009336:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009340:	7dba      	ldrb	r2, [r7, #22]
 8009342:	7d7b      	ldrb	r3, [r7, #21]
 8009344:	429a      	cmp	r2, r3
 8009346:	d115      	bne.n	8009374 <dir_find+0x106>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	330d      	adds	r3, #13
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	7d3a      	ldrb	r2, [r7, #20]
 8009352:	429a      	cmp	r2, r3
 8009354:	d10e      	bne.n	8009374 <dir_find+0x106>
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7ff fdfd 	bl	8008f60 <cmp_lfn>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <dir_find+0x106>
 800936c:	7d7b      	ldrb	r3, [r7, #21]
 800936e:	3b01      	subs	r3, #1
 8009370:	b2db      	uxtb	r3, r3
 8009372:	e000      	b.n	8009376 <dir_find+0x108>
 8009374:	23ff      	movs	r3, #255	@ 0xff
 8009376:	757b      	strb	r3, [r7, #21]
 8009378:	e024      	b.n	80093c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800937a:	7d7b      	ldrb	r3, [r7, #21]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d109      	bne.n	8009394 <dir_find+0x126>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff ff51 	bl	800922c <sum_sfn>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	7d3b      	ldrb	r3, [r7, #20]
 8009390:	4293      	cmp	r3, r2
 8009392:	d024      	beq.n	80093de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <dir_find+0x14a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a18      	ldr	r0, [r3, #32]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3324      	adds	r3, #36	@ 0x24
 80093aa:	220b      	movs	r2, #11
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7fe fe70 	bl	8008092 <mem_cmp>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d014      	beq.n	80093e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80093b8:	23ff      	movs	r3, #255	@ 0xff
 80093ba:	757b      	strb	r3, [r7, #21]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80093c4:	2100      	movs	r1, #0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fc7e 	bl	8008cc8 <dir_next>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f43f af65 	beq.w	80092a2 <dir_find+0x34>
 80093d8:	e004      	b.n	80093e4 <dir_find+0x176>
		if (res != FR_OK) break;
 80093da:	bf00      	nop
 80093dc:	e002      	b.n	80093e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80093de:	bf00      	nop
 80093e0:	e000      	b.n	80093e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80093e2:	bf00      	nop

	return res;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08c      	sub	sp, #48	@ 0x30
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009404:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <dir_register+0x20>
 800940c:	2306      	movs	r3, #6
 800940e:	e0e0      	b.n	80095d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009410:	2300      	movs	r3, #0
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24
 8009414:	e002      	b.n	800941c <dir_register+0x2c>
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	3301      	adds	r3, #1
 800941a:	627b      	str	r3, [r7, #36]	@ 0x24
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f4      	bne.n	8009416 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009432:	f107 030c 	add.w	r3, r7, #12
 8009436:	220c      	movs	r2, #12
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fdee 	bl	800801a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d032      	beq.n	80094ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2240      	movs	r2, #64	@ 0x40
 800944c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009450:	2301      	movs	r3, #1
 8009452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009454:	e016      	b.n	8009484 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	f107 010c 	add.w	r1, r7, #12
 8009464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009466:	f7ff fe53 	bl	8009110 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff feff 	bl	800926e <dir_find>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8009476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	3301      	adds	r3, #1
 8009482:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009486:	2b63      	cmp	r3, #99	@ 0x63
 8009488:	d9e5      	bls.n	8009456 <dir_register+0x66>
 800948a:	e000      	b.n	800948e <dir_register+0x9e>
			if (res != FR_OK) break;
 800948c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800948e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009490:	2b64      	cmp	r3, #100	@ 0x64
 8009492:	d101      	bne.n	8009498 <dir_register+0xa8>
 8009494:	2307      	movs	r3, #7
 8009496:	e09c      	b.n	80095d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800949c:	2b04      	cmp	r3, #4
 800949e:	d002      	beq.n	80094a6 <dir_register+0xb6>
 80094a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094a4:	e095      	b.n	80095d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80094a6:	7dfa      	ldrb	r2, [r7, #23]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d007      	beq.n	80094c8 <dir_register+0xd8>
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	330c      	adds	r3, #12
 80094bc:	4a47      	ldr	r2, [pc, #284]	@ (80095dc <dir_register+0x1ec>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	089b      	lsrs	r3, r3, #2
 80094c4:	3301      	adds	r3, #1
 80094c6:	e000      	b.n	80094ca <dir_register+0xda>
 80094c8:	2301      	movs	r3, #1
 80094ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80094cc:	6a39      	ldr	r1, [r7, #32]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fcbf 	bl	8008e52 <dir_alloc>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80094da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d148      	bne.n	8009574 <dir_register+0x184>
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	623b      	str	r3, [r7, #32]
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d042      	beq.n	8009574 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695a      	ldr	r2, [r3, #20]
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	015b      	lsls	r3, r3, #5
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fb69 	bl	8008bd2 <dir_sdi>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800950a:	2b00      	cmp	r3, #0
 800950c:	d132      	bne.n	8009574 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3324      	adds	r3, #36	@ 0x24
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fe8a 	bl	800922c <sum_sfn>
 8009518:	4603      	mov	r3, r0
 800951a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	4619      	mov	r1, r3
 8009522:	69f8      	ldr	r0, [r7, #28]
 8009524:	f7fe ffd8 	bl	80084d8 <move_window>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800952e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009532:	2b00      	cmp	r3, #0
 8009534:	d11d      	bne.n	8009572 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	68d8      	ldr	r0, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a19      	ldr	r1, [r3, #32]
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	b2da      	uxtb	r2, r3
 8009542:	7efb      	ldrb	r3, [r7, #27]
 8009544:	f7ff fd7c 	bl	8009040 <put_lfn>
				fs->wflag = 1;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	2201      	movs	r2, #1
 800954c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800954e:	2100      	movs	r1, #0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fbb9 	bl	8008cc8 <dir_next>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800955c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009560:	2b00      	cmp	r3, #0
 8009562:	d107      	bne.n	8009574 <dir_register+0x184>
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	3b01      	subs	r3, #1
 8009568:	623b      	str	r3, [r7, #32]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1d5      	bne.n	800951c <dir_register+0x12c>
 8009570:	e000      	b.n	8009574 <dir_register+0x184>
				if (res != FR_OK) break;
 8009572:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009574:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009578:	2b00      	cmp	r3, #0
 800957a:	d128      	bne.n	80095ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	4619      	mov	r1, r3
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	f7fe ffa8 	bl	80084d8 <move_window>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800958e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009592:	2b00      	cmp	r3, #0
 8009594:	d11b      	bne.n	80095ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	2220      	movs	r2, #32
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fd5c 	bl	800805c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a18      	ldr	r0, [r3, #32]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3324      	adds	r3, #36	@ 0x24
 80095ac:	220b      	movs	r2, #11
 80095ae:	4619      	mov	r1, r3
 80095b0:	f7fe fd33 	bl	800801a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	330c      	adds	r3, #12
 80095c0:	f002 0218 	and.w	r2, r2, #24
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	2201      	movs	r2, #1
 80095cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80095ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3730      	adds	r7, #48	@ 0x30
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	4ec4ec4f 	.word	0x4ec4ec4f

080095e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08a      	sub	sp, #40	@ 0x28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	61ba      	str	r2, [r7, #24]
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4413      	add	r3, r2
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800960e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009610:	2b1f      	cmp	r3, #31
 8009612:	d940      	bls.n	8009696 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009616:	2b2f      	cmp	r3, #47	@ 0x2f
 8009618:	d006      	beq.n	8009628 <create_name+0x48>
 800961a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800961c:	2b5c      	cmp	r3, #92	@ 0x5c
 800961e:	d110      	bne.n	8009642 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009620:	e002      	b.n	8009628 <create_name+0x48>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	3301      	adds	r3, #1
 8009626:	61bb      	str	r3, [r7, #24]
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	4413      	add	r3, r2
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b2f      	cmp	r3, #47	@ 0x2f
 8009632:	d0f6      	beq.n	8009622 <create_name+0x42>
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	4413      	add	r3, r2
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b5c      	cmp	r3, #92	@ 0x5c
 800963e:	d0f0      	beq.n	8009622 <create_name+0x42>
			break;
 8009640:	e02a      	b.n	8009698 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2bfe      	cmp	r3, #254	@ 0xfe
 8009646:	d901      	bls.n	800964c <create_name+0x6c>
 8009648:	2306      	movs	r3, #6
 800964a:	e17d      	b.n	8009948 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800964c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800964e:	b2db      	uxtb	r3, r3
 8009650:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009652:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fa14 	bl	800aa84 <ff_convert>
 800965c:	4603      	mov	r3, r0
 800965e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009660:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <create_name+0x8a>
 8009666:	2306      	movs	r3, #6
 8009668:	e16e      	b.n	8009948 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800966a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800966c:	2b7f      	cmp	r3, #127	@ 0x7f
 800966e:	d809      	bhi.n	8009684 <create_name+0xa4>
 8009670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009672:	4619      	mov	r1, r3
 8009674:	488d      	ldr	r0, [pc, #564]	@ (80098ac <create_name+0x2cc>)
 8009676:	f7fe fd33 	bl	80080e0 <chk_chr>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <create_name+0xa4>
 8009680:	2306      	movs	r3, #6
 8009682:	e161      	b.n	8009948 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	617a      	str	r2, [r7, #20]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009692:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009694:	e7b4      	b.n	8009600 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009696:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	441a      	add	r2, r3
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80096a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a4:	2b1f      	cmp	r3, #31
 80096a6:	d801      	bhi.n	80096ac <create_name+0xcc>
 80096a8:	2304      	movs	r3, #4
 80096aa:	e000      	b.n	80096ae <create_name+0xce>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80096b2:	e011      	b.n	80096d8 <create_name+0xf8>
		w = lfn[di - 1];
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80096ba:	3b01      	subs	r3, #1
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80096c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d002      	beq.n	80096d2 <create_name+0xf2>
 80096cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80096d0:	d106      	bne.n	80096e0 <create_name+0x100>
		di--;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1ea      	bne.n	80096b4 <create_name+0xd4>
 80096de:	e000      	b.n	80096e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80096e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <create_name+0x118>
 80096f4:	2306      	movs	r3, #6
 80096f6:	e127      	b.n	8009948 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3324      	adds	r3, #36	@ 0x24
 80096fc:	220b      	movs	r2, #11
 80096fe:	2120      	movs	r1, #32
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fcab 	bl	800805c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009706:	2300      	movs	r3, #0
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	e002      	b.n	8009712 <create_name+0x132>
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	3301      	adds	r3, #1
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	2b20      	cmp	r3, #32
 800971e:	d0f5      	beq.n	800970c <create_name+0x12c>
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	2b2e      	cmp	r3, #46	@ 0x2e
 800972c:	d0ee      	beq.n	800970c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <create_name+0x168>
 8009734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009738:	f043 0303 	orr.w	r3, r3, #3
 800973c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009740:	e002      	b.n	8009748 <create_name+0x168>
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	3b01      	subs	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <create_name+0x182>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009754:	3b01      	subs	r3, #1
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009760:	d1ef      	bne.n	8009742 <create_name+0x162>

	i = b = 0; ni = 8;
 8009762:	2300      	movs	r3, #0
 8009764:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009768:	2300      	movs	r3, #0
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	2308      	movs	r3, #8
 800976e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	61ba      	str	r2, [r7, #24]
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4413      	add	r3, r2
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009780:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 8090 	beq.w	80098a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009788:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800978a:	2b20      	cmp	r3, #32
 800978c:	d006      	beq.n	800979c <create_name+0x1bc>
 800978e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009790:	2b2e      	cmp	r3, #46	@ 0x2e
 8009792:	d10a      	bne.n	80097aa <create_name+0x1ca>
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	429a      	cmp	r2, r3
 800979a:	d006      	beq.n	80097aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800979c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a0:	f043 0303 	orr.w	r3, r3, #3
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097a8:	e07d      	b.n	80098a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80097aa:	6a3a      	ldr	r2, [r7, #32]
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d203      	bcs.n	80097ba <create_name+0x1da>
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d123      	bne.n	8009802 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	2b0b      	cmp	r3, #11
 80097be:	d106      	bne.n	80097ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80097c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c4:	f043 0303 	orr.w	r3, r3, #3
 80097c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097cc:	e075      	b.n	80098ba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d005      	beq.n	80097e2 <create_name+0x202>
 80097d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097da:	f043 0303 	orr.w	r3, r3, #3
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d866      	bhi.n	80098b8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	2308      	movs	r3, #8
 80097f0:	623b      	str	r3, [r7, #32]
 80097f2:	230b      	movs	r3, #11
 80097f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80097f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009800:	e051      	b.n	80098a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009804:	2b7f      	cmp	r3, #127	@ 0x7f
 8009806:	d914      	bls.n	8009832 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f001 f939 	bl	800aa84 <ff_convert>
 8009812:	4603      	mov	r3, r0
 8009814:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <create_name+0x246>
 800981c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800981e:	3b80      	subs	r3, #128	@ 0x80
 8009820:	4a23      	ldr	r2, [pc, #140]	@ (80098b0 <create_name+0x2d0>)
 8009822:	5cd3      	ldrb	r3, [r2, r3]
 8009824:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800982a:	f043 0302 	orr.w	r3, r3, #2
 800982e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <create_name+0x268>
 8009838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800983a:	4619      	mov	r1, r3
 800983c:	481d      	ldr	r0, [pc, #116]	@ (80098b4 <create_name+0x2d4>)
 800983e:	f7fe fc4f 	bl	80080e0 <chk_chr>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009848:	235f      	movs	r3, #95	@ 0x5f
 800984a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800984c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009850:	f043 0303 	orr.w	r3, r3, #3
 8009854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009858:	e01b      	b.n	8009892 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800985a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	d909      	bls.n	8009874 <create_name+0x294>
 8009860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009862:	2b5a      	cmp	r3, #90	@ 0x5a
 8009864:	d806      	bhi.n	8009874 <create_name+0x294>
					b |= 2;
 8009866:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800986a:	f043 0302 	orr.w	r3, r3, #2
 800986e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009872:	e00e      	b.n	8009892 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009876:	2b60      	cmp	r3, #96	@ 0x60
 8009878:	d90b      	bls.n	8009892 <create_name+0x2b2>
 800987a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800987c:	2b7a      	cmp	r3, #122	@ 0x7a
 800987e:	d808      	bhi.n	8009892 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800988c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800988e:	3b20      	subs	r3, #32
 8009890:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	623a      	str	r2, [r7, #32]
 8009898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800989a:	b2d1      	uxtb	r1, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	4413      	add	r3, r2
 80098a0:	460a      	mov	r2, r1
 80098a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80098a6:	e763      	b.n	8009770 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80098a8:	bf00      	nop
 80098aa:	e006      	b.n	80098ba <create_name+0x2da>
 80098ac:	080123d4 	.word	0x080123d4
 80098b0:	08012458 	.word	0x08012458
 80098b4:	080123e0 	.word	0x080123e0
			if (si > di) break;			/* No extension */
 80098b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80098c0:	2be5      	cmp	r3, #229	@ 0xe5
 80098c2:	d103      	bne.n	80098cc <create_name+0x2ec>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2205      	movs	r2, #5
 80098c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d104      	bne.n	80098dc <create_name+0x2fc>
 80098d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80098dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098e0:	f003 030c 	and.w	r3, r3, #12
 80098e4:	2b0c      	cmp	r3, #12
 80098e6:	d005      	beq.n	80098f4 <create_name+0x314>
 80098e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d105      	bne.n	8009900 <create_name+0x320>
 80098f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098f8:	f043 0302 	orr.w	r3, r3, #2
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	2b00      	cmp	r3, #0
 800990a:	d117      	bne.n	800993c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800990c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b01      	cmp	r3, #1
 8009916:	d105      	bne.n	8009924 <create_name+0x344>
 8009918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800991c:	f043 0310 	orr.w	r3, r3, #16
 8009920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009924:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009928:	f003 030c 	and.w	r3, r3, #12
 800992c:	2b04      	cmp	r3, #4
 800992e:	d105      	bne.n	800993c <create_name+0x35c>
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009934:	f043 0308 	orr.w	r3, r3, #8
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009942:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009946:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009948:	4618      	mov	r0, r3
 800994a:	3728      	adds	r7, #40	@ 0x28
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009964:	e002      	b.n	800996c <follow_path+0x1c>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b2f      	cmp	r3, #47	@ 0x2f
 8009972:	d0f8      	beq.n	8009966 <follow_path+0x16>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b5c      	cmp	r3, #92	@ 0x5c
 800997a:	d0f4      	beq.n	8009966 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2200      	movs	r2, #0
 8009980:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b1f      	cmp	r3, #31
 8009988:	d80a      	bhi.n	80099a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2280      	movs	r2, #128	@ 0x80
 800998e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff f91c 	bl	8008bd2 <dir_sdi>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
 800999e:	e043      	b.n	8009a28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099a0:	463b      	mov	r3, r7
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fe1b 	bl	80095e0 <create_name>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d134      	bne.n	8009a1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff fc5a 	bl	800926e <dir_find>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80099c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d127      	bne.n	8009a22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d122      	bne.n	8009a22 <follow_path+0xd2>
 80099dc:	2305      	movs	r3, #5
 80099de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80099e0:	e01f      	b.n	8009a22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d11c      	bne.n	8009a26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	799b      	ldrb	r3, [r3, #6]
 80099f0:	f003 0310 	and.w	r3, r3, #16
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d102      	bne.n	80099fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80099f8:	2305      	movs	r3, #5
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	e014      	b.n	8009a28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a0c:	4413      	add	r3, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fa65 	bl	8008ee0 <ld_clust>
 8009a16:	4602      	mov	r2, r0
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a1c:	e7c0      	b.n	80099a0 <follow_path+0x50>
			if (res != FR_OK) break;
 8009a1e:	bf00      	nop
 8009a20:	e002      	b.n	8009a28 <follow_path+0xd8>
				break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009a26:	bf00      	nop
			}
		}
	}

	return res;
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b087      	sub	sp, #28
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d031      	beq.n	8009aac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	617b      	str	r3, [r7, #20]
 8009a4e:	e002      	b.n	8009a56 <get_ldnumber+0x24>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	3301      	adds	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b1f      	cmp	r3, #31
 8009a5c:	d903      	bls.n	8009a66 <get_ldnumber+0x34>
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b3a      	cmp	r3, #58	@ 0x3a
 8009a64:	d1f4      	bne.n	8009a50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8009a6c:	d11c      	bne.n	8009aa8 <get_ldnumber+0x76>
			tp = *path;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	60fa      	str	r2, [r7, #12]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	3b30      	subs	r3, #48	@ 0x30
 8009a7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b09      	cmp	r3, #9
 8009a84:	d80e      	bhi.n	8009aa4 <get_ldnumber+0x72>
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d10a      	bne.n	8009aa4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <get_ldnumber+0x72>
					vol = (int)i;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	e002      	b.n	8009aae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009aac:	693b      	ldr	r3, [r7, #16]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
	...

08009abc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	70da      	strb	r2, [r3, #3]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fe fcfe 	bl	80084d8 <move_window>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <check_fs+0x2a>
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	e038      	b.n	8009b58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3338      	adds	r3, #56	@ 0x38
 8009aea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fa10 	bl	8007f14 <ld_word>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d001      	beq.n	8009b04 <check_fs+0x48>
 8009b00:	2303      	movs	r3, #3
 8009b02:	e029      	b.n	8009b58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b0a:	2be9      	cmp	r3, #233	@ 0xe9
 8009b0c:	d009      	beq.n	8009b22 <check_fs+0x66>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b14:	2beb      	cmp	r3, #235	@ 0xeb
 8009b16:	d11e      	bne.n	8009b56 <check_fs+0x9a>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009b1e:	2b90      	cmp	r3, #144	@ 0x90
 8009b20:	d119      	bne.n	8009b56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3338      	adds	r3, #56	@ 0x38
 8009b26:	3336      	adds	r3, #54	@ 0x36
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fa0c 	bl	8007f46 <ld_dword>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b34:	4a0a      	ldr	r2, [pc, #40]	@ (8009b60 <check_fs+0xa4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d101      	bne.n	8009b3e <check_fs+0x82>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e00c      	b.n	8009b58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3338      	adds	r3, #56	@ 0x38
 8009b42:	3352      	adds	r3, #82	@ 0x52
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe f9fe 	bl	8007f46 <ld_dword>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4a05      	ldr	r2, [pc, #20]	@ (8009b64 <check_fs+0xa8>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d101      	bne.n	8009b56 <check_fs+0x9a>
 8009b52:	2300      	movs	r3, #0
 8009b54:	e000      	b.n	8009b58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009b56:	2302      	movs	r3, #2
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	00544146 	.word	0x00544146
 8009b64:	33544146 	.word	0x33544146

08009b68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b096      	sub	sp, #88	@ 0x58
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff ff58 	bl	8009a32 <get_ldnumber>
 8009b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da01      	bge.n	8009b8e <find_volume+0x26>
 8009b8a:	230b      	movs	r3, #11
 8009b8c:	e235      	b.n	8009ffa <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b8e:	4aa5      	ldr	r2, [pc, #660]	@ (8009e24 <find_volume+0x2bc>)
 8009b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b96:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <find_volume+0x3a>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	e22b      	b.n	8009ffa <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ba4:	f7fe fab7 	bl	8008116 <lock_fs>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <find_volume+0x4a>
 8009bae:	230f      	movs	r3, #15
 8009bb0:	e223      	b.n	8009ffa <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01a      	beq.n	8009bfe <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe f901 	bl	8007dd4 <disk_status>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009bd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10c      	bne.n	8009bfe <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <find_volume+0x92>
 8009bea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009bf6:	230a      	movs	r3, #10
 8009bf8:	e1ff      	b.n	8009ffa <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e1fd      	b.n	8009ffa <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe f8f9 	bl	8007e08 <disk_initialize>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e1e6      	b.n	8009ffa <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d007      	beq.n	8009c42 <find_volume+0xda>
 8009c32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009c3e:	230a      	movs	r3, #10
 8009c40:	e1db      	b.n	8009ffa <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009c46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c4a:	f7ff ff37 	bl	8009abc <check_fs>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009c54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d149      	bne.n	8009cf0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c60:	e01e      	b.n	8009ca0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009c70:	4413      	add	r3, r2
 8009c72:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	3304      	adds	r3, #4
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d006      	beq.n	8009c8c <find_volume+0x124>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	3308      	adds	r3, #8
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe f95f 	bl	8007f46 <ld_dword>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	e000      	b.n	8009c8e <find_volume+0x126>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	3358      	adds	r3, #88	@ 0x58
 8009c94:	443b      	add	r3, r7
 8009c96:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d9dd      	bls.n	8009c62 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <find_volume+0x14e>
 8009cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	3358      	adds	r3, #88	@ 0x58
 8009cbc:	443b      	add	r3, r7
 8009cbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009cc2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <find_volume+0x16e>
 8009cca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ccc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009cce:	f7ff fef5 	bl	8009abc <check_fs>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	e000      	b.n	8009cd8 <find_volume+0x170>
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d905      	bls.n	8009cf0 <find_volume+0x188>
 8009ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d9e2      	bls.n	8009cb6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d101      	bne.n	8009cfc <find_volume+0x194>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e17e      	b.n	8009ffa <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d901      	bls.n	8009d08 <find_volume+0x1a0>
 8009d04:	230d      	movs	r3, #13
 8009d06:	e178      	b.n	8009ffa <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	3338      	adds	r3, #56	@ 0x38
 8009d0c:	330b      	adds	r3, #11
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe f900 	bl	8007f14 <ld_word>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1a:	d001      	beq.n	8009d20 <find_volume+0x1b8>
 8009d1c:	230d      	movs	r3, #13
 8009d1e:	e16c      	b.n	8009ffa <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d22:	3338      	adds	r3, #56	@ 0x38
 8009d24:	3316      	adds	r3, #22
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe f8f4 	bl	8007f14 <ld_word>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d106      	bne.n	8009d44 <find_volume+0x1dc>
 8009d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d38:	3338      	adds	r3, #56	@ 0x38
 8009d3a:	3324      	adds	r3, #36	@ 0x24
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe f902 	bl	8007f46 <ld_dword>
 8009d42:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d48:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	789b      	ldrb	r3, [r3, #2]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d005      	beq.n	8009d68 <find_volume+0x200>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	789b      	ldrb	r3, [r3, #2]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d001      	beq.n	8009d68 <find_volume+0x200>
 8009d64:	230d      	movs	r3, #13
 8009d66:	e148      	b.n	8009ffa <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	789b      	ldrb	r3, [r3, #2]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d70:	fb02 f303 	mul.w	r3, r2, r3
 8009d74:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	895b      	ldrh	r3, [r3, #10]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <find_volume+0x234>
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	895b      	ldrh	r3, [r3, #10]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	895b      	ldrh	r3, [r3, #10]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	4013      	ands	r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <find_volume+0x238>
 8009d9c:	230d      	movs	r3, #13
 8009d9e:	e12c      	b.n	8009ffa <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da2:	3338      	adds	r3, #56	@ 0x38
 8009da4:	3311      	adds	r3, #17
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f8b4 	bl	8007f14 <ld_word>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	891b      	ldrh	r3, [r3, #8]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <find_volume+0x25e>
 8009dc2:	230d      	movs	r3, #13
 8009dc4:	e119      	b.n	8009ffa <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	3338      	adds	r3, #56	@ 0x38
 8009dca:	3313      	adds	r3, #19
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe f8a1 	bl	8007f14 <ld_word>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <find_volume+0x282>
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dde:	3338      	adds	r3, #56	@ 0x38
 8009de0:	3320      	adds	r3, #32
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe f8af 	bl	8007f46 <ld_dword>
 8009de8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	3338      	adds	r3, #56	@ 0x38
 8009dee:	330e      	adds	r3, #14
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe f88f 	bl	8007f14 <ld_word>
 8009df6:	4603      	mov	r3, r0
 8009df8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <find_volume+0x29c>
 8009e00:	230d      	movs	r3, #13
 8009e02:	e0fa      	b.n	8009ffa <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009e04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e08:	4413      	add	r3, r2
 8009e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e0c:	8912      	ldrh	r2, [r2, #8]
 8009e0e:	0912      	lsrs	r2, r2, #4
 8009e10:	b292      	uxth	r2, r2
 8009e12:	4413      	add	r3, r2
 8009e14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d204      	bcs.n	8009e28 <find_volume+0x2c0>
 8009e1e:	230d      	movs	r3, #13
 8009e20:	e0eb      	b.n	8009ffa <find_volume+0x492>
 8009e22:	bf00      	nop
 8009e24:	20000714 	.word	0x20000714
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e30:	8952      	ldrh	r2, [r2, #10]
 8009e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <find_volume+0x2da>
 8009e3e:	230d      	movs	r3, #13
 8009e40:	e0db      	b.n	8009ffa <find_volume+0x492>
		fmt = FS_FAT32;
 8009e42:	2303      	movs	r3, #3
 8009e44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d802      	bhi.n	8009e58 <find_volume+0x2f0>
 8009e52:	2302      	movs	r3, #2
 8009e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d802      	bhi.n	8009e68 <find_volume+0x300>
 8009e62:	2301      	movs	r3, #1
 8009e64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	1c9a      	adds	r2, r3, #2
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e74:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009e76:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7a:	441a      	add	r2, r3
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009e80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	441a      	add	r2, r3
 8009e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e88:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d11e      	bne.n	8009ed0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e94:	3338      	adds	r3, #56	@ 0x38
 8009e96:	332a      	adds	r3, #42	@ 0x2a
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe f83b 	bl	8007f14 <ld_word>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <find_volume+0x340>
 8009ea4:	230d      	movs	r3, #13
 8009ea6:	e0a8      	b.n	8009ffa <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	891b      	ldrh	r3, [r3, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <find_volume+0x34c>
 8009eb0:	230d      	movs	r3, #13
 8009eb2:	e0a2      	b.n	8009ffa <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	3338      	adds	r3, #56	@ 0x38
 8009eb8:	332c      	adds	r3, #44	@ 0x2c
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe f843 	bl	8007f46 <ld_dword>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ece:	e01f      	b.n	8009f10 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	891b      	ldrh	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <find_volume+0x374>
 8009ed8:	230d      	movs	r3, #13
 8009eda:	e08e      	b.n	8009ffa <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee2:	441a      	add	r2, r3
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d103      	bne.n	8009ef8 <find_volume+0x390>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	e00a      	b.n	8009f0e <find_volume+0x3a6>
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	69da      	ldr	r2, [r3, #28]
 8009efc:	4613      	mov	r3, r2
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	085a      	lsrs	r2, r3, #1
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009f0e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	6a1a      	ldr	r2, [r3, #32]
 8009f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f16:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009f1a:	0a5b      	lsrs	r3, r3, #9
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d201      	bcs.n	8009f24 <find_volume+0x3bc>
 8009f20:	230d      	movs	r3, #13
 8009f22:	e06a      	b.n	8009ffa <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	619a      	str	r2, [r3, #24]
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2e:	699a      	ldr	r2, [r3, #24]
 8009f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f32:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f36:	2280      	movs	r2, #128	@ 0x80
 8009f38:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d149      	bne.n	8009fd6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f44:	3338      	adds	r3, #56	@ 0x38
 8009f46:	3330      	adds	r3, #48	@ 0x30
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fd ffe3 	bl	8007f14 <ld_word>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d140      	bne.n	8009fd6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f56:	3301      	adds	r3, #1
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f5c:	f7fe fabc 	bl	80084d8 <move_window>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d137      	bne.n	8009fd6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8009f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f68:	2200      	movs	r2, #0
 8009f6a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6e:	3338      	adds	r3, #56	@ 0x38
 8009f70:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd ffcd 	bl	8007f14 <ld_word>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d127      	bne.n	8009fd6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	3338      	adds	r3, #56	@ 0x38
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd ffdb 	bl	8007f46 <ld_dword>
 8009f90:	4603      	mov	r3, r0
 8009f92:	4a1c      	ldr	r2, [pc, #112]	@ (800a004 <find_volume+0x49c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d11e      	bne.n	8009fd6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9a:	3338      	adds	r3, #56	@ 0x38
 8009f9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd ffd0 	bl	8007f46 <ld_dword>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4a17      	ldr	r2, [pc, #92]	@ (800a008 <find_volume+0x4a0>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d113      	bne.n	8009fd6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb0:	3338      	adds	r3, #56	@ 0x38
 8009fb2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd ffc5 	bl	8007f46 <ld_dword>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc4:	3338      	adds	r3, #56	@ 0x38
 8009fc6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fd ffbb 	bl	8007f46 <ld_dword>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009fdc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009fde:	4b0b      	ldr	r3, [pc, #44]	@ (800a00c <find_volume+0x4a4>)
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <find_volume+0x4a4>)
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	4b08      	ldr	r3, [pc, #32]	@ (800a00c <find_volume+0x4a4>)
 8009fec:	881a      	ldrh	r2, [r3, #0]
 8009fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ff2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ff4:	f7fe fa08 	bl	8008408 <clear_lock>
#endif
	return FR_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3758      	adds	r7, #88	@ 0x58
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	41615252 	.word	0x41615252
 800a008:	61417272 	.word	0x61417272
 800a00c:	20000718 	.word	0x20000718

0800a010 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a01a:	2309      	movs	r3, #9
 800a01c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d02e      	beq.n	800a082 <validate+0x72>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d02a      	beq.n	800a082 <validate+0x72>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d025      	beq.n	800a082 <validate+0x72>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	889a      	ldrh	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	88db      	ldrh	r3, [r3, #6]
 800a040:	429a      	cmp	r2, r3
 800a042:	d11e      	bne.n	800a082 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe f864 	bl	8008116 <lock_fs>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d014      	beq.n	800a07e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fd feba 	bl	8007dd4 <disk_status>
 800a060:	4603      	mov	r3, r0
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <validate+0x60>
				res = FR_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
 800a06e:	e008      	b.n	800a082 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2100      	movs	r1, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe f863 	bl	8008142 <unlock_fs>
 800a07c:	e001      	b.n	800a082 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a07e:	230f      	movs	r3, #15
 800a080:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <validate+0x7e>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	e000      	b.n	800a090 <validate+0x80>
 800a08e:	2300      	movs	r3, #0
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	6013      	str	r3, [r2, #0]
	return res;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a0b2:	f107 0310 	add.w	r3, r7, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fcbb 	bl	8009a32 <get_ldnumber>
 800a0bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	da01      	bge.n	800a0c8 <f_mount+0x28>
 800a0c4:	230b      	movs	r3, #11
 800a0c6:	e048      	b.n	800a15a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0c8:	4a26      	ldr	r2, [pc, #152]	@ (800a164 <f_mount+0xc4>)
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00f      	beq.n	800a0f8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a0d8:	69b8      	ldr	r0, [r7, #24]
 800a0da:	f7fe f995 	bl	8008408 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fdb4 	bl	800ac50 <ff_del_syncobj>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <f_mount+0x52>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e033      	b.n	800a15a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00f      	beq.n	800a11e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3310      	adds	r3, #16
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f000 fd7e 	bl	800ac10 <ff_cre_syncobj>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <f_mount+0x7e>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e01d      	b.n	800a15a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4910      	ldr	r1, [pc, #64]	@ (800a164 <f_mount+0xc4>)
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <f_mount+0x94>
 800a12e:	79fb      	ldrb	r3, [r7, #7]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d001      	beq.n	800a138 <f_mount+0x98>
 800a134:	2300      	movs	r3, #0
 800a136:	e010      	b.n	800a15a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a138:	f107 010c 	add.w	r1, r7, #12
 800a13c:	f107 0308 	add.w	r3, r7, #8
 800a140:	2200      	movs	r2, #0
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff fd10 	bl	8009b68 <find_volume>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7dfa      	ldrb	r2, [r7, #23]
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7fd fff5 	bl	8008142 <unlock_fs>
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3720      	adds	r7, #32
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000714 	.word	0x20000714

0800a168 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b09a      	sub	sp, #104	@ 0x68
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <f_open+0x18>
 800a17c:	2309      	movs	r3, #9
 800a17e:	e1c5      	b.n	800a50c <f_open+0x3a4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a186:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a188:	79fa      	ldrb	r2, [r7, #7]
 800a18a:	f107 0110 	add.w	r1, r7, #16
 800a18e:	f107 0308 	add.w	r3, r7, #8
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fce8 	bl	8009b68 <find_volume>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a19e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 81a2 	bne.w	800a4ec <f_open+0x384>
		dj.obj.fs = fs;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a1ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a1b0:	f000 fd7a 	bl	800aca8 <ff_memalloc>
 800a1b4:	65b8      	str	r0, [r7, #88]	@ 0x58
 800a1b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <f_open+0x62>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	2111      	movs	r1, #17
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fd ffbe 	bl	8008142 <unlock_fs>
 800a1c6:	2311      	movs	r3, #17
 800a1c8:	e1a0      	b.n	800a50c <f_open+0x3a4>
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1ce:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	f107 0314 	add.w	r3, r7, #20
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fbb9 	bl	8009950 <follow_path>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d118      	bne.n	800a21e <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a1ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1f0:	b25b      	sxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	da03      	bge.n	800a1fe <f_open+0x96>
				res = FR_INVALID_NAME;
 800a1f6:	2306      	movs	r3, #6
 800a1f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a1fc:	e00f      	b.n	800a21e <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	2b01      	cmp	r3, #1
 800a202:	bf8c      	ite	hi
 800a204:	2301      	movhi	r3, #1
 800a206:	2300      	movls	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd ffb0 	bl	8008178 <chk_lock>
 800a218:	4603      	mov	r3, r0
 800a21a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	f003 031c 	and.w	r3, r3, #28
 800a224:	2b00      	cmp	r3, #0
 800a226:	d07f      	beq.n	800a328 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 800a228:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a230:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a234:	2b04      	cmp	r3, #4
 800a236:	d10e      	bne.n	800a256 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a238:	f7fd fffa 	bl	8008230 <enq_lock>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d006      	beq.n	800a250 <f_open+0xe8>
 800a242:	f107 0314 	add.w	r3, r7, #20
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff f8d2 	bl	80093f0 <dir_register>
 800a24c:	4603      	mov	r3, r0
 800a24e:	e000      	b.n	800a252 <f_open+0xea>
 800a250:	2312      	movs	r3, #18
 800a252:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	f043 0308 	orr.w	r3, r3, #8
 800a25c:	71fb      	strb	r3, [r7, #7]
 800a25e:	e010      	b.n	800a282 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a260:	7ebb      	ldrb	r3, [r7, #26]
 800a262:	f003 0311 	and.w	r3, r3, #17
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <f_open+0x10a>
					res = FR_DENIED;
 800a26a:	2307      	movs	r3, #7
 800a26c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a270:	e007      	b.n	800a282 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <f_open+0x11a>
 800a27c:	2308      	movs	r3, #8
 800a27e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a282:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a286:	2b00      	cmp	r3, #0
 800a288:	d168      	bne.n	800a35c <f_open+0x1f4>
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	2b00      	cmp	r3, #0
 800a292:	d063      	beq.n	800a35c <f_open+0x1f4>
				dw = GET_FATTIME();
 800a294:	f7fd fb74 	bl	8007980 <get_fattime>
 800a298:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29c:	330e      	adds	r3, #14
 800a29e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fd fe8e 	bl	8007fc2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a8:	3316      	adds	r3, #22
 800a2aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fd fe88 	bl	8007fc2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b4:	330b      	adds	r3, #11
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe fe0d 	bl	8008ee0 <ld_clust>
 800a2c6:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fe25 	bl	8008f1e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d6:	331c      	adds	r3, #28
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd fe71 	bl	8007fc2 <st_dword>
					fs->wflag = 1;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d037      	beq.n	800a35c <f_open+0x1f4>
						dw = fs->winsect;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f0:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a2f2:	f107 0314 	add.w	r3, r7, #20
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fb38 	bl	8008970 <remove_chain>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a306:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d126      	bne.n	800a35c <f_open+0x1f4>
							res = move_window(fs, dw);
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe f8e0 	bl	80084d8 <move_window>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a322:	3a01      	subs	r2, #1
 800a324:	615a      	str	r2, [r3, #20]
 800a326:	e019      	b.n	800a35c <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d115      	bne.n	800a35c <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a330:	7ebb      	ldrb	r3, [r7, #26]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <f_open+0x1da>
					res = FR_NO_FILE;
 800a33a:	2304      	movs	r3, #4
 800a33c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a340:	e00c      	b.n	800a35c <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <f_open+0x1f4>
 800a34c:	7ebb      	ldrb	r3, [r7, #26]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <f_open+0x1f4>
						res = FR_DENIED;
 800a356:	2307      	movs	r3, #7
 800a358:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a35c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a360:	2b00      	cmp	r3, #0
 800a362:	d126      	bne.n	800a3b2 <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <f_open+0x20e>
				mode |= FA_MODIFIED;
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a374:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a37e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	2b01      	cmp	r3, #1
 800a388:	bf8c      	ite	hi
 800a38a:	2301      	movhi	r3, #1
 800a38c:	2300      	movls	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	461a      	mov	r2, r3
 800a392:	f107 0314 	add.w	r3, r7, #20
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fd ff6b 	bl	8008274 <inc_lock>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <f_open+0x24a>
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a3b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f040 8095 	bne.w	800a4e6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fe fd8c 	bl	8008ee0 <ld_clust>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d0:	331c      	adds	r3, #28
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fd fdb7 	bl	8007f46 <ld_dword>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	88da      	ldrh	r2, [r3, #6]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	79fa      	ldrb	r2, [r7, #7]
 800a3f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3330      	adds	r3, #48	@ 0x30
 800a40e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f7fd fe21 	bl	800805c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d060      	beq.n	800a4e6 <f_open+0x37e>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d05c      	beq.n	800a4e6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	895b      	ldrh	r3, [r3, #10]
 800a438:	025b      	lsls	r3, r3, #9
 800a43a:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a448:	e016      	b.n	800a478 <f_open+0x310>
					clst = get_fat(&fp->obj, clst);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe f8fd 	bl	800864e <get_fat>
 800a454:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d802      	bhi.n	800a462 <f_open+0x2fa>
 800a45c:	2302      	movs	r3, #2
 800a45e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a468:	d102      	bne.n	800a470 <f_open+0x308>
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a470:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a478:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <f_open+0x320>
 800a480:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a484:	429a      	cmp	r2, r3
 800a486:	d8e0      	bhi.n	800a44a <f_open+0x2e2>
				}
				fp->clust = clst;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a48c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a48e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a492:	2b00      	cmp	r3, #0
 800a494:	d127      	bne.n	800a4e6 <f_open+0x37e>
 800a496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d022      	beq.n	800a4e6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe f8b3 	bl	8008610 <clust2sect>
 800a4aa:	64b8      	str	r0, [r7, #72]	@ 0x48
 800a4ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <f_open+0x352>
						res = FR_INT_ERR;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a4b8:	e015      	b.n	800a4e6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a4ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4bc:	0a5a      	lsrs	r2, r3, #9
 800a4be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c0:	441a      	add	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	7858      	ldrb	r0, [r3, #1]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6a1a      	ldr	r2, [r3, #32]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f7fd fcbf 	bl	8007e58 <disk_read>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <f_open+0x37e>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a4e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a4e8:	f000 fbea 	bl	800acc0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a4ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <f_open+0x392>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd fe1d 	bl	8008142 <unlock_fs>
 800a508:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3768      	adds	r7, #104	@ 0x68
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08c      	sub	sp, #48	@ 0x30
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f107 0210 	add.w	r2, r7, #16
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fd6b 	bl	800a010 <validate>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a544:	2b00      	cmp	r3, #0
 800a546:	d107      	bne.n	800a558 <f_write+0x44>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	7d5b      	ldrb	r3, [r3, #21]
 800a54c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <f_write+0x58>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f7fd fdee 	bl	8008142 <unlock_fs>
 800a566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a56a:	e173      	b.n	800a854 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	7d1b      	ldrb	r3, [r3, #20]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <f_write+0x72>
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2107      	movs	r1, #7
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fd fde0 	bl	8008142 <unlock_fs>
 800a582:	2307      	movs	r3, #7
 800a584:	e166      	b.n	800a854 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	699a      	ldr	r2, [r3, #24]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	441a      	add	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	429a      	cmp	r2, r3
 800a594:	f080 814b 	bcs.w	800a82e <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	43db      	mvns	r3, r3
 800a59e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a5a0:	e145      	b.n	800a82e <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f040 8101 	bne.w	800a7b2 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	0a5b      	lsrs	r3, r3, #9
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	8952      	ldrh	r2, [r2, #10]
 800a5ba:	3a01      	subs	r2, #1
 800a5bc:	4013      	ands	r3, r2
 800a5be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d14d      	bne.n	800a662 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10c      	bne.n	800a5e8 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d11a      	bne.n	800a610 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fa2b 	bl	8008a3a <create_chain>
 800a5e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a5e6:	e013      	b.n	800a610 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7fe fab7 	bl	8008b6a <clmt_clust>
 800a5fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a5fe:	e007      	b.n	800a610 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f7fe fa16 	bl	8008a3a <create_chain>
 800a60e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8110 	beq.w	800a838 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d109      	bne.n	800a632 <f_write+0x11e>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2202      	movs	r2, #2
 800a622:	755a      	strb	r2, [r3, #21]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2102      	movs	r1, #2
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd fd8a 	bl	8008142 <unlock_fs>
 800a62e:	2302      	movs	r3, #2
 800a630:	e110      	b.n	800a854 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a638:	d109      	bne.n	800a64e <f_write+0x13a>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	755a      	strb	r2, [r3, #21]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2101      	movs	r1, #1
 800a644:	4618      	mov	r0, r3
 800a646:	f7fd fd7c 	bl	8008142 <unlock_fs>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e102      	b.n	800a854 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a652:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <f_write+0x14e>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a660:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	7d1b      	ldrb	r3, [r3, #20]
 800a666:	b25b      	sxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da1d      	bge.n	800a6a8 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	7858      	ldrb	r0, [r3, #1]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1a      	ldr	r2, [r3, #32]
 800a67a:	2301      	movs	r3, #1
 800a67c:	f7fd fc0c 	bl	8007e98 <disk_write>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <f_write+0x186>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	755a      	strb	r2, [r3, #21]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2101      	movs	r1, #1
 800a690:	4618      	mov	r0, r3
 800a692:	f7fd fd56 	bl	8008142 <unlock_fs>
 800a696:	2301      	movs	r3, #1
 800a698:	e0dc      	b.n	800a854 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	7d1b      	ldrb	r3, [r3, #20]
 800a69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f7fd ffad 	bl	8008610 <clust2sect>
 800a6b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d109      	bne.n	800a6d2 <f_write+0x1be>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	755a      	strb	r2, [r3, #21]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fd fd3a 	bl	8008142 <unlock_fs>
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	e0c0      	b.n	800a854 <f_write+0x340>
			sect += csect;
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	0a5b      	lsrs	r3, r3, #9
 800a6de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d041      	beq.n	800a76a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	8952      	ldrh	r2, [r2, #10]
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d905      	bls.n	800a700 <f_write+0x1ec>
					cc = fs->csize - csect;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	895b      	ldrh	r3, [r3, #10]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	7858      	ldrb	r0, [r3, #1]
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	69f9      	ldr	r1, [r7, #28]
 800a70a:	f7fd fbc5 	bl	8007e98 <disk_write>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d009      	beq.n	800a728 <f_write+0x214>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	755a      	strb	r2, [r3, #21]
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2101      	movs	r1, #1
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd fd0f 	bl	8008142 <unlock_fs>
 800a724:	2301      	movs	r3, #1
 800a726:	e095      	b.n	800a854 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1a      	ldr	r2, [r3, #32]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	429a      	cmp	r2, r3
 800a734:	d915      	bls.n	800a762 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6a1a      	ldr	r2, [r3, #32]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	025b      	lsls	r3, r3, #9
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a74e:	4619      	mov	r1, r3
 800a750:	f7fd fc63 	bl	800801a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	025b      	lsls	r3, r3, #9
 800a766:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a768:	e044      	b.n	800a7f4 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	429a      	cmp	r2, r3
 800a772:	d01b      	beq.n	800a7ac <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	699a      	ldr	r2, [r3, #24]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d215      	bcs.n	800a7ac <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	7858      	ldrb	r0, [r3, #1]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a78a:	2301      	movs	r3, #1
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	f7fd fb63 	bl	8007e58 <disk_read>
 800a792:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a794:	2b00      	cmp	r3, #0
 800a796:	d009      	beq.n	800a7ac <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	755a      	strb	r2, [r3, #21]
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd fccd 	bl	8008142 <unlock_fs>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e053      	b.n	800a854 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ba:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a7c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d901      	bls.n	800a7cc <f_write+0x2b8>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7da:	4413      	add	r3, r2
 800a7dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7de:	69f9      	ldr	r1, [r7, #28]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd fc1a 	bl	800801a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a7f4:	69fa      	ldr	r2, [r7, #28]
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f8:	4413      	add	r3, r2
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	699a      	ldr	r2, [r3, #24]
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	441a      	add	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	619a      	str	r2, [r3, #24]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	bf38      	it	cc
 800a814:	461a      	movcc	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a820:	441a      	add	r2, r3
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f47f aeb6 	bne.w	800a5a2 <f_write+0x8e>
 800a836:	e000      	b.n	800a83a <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a838:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	b2da      	uxtb	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2100      	movs	r1, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd fc78 	bl	8008142 <unlock_fs>
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3730      	adds	r7, #48	@ 0x30
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f107 0208 	add.w	r2, r7, #8
 800a86a:	4611      	mov	r1, r2
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff fbcf 	bl	800a010 <validate>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d16d      	bne.n	800a958 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7d1b      	ldrb	r3, [r3, #20]
 800a880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a884:	2b00      	cmp	r3, #0
 800a886:	d067      	beq.n	800a958 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7d1b      	ldrb	r3, [r3, #20]
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da1a      	bge.n	800a8c8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	7858      	ldrb	r0, [r3, #1]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1a      	ldr	r2, [r3, #32]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f7fd faf9 	bl	8007e98 <disk_write>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d006      	beq.n	800a8ba <f_sync+0x5e>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fd fc46 	bl	8008142 <unlock_fs>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e055      	b.n	800a966 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7d1b      	ldrb	r3, [r3, #20]
 800a8be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a8c8:	f7fd f85a 	bl	8007980 <get_fattime>
 800a8cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	f7fd fdfe 	bl	80084d8 <move_window>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d138      	bne.n	800a958 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	330b      	adds	r3, #11
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	330b      	adds	r3, #11
 800a8f6:	f042 0220 	orr.w	r2, r2, #32
 800a8fa:	b2d2      	uxtb	r2, r2
 800a8fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	461a      	mov	r2, r3
 800a908:	68f9      	ldr	r1, [r7, #12]
 800a90a:	f7fe fb08 	bl	8008f1e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f103 021c 	add.w	r2, r3, #28
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fd fb51 	bl	8007fc2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3316      	adds	r3, #22
 800a924:	6939      	ldr	r1, [r7, #16]
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd fb4b 	bl	8007fc2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3312      	adds	r3, #18
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd fb2a 	bl	8007f8c <st_word>
					fs->wflag = 1;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2201      	movs	r2, #1
 800a93c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4618      	mov	r0, r3
 800a942:	f7fd fdf7 	bl	8008534 <sync_fs>
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7d1b      	ldrb	r3, [r3, #20]
 800a94e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a952:	b2da      	uxtb	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	7dfa      	ldrb	r2, [r7, #23]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd fbef 	bl	8008142 <unlock_fs>
 800a964:	7dfb      	ldrb	r3, [r7, #23]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff ff70 	bl	800a85c <f_sync>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d11d      	bne.n	800a9c2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f107 0208 	add.w	r2, r7, #8
 800a98c:	4611      	mov	r1, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff fb3e 	bl	800a010 <validate>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d111      	bne.n	800a9c2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fd fcf4 	bl	8008390 <dec_lock>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fd fbc0 	bl	8008142 <unlock_fs>
#endif
		}
	}
	return res;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800a9e4:	7a5b      	ldrb	r3, [r3, #9]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d131      	bne.n	800aa50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a9ec:	4b1c      	ldr	r3, [pc, #112]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800a9ee:	7a5b      	ldrb	r3, [r3, #9]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a9fa:	4b19      	ldr	r3, [pc, #100]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800a9fc:	7a5b      	ldrb	r3, [r3, #9]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	4a17      	ldr	r2, [pc, #92]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa0a:	4b15      	ldr	r3, [pc, #84]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800aa0c:	7a5b      	ldrb	r3, [r3, #9]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	4b13      	ldr	r3, [pc, #76]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800aa14:	4413      	add	r3, r2
 800aa16:	79fa      	ldrb	r2, [r7, #7]
 800aa18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aa1a:	4b11      	ldr	r3, [pc, #68]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800aa1c:	7a5b      	ldrb	r3, [r3, #9]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	b2d1      	uxtb	r1, r2
 800aa24:	4a0e      	ldr	r2, [pc, #56]	@ (800aa60 <FATFS_LinkDriverEx+0x94>)
 800aa26:	7251      	strb	r1, [r2, #9]
 800aa28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aa2a:	7dbb      	ldrb	r3, [r7, #22]
 800aa2c:	3330      	adds	r3, #48	@ 0x30
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	3301      	adds	r3, #1
 800aa38:	223a      	movs	r2, #58	@ 0x3a
 800aa3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	3302      	adds	r3, #2
 800aa40:	222f      	movs	r2, #47	@ 0x2f
 800aa42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	3303      	adds	r3, #3
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	2000073c 	.word	0x2000073c

0800aa64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff ffaa 	bl	800a9cc <FATFS_LinkDriverEx>
 800aa78:	4603      	mov	r3, r0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aa90:	88fb      	ldrh	r3, [r7, #6]
 800aa92:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa94:	d802      	bhi.n	800aa9c <ff_convert+0x18>
		c = chr;
 800aa96:	88fb      	ldrh	r3, [r7, #6]
 800aa98:	81fb      	strh	r3, [r7, #14]
 800aa9a:	e025      	b.n	800aae8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aaa2:	88fb      	ldrh	r3, [r7, #6]
 800aaa4:	2bff      	cmp	r3, #255	@ 0xff
 800aaa6:	d805      	bhi.n	800aab4 <ff_convert+0x30>
 800aaa8:	88fb      	ldrh	r3, [r7, #6]
 800aaaa:	3b80      	subs	r3, #128	@ 0x80
 800aaac:	4a12      	ldr	r2, [pc, #72]	@ (800aaf8 <ff_convert+0x74>)
 800aaae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aab2:	e000      	b.n	800aab6 <ff_convert+0x32>
 800aab4:	2300      	movs	r3, #0
 800aab6:	81fb      	strh	r3, [r7, #14]
 800aab8:	e016      	b.n	800aae8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aaba:	2300      	movs	r3, #0
 800aabc:	81fb      	strh	r3, [r7, #14]
 800aabe:	e009      	b.n	800aad4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	4a0d      	ldr	r2, [pc, #52]	@ (800aaf8 <ff_convert+0x74>)
 800aac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac8:	88fa      	ldrh	r2, [r7, #6]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d006      	beq.n	800aadc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aace:	89fb      	ldrh	r3, [r7, #14]
 800aad0:	3301      	adds	r3, #1
 800aad2:	81fb      	strh	r3, [r7, #14]
 800aad4:	89fb      	ldrh	r3, [r7, #14]
 800aad6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aad8:	d9f2      	bls.n	800aac0 <ff_convert+0x3c>
 800aada:	e000      	b.n	800aade <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aadc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aade:	89fb      	ldrh	r3, [r7, #14]
 800aae0:	3380      	adds	r3, #128	@ 0x80
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aae8:	89fb      	ldrh	r3, [r7, #14]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	080124e8 	.word	0x080124e8

0800aafc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ab06:	88fb      	ldrh	r3, [r7, #6]
 800ab08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab0c:	d201      	bcs.n	800ab12 <ff_wtoupper+0x16>
 800ab0e:	4b3e      	ldr	r3, [pc, #248]	@ (800ac08 <ff_wtoupper+0x10c>)
 800ab10:	e000      	b.n	800ab14 <ff_wtoupper+0x18>
 800ab12:	4b3e      	ldr	r3, [pc, #248]	@ (800ac0c <ff_wtoupper+0x110>)
 800ab14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	1c9a      	adds	r2, r3, #2
 800ab1a:	617a      	str	r2, [r7, #20]
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ab20:	8a7b      	ldrh	r3, [r7, #18]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d068      	beq.n	800abf8 <ff_wtoupper+0xfc>
 800ab26:	88fa      	ldrh	r2, [r7, #6]
 800ab28:	8a7b      	ldrh	r3, [r7, #18]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d364      	bcc.n	800abf8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	1c9a      	adds	r2, r3, #2
 800ab32:	617a      	str	r2, [r7, #20]
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	823b      	strh	r3, [r7, #16]
 800ab38:	8a3b      	ldrh	r3, [r7, #16]
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	81fb      	strh	r3, [r7, #14]
 800ab3e:	8a3b      	ldrh	r3, [r7, #16]
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	8a79      	ldrh	r1, [r7, #18]
 800ab48:	8a3b      	ldrh	r3, [r7, #16]
 800ab4a:	440b      	add	r3, r1
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	da49      	bge.n	800abe4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ab50:	89fb      	ldrh	r3, [r7, #14]
 800ab52:	2b08      	cmp	r3, #8
 800ab54:	d84f      	bhi.n	800abf6 <ff_wtoupper+0xfa>
 800ab56:	a201      	add	r2, pc, #4	@ (adr r2, 800ab5c <ff_wtoupper+0x60>)
 800ab58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5c:	0800ab81 	.word	0x0800ab81
 800ab60:	0800ab93 	.word	0x0800ab93
 800ab64:	0800aba9 	.word	0x0800aba9
 800ab68:	0800abb1 	.word	0x0800abb1
 800ab6c:	0800abb9 	.word	0x0800abb9
 800ab70:	0800abc1 	.word	0x0800abc1
 800ab74:	0800abc9 	.word	0x0800abc9
 800ab78:	0800abd1 	.word	0x0800abd1
 800ab7c:	0800abd9 	.word	0x0800abd9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ab80:	88fa      	ldrh	r2, [r7, #6]
 800ab82:	8a7b      	ldrh	r3, [r7, #18]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	80fb      	strh	r3, [r7, #6]
 800ab90:	e027      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ab92:	88fa      	ldrh	r2, [r7, #6]
 800ab94:	8a7b      	ldrh	r3, [r7, #18]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	88fa      	ldrh	r2, [r7, #6]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	80fb      	strh	r3, [r7, #6]
 800aba6:	e01c      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	3b10      	subs	r3, #16
 800abac:	80fb      	strh	r3, [r7, #6]
 800abae:	e018      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	3b20      	subs	r3, #32
 800abb4:	80fb      	strh	r3, [r7, #6]
 800abb6:	e014      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800abb8:	88fb      	ldrh	r3, [r7, #6]
 800abba:	3b30      	subs	r3, #48	@ 0x30
 800abbc:	80fb      	strh	r3, [r7, #6]
 800abbe:	e010      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	3b1a      	subs	r3, #26
 800abc4:	80fb      	strh	r3, [r7, #6]
 800abc6:	e00c      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800abc8:	88fb      	ldrh	r3, [r7, #6]
 800abca:	3308      	adds	r3, #8
 800abcc:	80fb      	strh	r3, [r7, #6]
 800abce:	e008      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800abd0:	88fb      	ldrh	r3, [r7, #6]
 800abd2:	3b50      	subs	r3, #80	@ 0x50
 800abd4:	80fb      	strh	r3, [r7, #6]
 800abd6:	e004      	b.n	800abe2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800abde:	80fb      	strh	r3, [r7, #6]
 800abe0:	bf00      	nop
			}
			break;
 800abe2:	e008      	b.n	800abf6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800abe4:	89fb      	ldrh	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d195      	bne.n	800ab16 <ff_wtoupper+0x1a>
 800abea:	8a3b      	ldrh	r3, [r7, #16]
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800abf4:	e78f      	b.n	800ab16 <ff_wtoupper+0x1a>
			break;
 800abf6:	bf00      	nop
	}

	return chr;
 800abf8:	88fb      	ldrh	r3, [r7, #6]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	080125e8 	.word	0x080125e8
 800ac0c:	080127dc 	.word	0x080127dc

0800ac10 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 f900 	bl	800ae30 <osSemaphoreCreate>
 800ac30:	4602      	mov	r2, r0
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	617b      	str	r3, [r7, #20]

    return ret;
 800ac46:	697b      	ldr	r3, [r7, #20]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f99f 	bl	800af9c <osSemaphoreDelete>
#endif
    return 1;
 800ac5e:	2301      	movs	r3, #1
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ac74:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f90b 	bl	800ae94 <osSemaphoreWait>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ac84:	2301      	movs	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f948 	bl	800af30 <osSemaphoreRelease>
#endif
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f002 fd83 	bl	800d7bc <pvPortMalloc>
 800acb6:	4603      	mov	r3, r0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 fe45 	bl	800d958 <vPortFree>
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	4603      	mov	r3, r0
 800acde:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ace4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ace8:	2b84      	cmp	r3, #132	@ 0x84
 800acea:	d005      	beq.n	800acf8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800acec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	3303      	adds	r3, #3
 800acf6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800acf8:	68fb      	ldr	r3, [r7, #12]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad0c:	f3ef 8305 	mrs	r3, IPSR
 800ad10:	607b      	str	r3, [r7, #4]
  return(result);
 800ad12:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bf14      	ite	ne
 800ad18:	2301      	movne	r3, #1
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ad2e:	f001 fca3 	bl	800c678 <vTaskStartScheduler>
  
  return osOK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ad3c:	f002 f8c8 	bl	800ced0 <xTaskGetSchedulerState>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d101      	bne.n	800ad4a <osKernelRunning+0x12>
    return 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e000      	b.n	800ad4c <osKernelRunning+0x14>
  else
    return 1;
 800ad4a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ad54:	f7ff ffd7 	bl	800ad06 <inHandlerMode>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ad5e:	f001 fda9 	bl	800c8b4 <xTaskGetTickCountFromISR>
 800ad62:	4603      	mov	r3, r0
 800ad64:	e002      	b.n	800ad6c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ad66:	f001 fd95 	bl	800c894 <xTaskGetTickCount>
 800ad6a:	4603      	mov	r3, r0
  }
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad72:	b089      	sub	sp, #36	@ 0x24
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d020      	beq.n	800adc4 <osThreadCreate+0x54>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d01c      	beq.n	800adc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685c      	ldr	r4, [r3, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691e      	ldr	r6, [r3, #16]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff ff9a 	bl	800acd6 <makeFreeRtosPriority>
 800ada2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adac:	9202      	str	r2, [sp, #8]
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	9100      	str	r1, [sp, #0]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	4632      	mov	r2, r6
 800adb6:	4629      	mov	r1, r5
 800adb8:	4620      	mov	r0, r4
 800adba:	f001 f9fb 	bl	800c1b4 <xTaskCreateStatic>
 800adbe:	4603      	mov	r3, r0
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	e01c      	b.n	800adfe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685c      	ldr	r4, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800add0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800add8:	4618      	mov	r0, r3
 800adda:	f7ff ff7c 	bl	800acd6 <makeFreeRtosPriority>
 800adde:	4602      	mov	r2, r0
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	9200      	str	r2, [sp, #0]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	4632      	mov	r2, r6
 800adec:	4629      	mov	r1, r5
 800adee:	4620      	mov	r0, r4
 800adf0:	f001 fa40 	bl	800c274 <xTaskCreate>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d001      	beq.n	800adfe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e000      	b.n	800ae00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <osDelay+0x16>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	e000      	b.n	800ae20 <osDelay+0x18>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 fb5f 	bl	800c4e4 <vTaskDelay>
  
  return osOK;
 800ae26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00f      	beq.n	800ae62 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d10a      	bne.n	800ae5e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2203      	movs	r2, #3
 800ae4e:	9200      	str	r2, [sp, #0]
 800ae50:	2200      	movs	r2, #0
 800ae52:	2100      	movs	r1, #0
 800ae54:	2001      	movs	r0, #1
 800ae56:	f000 fabb 	bl	800b3d0 <xQueueGenericCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e016      	b.n	800ae8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e014      	b.n	800ae8c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d110      	bne.n	800ae8a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ae68:	2203      	movs	r2, #3
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	2001      	movs	r0, #1
 800ae6e:	f000 fb2c 	bl	800b4ca <xQueueGenericCreate>
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d005      	beq.n	800ae86 <osSemaphoreCreate+0x56>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fb7d 	bl	800b580 <xQueueGenericSend>
      return sema;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	e000      	b.n	800ae8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ae8a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <osSemaphoreWait+0x18>
    return osErrorParameter;
 800aea8:	2380      	movs	r3, #128	@ 0x80
 800aeaa:	e03a      	b.n	800af22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d103      	bne.n	800aec0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e009      	b.n	800aed4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d006      	beq.n	800aed4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <osSemaphoreWait+0x40>
      ticks = 1;
 800aed0:	2301      	movs	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aed4:	f7ff ff17 	bl	800ad06 <inHandlerMode>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d017      	beq.n	800af0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	461a      	mov	r2, r3
 800aee4:	2100      	movs	r1, #0
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 ff6c 	bl	800bdc4 <xQueueReceiveFromISR>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d001      	beq.n	800aef6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800aef2:	23ff      	movs	r3, #255	@ 0xff
 800aef4:	e015      	b.n	800af22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d011      	beq.n	800af20 <osSemaphoreWait+0x8c>
 800aefc:	4b0b      	ldr	r3, [pc, #44]	@ (800af2c <osSemaphoreWait+0x98>)
 800aefe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	e008      	b.n	800af20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800af0e:	68f9      	ldr	r1, [r7, #12]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fe47 	bl	800bba4 <xQueueSemaphoreTake>
 800af16:	4603      	mov	r3, r0
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d001      	beq.n	800af20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800af1c:	23ff      	movs	r3, #255	@ 0xff
 800af1e:	e000      	b.n	800af22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800af40:	f7ff fee1 	bl	800ad06 <inHandlerMode>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fcb5 	bl	800b8c0 <xQueueGiveFromISR>
 800af56:	4603      	mov	r3, r0
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d001      	beq.n	800af60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800af5c:	23ff      	movs	r3, #255	@ 0xff
 800af5e:	e017      	b.n	800af90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d013      	beq.n	800af8e <osSemaphoreRelease+0x5e>
 800af66:	4b0c      	ldr	r3, [pc, #48]	@ (800af98 <osSemaphoreRelease+0x68>)
 800af68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	e00a      	b.n	800af8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800af78:	2300      	movs	r3, #0
 800af7a:	2200      	movs	r2, #0
 800af7c:	2100      	movs	r1, #0
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fafe 	bl	800b580 <xQueueGenericSend>
 800af84:	4603      	mov	r3, r0
 800af86:	2b01      	cmp	r3, #1
 800af88:	d001      	beq.n	800af8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800af8a:	23ff      	movs	r3, #255	@ 0xff
 800af8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800af8e:	68fb      	ldr	r3, [r7, #12]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800afa4:	f7ff feaf 	bl	800ad06 <inHandlerMode>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800afae:	2382      	movs	r3, #130	@ 0x82
 800afb0:	e003      	b.n	800afba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 ff88 	bl	800bec8 <vQueueDelete>

  return osOK; 
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800afc2:	b590      	push	{r4, r7, lr}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af02      	add	r7, sp, #8
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d011      	beq.n	800aff8 <osMessageCreate+0x36>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00d      	beq.n	800aff8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6859      	ldr	r1, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2400      	movs	r4, #0
 800afee:	9400      	str	r4, [sp, #0]
 800aff0:	f000 f9ee 	bl	800b3d0 <xQueueGenericCreateStatic>
 800aff4:	4603      	mov	r3, r0
 800aff6:	e008      	b.n	800b00a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	4619      	mov	r1, r3
 800b004:	f000 fa61 	bl	800b4ca <xQueueGenericCreate>
 800b008:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd90      	pop	{r4, r7, pc}
	...

0800b014 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b020:	2300      	movs	r3, #0
 800b022:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <osMessagePut+0x1e>
    ticks = 1;
 800b02e:	2301      	movs	r3, #1
 800b030:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b032:	f7ff fe68 	bl	800ad06 <inHandlerMode>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d018      	beq.n	800b06e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b03c:	f107 0210 	add.w	r2, r7, #16
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	2300      	movs	r3, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fb9c 	bl	800b784 <xQueueGenericSendFromISR>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d001      	beq.n	800b056 <osMessagePut+0x42>
      return osErrorOS;
 800b052:	23ff      	movs	r3, #255	@ 0xff
 800b054:	e018      	b.n	800b088 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d014      	beq.n	800b086 <osMessagePut+0x72>
 800b05c:	4b0c      	ldr	r3, [pc, #48]	@ (800b090 <osMessagePut+0x7c>)
 800b05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	e00b      	b.n	800b086 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b06e:	f107 0108 	add.w	r1, r7, #8
 800b072:	2300      	movs	r3, #0
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 fa82 	bl	800b580 <xQueueGenericSend>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d001      	beq.n	800b086 <osMessagePut+0x72>
      return osErrorOS;
 800b082:	23ff      	movs	r3, #255	@ 0xff
 800b084:	e000      	b.n	800b088 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b094:	b590      	push	{r4, r7, lr}
 800b096:	b08b      	sub	sp, #44	@ 0x2c
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b0ae:	2380      	movs	r3, #128	@ 0x80
 800b0b0:	617b      	str	r3, [r7, #20]
    return event;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	461c      	mov	r4, r3
 800b0b6:	f107 0314 	add.w	r3, r7, #20
 800b0ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b0c2:	e054      	b.n	800b16e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d2:	d103      	bne.n	800b0dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0da:	e009      	b.n	800b0f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d006      	beq.n	800b0f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <osMessageGet+0x5c>
      ticks = 1;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b0f0:	f7ff fe09 	bl	800ad06 <inHandlerMode>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01c      	beq.n	800b134 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b0fa:	f107 0220 	add.w	r2, r7, #32
 800b0fe:	f107 0314 	add.w	r3, r7, #20
 800b102:	3304      	adds	r3, #4
 800b104:	4619      	mov	r1, r3
 800b106:	68b8      	ldr	r0, [r7, #8]
 800b108:	f000 fe5c 	bl	800bdc4 <xQueueReceiveFromISR>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d102      	bne.n	800b118 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b112:	2310      	movs	r3, #16
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	e001      	b.n	800b11c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01d      	beq.n	800b15e <osMessageGet+0xca>
 800b122:	4b15      	ldr	r3, [pc, #84]	@ (800b178 <osMessageGet+0xe4>)
 800b124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	e014      	b.n	800b15e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	3304      	adds	r3, #4
 800b13a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b13c:	4619      	mov	r1, r3
 800b13e:	68b8      	ldr	r0, [r7, #8]
 800b140:	f000 fc4e 	bl	800b9e0 <xQueueReceive>
 800b144:	4603      	mov	r3, r0
 800b146:	2b01      	cmp	r3, #1
 800b148:	d102      	bne.n	800b150 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b14a:	2310      	movs	r3, #16
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	e006      	b.n	800b15e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <osMessageGet+0xc6>
 800b156:	2300      	movs	r3, #0
 800b158:	e000      	b.n	800b15c <osMessageGet+0xc8>
 800b15a:	2340      	movs	r3, #64	@ 0x40
 800b15c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	461c      	mov	r4, r3
 800b162:	f107 0314 	add.w	r3, r7, #20
 800b166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	372c      	adds	r7, #44	@ 0x2c
 800b172:	46bd      	mov	sp, r7
 800b174:	bd90      	pop	{r4, r7, pc}
 800b176:	bf00      	nop
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 f9e3 	bl	800c550 <vTaskSuspend>
  
  return osOK;
 800b18a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f103 0208 	add.w	r2, r3, #8
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f103 0208 	add.w	r2, r3, #8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f103 0208 	add.w	r2, r3, #8
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1e2:	bf00      	nop
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689a      	ldr	r2, [r3, #8]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	601a      	str	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b236:	b480      	push	{r7}
 800b238:	b085      	sub	sp, #20
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24c:	d103      	bne.n	800b256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e00c      	b.n	800b270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3308      	adds	r3, #8
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e002      	b.n	800b264 <vListInsert+0x2e>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d2f6      	bcs.n	800b25e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685a      	ldr	r2, [r3, #4]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	6892      	ldr	r2, [r2, #8]
 800b2be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	6852      	ldr	r2, [r2, #4]
 800b2c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d103      	bne.n	800b2dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10b      	bne.n	800b328 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b322:	bf00      	nop
 800b324:	bf00      	nop
 800b326:	e7fd      	b.n	800b324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b328:	f002 f926 	bl	800d578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b334:	68f9      	ldr	r1, [r7, #12]
 800b336:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b338:	fb01 f303 	mul.w	r3, r1, r3
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b358:	3b01      	subs	r3, #1
 800b35a:	68f9      	ldr	r1, [r7, #12]
 800b35c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b35e:	fb01 f303 	mul.w	r3, r1, r3
 800b362:	441a      	add	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	22ff      	movs	r2, #255	@ 0xff
 800b36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	22ff      	movs	r2, #255	@ 0xff
 800b374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d114      	bne.n	800b3a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d01a      	beq.n	800b3bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3310      	adds	r3, #16
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 fbe0 	bl	800cb50 <xTaskRemoveFromEventList>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d012      	beq.n	800b3bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <xQueueGenericReset+0xd0>)
 800b398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	e009      	b.n	800b3bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3310      	adds	r3, #16
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff fef1 	bl	800b194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3324      	adds	r3, #36	@ 0x24
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7ff feec 	bl	800b194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3bc:	f002 f90e 	bl	800d5dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3c0:	2301      	movs	r3, #1
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	e000ed04 	.word	0xe000ed04

0800b3d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08e      	sub	sp, #56	@ 0x38
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10b      	bne.n	800b3fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b3f6:	bf00      	nop
 800b3f8:	bf00      	nop
 800b3fa:	e7fd      	b.n	800b3f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10b      	bne.n	800b41a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	e7fd      	b.n	800b416 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <xQueueGenericCreateStatic+0x56>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <xQueueGenericCreateStatic+0x5a>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <xQueueGenericCreateStatic+0x5c>
 800b42a:	2300      	movs	r3, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	623b      	str	r3, [r7, #32]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <xQueueGenericCreateStatic+0x84>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <xQueueGenericCreateStatic+0x88>
 800b454:	2301      	movs	r3, #1
 800b456:	e000      	b.n	800b45a <xQueueGenericCreateStatic+0x8a>
 800b458:	2300      	movs	r3, #0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10b      	bne.n	800b476 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	61fb      	str	r3, [r7, #28]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b476:	2348      	movs	r3, #72	@ 0x48
 800b478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b48      	cmp	r3, #72	@ 0x48
 800b47e:	d00b      	beq.n	800b498 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	61bb      	str	r3, [r7, #24]
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	e7fd      	b.n	800b494 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b498:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00d      	beq.n	800b4c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	68b9      	ldr	r1, [r7, #8]
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f840 	bl	800b540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3730      	adds	r7, #48	@ 0x30
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b08a      	sub	sp, #40	@ 0x28
 800b4ce:	af02      	add	r7, sp, #8
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	613b      	str	r3, [r7, #16]
}
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	fb02 f303 	mul.w	r3, r2, r3
 800b4fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	3348      	adds	r3, #72	@ 0x48
 800b504:	4618      	mov	r0, r3
 800b506:	f002 f959 	bl	800d7bc <pvPortMalloc>
 800b50a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d011      	beq.n	800b536 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	3348      	adds	r3, #72	@ 0x48
 800b51a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b524:	79fa      	ldrb	r2, [r7, #7]
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4613      	mov	r3, r2
 800b52c:	697a      	ldr	r2, [r7, #20]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f805 	bl	800b540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b536:	69bb      	ldr	r3, [r7, #24]
	}
 800b538:	4618      	mov	r0, r3
 800b53a:	3720      	adds	r7, #32
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d103      	bne.n	800b55c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b56e:	2101      	movs	r1, #1
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f7ff fec3 	bl	800b2fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08e      	sub	sp, #56	@ 0x38
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
 800b58c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b58e:	2300      	movs	r3, #0
 800b590:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <xQueueGenericSend+0x34>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b5ae:	bf00      	nop
 800b5b0:	bf00      	nop
 800b5b2:	e7fd      	b.n	800b5b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d103      	bne.n	800b5c2 <xQueueGenericSend+0x42>
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <xQueueGenericSend+0x46>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <xQueueGenericSend+0x48>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10b      	bne.n	800b5e4 <xQueueGenericSend+0x64>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5de:	bf00      	nop
 800b5e0:	bf00      	nop
 800b5e2:	e7fd      	b.n	800b5e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d103      	bne.n	800b5f2 <xQueueGenericSend+0x72>
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d101      	bne.n	800b5f6 <xQueueGenericSend+0x76>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <xQueueGenericSend+0x78>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10b      	bne.n	800b614 <xQueueGenericSend+0x94>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	623b      	str	r3, [r7, #32]
}
 800b60e:	bf00      	nop
 800b610:	bf00      	nop
 800b612:	e7fd      	b.n	800b610 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b614:	f001 fc5c 	bl	800ced0 <xTaskGetSchedulerState>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <xQueueGenericSend+0xa4>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <xQueueGenericSend+0xa8>
 800b624:	2301      	movs	r3, #1
 800b626:	e000      	b.n	800b62a <xQueueGenericSend+0xaa>
 800b628:	2300      	movs	r3, #0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10b      	bne.n	800b646 <xQueueGenericSend+0xc6>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	61fb      	str	r3, [r7, #28]
}
 800b640:	bf00      	nop
 800b642:	bf00      	nop
 800b644:	e7fd      	b.n	800b642 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b646:	f001 ff97 	bl	800d578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b652:	429a      	cmp	r2, r3
 800b654:	d302      	bcc.n	800b65c <xQueueGenericSend+0xdc>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d129      	bne.n	800b6b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b662:	f000 fc6d 	bl	800bf40 <prvCopyDataToQueue>
 800b666:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d010      	beq.n	800b692 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	3324      	adds	r3, #36	@ 0x24
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fa6b 	bl	800cb50 <xTaskRemoveFromEventList>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d013      	beq.n	800b6a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b680:	4b3f      	ldr	r3, [pc, #252]	@ (800b780 <xQueueGenericSend+0x200>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	e00a      	b.n	800b6a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d007      	beq.n	800b6a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b698:	4b39      	ldr	r3, [pc, #228]	@ (800b780 <xQueueGenericSend+0x200>)
 800b69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6a8:	f001 ff98 	bl	800d5dc <vPortExitCritical>
				return pdPASS;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e063      	b.n	800b778 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d103      	bne.n	800b6be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6b6:	f001 ff91 	bl	800d5dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e05c      	b.n	800b778 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c4:	f107 0314 	add.w	r3, r7, #20
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 faa5 	bl	800cc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d2:	f001 ff83 	bl	800d5dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6d6:	f001 f831 	bl	800c73c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6da:	f001 ff4d 	bl	800d578 <vPortEnterCritical>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6e4:	b25b      	sxtb	r3, r3
 800b6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ea:	d103      	bne.n	800b6f4 <xQueueGenericSend+0x174>
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6fa:	b25b      	sxtb	r3, r3
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b700:	d103      	bne.n	800b70a <xQueueGenericSend+0x18a>
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b70a:	f001 ff67 	bl	800d5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b70e:	1d3a      	adds	r2, r7, #4
 800b710:	f107 0314 	add.w	r3, r7, #20
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f001 fa94 	bl	800cc44 <xTaskCheckForTimeOut>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d124      	bne.n	800b76c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b724:	f000 fd04 	bl	800c130 <prvIsQueueFull>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d018      	beq.n	800b760 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b730:	3310      	adds	r3, #16
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4611      	mov	r1, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f001 f9e4 	bl	800cb04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b73c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b73e:	f000 fc8f 	bl	800c060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b742:	f001 f809 	bl	800c758 <xTaskResumeAll>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f47f af7c 	bne.w	800b646 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b74e:	4b0c      	ldr	r3, [pc, #48]	@ (800b780 <xQueueGenericSend+0x200>)
 800b750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	e772      	b.n	800b646 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b762:	f000 fc7d 	bl	800c060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b766:	f000 fff7 	bl	800c758 <xTaskResumeAll>
 800b76a:	e76c      	b.n	800b646 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b76e:	f000 fc77 	bl	800c060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b772:	f000 fff1 	bl	800c758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3738      	adds	r7, #56	@ 0x38
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b090      	sub	sp, #64	@ 0x40
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10b      	bne.n	800b7b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	e7fd      	b.n	800b7b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d103      	bne.n	800b7c2 <xQueueGenericSendFromISR+0x3e>
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <xQueueGenericSendFromISR+0x42>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <xQueueGenericSendFromISR+0x44>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	e7fd      	b.n	800b7e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d103      	bne.n	800b7f2 <xQueueGenericSendFromISR+0x6e>
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d101      	bne.n	800b7f6 <xQueueGenericSendFromISR+0x72>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueGenericSendFromISR+0x74>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	623b      	str	r3, [r7, #32]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b814:	f001 ff90 	bl	800d738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b818:	f3ef 8211 	mrs	r2, BASEPRI
 800b81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	61fa      	str	r2, [r7, #28]
 800b82e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b830:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b832:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d302      	bcc.n	800b846 <xQueueGenericSendFromISR+0xc2>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d12f      	bne.n	800b8a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b84c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b854:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b85c:	f000 fb70 	bl	800bf40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b860:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b868:	d112      	bne.n	800b890 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d016      	beq.n	800b8a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	3324      	adds	r3, #36	@ 0x24
 800b876:	4618      	mov	r0, r3
 800b878:	f001 f96a 	bl	800cb50 <xTaskRemoveFromEventList>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	e007      	b.n	800b8a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b890:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b894:	3301      	adds	r3, #1
 800b896:	b2db      	uxtb	r3, r3
 800b898:	b25a      	sxtb	r2, r3
 800b89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b8a4:	e001      	b.n	800b8aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3740      	adds	r7, #64	@ 0x40
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b08e      	sub	sp, #56	@ 0x38
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	623b      	str	r3, [r7, #32]
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	e7fd      	b.n	800b8e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	61fb      	str	r3, [r7, #28]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d103      	bne.n	800b91c <xQueueGiveFromISR+0x5c>
 800b914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <xQueueGiveFromISR+0x60>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e000      	b.n	800b922 <xQueueGiveFromISR+0x62>
 800b920:	2300      	movs	r3, #0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10b      	bne.n	800b93e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	61bb      	str	r3, [r7, #24]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b93e:	f001 fefb 	bl	800d738 <vPortValidateInterruptPriority>
	__asm volatile
 800b942:	f3ef 8211 	mrs	r2, BASEPRI
 800b946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	617a      	str	r2, [r7, #20]
 800b958:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b95a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b962:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d22b      	bcs.n	800b9c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b980:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d112      	bne.n	800b9b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d016      	beq.n	800b9c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	3324      	adds	r3, #36	@ 0x24
 800b996:	4618      	mov	r0, r3
 800b998:	f001 f8da 	bl	800cb50 <xTaskRemoveFromEventList>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00e      	beq.n	800b9c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	e007      	b.n	800b9c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	b25a      	sxtb	r2, r3
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c4:	e001      	b.n	800b9ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f383 8811 	msr	BASEPRI, r3
}
 800b9d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3738      	adds	r7, #56	@ 0x38
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08c      	sub	sp, #48	@ 0x30
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10b      	bne.n	800ba12 <xQueueReceive+0x32>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	623b      	str	r3, [r7, #32]
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	e7fd      	b.n	800ba0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <xQueueReceive+0x40>
 800ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <xQueueReceive+0x44>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <xQueueReceive+0x46>
 800ba24:	2300      	movs	r3, #0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10b      	bne.n	800ba42 <xQueueReceive+0x62>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	61fb      	str	r3, [r7, #28]
}
 800ba3c:	bf00      	nop
 800ba3e:	bf00      	nop
 800ba40:	e7fd      	b.n	800ba3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba42:	f001 fa45 	bl	800ced0 <xTaskGetSchedulerState>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <xQueueReceive+0x72>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <xQueueReceive+0x76>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <xQueueReceive+0x78>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10b      	bne.n	800ba74 <xQueueReceive+0x94>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	61bb      	str	r3, [r7, #24]
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	e7fd      	b.n	800ba70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba74:	f001 fd80 	bl	800d578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d01f      	beq.n	800bac4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba88:	f000 fac4 	bl	800c014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	1e5a      	subs	r2, r3, #1
 800ba90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00f      	beq.n	800babc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9e:	3310      	adds	r3, #16
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 f855 	bl	800cb50 <xTaskRemoveFromEventList>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d007      	beq.n	800babc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baac:	4b3c      	ldr	r3, [pc, #240]	@ (800bba0 <xQueueReceive+0x1c0>)
 800baae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800babc:	f001 fd8e 	bl	800d5dc <vPortExitCritical>
				return pdPASS;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e069      	b.n	800bb98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800baca:	f001 fd87 	bl	800d5dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bace:	2300      	movs	r3, #0
 800bad0:	e062      	b.n	800bb98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d106      	bne.n	800bae6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bad8:	f107 0310 	add.w	r3, r7, #16
 800badc:	4618      	mov	r0, r3
 800bade:	f001 f89b 	bl	800cc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bae6:	f001 fd79 	bl	800d5dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baea:	f000 fe27 	bl	800c73c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baee:	f001 fd43 	bl	800d578 <vPortEnterCritical>
 800baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800baf8:	b25b      	sxtb	r3, r3
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d103      	bne.n	800bb08 <xQueueReceive+0x128>
 800bb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb0e:	b25b      	sxtb	r3, r3
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d103      	bne.n	800bb1e <xQueueReceive+0x13e>
 800bb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb1e:	f001 fd5d 	bl	800d5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb22:	1d3a      	adds	r2, r7, #4
 800bb24:	f107 0310 	add.w	r3, r7, #16
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 f88a 	bl	800cc44 <xTaskCheckForTimeOut>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d123      	bne.n	800bb7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb38:	f000 fae4 	bl	800c104 <prvIsQueueEmpty>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d017      	beq.n	800bb72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	3324      	adds	r3, #36	@ 0x24
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 ffda 	bl	800cb04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb52:	f000 fa85 	bl	800c060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb56:	f000 fdff 	bl	800c758 <xTaskResumeAll>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d189      	bne.n	800ba74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bb60:	4b0f      	ldr	r3, [pc, #60]	@ (800bba0 <xQueueReceive+0x1c0>)
 800bb62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	e780      	b.n	800ba74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb74:	f000 fa74 	bl	800c060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb78:	f000 fdee 	bl	800c758 <xTaskResumeAll>
 800bb7c:	e77a      	b.n	800ba74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb80:	f000 fa6e 	bl	800c060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb84:	f000 fde8 	bl	800c758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb8a:	f000 fabb 	bl	800c104 <prvIsQueueEmpty>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f43f af6f 	beq.w	800ba74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3730      	adds	r7, #48	@ 0x30
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	e000ed04 	.word	0xe000ed04

0800bba4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08e      	sub	sp, #56	@ 0x38
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10b      	bne.n	800bbd8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	623b      	str	r3, [r7, #32]
}
 800bbd2:	bf00      	nop
 800bbd4:	bf00      	nop
 800bbd6:	e7fd      	b.n	800bbd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	61fb      	str	r3, [r7, #28]
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	e7fd      	b.n	800bbf4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbf8:	f001 f96a 	bl	800ced0 <xTaskGetSchedulerState>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <xQueueSemaphoreTake+0x64>
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <xQueueSemaphoreTake+0x68>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e000      	b.n	800bc0e <xQueueSemaphoreTake+0x6a>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10b      	bne.n	800bc2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	61bb      	str	r3, [r7, #24]
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	e7fd      	b.n	800bc26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc2a:	f001 fca5 	bl	800d578 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d024      	beq.n	800bc84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	1e5a      	subs	r2, r3, #1
 800bc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d104      	bne.n	800bc54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc4a:	f001 faed 	bl	800d228 <pvTaskIncrementMutexHeldCount>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00f      	beq.n	800bc7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	3310      	adds	r3, #16
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 ff75 	bl	800cb50 <xTaskRemoveFromEventList>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d007      	beq.n	800bc7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc6c:	4b54      	ldr	r3, [pc, #336]	@ (800bdc0 <xQueueSemaphoreTake+0x21c>)
 800bc6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc7c:	f001 fcae 	bl	800d5dc <vPortExitCritical>
				return pdPASS;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e098      	b.n	800bdb6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d112      	bne.n	800bcb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	617b      	str	r3, [r7, #20]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bca8:	f001 fc98 	bl	800d5dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcac:	2300      	movs	r3, #0
 800bcae:	e082      	b.n	800bdb6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcb6:	f107 030c 	add.w	r3, r7, #12
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 ffac 	bl	800cc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcc4:	f001 fc8a 	bl	800d5dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcc8:	f000 fd38 	bl	800c73c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bccc:	f001 fc54 	bl	800d578 <vPortEnterCritical>
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcd6:	b25b      	sxtb	r3, r3
 800bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcdc:	d103      	bne.n	800bce6 <xQueueSemaphoreTake+0x142>
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcec:	b25b      	sxtb	r3, r3
 800bcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf2:	d103      	bne.n	800bcfc <xQueueSemaphoreTake+0x158>
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcfc:	f001 fc6e 	bl	800d5dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd00:	463a      	mov	r2, r7
 800bd02:	f107 030c 	add.w	r3, r7, #12
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 ff9b 	bl	800cc44 <xTaskCheckForTimeOut>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d132      	bne.n	800bd7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd16:	f000 f9f5 	bl	800c104 <prvIsQueueEmpty>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d026      	beq.n	800bd6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d109      	bne.n	800bd3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bd28:	f001 fc26 	bl	800d578 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f001 f8eb 	bl	800cf0c <xTaskPriorityInherit>
 800bd36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bd38:	f001 fc50 	bl	800d5dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	3324      	adds	r3, #36	@ 0x24
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fedd 	bl	800cb04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd4c:	f000 f988 	bl	800c060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd50:	f000 fd02 	bl	800c758 <xTaskResumeAll>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f47f af67 	bne.w	800bc2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bd5c:	4b18      	ldr	r3, [pc, #96]	@ (800bdc0 <xQueueSemaphoreTake+0x21c>)
 800bd5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	e75d      	b.n	800bc2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd70:	f000 f976 	bl	800c060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd74:	f000 fcf0 	bl	800c758 <xTaskResumeAll>
 800bd78:	e757      	b.n	800bc2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd7c:	f000 f970 	bl	800c060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd80:	f000 fcea 	bl	800c758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd86:	f000 f9bd 	bl	800c104 <prvIsQueueEmpty>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f43f af4c 	beq.w	800bc2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00d      	beq.n	800bdb4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bd98:	f001 fbee 	bl	800d578 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd9e:	f000 f8b7 	bl	800bf10 <prvGetDisinheritPriorityAfterTimeout>
 800bda2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f001 f9ac 	bl	800d108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bdb0:	f001 fc14 	bl	800d5dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3738      	adds	r7, #56	@ 0x38
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	e000ed04 	.word	0xe000ed04

0800bdc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08e      	sub	sp, #56	@ 0x38
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10b      	bne.n	800bdf2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	623b      	str	r3, [r7, #32]
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	e7fd      	b.n	800bdee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d103      	bne.n	800be00 <xQueueReceiveFromISR+0x3c>
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <xQueueReceiveFromISR+0x40>
 800be00:	2301      	movs	r3, #1
 800be02:	e000      	b.n	800be06 <xQueueReceiveFromISR+0x42>
 800be04:	2300      	movs	r3, #0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10b      	bne.n	800be22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	61fb      	str	r3, [r7, #28]
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	e7fd      	b.n	800be1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be22:	f001 fc89 	bl	800d738 <vPortValidateInterruptPriority>
	__asm volatile
 800be26:	f3ef 8211 	mrs	r2, BASEPRI
 800be2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	61ba      	str	r2, [r7, #24]
 800be3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d02f      	beq.n	800beae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be5c:	f000 f8da 	bl	800c014 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	1e5a      	subs	r2, r3, #1
 800be64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800be6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be70:	d112      	bne.n	800be98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d016      	beq.n	800bea8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	3310      	adds	r3, #16
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 fe66 	bl	800cb50 <xTaskRemoveFromEventList>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00e      	beq.n	800bea8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	e007      	b.n	800bea8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be9c:	3301      	adds	r3, #1
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	b25a      	sxtb	r2, r3
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bea8:	2301      	movs	r3, #1
 800beaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800beac:	e001      	b.n	800beb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800beae:	2300      	movs	r3, #0
 800beb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f383 8811 	msr	BASEPRI, r3
}
 800bebc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3738      	adds	r7, #56	@ 0x38
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <vQueueDelete+0x2a>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	60bb      	str	r3, [r7, #8]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f934 	bl	800c160 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d102      	bne.n	800bf08 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f001 fd28 	bl	800d958 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bf08:	bf00      	nop
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f1c3 0307 	rsb	r3, r3, #7
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	e001      	b.n	800bf32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf32:	68fb      	ldr	r3, [r7, #12]
	}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10d      	bne.n	800bf7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d14d      	bne.n	800c002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 f844 	bl	800cff8 <xTaskPriorityDisinherit>
 800bf70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	609a      	str	r2, [r3, #8]
 800bf78:	e043      	b.n	800c002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d119      	bne.n	800bfb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6858      	ldr	r0, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf88:	461a      	mov	r2, r3
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	f002 fe0f 	bl	800ebae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf98:	441a      	add	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d32b      	bcc.n	800c002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	605a      	str	r2, [r3, #4]
 800bfb2:	e026      	b.n	800c002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68d8      	ldr	r0, [r3, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	f002 fdf5 	bl	800ebae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfcc:	425b      	negs	r3, r3
 800bfce:	441a      	add	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d207      	bcs.n	800bff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe8:	425b      	negs	r3, r3
 800bfea:	441a      	add	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d105      	bne.n	800c002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	3b01      	subs	r3, #1
 800c000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c00a:	697b      	ldr	r3, [r7, #20]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c02e:	441a      	add	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d303      	bcc.n	800c048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68d9      	ldr	r1, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c050:	461a      	mov	r2, r3
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f002 fdab 	bl	800ebae <memcpy>
	}
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c068:	f001 fa86 	bl	800d578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c074:	e011      	b.n	800c09a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d012      	beq.n	800c0a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3324      	adds	r3, #36	@ 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fd64 	bl	800cb50 <xTaskRemoveFromEventList>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c08e:	f000 fe3d 	bl	800cd0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	3b01      	subs	r3, #1
 800c096:	b2db      	uxtb	r3, r3
 800c098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dce9      	bgt.n	800c076 <prvUnlockQueue+0x16>
 800c0a2:	e000      	b.n	800c0a6 <prvUnlockQueue+0x46>
					break;
 800c0a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	22ff      	movs	r2, #255	@ 0xff
 800c0aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c0ae:	f001 fa95 	bl	800d5dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0b2:	f001 fa61 	bl	800d578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0be:	e011      	b.n	800c0e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d012      	beq.n	800c0ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3310      	adds	r3, #16
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fd3f 	bl	800cb50 <xTaskRemoveFromEventList>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d001      	beq.n	800c0dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0d8:	f000 fe18 	bl	800cd0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dce9      	bgt.n	800c0c0 <prvUnlockQueue+0x60>
 800c0ec:	e000      	b.n	800c0f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	22ff      	movs	r2, #255	@ 0xff
 800c0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c0f8:	f001 fa70 	bl	800d5dc <vPortExitCritical>
}
 800c0fc:	bf00      	nop
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c10c:	f001 fa34 	bl	800d578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c114:	2b00      	cmp	r3, #0
 800c116:	d102      	bne.n	800c11e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c118:	2301      	movs	r3, #1
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	e001      	b.n	800c122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c122:	f001 fa5b 	bl	800d5dc <vPortExitCritical>

	return xReturn;
 800c126:	68fb      	ldr	r3, [r7, #12]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c138:	f001 fa1e 	bl	800d578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c144:	429a      	cmp	r2, r3
 800c146:	d102      	bne.n	800c14e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e001      	b.n	800c152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c152:	f001 fa43 	bl	800d5dc <vPortExitCritical>

	return xReturn;
 800c156:	68fb      	ldr	r3, [r7, #12]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	e016      	b.n	800c19c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c16e:	4a10      	ldr	r2, [pc, #64]	@ (800c1b0 <vQueueUnregisterQueue+0x50>)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4413      	add	r3, r2
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d10b      	bne.n	800c196 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c17e:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b0 <vQueueUnregisterQueue+0x50>)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2100      	movs	r1, #0
 800c184:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c188:	4a09      	ldr	r2, [pc, #36]	@ (800c1b0 <vQueueUnregisterQueue+0x50>)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	4413      	add	r3, r2
 800c190:	2200      	movs	r2, #0
 800c192:	605a      	str	r2, [r3, #4]
				break;
 800c194:	e006      	b.n	800c1a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b07      	cmp	r3, #7
 800c1a0:	d9e5      	bls.n	800c16e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20000748 	.word	0x20000748

0800c1b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	@ 0x38
 800c1b8:	af04      	add	r7, sp, #16
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10b      	bne.n	800c1e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	623b      	str	r3, [r7, #32]
}
 800c1da:	bf00      	nop
 800c1dc:	bf00      	nop
 800c1de:	e7fd      	b.n	800c1dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10b      	bne.n	800c1fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	61fb      	str	r3, [r7, #28]
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	e7fd      	b.n	800c1fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1fe:	2354      	movs	r3, #84	@ 0x54
 800c200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b54      	cmp	r3, #84	@ 0x54
 800c206:	d00b      	beq.n	800c220 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	61bb      	str	r3, [r7, #24]
}
 800c21a:	bf00      	nop
 800c21c:	bf00      	nop
 800c21e:	e7fd      	b.n	800c21c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d01e      	beq.n	800c266 <xTaskCreateStatic+0xb2>
 800c228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01b      	beq.n	800c266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c240:	2300      	movs	r3, #0
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	9302      	str	r3, [sp, #8]
 800c248:	f107 0314 	add.w	r3, r7, #20
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	68b9      	ldr	r1, [r7, #8]
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f000 f850 	bl	800c2fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c260:	f000 f8d6 	bl	800c410 <prvAddNewTaskToReadyList>
 800c264:	e001      	b.n	800c26a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c26a:	697b      	ldr	r3, [r7, #20]
	}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3728      	adds	r7, #40	@ 0x28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08c      	sub	sp, #48	@ 0x30
 800c278:	af04      	add	r7, sp, #16
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	603b      	str	r3, [r7, #0]
 800c280:	4613      	mov	r3, r2
 800c282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 fa97 	bl	800d7bc <pvPortMalloc>
 800c28e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00e      	beq.n	800c2b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c296:	2054      	movs	r0, #84	@ 0x54
 800c298:	f001 fa90 	bl	800d7bc <pvPortMalloc>
 800c29c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d003      	beq.n	800c2ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2aa:	e005      	b.n	800c2b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2ac:	6978      	ldr	r0, [r7, #20]
 800c2ae:	f001 fb53 	bl	800d958 <vPortFree>
 800c2b2:	e001      	b.n	800c2b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d017      	beq.n	800c2ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2c6:	88fa      	ldrh	r2, [r7, #6]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9303      	str	r3, [sp, #12]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	9302      	str	r3, [sp, #8]
 800c2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 f80e 	bl	800c2fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2e2:	69f8      	ldr	r0, [r7, #28]
 800c2e4:	f000 f894 	bl	800c410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	61bb      	str	r3, [r7, #24]
 800c2ec:	e002      	b.n	800c2f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
	}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3720      	adds	r7, #32
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b088      	sub	sp, #32
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	607a      	str	r2, [r7, #4]
 800c30a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c316:	3b01      	subs	r3, #1
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	f023 0307 	bic.w	r3, r3, #7
 800c324:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	f003 0307 	and.w	r3, r3, #7
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	617b      	str	r3, [r7, #20]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d01f      	beq.n	800c38e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c34e:	2300      	movs	r3, #0
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	e012      	b.n	800c37a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	7819      	ldrb	r1, [r3, #0]
 800c35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	4413      	add	r3, r2
 800c362:	3334      	adds	r3, #52	@ 0x34
 800c364:	460a      	mov	r2, r1
 800c366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	4413      	add	r3, r2
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d006      	beq.n	800c382 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	3301      	adds	r3, #1
 800c378:	61fb      	str	r3, [r7, #28]
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	2b0f      	cmp	r3, #15
 800c37e:	d9e9      	bls.n	800c354 <prvInitialiseNewTask+0x56>
 800c380:	e000      	b.n	800c384 <prvInitialiseNewTask+0x86>
			{
				break;
 800c382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c38c:	e003      	b.n	800c396 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c398:	2b06      	cmp	r3, #6
 800c39a:	d901      	bls.n	800c3a0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c39c:	2306      	movs	r3, #6
 800c39e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3aa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe ff0c 	bl	800b1d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	3318      	adds	r3, #24
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe ff07 	bl	800b1d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ce:	f1c3 0207 	rsb	r2, r3, #7
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3de:	2200      	movs	r2, #0
 800c3e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	68f9      	ldr	r1, [r7, #12]
 800c3ee:	69b8      	ldr	r0, [r7, #24]
 800c3f0:	f000 ff94 	bl	800d31c <pxPortInitialiseStack>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c406:	bf00      	nop
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c418:	f001 f8ae 	bl	800d578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c41c:	4b2a      	ldr	r3, [pc, #168]	@ (800c4c8 <prvAddNewTaskToReadyList+0xb8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3301      	adds	r3, #1
 800c422:	4a29      	ldr	r2, [pc, #164]	@ (800c4c8 <prvAddNewTaskToReadyList+0xb8>)
 800c424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c426:	4b29      	ldr	r3, [pc, #164]	@ (800c4cc <prvAddNewTaskToReadyList+0xbc>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d109      	bne.n	800c442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c42e:	4a27      	ldr	r2, [pc, #156]	@ (800c4cc <prvAddNewTaskToReadyList+0xbc>)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c434:	4b24      	ldr	r3, [pc, #144]	@ (800c4c8 <prvAddNewTaskToReadyList+0xb8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d110      	bne.n	800c45e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c43c:	f000 fc8a 	bl	800cd54 <prvInitialiseTaskLists>
 800c440:	e00d      	b.n	800c45e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c442:	4b23      	ldr	r3, [pc, #140]	@ (800c4d0 <prvAddNewTaskToReadyList+0xc0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d109      	bne.n	800c45e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c44a:	4b20      	ldr	r3, [pc, #128]	@ (800c4cc <prvAddNewTaskToReadyList+0xbc>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c454:	429a      	cmp	r2, r3
 800c456:	d802      	bhi.n	800c45e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c458:	4a1c      	ldr	r2, [pc, #112]	@ (800c4cc <prvAddNewTaskToReadyList+0xbc>)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c45e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d4 <prvAddNewTaskToReadyList+0xc4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	4a1b      	ldr	r2, [pc, #108]	@ (800c4d4 <prvAddNewTaskToReadyList+0xc4>)
 800c466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46c:	2201      	movs	r2, #1
 800c46e:	409a      	lsls	r2, r3
 800c470:	4b19      	ldr	r3, [pc, #100]	@ (800c4d8 <prvAddNewTaskToReadyList+0xc8>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4313      	orrs	r3, r2
 800c476:	4a18      	ldr	r2, [pc, #96]	@ (800c4d8 <prvAddNewTaskToReadyList+0xc8>)
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4a15      	ldr	r2, [pc, #84]	@ (800c4dc <prvAddNewTaskToReadyList+0xcc>)
 800c488:	441a      	add	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7fe feac 	bl	800b1ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c496:	f001 f8a1 	bl	800d5dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c49a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <prvAddNewTaskToReadyList+0xc0>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00e      	beq.n	800c4c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4cc <prvAddNewTaskToReadyList+0xbc>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d207      	bcs.n	800c4c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c4e0 <prvAddNewTaskToReadyList+0xd0>)
 800c4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20000888 	.word	0x20000888
 800c4cc:	20000788 	.word	0x20000788
 800c4d0:	20000894 	.word	0x20000894
 800c4d4:	200008a4 	.word	0x200008a4
 800c4d8:	20000890 	.word	0x20000890
 800c4dc:	2000078c 	.word	0x2000078c
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d018      	beq.n	800c528 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c4f6:	4b14      	ldr	r3, [pc, #80]	@ (800c548 <vTaskDelay+0x64>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00b      	beq.n	800c516 <vTaskDelay+0x32>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	60bb      	str	r3, [r7, #8]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c516:	f000 f911 	bl	800c73c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c51a:	2100      	movs	r1, #0
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fe97 	bl	800d250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c522:	f000 f919 	bl	800c758 <xTaskResumeAll>
 800c526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d107      	bne.n	800c53e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c52e:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <vTaskDelay+0x68>)
 800c530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	200008b0 	.word	0x200008b0
 800c54c:	e000ed04 	.word	0xe000ed04

0800c550 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c558:	f001 f80e 	bl	800d578 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <vTaskSuspend+0x18>
 800c562:	4b3d      	ldr	r3, [pc, #244]	@ (800c658 <vTaskSuspend+0x108>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	e000      	b.n	800c56a <vTaskSuspend+0x1a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3304      	adds	r3, #4
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fe99 	bl	800b2a8 <uxListRemove>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d115      	bne.n	800c5a8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c580:	4936      	ldr	r1, [pc, #216]	@ (800c65c <vTaskSuspend+0x10c>)
 800c582:	4613      	mov	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	440b      	add	r3, r1
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10a      	bne.n	800c5a8 <vTaskSuspend+0x58>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c596:	2201      	movs	r2, #1
 800c598:	fa02 f303 	lsl.w	r3, r2, r3
 800c59c:	43da      	mvns	r2, r3
 800c59e:	4b30      	ldr	r3, [pc, #192]	@ (800c660 <vTaskSuspend+0x110>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	4a2e      	ldr	r2, [pc, #184]	@ (800c660 <vTaskSuspend+0x110>)
 800c5a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d004      	beq.n	800c5ba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3318      	adds	r3, #24
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fe77 	bl	800b2a8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4828      	ldr	r0, [pc, #160]	@ (800c664 <vTaskSuspend+0x114>)
 800c5c2:	f7fe fe14 	bl	800b1ee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d103      	bne.n	800c5da <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c5da:	f000 ffff 	bl	800d5dc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c5de:	4b22      	ldr	r3, [pc, #136]	@ (800c668 <vTaskSuspend+0x118>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d005      	beq.n	800c5f2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c5e6:	f000 ffc7 	bl	800d578 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c5ea:	f000 fc51 	bl	800ce90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c5ee:	f000 fff5 	bl	800d5dc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c5f2:	4b19      	ldr	r3, [pc, #100]	@ (800c658 <vTaskSuspend+0x108>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d128      	bne.n	800c64e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800c5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c668 <vTaskSuspend+0x118>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d018      	beq.n	800c636 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c604:	4b19      	ldr	r3, [pc, #100]	@ (800c66c <vTaskSuspend+0x11c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <vTaskSuspend+0xd4>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60bb      	str	r3, [r7, #8]
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c624:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <vTaskSuspend+0x120>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c634:	e00b      	b.n	800c64e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c636:	4b0b      	ldr	r3, [pc, #44]	@ (800c664 <vTaskSuspend+0x114>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b0e      	ldr	r3, [pc, #56]	@ (800c674 <vTaskSuspend+0x124>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d103      	bne.n	800c64a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800c642:	4b05      	ldr	r3, [pc, #20]	@ (800c658 <vTaskSuspend+0x108>)
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
	}
 800c648:	e001      	b.n	800c64e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800c64a:	f000 f9ff 	bl	800ca4c <vTaskSwitchContext>
	}
 800c64e:	bf00      	nop
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000788 	.word	0x20000788
 800c65c:	2000078c 	.word	0x2000078c
 800c660:	20000890 	.word	0x20000890
 800c664:	20000874 	.word	0x20000874
 800c668:	20000894 	.word	0x20000894
 800c66c:	200008b0 	.word	0x200008b0
 800c670:	e000ed04 	.word	0xe000ed04
 800c674:	20000888 	.word	0x20000888

0800c678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08a      	sub	sp, #40	@ 0x28
 800c67c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c686:	463a      	mov	r2, r7
 800c688:	1d39      	adds	r1, r7, #4
 800c68a:	f107 0308 	add.w	r3, r7, #8
 800c68e:	4618      	mov	r0, r3
 800c690:	f7f4 fef8 	bl	8001484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	9202      	str	r2, [sp, #8]
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	460a      	mov	r2, r1
 800c6a6:	491f      	ldr	r1, [pc, #124]	@ (800c724 <vTaskStartScheduler+0xac>)
 800c6a8:	481f      	ldr	r0, [pc, #124]	@ (800c728 <vTaskStartScheduler+0xb0>)
 800c6aa:	f7ff fd83 	bl	800c1b4 <xTaskCreateStatic>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	4a1e      	ldr	r2, [pc, #120]	@ (800c72c <vTaskStartScheduler+0xb4>)
 800c6b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c72c <vTaskStartScheduler+0xb4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	617b      	str	r3, [r7, #20]
 800c6c0:	e001      	b.n	800c6c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d116      	bne.n	800c6fa <vTaskStartScheduler+0x82>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	613b      	str	r3, [r7, #16]
}
 800c6de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6e0:	4b13      	ldr	r3, [pc, #76]	@ (800c730 <vTaskStartScheduler+0xb8>)
 800c6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6e8:	4b12      	ldr	r3, [pc, #72]	@ (800c734 <vTaskStartScheduler+0xbc>)
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6ee:	4b12      	ldr	r3, [pc, #72]	@ (800c738 <vTaskStartScheduler+0xc0>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6f4:	f000 fe9c 	bl	800d430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6f8:	e00f      	b.n	800c71a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c700:	d10b      	bne.n	800c71a <vTaskStartScheduler+0xa2>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	60fb      	str	r3, [r7, #12]
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop
 800c718:	e7fd      	b.n	800c716 <vTaskStartScheduler+0x9e>
}
 800c71a:	bf00      	nop
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	0801241c 	.word	0x0801241c
 800c728:	0800cd25 	.word	0x0800cd25
 800c72c:	200008ac 	.word	0x200008ac
 800c730:	200008a8 	.word	0x200008a8
 800c734:	20000894 	.word	0x20000894
 800c738:	2000088c 	.word	0x2000088c

0800c73c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c740:	4b04      	ldr	r3, [pc, #16]	@ (800c754 <vTaskSuspendAll+0x18>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3301      	adds	r3, #1
 800c746:	4a03      	ldr	r2, [pc, #12]	@ (800c754 <vTaskSuspendAll+0x18>)
 800c748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c74a:	bf00      	nop
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	200008b0 	.word	0x200008b0

0800c758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c762:	2300      	movs	r3, #0
 800c764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c766:	4b42      	ldr	r3, [pc, #264]	@ (800c870 <xTaskResumeAll+0x118>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10b      	bne.n	800c786 <xTaskResumeAll+0x2e>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	603b      	str	r3, [r7, #0]
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	e7fd      	b.n	800c782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c786:	f000 fef7 	bl	800d578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c78a:	4b39      	ldr	r3, [pc, #228]	@ (800c870 <xTaskResumeAll+0x118>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3b01      	subs	r3, #1
 800c790:	4a37      	ldr	r2, [pc, #220]	@ (800c870 <xTaskResumeAll+0x118>)
 800c792:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c794:	4b36      	ldr	r3, [pc, #216]	@ (800c870 <xTaskResumeAll+0x118>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d161      	bne.n	800c860 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c79c:	4b35      	ldr	r3, [pc, #212]	@ (800c874 <xTaskResumeAll+0x11c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d05d      	beq.n	800c860 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7a4:	e02e      	b.n	800c804 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a6:	4b34      	ldr	r3, [pc, #208]	@ (800c878 <xTaskResumeAll+0x120>)
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3318      	adds	r3, #24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fd78 	bl	800b2a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fd73 	bl	800b2a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	409a      	lsls	r2, r3
 800c7ca:	4b2c      	ldr	r3, [pc, #176]	@ (800c87c <xTaskResumeAll+0x124>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	4a2a      	ldr	r2, [pc, #168]	@ (800c87c <xTaskResumeAll+0x124>)
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4a27      	ldr	r2, [pc, #156]	@ (800c880 <xTaskResumeAll+0x128>)
 800c7e2:	441a      	add	r2, r3
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	f7fe fcff 	bl	800b1ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f4:	4b23      	ldr	r3, [pc, #140]	@ (800c884 <xTaskResumeAll+0x12c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d302      	bcc.n	800c804 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c7fe:	4b22      	ldr	r3, [pc, #136]	@ (800c888 <xTaskResumeAll+0x130>)
 800c800:	2201      	movs	r2, #1
 800c802:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c804:	4b1c      	ldr	r3, [pc, #112]	@ (800c878 <xTaskResumeAll+0x120>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1cc      	bne.n	800c7a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d001      	beq.n	800c816 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c812:	f000 fb3d 	bl	800ce90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c816:	4b1d      	ldr	r3, [pc, #116]	@ (800c88c <xTaskResumeAll+0x134>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d010      	beq.n	800c844 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c822:	f000 f859 	bl	800c8d8 <xTaskIncrementTick>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c82c:	4b16      	ldr	r3, [pc, #88]	@ (800c888 <xTaskResumeAll+0x130>)
 800c82e:	2201      	movs	r2, #1
 800c830:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3b01      	subs	r3, #1
 800c836:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1f1      	bne.n	800c822 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c83e:	4b13      	ldr	r3, [pc, #76]	@ (800c88c <xTaskResumeAll+0x134>)
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c844:	4b10      	ldr	r3, [pc, #64]	@ (800c888 <xTaskResumeAll+0x130>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d009      	beq.n	800c860 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c84c:	2301      	movs	r3, #1
 800c84e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c850:	4b0f      	ldr	r3, [pc, #60]	@ (800c890 <xTaskResumeAll+0x138>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c860:	f000 febc 	bl	800d5dc <vPortExitCritical>

	return xAlreadyYielded;
 800c864:	68bb      	ldr	r3, [r7, #8]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	200008b0 	.word	0x200008b0
 800c874:	20000888 	.word	0x20000888
 800c878:	20000848 	.word	0x20000848
 800c87c:	20000890 	.word	0x20000890
 800c880:	2000078c 	.word	0x2000078c
 800c884:	20000788 	.word	0x20000788
 800c888:	2000089c 	.word	0x2000089c
 800c88c:	20000898 	.word	0x20000898
 800c890:	e000ed04 	.word	0xe000ed04

0800c894 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c89a:	4b05      	ldr	r3, [pc, #20]	@ (800c8b0 <xTaskGetTickCount+0x1c>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8a0:	687b      	ldr	r3, [r7, #4]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	2000088c 	.word	0x2000088c

0800c8b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8ba:	f000 ff3d 	bl	800d738 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c8be:	2300      	movs	r3, #0
 800c8c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c8c2:	4b04      	ldr	r3, [pc, #16]	@ (800c8d4 <xTaskGetTickCountFromISR+0x20>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8c8:	683b      	ldr	r3, [r7, #0]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	2000088c 	.word	0x2000088c

0800c8d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8e2:	4b4f      	ldr	r3, [pc, #316]	@ (800ca20 <xTaskIncrementTick+0x148>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f040 808f 	bne.w	800ca0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8ec:	4b4d      	ldr	r3, [pc, #308]	@ (800ca24 <xTaskIncrementTick+0x14c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8f4:	4a4b      	ldr	r2, [pc, #300]	@ (800ca24 <xTaskIncrementTick+0x14c>)
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d121      	bne.n	800c944 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c900:	4b49      	ldr	r3, [pc, #292]	@ (800ca28 <xTaskIncrementTick+0x150>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	603b      	str	r3, [r7, #0]
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	e7fd      	b.n	800c91e <xTaskIncrementTick+0x46>
 800c922:	4b41      	ldr	r3, [pc, #260]	@ (800ca28 <xTaskIncrementTick+0x150>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	4b40      	ldr	r3, [pc, #256]	@ (800ca2c <xTaskIncrementTick+0x154>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a3e      	ldr	r2, [pc, #248]	@ (800ca28 <xTaskIncrementTick+0x150>)
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	4a3e      	ldr	r2, [pc, #248]	@ (800ca2c <xTaskIncrementTick+0x154>)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4b3e      	ldr	r3, [pc, #248]	@ (800ca30 <xTaskIncrementTick+0x158>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca30 <xTaskIncrementTick+0x158>)
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	f000 faa6 	bl	800ce90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c944:	4b3b      	ldr	r3, [pc, #236]	@ (800ca34 <xTaskIncrementTick+0x15c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d348      	bcc.n	800c9e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c94e:	4b36      	ldr	r3, [pc, #216]	@ (800ca28 <xTaskIncrementTick+0x150>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d104      	bne.n	800c962 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c958:	4b36      	ldr	r3, [pc, #216]	@ (800ca34 <xTaskIncrementTick+0x15c>)
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295
 800c95e:	601a      	str	r2, [r3, #0]
					break;
 800c960:	e03e      	b.n	800c9e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c962:	4b31      	ldr	r3, [pc, #196]	@ (800ca28 <xTaskIncrementTick+0x150>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	429a      	cmp	r2, r3
 800c978:	d203      	bcs.n	800c982 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c97a:	4a2e      	ldr	r2, [pc, #184]	@ (800ca34 <xTaskIncrementTick+0x15c>)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c980:	e02e      	b.n	800c9e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	3304      	adds	r3, #4
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fc8e 	bl	800b2a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c990:	2b00      	cmp	r3, #0
 800c992:	d004      	beq.n	800c99e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3318      	adds	r3, #24
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fc85 	bl	800b2a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	409a      	lsls	r2, r3
 800c9a6:	4b24      	ldr	r3, [pc, #144]	@ (800ca38 <xTaskIncrementTick+0x160>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	4a22      	ldr	r2, [pc, #136]	@ (800ca38 <xTaskIncrementTick+0x160>)
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4a1f      	ldr	r2, [pc, #124]	@ (800ca3c <xTaskIncrementTick+0x164>)
 800c9be:	441a      	add	r2, r3
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	f7fe fc11 	bl	800b1ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9d0:	4b1b      	ldr	r3, [pc, #108]	@ (800ca40 <xTaskIncrementTick+0x168>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d3b9      	bcc.n	800c94e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9de:	e7b6      	b.n	800c94e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9e0:	4b17      	ldr	r3, [pc, #92]	@ (800ca40 <xTaskIncrementTick+0x168>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e6:	4915      	ldr	r1, [pc, #84]	@ (800ca3c <xTaskIncrementTick+0x164>)
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	440b      	add	r3, r1
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d901      	bls.n	800c9fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c9fc:	4b11      	ldr	r3, [pc, #68]	@ (800ca44 <xTaskIncrementTick+0x16c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d007      	beq.n	800ca14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ca04:	2301      	movs	r3, #1
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	e004      	b.n	800ca14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca48 <xTaskIncrementTick+0x170>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	4a0d      	ldr	r2, [pc, #52]	@ (800ca48 <xTaskIncrementTick+0x170>)
 800ca12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca14:	697b      	ldr	r3, [r7, #20]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	200008b0 	.word	0x200008b0
 800ca24:	2000088c 	.word	0x2000088c
 800ca28:	20000840 	.word	0x20000840
 800ca2c:	20000844 	.word	0x20000844
 800ca30:	200008a0 	.word	0x200008a0
 800ca34:	200008a8 	.word	0x200008a8
 800ca38:	20000890 	.word	0x20000890
 800ca3c:	2000078c 	.word	0x2000078c
 800ca40:	20000788 	.word	0x20000788
 800ca44:	2000089c 	.word	0x2000089c
 800ca48:	20000898 	.word	0x20000898

0800ca4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca52:	4b27      	ldr	r3, [pc, #156]	@ (800caf0 <vTaskSwitchContext+0xa4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca5a:	4b26      	ldr	r3, [pc, #152]	@ (800caf4 <vTaskSwitchContext+0xa8>)
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca60:	e040      	b.n	800cae4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ca62:	4b24      	ldr	r3, [pc, #144]	@ (800caf4 <vTaskSwitchContext+0xa8>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca68:	4b23      	ldr	r3, [pc, #140]	@ (800caf8 <vTaskSwitchContext+0xac>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	fab3 f383 	clz	r3, r3
 800ca74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ca76:	7afb      	ldrb	r3, [r7, #11]
 800ca78:	f1c3 031f 	rsb	r3, r3, #31
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	491f      	ldr	r1, [pc, #124]	@ (800cafc <vTaskSwitchContext+0xb0>)
 800ca80:	697a      	ldr	r2, [r7, #20]
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	440b      	add	r3, r1
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10b      	bne.n	800caaa <vTaskSwitchContext+0x5e>
	__asm volatile
 800ca92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	607b      	str	r3, [r7, #4]
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	e7fd      	b.n	800caa6 <vTaskSwitchContext+0x5a>
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4a11      	ldr	r2, [pc, #68]	@ (800cafc <vTaskSwitchContext+0xb0>)
 800cab6:	4413      	add	r3, r2
 800cab8:	613b      	str	r3, [r7, #16]
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	605a      	str	r2, [r3, #4]
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	3308      	adds	r3, #8
 800cacc:	429a      	cmp	r2, r3
 800cace:	d104      	bne.n	800cada <vTaskSwitchContext+0x8e>
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	605a      	str	r2, [r3, #4]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	4a07      	ldr	r2, [pc, #28]	@ (800cb00 <vTaskSwitchContext+0xb4>)
 800cae2:	6013      	str	r3, [r2, #0]
}
 800cae4:	bf00      	nop
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	200008b0 	.word	0x200008b0
 800caf4:	2000089c 	.word	0x2000089c
 800caf8:	20000890 	.word	0x20000890
 800cafc:	2000078c 	.word	0x2000078c
 800cb00:	20000788 	.word	0x20000788

0800cb04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10b      	bne.n	800cb2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	60fb      	str	r3, [r7, #12]
}
 800cb26:	bf00      	nop
 800cb28:	bf00      	nop
 800cb2a:	e7fd      	b.n	800cb28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb2c:	4b07      	ldr	r3, [pc, #28]	@ (800cb4c <vTaskPlaceOnEventList+0x48>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3318      	adds	r3, #24
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7fe fb7e 	bl	800b236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	6838      	ldr	r0, [r7, #0]
 800cb3e:	f000 fb87 	bl	800d250 <prvAddCurrentTaskToDelayedList>
}
 800cb42:	bf00      	nop
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000788 	.word	0x20000788

0800cb50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10b      	bne.n	800cb7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60fb      	str	r3, [r7, #12]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	3318      	adds	r3, #24
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fb90 	bl	800b2a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb88:	4b1d      	ldr	r3, [pc, #116]	@ (800cc00 <xTaskRemoveFromEventList+0xb0>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d11c      	bne.n	800cbca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	3304      	adds	r3, #4
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe fb87 	bl	800b2a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9e:	2201      	movs	r2, #1
 800cba0:	409a      	lsls	r2, r3
 800cba2:	4b18      	ldr	r3, [pc, #96]	@ (800cc04 <xTaskRemoveFromEventList+0xb4>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	4a16      	ldr	r2, [pc, #88]	@ (800cc04 <xTaskRemoveFromEventList+0xb4>)
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4a13      	ldr	r2, [pc, #76]	@ (800cc08 <xTaskRemoveFromEventList+0xb8>)
 800cbba:	441a      	add	r2, r3
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	f7fe fb13 	bl	800b1ee <vListInsertEnd>
 800cbc8:	e005      	b.n	800cbd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	3318      	adds	r3, #24
 800cbce:	4619      	mov	r1, r3
 800cbd0:	480e      	ldr	r0, [pc, #56]	@ (800cc0c <xTaskRemoveFromEventList+0xbc>)
 800cbd2:	f7fe fb0c 	bl	800b1ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbda:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <xTaskRemoveFromEventList+0xc0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d905      	bls.n	800cbf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <xTaskRemoveFromEventList+0xc4>)
 800cbea:	2201      	movs	r2, #1
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e001      	b.n	800cbf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cbf4:	697b      	ldr	r3, [r7, #20]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200008b0 	.word	0x200008b0
 800cc04:	20000890 	.word	0x20000890
 800cc08:	2000078c 	.word	0x2000078c
 800cc0c:	20000848 	.word	0x20000848
 800cc10:	20000788 	.word	0x20000788
 800cc14:	2000089c 	.word	0x2000089c

0800cc18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc20:	4b06      	ldr	r3, [pc, #24]	@ (800cc3c <vTaskInternalSetTimeOutState+0x24>)
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc28:	4b05      	ldr	r3, [pc, #20]	@ (800cc40 <vTaskInternalSetTimeOutState+0x28>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	605a      	str	r2, [r3, #4]
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	200008a0 	.word	0x200008a0
 800cc40:	2000088c 	.word	0x2000088c

0800cc44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10b      	bne.n	800cc6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	613b      	str	r3, [r7, #16]
}
 800cc66:	bf00      	nop
 800cc68:	bf00      	nop
 800cc6a:	e7fd      	b.n	800cc68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10b      	bne.n	800cc8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	60fb      	str	r3, [r7, #12]
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cc8a:	f000 fc75 	bl	800d578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc8e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd04 <xTaskCheckForTimeOut+0xc0>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	69ba      	ldr	r2, [r7, #24]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca6:	d102      	bne.n	800ccae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	e023      	b.n	800ccf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	4b15      	ldr	r3, [pc, #84]	@ (800cd08 <xTaskCheckForTimeOut+0xc4>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d007      	beq.n	800ccca <xTaskCheckForTimeOut+0x86>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d302      	bcc.n	800ccca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	61fb      	str	r3, [r7, #28]
 800ccc8:	e015      	b.n	800ccf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d20b      	bcs.n	800ccec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	1ad2      	subs	r2, r2, r3
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff ff99 	bl	800cc18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cce6:	2300      	movs	r3, #0
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	e004      	b.n	800ccf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ccf6:	f000 fc71 	bl	800d5dc <vPortExitCritical>

	return xReturn;
 800ccfa:	69fb      	ldr	r3, [r7, #28]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3720      	adds	r7, #32
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	2000088c 	.word	0x2000088c
 800cd08:	200008a0 	.word	0x200008a0

0800cd0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd10:	4b03      	ldr	r3, [pc, #12]	@ (800cd20 <vTaskMissedYield+0x14>)
 800cd12:	2201      	movs	r2, #1
 800cd14:	601a      	str	r2, [r3, #0]
}
 800cd16:	bf00      	nop
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	2000089c 	.word	0x2000089c

0800cd24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd2c:	f000 f852 	bl	800cdd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd30:	4b06      	ldr	r3, [pc, #24]	@ (800cd4c <prvIdleTask+0x28>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d9f9      	bls.n	800cd2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd38:	4b05      	ldr	r3, [pc, #20]	@ (800cd50 <prvIdleTask+0x2c>)
 800cd3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd48:	e7f0      	b.n	800cd2c <prvIdleTask+0x8>
 800cd4a:	bf00      	nop
 800cd4c:	2000078c 	.word	0x2000078c
 800cd50:	e000ed04 	.word	0xe000ed04

0800cd54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	607b      	str	r3, [r7, #4]
 800cd5e:	e00c      	b.n	800cd7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4613      	mov	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4a12      	ldr	r2, [pc, #72]	@ (800cdb4 <prvInitialiseTaskLists+0x60>)
 800cd6c:	4413      	add	r3, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fa10 	bl	800b194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	3301      	adds	r3, #1
 800cd78:	607b      	str	r3, [r7, #4]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b06      	cmp	r3, #6
 800cd7e:	d9ef      	bls.n	800cd60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd80:	480d      	ldr	r0, [pc, #52]	@ (800cdb8 <prvInitialiseTaskLists+0x64>)
 800cd82:	f7fe fa07 	bl	800b194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd86:	480d      	ldr	r0, [pc, #52]	@ (800cdbc <prvInitialiseTaskLists+0x68>)
 800cd88:	f7fe fa04 	bl	800b194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd8c:	480c      	ldr	r0, [pc, #48]	@ (800cdc0 <prvInitialiseTaskLists+0x6c>)
 800cd8e:	f7fe fa01 	bl	800b194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd92:	480c      	ldr	r0, [pc, #48]	@ (800cdc4 <prvInitialiseTaskLists+0x70>)
 800cd94:	f7fe f9fe 	bl	800b194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd98:	480b      	ldr	r0, [pc, #44]	@ (800cdc8 <prvInitialiseTaskLists+0x74>)
 800cd9a:	f7fe f9fb 	bl	800b194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cdcc <prvInitialiseTaskLists+0x78>)
 800cda0:	4a05      	ldr	r2, [pc, #20]	@ (800cdb8 <prvInitialiseTaskLists+0x64>)
 800cda2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cda4:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd0 <prvInitialiseTaskLists+0x7c>)
 800cda6:	4a05      	ldr	r2, [pc, #20]	@ (800cdbc <prvInitialiseTaskLists+0x68>)
 800cda8:	601a      	str	r2, [r3, #0]
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	2000078c 	.word	0x2000078c
 800cdb8:	20000818 	.word	0x20000818
 800cdbc:	2000082c 	.word	0x2000082c
 800cdc0:	20000848 	.word	0x20000848
 800cdc4:	2000085c 	.word	0x2000085c
 800cdc8:	20000874 	.word	0x20000874
 800cdcc:	20000840 	.word	0x20000840
 800cdd0:	20000844 	.word	0x20000844

0800cdd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdda:	e019      	b.n	800ce10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cddc:	f000 fbcc 	bl	800d578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde0:	4b10      	ldr	r3, [pc, #64]	@ (800ce24 <prvCheckTasksWaitingTermination+0x50>)
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fa5b 	bl	800b2a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ce28 <prvCheckTasksWaitingTermination+0x54>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	4a0b      	ldr	r2, [pc, #44]	@ (800ce28 <prvCheckTasksWaitingTermination+0x54>)
 800cdfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cdfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ce2c <prvCheckTasksWaitingTermination+0x58>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	4a0a      	ldr	r2, [pc, #40]	@ (800ce2c <prvCheckTasksWaitingTermination+0x58>)
 800ce04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce06:	f000 fbe9 	bl	800d5dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f810 	bl	800ce30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce10:	4b06      	ldr	r3, [pc, #24]	@ (800ce2c <prvCheckTasksWaitingTermination+0x58>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e1      	bne.n	800cddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	2000085c 	.word	0x2000085c
 800ce28:	20000888 	.word	0x20000888
 800ce2c:	20000870 	.word	0x20000870

0800ce30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d108      	bne.n	800ce54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 fd86 	bl	800d958 <vPortFree>
				vPortFree( pxTCB );
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fd83 	bl	800d958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce52:	e019      	b.n	800ce88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d103      	bne.n	800ce66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fd7a 	bl	800d958 <vPortFree>
	}
 800ce64:	e010      	b.n	800ce88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d00b      	beq.n	800ce88 <prvDeleteTCB+0x58>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	60fb      	str	r3, [r7, #12]
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	e7fd      	b.n	800ce84 <prvDeleteTCB+0x54>
	}
 800ce88:	bf00      	nop
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce96:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <prvResetNextTaskUnblockTime+0x38>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d104      	bne.n	800ceaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cea0:	4b0a      	ldr	r3, [pc, #40]	@ (800cecc <prvResetNextTaskUnblockTime+0x3c>)
 800cea2:	f04f 32ff 	mov.w	r2, #4294967295
 800cea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cea8:	e008      	b.n	800cebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceaa:	4b07      	ldr	r3, [pc, #28]	@ (800cec8 <prvResetNextTaskUnblockTime+0x38>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	4a04      	ldr	r2, [pc, #16]	@ (800cecc <prvResetNextTaskUnblockTime+0x3c>)
 800ceba:	6013      	str	r3, [r2, #0]
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	20000840 	.word	0x20000840
 800cecc:	200008a8 	.word	0x200008a8

0800ced0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ced6:	4b0b      	ldr	r3, [pc, #44]	@ (800cf04 <xTaskGetSchedulerState+0x34>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d102      	bne.n	800cee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cede:	2301      	movs	r3, #1
 800cee0:	607b      	str	r3, [r7, #4]
 800cee2:	e008      	b.n	800cef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cee4:	4b08      	ldr	r3, [pc, #32]	@ (800cf08 <xTaskGetSchedulerState+0x38>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ceec:	2302      	movs	r3, #2
 800ceee:	607b      	str	r3, [r7, #4]
 800cef0:	e001      	b.n	800cef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cef2:	2300      	movs	r3, #0
 800cef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cef6:	687b      	ldr	r3, [r7, #4]
	}
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	20000894 	.word	0x20000894
 800cf08:	200008b0 	.word	0x200008b0

0800cf0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d05e      	beq.n	800cfe0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf26:	4b31      	ldr	r3, [pc, #196]	@ (800cfec <xTaskPriorityInherit+0xe0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d24e      	bcs.n	800cfce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	db06      	blt.n	800cf46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf38:	4b2c      	ldr	r3, [pc, #176]	@ (800cfec <xTaskPriorityInherit+0xe0>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3e:	f1c3 0207 	rsb	r2, r3, #7
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	6959      	ldr	r1, [r3, #20]
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4a26      	ldr	r2, [pc, #152]	@ (800cff0 <xTaskPriorityInherit+0xe4>)
 800cf58:	4413      	add	r3, r2
 800cf5a:	4299      	cmp	r1, r3
 800cf5c:	d12f      	bne.n	800cfbe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe f9a0 	bl	800b2a8 <uxListRemove>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf72:	2201      	movs	r2, #1
 800cf74:	fa02 f303 	lsl.w	r3, r2, r3
 800cf78:	43da      	mvns	r2, r3
 800cf7a:	4b1e      	ldr	r3, [pc, #120]	@ (800cff4 <xTaskPriorityInherit+0xe8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4013      	ands	r3, r2
 800cf80:	4a1c      	ldr	r2, [pc, #112]	@ (800cff4 <xTaskPriorityInherit+0xe8>)
 800cf82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf84:	4b19      	ldr	r3, [pc, #100]	@ (800cfec <xTaskPriorityInherit+0xe0>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf92:	2201      	movs	r2, #1
 800cf94:	409a      	lsls	r2, r3
 800cf96:	4b17      	ldr	r3, [pc, #92]	@ (800cff4 <xTaskPriorityInherit+0xe8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	4a15      	ldr	r2, [pc, #84]	@ (800cff4 <xTaskPriorityInherit+0xe8>)
 800cf9e:	6013      	str	r3, [r2, #0]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4a10      	ldr	r2, [pc, #64]	@ (800cff0 <xTaskPriorityInherit+0xe4>)
 800cfae:	441a      	add	r2, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	f7fe f919 	bl	800b1ee <vListInsertEnd>
 800cfbc:	e004      	b.n	800cfc8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cfbe:	4b0b      	ldr	r3, [pc, #44]	@ (800cfec <xTaskPriorityInherit+0xe0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	e008      	b.n	800cfe0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cfd2:	4b06      	ldr	r3, [pc, #24]	@ (800cfec <xTaskPriorityInherit+0xe0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d201      	bcs.n	800cfe0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
	}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20000788 	.word	0x20000788
 800cff0:	2000078c 	.word	0x2000078c
 800cff4:	20000890 	.word	0x20000890

0800cff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d070      	beq.n	800d0f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d00e:	4b3b      	ldr	r3, [pc, #236]	@ (800d0fc <xTaskPriorityDisinherit+0x104>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	429a      	cmp	r2, r3
 800d016:	d00b      	beq.n	800d030 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	60fb      	str	r3, [r7, #12]
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	e7fd      	b.n	800d02c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10b      	bne.n	800d050 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	60bb      	str	r3, [r7, #8]
}
 800d04a:	bf00      	nop
 800d04c:	bf00      	nop
 800d04e:	e7fd      	b.n	800d04c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d054:	1e5a      	subs	r2, r3, #1
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d062:	429a      	cmp	r2, r3
 800d064:	d044      	beq.n	800d0f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d140      	bne.n	800d0f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	3304      	adds	r3, #4
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe f918 	bl	800b2a8 <uxListRemove>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d115      	bne.n	800d0aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d082:	491f      	ldr	r1, [pc, #124]	@ (800d100 <xTaskPriorityDisinherit+0x108>)
 800d084:	4613      	mov	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	440b      	add	r3, r1
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10a      	bne.n	800d0aa <xTaskPriorityDisinherit+0xb2>
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d098:	2201      	movs	r2, #1
 800d09a:	fa02 f303 	lsl.w	r3, r2, r3
 800d09e:	43da      	mvns	r2, r3
 800d0a0:	4b18      	ldr	r3, [pc, #96]	@ (800d104 <xTaskPriorityDisinherit+0x10c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	4a17      	ldr	r2, [pc, #92]	@ (800d104 <xTaskPriorityDisinherit+0x10c>)
 800d0a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b6:	f1c3 0207 	rsb	r2, r3, #7
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	409a      	lsls	r2, r3
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d104 <xTaskPriorityDisinherit+0x10c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	4a0d      	ldr	r2, [pc, #52]	@ (800d104 <xTaskPriorityDisinherit+0x10c>)
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4a08      	ldr	r2, [pc, #32]	@ (800d100 <xTaskPriorityDisinherit+0x108>)
 800d0de:	441a      	add	r2, r3
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	f7fe f881 	bl	800b1ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0f0:	697b      	ldr	r3, [r7, #20]
	}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20000788 	.word	0x20000788
 800d100:	2000078c 	.word	0x2000078c
 800d104:	20000890 	.word	0x20000890

0800d108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d116:	2301      	movs	r3, #1
 800d118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d079      	beq.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10b      	bne.n	800d140 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	60fb      	str	r3, [r7, #12]
}
 800d13a:	bf00      	nop
 800d13c:	bf00      	nop
 800d13e:	e7fd      	b.n	800d13c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d902      	bls.n	800d150 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	61fb      	str	r3, [r7, #28]
 800d14e:	e002      	b.n	800d156 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d154:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d15a:	69fa      	ldr	r2, [r7, #28]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d059      	beq.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	429a      	cmp	r2, r3
 800d168:	d154      	bne.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d16a:	4b2c      	ldr	r3, [pc, #176]	@ (800d21c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	429a      	cmp	r2, r3
 800d172:	d10b      	bne.n	800d18c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	60bb      	str	r3, [r7, #8]
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	e7fd      	b.n	800d188 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d190:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	db04      	blt.n	800d1aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	f1c3 0207 	rsb	r2, r3, #7
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	6959      	ldr	r1, [r3, #20]
 800d1ae:	693a      	ldr	r2, [r7, #16]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4a19      	ldr	r2, [pc, #100]	@ (800d220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d1ba:	4413      	add	r3, r2
 800d1bc:	4299      	cmp	r1, r3
 800d1be:	d129      	bne.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe f86f 	bl	800b2a8 <uxListRemove>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1da:	43da      	mvns	r2, r3
 800d1dc:	4b11      	ldr	r3, [pc, #68]	@ (800d224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	4a10      	ldr	r2, [pc, #64]	@ (800d224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d1e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	409a      	lsls	r2, r3
 800d1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	4a0b      	ldr	r2, [pc, #44]	@ (800d224 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4a06      	ldr	r2, [pc, #24]	@ (800d220 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d206:	441a      	add	r2, r3
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f7fd ffed 	bl	800b1ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d214:	bf00      	nop
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20000788 	.word	0x20000788
 800d220:	2000078c 	.word	0x2000078c
 800d224:	20000890 	.word	0x20000890

0800d228 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d228:	b480      	push	{r7}
 800d22a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d22c:	4b07      	ldr	r3, [pc, #28]	@ (800d24c <pvTaskIncrementMutexHeldCount+0x24>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d234:	4b05      	ldr	r3, [pc, #20]	@ (800d24c <pvTaskIncrementMutexHeldCount+0x24>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d23a:	3201      	adds	r2, #1
 800d23c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d23e:	4b03      	ldr	r3, [pc, #12]	@ (800d24c <pvTaskIncrementMutexHeldCount+0x24>)
 800d240:	681b      	ldr	r3, [r3, #0]
	}
 800d242:	4618      	mov	r0, r3
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	20000788 	.word	0x20000788

0800d250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d25a:	4b29      	ldr	r3, [pc, #164]	@ (800d300 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d260:	4b28      	ldr	r3, [pc, #160]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3304      	adds	r3, #4
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe f81e 	bl	800b2a8 <uxListRemove>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10b      	bne.n	800d28a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d272:	4b24      	ldr	r3, [pc, #144]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d278:	2201      	movs	r2, #1
 800d27a:	fa02 f303 	lsl.w	r3, r2, r3
 800d27e:	43da      	mvns	r2, r3
 800d280:	4b21      	ldr	r3, [pc, #132]	@ (800d308 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4013      	ands	r3, r2
 800d286:	4a20      	ldr	r2, [pc, #128]	@ (800d308 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d288:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d290:	d10a      	bne.n	800d2a8 <prvAddCurrentTaskToDelayedList+0x58>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d298:	4b1a      	ldr	r3, [pc, #104]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3304      	adds	r3, #4
 800d29e:	4619      	mov	r1, r3
 800d2a0:	481a      	ldr	r0, [pc, #104]	@ (800d30c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d2a2:	f7fd ffa4 	bl	800b1ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2a6:	e026      	b.n	800d2f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2b0:	4b14      	ldr	r3, [pc, #80]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d209      	bcs.n	800d2d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2c0:	4b13      	ldr	r3, [pc, #76]	@ (800d310 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fd ffb2 	bl	800b236 <vListInsert>
}
 800d2d2:	e010      	b.n	800d2f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800d314 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3304      	adds	r3, #4
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	f7fd ffa8 	bl	800b236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d318 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d202      	bcs.n	800d2f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2f0:	4a09      	ldr	r2, [pc, #36]	@ (800d318 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6013      	str	r3, [r2, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	2000088c 	.word	0x2000088c
 800d304:	20000788 	.word	0x20000788
 800d308:	20000890 	.word	0x20000890
 800d30c:	20000874 	.word	0x20000874
 800d310:	20000844 	.word	0x20000844
 800d314:	20000840 	.word	0x20000840
 800d318:	200008a8 	.word	0x200008a8

0800d31c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3b04      	subs	r3, #4
 800d32c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3b04      	subs	r3, #4
 800d33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f023 0201 	bic.w	r2, r3, #1
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3b04      	subs	r3, #4
 800d34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d34c:	4a0c      	ldr	r2, [pc, #48]	@ (800d380 <pxPortInitialiseStack+0x64>)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3b14      	subs	r3, #20
 800d356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3b04      	subs	r3, #4
 800d362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f06f 0202 	mvn.w	r2, #2
 800d36a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3b20      	subs	r3, #32
 800d370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d372:	68fb      	ldr	r3, [r7, #12]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	0800d385 	.word	0x0800d385

0800d384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d38e:	4b13      	ldr	r3, [pc, #76]	@ (800d3dc <prvTaskExitError+0x58>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d396:	d00b      	beq.n	800d3b0 <prvTaskExitError+0x2c>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	60fb      	str	r3, [r7, #12]
}
 800d3aa:	bf00      	nop
 800d3ac:	bf00      	nop
 800d3ae:	e7fd      	b.n	800d3ac <prvTaskExitError+0x28>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	60bb      	str	r3, [r7, #8]
}
 800d3c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3c4:	bf00      	nop
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0fc      	beq.n	800d3c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3cc:	bf00      	nop
 800d3ce:	bf00      	nop
 800d3d0:	3714      	adds	r7, #20
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	2000000c 	.word	0x2000000c

0800d3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3e0:	4b07      	ldr	r3, [pc, #28]	@ (800d400 <pxCurrentTCBConst2>)
 800d3e2:	6819      	ldr	r1, [r3, #0]
 800d3e4:	6808      	ldr	r0, [r1, #0]
 800d3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ea:	f380 8809 	msr	PSP, r0
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f04f 0000 	mov.w	r0, #0
 800d3f6:	f380 8811 	msr	BASEPRI, r0
 800d3fa:	4770      	bx	lr
 800d3fc:	f3af 8000 	nop.w

0800d400 <pxCurrentTCBConst2>:
 800d400:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d404:	bf00      	nop
 800d406:	bf00      	nop

0800d408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d408:	4808      	ldr	r0, [pc, #32]	@ (800d42c <prvPortStartFirstTask+0x24>)
 800d40a:	6800      	ldr	r0, [r0, #0]
 800d40c:	6800      	ldr	r0, [r0, #0]
 800d40e:	f380 8808 	msr	MSP, r0
 800d412:	f04f 0000 	mov.w	r0, #0
 800d416:	f380 8814 	msr	CONTROL, r0
 800d41a:	b662      	cpsie	i
 800d41c:	b661      	cpsie	f
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	df00      	svc	0
 800d428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d42a:	bf00      	nop
 800d42c:	e000ed08 	.word	0xe000ed08

0800d430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d436:	4b47      	ldr	r3, [pc, #284]	@ (800d554 <xPortStartScheduler+0x124>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a47      	ldr	r2, [pc, #284]	@ (800d558 <xPortStartScheduler+0x128>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d10b      	bne.n	800d458 <xPortStartScheduler+0x28>
	__asm volatile
 800d440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	60fb      	str	r3, [r7, #12]
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	e7fd      	b.n	800d454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d458:	4b3e      	ldr	r3, [pc, #248]	@ (800d554 <xPortStartScheduler+0x124>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a3f      	ldr	r2, [pc, #252]	@ (800d55c <xPortStartScheduler+0x12c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d10b      	bne.n	800d47a <xPortStartScheduler+0x4a>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	613b      	str	r3, [r7, #16]
}
 800d474:	bf00      	nop
 800d476:	bf00      	nop
 800d478:	e7fd      	b.n	800d476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d47a:	4b39      	ldr	r3, [pc, #228]	@ (800d560 <xPortStartScheduler+0x130>)
 800d47c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	22ff      	movs	r2, #255	@ 0xff
 800d48a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	b2db      	uxtb	r3, r3
 800d492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	4b31      	ldr	r3, [pc, #196]	@ (800d564 <xPortStartScheduler+0x134>)
 800d4a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4a2:	4b31      	ldr	r3, [pc, #196]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4a4:	2207      	movs	r2, #7
 800d4a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4a8:	e009      	b.n	800d4be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d4aa:	4b2f      	ldr	r3, [pc, #188]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	4a2d      	ldr	r2, [pc, #180]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4b4:	78fb      	ldrb	r3, [r7, #3]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4be:	78fb      	ldrb	r3, [r7, #3]
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4c6:	2b80      	cmp	r3, #128	@ 0x80
 800d4c8:	d0ef      	beq.n	800d4aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4ca:	4b27      	ldr	r3, [pc, #156]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f1c3 0307 	rsb	r3, r3, #7
 800d4d2:	2b04      	cmp	r3, #4
 800d4d4:	d00b      	beq.n	800d4ee <xPortStartScheduler+0xbe>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	60bb      	str	r3, [r7, #8]
}
 800d4e8:	bf00      	nop
 800d4ea:	bf00      	nop
 800d4ec:	e7fd      	b.n	800d4ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	021b      	lsls	r3, r3, #8
 800d4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d568 <xPortStartScheduler+0x138>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d500:	4a19      	ldr	r2, [pc, #100]	@ (800d568 <xPortStartScheduler+0x138>)
 800d502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	b2da      	uxtb	r2, r3
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d50c:	4b17      	ldr	r3, [pc, #92]	@ (800d56c <xPortStartScheduler+0x13c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a16      	ldr	r2, [pc, #88]	@ (800d56c <xPortStartScheduler+0x13c>)
 800d512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d518:	4b14      	ldr	r3, [pc, #80]	@ (800d56c <xPortStartScheduler+0x13c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a13      	ldr	r2, [pc, #76]	@ (800d56c <xPortStartScheduler+0x13c>)
 800d51e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d524:	f000 f8da 	bl	800d6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d528:	4b11      	ldr	r3, [pc, #68]	@ (800d570 <xPortStartScheduler+0x140>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d52e:	f000 f8f9 	bl	800d724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d532:	4b10      	ldr	r3, [pc, #64]	@ (800d574 <xPortStartScheduler+0x144>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a0f      	ldr	r2, [pc, #60]	@ (800d574 <xPortStartScheduler+0x144>)
 800d538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d53c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d53e:	f7ff ff63 	bl	800d408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d542:	f7ff fa83 	bl	800ca4c <vTaskSwitchContext>
	prvTaskExitError();
 800d546:	f7ff ff1d 	bl	800d384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	e000ed00 	.word	0xe000ed00
 800d558:	410fc271 	.word	0x410fc271
 800d55c:	410fc270 	.word	0x410fc270
 800d560:	e000e400 	.word	0xe000e400
 800d564:	200008b4 	.word	0x200008b4
 800d568:	200008b8 	.word	0x200008b8
 800d56c:	e000ed20 	.word	0xe000ed20
 800d570:	2000000c 	.word	0x2000000c
 800d574:	e000ef34 	.word	0xe000ef34

0800d578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	607b      	str	r3, [r7, #4]
}
 800d590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d592:	4b10      	ldr	r3, [pc, #64]	@ (800d5d4 <vPortEnterCritical+0x5c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3301      	adds	r3, #1
 800d598:	4a0e      	ldr	r2, [pc, #56]	@ (800d5d4 <vPortEnterCritical+0x5c>)
 800d59a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d59c:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d4 <vPortEnterCritical+0x5c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d110      	bne.n	800d5c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d8 <vPortEnterCritical+0x60>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00b      	beq.n	800d5c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	603b      	str	r3, [r7, #0]
}
 800d5c0:	bf00      	nop
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <vPortEnterCritical+0x4a>
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	2000000c 	.word	0x2000000c
 800d5d8:	e000ed04 	.word	0xe000ed04

0800d5dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5e2:	4b12      	ldr	r3, [pc, #72]	@ (800d62c <vPortExitCritical+0x50>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10b      	bne.n	800d602 <vPortExitCritical+0x26>
	__asm volatile
 800d5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	607b      	str	r3, [r7, #4]
}
 800d5fc:	bf00      	nop
 800d5fe:	bf00      	nop
 800d600:	e7fd      	b.n	800d5fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d602:	4b0a      	ldr	r3, [pc, #40]	@ (800d62c <vPortExitCritical+0x50>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3b01      	subs	r3, #1
 800d608:	4a08      	ldr	r2, [pc, #32]	@ (800d62c <vPortExitCritical+0x50>)
 800d60a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d60c:	4b07      	ldr	r3, [pc, #28]	@ (800d62c <vPortExitCritical+0x50>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d105      	bne.n	800d620 <vPortExitCritical+0x44>
 800d614:	2300      	movs	r3, #0
 800d616:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f383 8811 	msr	BASEPRI, r3
}
 800d61e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	2000000c 	.word	0x2000000c

0800d630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d630:	f3ef 8009 	mrs	r0, PSP
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	4b15      	ldr	r3, [pc, #84]	@ (800d690 <pxCurrentTCBConst>)
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	f01e 0f10 	tst.w	lr, #16
 800d640:	bf08      	it	eq
 800d642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64a:	6010      	str	r0, [r2, #0]
 800d64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d654:	f380 8811 	msr	BASEPRI, r0
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f7ff f9f4 	bl	800ca4c <vTaskSwitchContext>
 800d664:	f04f 0000 	mov.w	r0, #0
 800d668:	f380 8811 	msr	BASEPRI, r0
 800d66c:	bc09      	pop	{r0, r3}
 800d66e:	6819      	ldr	r1, [r3, #0]
 800d670:	6808      	ldr	r0, [r1, #0]
 800d672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d676:	f01e 0f10 	tst.w	lr, #16
 800d67a:	bf08      	it	eq
 800d67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d680:	f380 8809 	msr	PSP, r0
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	f3af 8000 	nop.w

0800d690 <pxCurrentTCBConst>:
 800d690:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop

0800d698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	607b      	str	r3, [r7, #4]
}
 800d6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6b2:	f7ff f911 	bl	800c8d8 <xTaskIncrementTick>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d003      	beq.n	800d6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6bc:	4b06      	ldr	r3, [pc, #24]	@ (800d6d8 <xPortSysTickHandler+0x40>)
 800d6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	f383 8811 	msr	BASEPRI, r3
}
 800d6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6d0:	bf00      	nop
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d710 <vPortSetupTimerInterrupt+0x34>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d714 <vPortSetupTimerInterrupt+0x38>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d718 <vPortSetupTimerInterrupt+0x3c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a0a      	ldr	r2, [pc, #40]	@ (800d71c <vPortSetupTimerInterrupt+0x40>)
 800d6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f6:	099b      	lsrs	r3, r3, #6
 800d6f8:	4a09      	ldr	r2, [pc, #36]	@ (800d720 <vPortSetupTimerInterrupt+0x44>)
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6fe:	4b04      	ldr	r3, [pc, #16]	@ (800d710 <vPortSetupTimerInterrupt+0x34>)
 800d700:	2207      	movs	r2, #7
 800d702:	601a      	str	r2, [r3, #0]
}
 800d704:	bf00      	nop
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	e000e010 	.word	0xe000e010
 800d714:	e000e018 	.word	0xe000e018
 800d718:	20000000 	.word	0x20000000
 800d71c:	10624dd3 	.word	0x10624dd3
 800d720:	e000e014 	.word	0xe000e014

0800d724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d734 <vPortEnableVFP+0x10>
 800d728:	6801      	ldr	r1, [r0, #0]
 800d72a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d72e:	6001      	str	r1, [r0, #0]
 800d730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d732:	bf00      	nop
 800d734:	e000ed88 	.word	0xe000ed88

0800d738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d73e:	f3ef 8305 	mrs	r3, IPSR
 800d742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b0f      	cmp	r3, #15
 800d748:	d915      	bls.n	800d776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d74a:	4a18      	ldr	r2, [pc, #96]	@ (800d7ac <vPortValidateInterruptPriority+0x74>)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d754:	4b16      	ldr	r3, [pc, #88]	@ (800d7b0 <vPortValidateInterruptPriority+0x78>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	7afa      	ldrb	r2, [r7, #11]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d20b      	bcs.n	800d776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	607b      	str	r3, [r7, #4]
}
 800d770:	bf00      	nop
 800d772:	bf00      	nop
 800d774:	e7fd      	b.n	800d772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d776:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b4 <vPortValidateInterruptPriority+0x7c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d77e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b8 <vPortValidateInterruptPriority+0x80>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d90b      	bls.n	800d79e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	603b      	str	r3, [r7, #0]
}
 800d798:	bf00      	nop
 800d79a:	bf00      	nop
 800d79c:	e7fd      	b.n	800d79a <vPortValidateInterruptPriority+0x62>
	}
 800d79e:	bf00      	nop
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	e000e3f0 	.word	0xe000e3f0
 800d7b0:	200008b4 	.word	0x200008b4
 800d7b4:	e000ed0c 	.word	0xe000ed0c
 800d7b8:	200008b8 	.word	0x200008b8

0800d7bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08a      	sub	sp, #40	@ 0x28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7c8:	f7fe ffb8 	bl	800c73c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800d940 <pvPortMalloc+0x184>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d7d4:	f000 f924 	bl	800da20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d7d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d944 <pvPortMalloc+0x188>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f040 8095 	bne.w	800d910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01e      	beq.n	800d82a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d7ec:	2208      	movs	r2, #8
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d015      	beq.n	800d82a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f023 0307 	bic.w	r3, r3, #7
 800d804:	3308      	adds	r3, #8
 800d806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f003 0307 	and.w	r3, r3, #7
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00b      	beq.n	800d82a <pvPortMalloc+0x6e>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	617b      	str	r3, [r7, #20]
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	e7fd      	b.n	800d826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d06f      	beq.n	800d910 <pvPortMalloc+0x154>
 800d830:	4b45      	ldr	r3, [pc, #276]	@ (800d948 <pvPortMalloc+0x18c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	429a      	cmp	r2, r3
 800d838:	d86a      	bhi.n	800d910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d83a:	4b44      	ldr	r3, [pc, #272]	@ (800d94c <pvPortMalloc+0x190>)
 800d83c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d83e:	4b43      	ldr	r3, [pc, #268]	@ (800d94c <pvPortMalloc+0x190>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d844:	e004      	b.n	800d850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	429a      	cmp	r2, r3
 800d858:	d903      	bls.n	800d862 <pvPortMalloc+0xa6>
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1f1      	bne.n	800d846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d862:	4b37      	ldr	r3, [pc, #220]	@ (800d940 <pvPortMalloc+0x184>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d868:	429a      	cmp	r2, r3
 800d86a:	d051      	beq.n	800d910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2208      	movs	r2, #8
 800d872:	4413      	add	r3, r2
 800d874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	1ad2      	subs	r2, r2, r3
 800d886:	2308      	movs	r3, #8
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d920      	bls.n	800d8d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d88e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4413      	add	r3, r2
 800d894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00b      	beq.n	800d8b8 <pvPortMalloc+0xfc>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	613b      	str	r3, [r7, #16]
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	e7fd      	b.n	800d8b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8ca:	69b8      	ldr	r0, [r7, #24]
 800d8cc:	f000 f90a 	bl	800dae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d8d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d948 <pvPortMalloc+0x18c>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	4a1b      	ldr	r2, [pc, #108]	@ (800d948 <pvPortMalloc+0x18c>)
 800d8dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d8de:	4b1a      	ldr	r3, [pc, #104]	@ (800d948 <pvPortMalloc+0x18c>)
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d950 <pvPortMalloc+0x194>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d203      	bcs.n	800d8f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8ea:	4b17      	ldr	r3, [pc, #92]	@ (800d948 <pvPortMalloc+0x18c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a18      	ldr	r2, [pc, #96]	@ (800d950 <pvPortMalloc+0x194>)
 800d8f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	4b13      	ldr	r3, [pc, #76]	@ (800d944 <pvPortMalloc+0x188>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d906:	4b13      	ldr	r3, [pc, #76]	@ (800d954 <pvPortMalloc+0x198>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3301      	adds	r3, #1
 800d90c:	4a11      	ldr	r2, [pc, #68]	@ (800d954 <pvPortMalloc+0x198>)
 800d90e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d910:	f7fe ff22 	bl	800c758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	f003 0307 	and.w	r3, r3, #7
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00b      	beq.n	800d936 <pvPortMalloc+0x17a>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	60fb      	str	r3, [r7, #12]
}
 800d930:	bf00      	nop
 800d932:	bf00      	nop
 800d934:	e7fd      	b.n	800d932 <pvPortMalloc+0x176>
	return pvReturn;
 800d936:	69fb      	ldr	r3, [r7, #28]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3728      	adds	r7, #40	@ 0x28
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	200044c4 	.word	0x200044c4
 800d944:	200044d8 	.word	0x200044d8
 800d948:	200044c8 	.word	0x200044c8
 800d94c:	200044bc 	.word	0x200044bc
 800d950:	200044cc 	.word	0x200044cc
 800d954:	200044d0 	.word	0x200044d0

0800d958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d04f      	beq.n	800da0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d96a:	2308      	movs	r3, #8
 800d96c:	425b      	negs	r3, r3
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	4413      	add	r3, r2
 800d972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	4b25      	ldr	r3, [pc, #148]	@ (800da14 <vPortFree+0xbc>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4013      	ands	r3, r2
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10b      	bne.n	800d99e <vPortFree+0x46>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	60fb      	str	r3, [r7, #12]
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	e7fd      	b.n	800d99a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <vPortFree+0x66>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	60bb      	str	r3, [r7, #8]
}
 800d9b8:	bf00      	nop
 800d9ba:	bf00      	nop
 800d9bc:	e7fd      	b.n	800d9ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	4b14      	ldr	r3, [pc, #80]	@ (800da14 <vPortFree+0xbc>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d01e      	beq.n	800da0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d11a      	bne.n	800da0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <vPortFree+0xbc>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	43db      	mvns	r3, r3
 800d9de:	401a      	ands	r2, r3
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9e4:	f7fe feaa 	bl	800c73c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800da18 <vPortFree+0xc0>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	4a09      	ldr	r2, [pc, #36]	@ (800da18 <vPortFree+0xc0>)
 800d9f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9f6:	6938      	ldr	r0, [r7, #16]
 800d9f8:	f000 f874 	bl	800dae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <vPortFree+0xc4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3301      	adds	r3, #1
 800da02:	4a06      	ldr	r2, [pc, #24]	@ (800da1c <vPortFree+0xc4>)
 800da04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da06:	f7fe fea7 	bl	800c758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da0a:	bf00      	nop
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	200044d8 	.word	0x200044d8
 800da18:	200044c8 	.word	0x200044c8
 800da1c:	200044d4 	.word	0x200044d4

0800da20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800da2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da2c:	4b27      	ldr	r3, [pc, #156]	@ (800dacc <prvHeapInit+0xac>)
 800da2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00c      	beq.n	800da54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	3307      	adds	r3, #7
 800da3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f023 0307 	bic.w	r3, r3, #7
 800da46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	4a1f      	ldr	r2, [pc, #124]	@ (800dacc <prvHeapInit+0xac>)
 800da50:	4413      	add	r3, r2
 800da52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da58:	4a1d      	ldr	r2, [pc, #116]	@ (800dad0 <prvHeapInit+0xb0>)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da5e:	4b1c      	ldr	r3, [pc, #112]	@ (800dad0 <prvHeapInit+0xb0>)
 800da60:	2200      	movs	r2, #0
 800da62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	4413      	add	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da6c:	2208      	movs	r2, #8
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	1a9b      	subs	r3, r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f023 0307 	bic.w	r3, r3, #7
 800da7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4a15      	ldr	r2, [pc, #84]	@ (800dad4 <prvHeapInit+0xb4>)
 800da80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da82:	4b14      	ldr	r3, [pc, #80]	@ (800dad4 <prvHeapInit+0xb4>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2200      	movs	r2, #0
 800da88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da8a:	4b12      	ldr	r3, [pc, #72]	@ (800dad4 <prvHeapInit+0xb4>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2200      	movs	r2, #0
 800da90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	1ad2      	subs	r2, r2, r3
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800daa0:	4b0c      	ldr	r3, [pc, #48]	@ (800dad4 <prvHeapInit+0xb4>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	4a0a      	ldr	r2, [pc, #40]	@ (800dad8 <prvHeapInit+0xb8>)
 800daae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	4a09      	ldr	r2, [pc, #36]	@ (800dadc <prvHeapInit+0xbc>)
 800dab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dab8:	4b09      	ldr	r3, [pc, #36]	@ (800dae0 <prvHeapInit+0xc0>)
 800daba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dabe:	601a      	str	r2, [r3, #0]
}
 800dac0:	bf00      	nop
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	200008bc 	.word	0x200008bc
 800dad0:	200044bc 	.word	0x200044bc
 800dad4:	200044c4 	.word	0x200044c4
 800dad8:	200044cc 	.word	0x200044cc
 800dadc:	200044c8 	.word	0x200044c8
 800dae0:	200044d8 	.word	0x200044d8

0800dae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800daec:	4b28      	ldr	r3, [pc, #160]	@ (800db90 <prvInsertBlockIntoFreeList+0xac>)
 800daee:	60fb      	str	r3, [r7, #12]
 800daf0:	e002      	b.n	800daf8 <prvInsertBlockIntoFreeList+0x14>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d8f7      	bhi.n	800daf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	4413      	add	r3, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	429a      	cmp	r2, r3
 800db12:	d108      	bne.n	800db26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	685a      	ldr	r2, [r3, #4]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	441a      	add	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	441a      	add	r2, r3
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	d118      	bne.n	800db6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	4b15      	ldr	r3, [pc, #84]	@ (800db94 <prvInsertBlockIntoFreeList+0xb0>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d00d      	beq.n	800db62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	441a      	add	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	e008      	b.n	800db74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db62:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <prvInsertBlockIntoFreeList+0xb0>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	e003      	b.n	800db74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d002      	beq.n	800db82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db82:	bf00      	nop
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	200044bc 	.word	0x200044bc
 800db94:	200044c4 	.word	0x200044c4

0800db98 <__cvt>:
 800db98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db9c:	ec57 6b10 	vmov	r6, r7, d0
 800dba0:	2f00      	cmp	r7, #0
 800dba2:	460c      	mov	r4, r1
 800dba4:	4619      	mov	r1, r3
 800dba6:	463b      	mov	r3, r7
 800dba8:	bfbb      	ittet	lt
 800dbaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dbae:	461f      	movlt	r7, r3
 800dbb0:	2300      	movge	r3, #0
 800dbb2:	232d      	movlt	r3, #45	@ 0x2d
 800dbb4:	700b      	strb	r3, [r1, #0]
 800dbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dbb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dbbc:	4691      	mov	r9, r2
 800dbbe:	f023 0820 	bic.w	r8, r3, #32
 800dbc2:	bfbc      	itt	lt
 800dbc4:	4632      	movlt	r2, r6
 800dbc6:	4616      	movlt	r6, r2
 800dbc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dbcc:	d005      	beq.n	800dbda <__cvt+0x42>
 800dbce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dbd2:	d100      	bne.n	800dbd6 <__cvt+0x3e>
 800dbd4:	3401      	adds	r4, #1
 800dbd6:	2102      	movs	r1, #2
 800dbd8:	e000      	b.n	800dbdc <__cvt+0x44>
 800dbda:	2103      	movs	r1, #3
 800dbdc:	ab03      	add	r3, sp, #12
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	ab02      	add	r3, sp, #8
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	ec47 6b10 	vmov	d0, r6, r7
 800dbe8:	4653      	mov	r3, sl
 800dbea:	4622      	mov	r2, r4
 800dbec:	f001 f87c 	bl	800ece8 <_dtoa_r>
 800dbf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	d119      	bne.n	800dc2c <__cvt+0x94>
 800dbf8:	f019 0f01 	tst.w	r9, #1
 800dbfc:	d00e      	beq.n	800dc1c <__cvt+0x84>
 800dbfe:	eb00 0904 	add.w	r9, r0, r4
 800dc02:	2200      	movs	r2, #0
 800dc04:	2300      	movs	r3, #0
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc0e:	b108      	cbz	r0, 800dc14 <__cvt+0x7c>
 800dc10:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc14:	2230      	movs	r2, #48	@ 0x30
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	454b      	cmp	r3, r9
 800dc1a:	d31e      	bcc.n	800dc5a <__cvt+0xc2>
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc20:	1b5b      	subs	r3, r3, r5
 800dc22:	4628      	mov	r0, r5
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	b004      	add	sp, #16
 800dc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc30:	eb00 0904 	add.w	r9, r0, r4
 800dc34:	d1e5      	bne.n	800dc02 <__cvt+0x6a>
 800dc36:	7803      	ldrb	r3, [r0, #0]
 800dc38:	2b30      	cmp	r3, #48	@ 0x30
 800dc3a:	d10a      	bne.n	800dc52 <__cvt+0xba>
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2300      	movs	r3, #0
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc48:	b918      	cbnz	r0, 800dc52 <__cvt+0xba>
 800dc4a:	f1c4 0401 	rsb	r4, r4, #1
 800dc4e:	f8ca 4000 	str.w	r4, [sl]
 800dc52:	f8da 3000 	ldr.w	r3, [sl]
 800dc56:	4499      	add	r9, r3
 800dc58:	e7d3      	b.n	800dc02 <__cvt+0x6a>
 800dc5a:	1c59      	adds	r1, r3, #1
 800dc5c:	9103      	str	r1, [sp, #12]
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	e7d9      	b.n	800dc16 <__cvt+0x7e>

0800dc62 <__exponent>:
 800dc62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc64:	2900      	cmp	r1, #0
 800dc66:	bfba      	itte	lt
 800dc68:	4249      	neglt	r1, r1
 800dc6a:	232d      	movlt	r3, #45	@ 0x2d
 800dc6c:	232b      	movge	r3, #43	@ 0x2b
 800dc6e:	2909      	cmp	r1, #9
 800dc70:	7002      	strb	r2, [r0, #0]
 800dc72:	7043      	strb	r3, [r0, #1]
 800dc74:	dd29      	ble.n	800dcca <__exponent+0x68>
 800dc76:	f10d 0307 	add.w	r3, sp, #7
 800dc7a:	461d      	mov	r5, r3
 800dc7c:	270a      	movs	r7, #10
 800dc7e:	461a      	mov	r2, r3
 800dc80:	fbb1 f6f7 	udiv	r6, r1, r7
 800dc84:	fb07 1416 	mls	r4, r7, r6, r1
 800dc88:	3430      	adds	r4, #48	@ 0x30
 800dc8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dc8e:	460c      	mov	r4, r1
 800dc90:	2c63      	cmp	r4, #99	@ 0x63
 800dc92:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc96:	4631      	mov	r1, r6
 800dc98:	dcf1      	bgt.n	800dc7e <__exponent+0x1c>
 800dc9a:	3130      	adds	r1, #48	@ 0x30
 800dc9c:	1e94      	subs	r4, r2, #2
 800dc9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dca2:	1c41      	adds	r1, r0, #1
 800dca4:	4623      	mov	r3, r4
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	d30a      	bcc.n	800dcc0 <__exponent+0x5e>
 800dcaa:	f10d 0309 	add.w	r3, sp, #9
 800dcae:	1a9b      	subs	r3, r3, r2
 800dcb0:	42ac      	cmp	r4, r5
 800dcb2:	bf88      	it	hi
 800dcb4:	2300      	movhi	r3, #0
 800dcb6:	3302      	adds	r3, #2
 800dcb8:	4403      	add	r3, r0
 800dcba:	1a18      	subs	r0, r3, r0
 800dcbc:	b003      	add	sp, #12
 800dcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dcc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dcc8:	e7ed      	b.n	800dca6 <__exponent+0x44>
 800dcca:	2330      	movs	r3, #48	@ 0x30
 800dccc:	3130      	adds	r1, #48	@ 0x30
 800dcce:	7083      	strb	r3, [r0, #2]
 800dcd0:	70c1      	strb	r1, [r0, #3]
 800dcd2:	1d03      	adds	r3, r0, #4
 800dcd4:	e7f1      	b.n	800dcba <__exponent+0x58>
	...

0800dcd8 <_printf_float>:
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	b08d      	sub	sp, #52	@ 0x34
 800dcde:	460c      	mov	r4, r1
 800dce0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dce4:	4616      	mov	r6, r2
 800dce6:	461f      	mov	r7, r3
 800dce8:	4605      	mov	r5, r0
 800dcea:	f000 fee9 	bl	800eac0 <_localeconv_r>
 800dcee:	6803      	ldr	r3, [r0, #0]
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7f2 fabc 	bl	8000270 <strlen>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcfc:	f8d8 3000 	ldr.w	r3, [r8]
 800dd00:	9005      	str	r0, [sp, #20]
 800dd02:	3307      	adds	r3, #7
 800dd04:	f023 0307 	bic.w	r3, r3, #7
 800dd08:	f103 0208 	add.w	r2, r3, #8
 800dd0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dd10:	f8d4 b000 	ldr.w	fp, [r4]
 800dd14:	f8c8 2000 	str.w	r2, [r8]
 800dd18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dd20:	9307      	str	r3, [sp, #28]
 800dd22:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd2e:	4b9c      	ldr	r3, [pc, #624]	@ (800dfa0 <_printf_float+0x2c8>)
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	f7f2 fefa 	bl	8000b2c <__aeabi_dcmpun>
 800dd38:	bb70      	cbnz	r0, 800dd98 <_printf_float+0xc0>
 800dd3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd3e:	4b98      	ldr	r3, [pc, #608]	@ (800dfa0 <_printf_float+0x2c8>)
 800dd40:	f04f 32ff 	mov.w	r2, #4294967295
 800dd44:	f7f2 fed4 	bl	8000af0 <__aeabi_dcmple>
 800dd48:	bb30      	cbnz	r0, 800dd98 <_printf_float+0xc0>
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4640      	mov	r0, r8
 800dd50:	4649      	mov	r1, r9
 800dd52:	f7f2 fec3 	bl	8000adc <__aeabi_dcmplt>
 800dd56:	b110      	cbz	r0, 800dd5e <_printf_float+0x86>
 800dd58:	232d      	movs	r3, #45	@ 0x2d
 800dd5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd5e:	4a91      	ldr	r2, [pc, #580]	@ (800dfa4 <_printf_float+0x2cc>)
 800dd60:	4b91      	ldr	r3, [pc, #580]	@ (800dfa8 <_printf_float+0x2d0>)
 800dd62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dd66:	bf8c      	ite	hi
 800dd68:	4690      	movhi	r8, r2
 800dd6a:	4698      	movls	r8, r3
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	6123      	str	r3, [r4, #16]
 800dd70:	f02b 0304 	bic.w	r3, fp, #4
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	f04f 0900 	mov.w	r9, #0
 800dd7a:	9700      	str	r7, [sp, #0]
 800dd7c:	4633      	mov	r3, r6
 800dd7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dd80:	4621      	mov	r1, r4
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 f9d2 	bl	800e12c <_printf_common>
 800dd88:	3001      	adds	r0, #1
 800dd8a:	f040 808d 	bne.w	800dea8 <_printf_float+0x1d0>
 800dd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd92:	b00d      	add	sp, #52	@ 0x34
 800dd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd98:	4642      	mov	r2, r8
 800dd9a:	464b      	mov	r3, r9
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	4649      	mov	r1, r9
 800dda0:	f7f2 fec4 	bl	8000b2c <__aeabi_dcmpun>
 800dda4:	b140      	cbz	r0, 800ddb8 <_printf_float+0xe0>
 800dda6:	464b      	mov	r3, r9
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	bfbc      	itt	lt
 800ddac:	232d      	movlt	r3, #45	@ 0x2d
 800ddae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ddb2:	4a7e      	ldr	r2, [pc, #504]	@ (800dfac <_printf_float+0x2d4>)
 800ddb4:	4b7e      	ldr	r3, [pc, #504]	@ (800dfb0 <_printf_float+0x2d8>)
 800ddb6:	e7d4      	b.n	800dd62 <_printf_float+0x8a>
 800ddb8:	6863      	ldr	r3, [r4, #4]
 800ddba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ddbe:	9206      	str	r2, [sp, #24]
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	d13b      	bne.n	800de3c <_printf_float+0x164>
 800ddc4:	2306      	movs	r3, #6
 800ddc6:	6063      	str	r3, [r4, #4]
 800ddc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ddcc:	2300      	movs	r3, #0
 800ddce:	6022      	str	r2, [r4, #0]
 800ddd0:	9303      	str	r3, [sp, #12]
 800ddd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800ddd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ddd8:	ab09      	add	r3, sp, #36	@ 0x24
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	6861      	ldr	r1, [r4, #4]
 800ddde:	ec49 8b10 	vmov	d0, r8, r9
 800dde2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7ff fed6 	bl	800db98 <__cvt>
 800ddec:	9b06      	ldr	r3, [sp, #24]
 800ddee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddf0:	2b47      	cmp	r3, #71	@ 0x47
 800ddf2:	4680      	mov	r8, r0
 800ddf4:	d129      	bne.n	800de4a <_printf_float+0x172>
 800ddf6:	1cc8      	adds	r0, r1, #3
 800ddf8:	db02      	blt.n	800de00 <_printf_float+0x128>
 800ddfa:	6863      	ldr	r3, [r4, #4]
 800ddfc:	4299      	cmp	r1, r3
 800ddfe:	dd41      	ble.n	800de84 <_printf_float+0x1ac>
 800de00:	f1aa 0a02 	sub.w	sl, sl, #2
 800de04:	fa5f fa8a 	uxtb.w	sl, sl
 800de08:	3901      	subs	r1, #1
 800de0a:	4652      	mov	r2, sl
 800de0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de10:	9109      	str	r1, [sp, #36]	@ 0x24
 800de12:	f7ff ff26 	bl	800dc62 <__exponent>
 800de16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de18:	1813      	adds	r3, r2, r0
 800de1a:	2a01      	cmp	r2, #1
 800de1c:	4681      	mov	r9, r0
 800de1e:	6123      	str	r3, [r4, #16]
 800de20:	dc02      	bgt.n	800de28 <_printf_float+0x150>
 800de22:	6822      	ldr	r2, [r4, #0]
 800de24:	07d2      	lsls	r2, r2, #31
 800de26:	d501      	bpl.n	800de2c <_printf_float+0x154>
 800de28:	3301      	adds	r3, #1
 800de2a:	6123      	str	r3, [r4, #16]
 800de2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800de30:	2b00      	cmp	r3, #0
 800de32:	d0a2      	beq.n	800dd7a <_printf_float+0xa2>
 800de34:	232d      	movs	r3, #45	@ 0x2d
 800de36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de3a:	e79e      	b.n	800dd7a <_printf_float+0xa2>
 800de3c:	9a06      	ldr	r2, [sp, #24]
 800de3e:	2a47      	cmp	r2, #71	@ 0x47
 800de40:	d1c2      	bne.n	800ddc8 <_printf_float+0xf0>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1c0      	bne.n	800ddc8 <_printf_float+0xf0>
 800de46:	2301      	movs	r3, #1
 800de48:	e7bd      	b.n	800ddc6 <_printf_float+0xee>
 800de4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800de4e:	d9db      	bls.n	800de08 <_printf_float+0x130>
 800de50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800de54:	d118      	bne.n	800de88 <_printf_float+0x1b0>
 800de56:	2900      	cmp	r1, #0
 800de58:	6863      	ldr	r3, [r4, #4]
 800de5a:	dd0b      	ble.n	800de74 <_printf_float+0x19c>
 800de5c:	6121      	str	r1, [r4, #16]
 800de5e:	b913      	cbnz	r3, 800de66 <_printf_float+0x18e>
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	07d0      	lsls	r0, r2, #31
 800de64:	d502      	bpl.n	800de6c <_printf_float+0x194>
 800de66:	3301      	adds	r3, #1
 800de68:	440b      	add	r3, r1
 800de6a:	6123      	str	r3, [r4, #16]
 800de6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800de6e:	f04f 0900 	mov.w	r9, #0
 800de72:	e7db      	b.n	800de2c <_printf_float+0x154>
 800de74:	b913      	cbnz	r3, 800de7c <_printf_float+0x1a4>
 800de76:	6822      	ldr	r2, [r4, #0]
 800de78:	07d2      	lsls	r2, r2, #31
 800de7a:	d501      	bpl.n	800de80 <_printf_float+0x1a8>
 800de7c:	3302      	adds	r3, #2
 800de7e:	e7f4      	b.n	800de6a <_printf_float+0x192>
 800de80:	2301      	movs	r3, #1
 800de82:	e7f2      	b.n	800de6a <_printf_float+0x192>
 800de84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800de88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de8a:	4299      	cmp	r1, r3
 800de8c:	db05      	blt.n	800de9a <_printf_float+0x1c2>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	6121      	str	r1, [r4, #16]
 800de92:	07d8      	lsls	r0, r3, #31
 800de94:	d5ea      	bpl.n	800de6c <_printf_float+0x194>
 800de96:	1c4b      	adds	r3, r1, #1
 800de98:	e7e7      	b.n	800de6a <_printf_float+0x192>
 800de9a:	2900      	cmp	r1, #0
 800de9c:	bfd4      	ite	le
 800de9e:	f1c1 0202 	rsble	r2, r1, #2
 800dea2:	2201      	movgt	r2, #1
 800dea4:	4413      	add	r3, r2
 800dea6:	e7e0      	b.n	800de6a <_printf_float+0x192>
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	055a      	lsls	r2, r3, #21
 800deac:	d407      	bmi.n	800debe <_printf_float+0x1e6>
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	4642      	mov	r2, r8
 800deb2:	4631      	mov	r1, r6
 800deb4:	4628      	mov	r0, r5
 800deb6:	47b8      	blx	r7
 800deb8:	3001      	adds	r0, #1
 800deba:	d12b      	bne.n	800df14 <_printf_float+0x23c>
 800debc:	e767      	b.n	800dd8e <_printf_float+0xb6>
 800debe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dec2:	f240 80dd 	bls.w	800e080 <_printf_float+0x3a8>
 800dec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800deca:	2200      	movs	r2, #0
 800decc:	2300      	movs	r3, #0
 800dece:	f7f2 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d033      	beq.n	800df3e <_printf_float+0x266>
 800ded6:	4a37      	ldr	r2, [pc, #220]	@ (800dfb4 <_printf_float+0x2dc>)
 800ded8:	2301      	movs	r3, #1
 800deda:	4631      	mov	r1, r6
 800dedc:	4628      	mov	r0, r5
 800dede:	47b8      	blx	r7
 800dee0:	3001      	adds	r0, #1
 800dee2:	f43f af54 	beq.w	800dd8e <_printf_float+0xb6>
 800dee6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800deea:	4543      	cmp	r3, r8
 800deec:	db02      	blt.n	800def4 <_printf_float+0x21c>
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	07d8      	lsls	r0, r3, #31
 800def2:	d50f      	bpl.n	800df14 <_printf_float+0x23c>
 800def4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800def8:	4631      	mov	r1, r6
 800defa:	4628      	mov	r0, r5
 800defc:	47b8      	blx	r7
 800defe:	3001      	adds	r0, #1
 800df00:	f43f af45 	beq.w	800dd8e <_printf_float+0xb6>
 800df04:	f04f 0900 	mov.w	r9, #0
 800df08:	f108 38ff 	add.w	r8, r8, #4294967295
 800df0c:	f104 0a1a 	add.w	sl, r4, #26
 800df10:	45c8      	cmp	r8, r9
 800df12:	dc09      	bgt.n	800df28 <_printf_float+0x250>
 800df14:	6823      	ldr	r3, [r4, #0]
 800df16:	079b      	lsls	r3, r3, #30
 800df18:	f100 8103 	bmi.w	800e122 <_printf_float+0x44a>
 800df1c:	68e0      	ldr	r0, [r4, #12]
 800df1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df20:	4298      	cmp	r0, r3
 800df22:	bfb8      	it	lt
 800df24:	4618      	movlt	r0, r3
 800df26:	e734      	b.n	800dd92 <_printf_float+0xba>
 800df28:	2301      	movs	r3, #1
 800df2a:	4652      	mov	r2, sl
 800df2c:	4631      	mov	r1, r6
 800df2e:	4628      	mov	r0, r5
 800df30:	47b8      	blx	r7
 800df32:	3001      	adds	r0, #1
 800df34:	f43f af2b 	beq.w	800dd8e <_printf_float+0xb6>
 800df38:	f109 0901 	add.w	r9, r9, #1
 800df3c:	e7e8      	b.n	800df10 <_printf_float+0x238>
 800df3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	dc39      	bgt.n	800dfb8 <_printf_float+0x2e0>
 800df44:	4a1b      	ldr	r2, [pc, #108]	@ (800dfb4 <_printf_float+0x2dc>)
 800df46:	2301      	movs	r3, #1
 800df48:	4631      	mov	r1, r6
 800df4a:	4628      	mov	r0, r5
 800df4c:	47b8      	blx	r7
 800df4e:	3001      	adds	r0, #1
 800df50:	f43f af1d 	beq.w	800dd8e <_printf_float+0xb6>
 800df54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800df58:	ea59 0303 	orrs.w	r3, r9, r3
 800df5c:	d102      	bne.n	800df64 <_printf_float+0x28c>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	07d9      	lsls	r1, r3, #31
 800df62:	d5d7      	bpl.n	800df14 <_printf_float+0x23c>
 800df64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df68:	4631      	mov	r1, r6
 800df6a:	4628      	mov	r0, r5
 800df6c:	47b8      	blx	r7
 800df6e:	3001      	adds	r0, #1
 800df70:	f43f af0d 	beq.w	800dd8e <_printf_float+0xb6>
 800df74:	f04f 0a00 	mov.w	sl, #0
 800df78:	f104 0b1a 	add.w	fp, r4, #26
 800df7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df7e:	425b      	negs	r3, r3
 800df80:	4553      	cmp	r3, sl
 800df82:	dc01      	bgt.n	800df88 <_printf_float+0x2b0>
 800df84:	464b      	mov	r3, r9
 800df86:	e793      	b.n	800deb0 <_printf_float+0x1d8>
 800df88:	2301      	movs	r3, #1
 800df8a:	465a      	mov	r2, fp
 800df8c:	4631      	mov	r1, r6
 800df8e:	4628      	mov	r0, r5
 800df90:	47b8      	blx	r7
 800df92:	3001      	adds	r0, #1
 800df94:	f43f aefb 	beq.w	800dd8e <_printf_float+0xb6>
 800df98:	f10a 0a01 	add.w	sl, sl, #1
 800df9c:	e7ee      	b.n	800df7c <_printf_float+0x2a4>
 800df9e:	bf00      	nop
 800dfa0:	7fefffff 	.word	0x7fefffff
 800dfa4:	0801289c 	.word	0x0801289c
 800dfa8:	08012898 	.word	0x08012898
 800dfac:	080128a4 	.word	0x080128a4
 800dfb0:	080128a0 	.word	0x080128a0
 800dfb4:	080128a8 	.word	0x080128a8
 800dfb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dfba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dfbe:	4553      	cmp	r3, sl
 800dfc0:	bfa8      	it	ge
 800dfc2:	4653      	movge	r3, sl
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	4699      	mov	r9, r3
 800dfc8:	dc36      	bgt.n	800e038 <_printf_float+0x360>
 800dfca:	f04f 0b00 	mov.w	fp, #0
 800dfce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfd2:	f104 021a 	add.w	r2, r4, #26
 800dfd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dfd8:	9306      	str	r3, [sp, #24]
 800dfda:	eba3 0309 	sub.w	r3, r3, r9
 800dfde:	455b      	cmp	r3, fp
 800dfe0:	dc31      	bgt.n	800e046 <_printf_float+0x36e>
 800dfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe4:	459a      	cmp	sl, r3
 800dfe6:	dc3a      	bgt.n	800e05e <_printf_float+0x386>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	07da      	lsls	r2, r3, #31
 800dfec:	d437      	bmi.n	800e05e <_printf_float+0x386>
 800dfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff0:	ebaa 0903 	sub.w	r9, sl, r3
 800dff4:	9b06      	ldr	r3, [sp, #24]
 800dff6:	ebaa 0303 	sub.w	r3, sl, r3
 800dffa:	4599      	cmp	r9, r3
 800dffc:	bfa8      	it	ge
 800dffe:	4699      	movge	r9, r3
 800e000:	f1b9 0f00 	cmp.w	r9, #0
 800e004:	dc33      	bgt.n	800e06e <_printf_float+0x396>
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e00e:	f104 0b1a 	add.w	fp, r4, #26
 800e012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e014:	ebaa 0303 	sub.w	r3, sl, r3
 800e018:	eba3 0309 	sub.w	r3, r3, r9
 800e01c:	4543      	cmp	r3, r8
 800e01e:	f77f af79 	ble.w	800df14 <_printf_float+0x23c>
 800e022:	2301      	movs	r3, #1
 800e024:	465a      	mov	r2, fp
 800e026:	4631      	mov	r1, r6
 800e028:	4628      	mov	r0, r5
 800e02a:	47b8      	blx	r7
 800e02c:	3001      	adds	r0, #1
 800e02e:	f43f aeae 	beq.w	800dd8e <_printf_float+0xb6>
 800e032:	f108 0801 	add.w	r8, r8, #1
 800e036:	e7ec      	b.n	800e012 <_printf_float+0x33a>
 800e038:	4642      	mov	r2, r8
 800e03a:	4631      	mov	r1, r6
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b8      	blx	r7
 800e040:	3001      	adds	r0, #1
 800e042:	d1c2      	bne.n	800dfca <_printf_float+0x2f2>
 800e044:	e6a3      	b.n	800dd8e <_printf_float+0xb6>
 800e046:	2301      	movs	r3, #1
 800e048:	4631      	mov	r1, r6
 800e04a:	4628      	mov	r0, r5
 800e04c:	9206      	str	r2, [sp, #24]
 800e04e:	47b8      	blx	r7
 800e050:	3001      	adds	r0, #1
 800e052:	f43f ae9c 	beq.w	800dd8e <_printf_float+0xb6>
 800e056:	9a06      	ldr	r2, [sp, #24]
 800e058:	f10b 0b01 	add.w	fp, fp, #1
 800e05c:	e7bb      	b.n	800dfd6 <_printf_float+0x2fe>
 800e05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e062:	4631      	mov	r1, r6
 800e064:	4628      	mov	r0, r5
 800e066:	47b8      	blx	r7
 800e068:	3001      	adds	r0, #1
 800e06a:	d1c0      	bne.n	800dfee <_printf_float+0x316>
 800e06c:	e68f      	b.n	800dd8e <_printf_float+0xb6>
 800e06e:	9a06      	ldr	r2, [sp, #24]
 800e070:	464b      	mov	r3, r9
 800e072:	4442      	add	r2, r8
 800e074:	4631      	mov	r1, r6
 800e076:	4628      	mov	r0, r5
 800e078:	47b8      	blx	r7
 800e07a:	3001      	adds	r0, #1
 800e07c:	d1c3      	bne.n	800e006 <_printf_float+0x32e>
 800e07e:	e686      	b.n	800dd8e <_printf_float+0xb6>
 800e080:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e084:	f1ba 0f01 	cmp.w	sl, #1
 800e088:	dc01      	bgt.n	800e08e <_printf_float+0x3b6>
 800e08a:	07db      	lsls	r3, r3, #31
 800e08c:	d536      	bpl.n	800e0fc <_printf_float+0x424>
 800e08e:	2301      	movs	r3, #1
 800e090:	4642      	mov	r2, r8
 800e092:	4631      	mov	r1, r6
 800e094:	4628      	mov	r0, r5
 800e096:	47b8      	blx	r7
 800e098:	3001      	adds	r0, #1
 800e09a:	f43f ae78 	beq.w	800dd8e <_printf_float+0xb6>
 800e09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	47b8      	blx	r7
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	f43f ae70 	beq.w	800dd8e <_printf_float+0xb6>
 800e0ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ba:	f7f2 fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0be:	b9c0      	cbnz	r0, 800e0f2 <_printf_float+0x41a>
 800e0c0:	4653      	mov	r3, sl
 800e0c2:	f108 0201 	add.w	r2, r8, #1
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b8      	blx	r7
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d10c      	bne.n	800e0ea <_printf_float+0x412>
 800e0d0:	e65d      	b.n	800dd8e <_printf_float+0xb6>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	465a      	mov	r2, fp
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b8      	blx	r7
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f43f ae56 	beq.w	800dd8e <_printf_float+0xb6>
 800e0e2:	f108 0801 	add.w	r8, r8, #1
 800e0e6:	45d0      	cmp	r8, sl
 800e0e8:	dbf3      	blt.n	800e0d2 <_printf_float+0x3fa>
 800e0ea:	464b      	mov	r3, r9
 800e0ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e0f0:	e6df      	b.n	800deb2 <_printf_float+0x1da>
 800e0f2:	f04f 0800 	mov.w	r8, #0
 800e0f6:	f104 0b1a 	add.w	fp, r4, #26
 800e0fa:	e7f4      	b.n	800e0e6 <_printf_float+0x40e>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	4642      	mov	r2, r8
 800e100:	e7e1      	b.n	800e0c6 <_printf_float+0x3ee>
 800e102:	2301      	movs	r3, #1
 800e104:	464a      	mov	r2, r9
 800e106:	4631      	mov	r1, r6
 800e108:	4628      	mov	r0, r5
 800e10a:	47b8      	blx	r7
 800e10c:	3001      	adds	r0, #1
 800e10e:	f43f ae3e 	beq.w	800dd8e <_printf_float+0xb6>
 800e112:	f108 0801 	add.w	r8, r8, #1
 800e116:	68e3      	ldr	r3, [r4, #12]
 800e118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e11a:	1a5b      	subs	r3, r3, r1
 800e11c:	4543      	cmp	r3, r8
 800e11e:	dcf0      	bgt.n	800e102 <_printf_float+0x42a>
 800e120:	e6fc      	b.n	800df1c <_printf_float+0x244>
 800e122:	f04f 0800 	mov.w	r8, #0
 800e126:	f104 0919 	add.w	r9, r4, #25
 800e12a:	e7f4      	b.n	800e116 <_printf_float+0x43e>

0800e12c <_printf_common>:
 800e12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e130:	4616      	mov	r6, r2
 800e132:	4698      	mov	r8, r3
 800e134:	688a      	ldr	r2, [r1, #8]
 800e136:	690b      	ldr	r3, [r1, #16]
 800e138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e13c:	4293      	cmp	r3, r2
 800e13e:	bfb8      	it	lt
 800e140:	4613      	movlt	r3, r2
 800e142:	6033      	str	r3, [r6, #0]
 800e144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e148:	4607      	mov	r7, r0
 800e14a:	460c      	mov	r4, r1
 800e14c:	b10a      	cbz	r2, 800e152 <_printf_common+0x26>
 800e14e:	3301      	adds	r3, #1
 800e150:	6033      	str	r3, [r6, #0]
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	0699      	lsls	r1, r3, #26
 800e156:	bf42      	ittt	mi
 800e158:	6833      	ldrmi	r3, [r6, #0]
 800e15a:	3302      	addmi	r3, #2
 800e15c:	6033      	strmi	r3, [r6, #0]
 800e15e:	6825      	ldr	r5, [r4, #0]
 800e160:	f015 0506 	ands.w	r5, r5, #6
 800e164:	d106      	bne.n	800e174 <_printf_common+0x48>
 800e166:	f104 0a19 	add.w	sl, r4, #25
 800e16a:	68e3      	ldr	r3, [r4, #12]
 800e16c:	6832      	ldr	r2, [r6, #0]
 800e16e:	1a9b      	subs	r3, r3, r2
 800e170:	42ab      	cmp	r3, r5
 800e172:	dc26      	bgt.n	800e1c2 <_printf_common+0x96>
 800e174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e178:	6822      	ldr	r2, [r4, #0]
 800e17a:	3b00      	subs	r3, #0
 800e17c:	bf18      	it	ne
 800e17e:	2301      	movne	r3, #1
 800e180:	0692      	lsls	r2, r2, #26
 800e182:	d42b      	bmi.n	800e1dc <_printf_common+0xb0>
 800e184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e188:	4641      	mov	r1, r8
 800e18a:	4638      	mov	r0, r7
 800e18c:	47c8      	blx	r9
 800e18e:	3001      	adds	r0, #1
 800e190:	d01e      	beq.n	800e1d0 <_printf_common+0xa4>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	6922      	ldr	r2, [r4, #16]
 800e196:	f003 0306 	and.w	r3, r3, #6
 800e19a:	2b04      	cmp	r3, #4
 800e19c:	bf02      	ittt	eq
 800e19e:	68e5      	ldreq	r5, [r4, #12]
 800e1a0:	6833      	ldreq	r3, [r6, #0]
 800e1a2:	1aed      	subeq	r5, r5, r3
 800e1a4:	68a3      	ldr	r3, [r4, #8]
 800e1a6:	bf0c      	ite	eq
 800e1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1ac:	2500      	movne	r5, #0
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	bfc4      	itt	gt
 800e1b2:	1a9b      	subgt	r3, r3, r2
 800e1b4:	18ed      	addgt	r5, r5, r3
 800e1b6:	2600      	movs	r6, #0
 800e1b8:	341a      	adds	r4, #26
 800e1ba:	42b5      	cmp	r5, r6
 800e1bc:	d11a      	bne.n	800e1f4 <_printf_common+0xc8>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e008      	b.n	800e1d4 <_printf_common+0xa8>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	4641      	mov	r1, r8
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	47c8      	blx	r9
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	d103      	bne.n	800e1d8 <_printf_common+0xac>
 800e1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1d8:	3501      	adds	r5, #1
 800e1da:	e7c6      	b.n	800e16a <_printf_common+0x3e>
 800e1dc:	18e1      	adds	r1, r4, r3
 800e1de:	1c5a      	adds	r2, r3, #1
 800e1e0:	2030      	movs	r0, #48	@ 0x30
 800e1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e1e6:	4422      	add	r2, r4
 800e1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e1f0:	3302      	adds	r3, #2
 800e1f2:	e7c7      	b.n	800e184 <_printf_common+0x58>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	4622      	mov	r2, r4
 800e1f8:	4641      	mov	r1, r8
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	47c8      	blx	r9
 800e1fe:	3001      	adds	r0, #1
 800e200:	d0e6      	beq.n	800e1d0 <_printf_common+0xa4>
 800e202:	3601      	adds	r6, #1
 800e204:	e7d9      	b.n	800e1ba <_printf_common+0x8e>
	...

0800e208 <_printf_i>:
 800e208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e20c:	7e0f      	ldrb	r7, [r1, #24]
 800e20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e210:	2f78      	cmp	r7, #120	@ 0x78
 800e212:	4691      	mov	r9, r2
 800e214:	4680      	mov	r8, r0
 800e216:	460c      	mov	r4, r1
 800e218:	469a      	mov	sl, r3
 800e21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e21e:	d807      	bhi.n	800e230 <_printf_i+0x28>
 800e220:	2f62      	cmp	r7, #98	@ 0x62
 800e222:	d80a      	bhi.n	800e23a <_printf_i+0x32>
 800e224:	2f00      	cmp	r7, #0
 800e226:	f000 80d1 	beq.w	800e3cc <_printf_i+0x1c4>
 800e22a:	2f58      	cmp	r7, #88	@ 0x58
 800e22c:	f000 80b8 	beq.w	800e3a0 <_printf_i+0x198>
 800e230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e238:	e03a      	b.n	800e2b0 <_printf_i+0xa8>
 800e23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e23e:	2b15      	cmp	r3, #21
 800e240:	d8f6      	bhi.n	800e230 <_printf_i+0x28>
 800e242:	a101      	add	r1, pc, #4	@ (adr r1, 800e248 <_printf_i+0x40>)
 800e244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e248:	0800e2a1 	.word	0x0800e2a1
 800e24c:	0800e2b5 	.word	0x0800e2b5
 800e250:	0800e231 	.word	0x0800e231
 800e254:	0800e231 	.word	0x0800e231
 800e258:	0800e231 	.word	0x0800e231
 800e25c:	0800e231 	.word	0x0800e231
 800e260:	0800e2b5 	.word	0x0800e2b5
 800e264:	0800e231 	.word	0x0800e231
 800e268:	0800e231 	.word	0x0800e231
 800e26c:	0800e231 	.word	0x0800e231
 800e270:	0800e231 	.word	0x0800e231
 800e274:	0800e3b3 	.word	0x0800e3b3
 800e278:	0800e2df 	.word	0x0800e2df
 800e27c:	0800e36d 	.word	0x0800e36d
 800e280:	0800e231 	.word	0x0800e231
 800e284:	0800e231 	.word	0x0800e231
 800e288:	0800e3d5 	.word	0x0800e3d5
 800e28c:	0800e231 	.word	0x0800e231
 800e290:	0800e2df 	.word	0x0800e2df
 800e294:	0800e231 	.word	0x0800e231
 800e298:	0800e231 	.word	0x0800e231
 800e29c:	0800e375 	.word	0x0800e375
 800e2a0:	6833      	ldr	r3, [r6, #0]
 800e2a2:	1d1a      	adds	r2, r3, #4
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	6032      	str	r2, [r6, #0]
 800e2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e09c      	b.n	800e3ee <_printf_i+0x1e6>
 800e2b4:	6833      	ldr	r3, [r6, #0]
 800e2b6:	6820      	ldr	r0, [r4, #0]
 800e2b8:	1d19      	adds	r1, r3, #4
 800e2ba:	6031      	str	r1, [r6, #0]
 800e2bc:	0606      	lsls	r6, r0, #24
 800e2be:	d501      	bpl.n	800e2c4 <_printf_i+0xbc>
 800e2c0:	681d      	ldr	r5, [r3, #0]
 800e2c2:	e003      	b.n	800e2cc <_printf_i+0xc4>
 800e2c4:	0645      	lsls	r5, r0, #25
 800e2c6:	d5fb      	bpl.n	800e2c0 <_printf_i+0xb8>
 800e2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	da03      	bge.n	800e2d8 <_printf_i+0xd0>
 800e2d0:	232d      	movs	r3, #45	@ 0x2d
 800e2d2:	426d      	negs	r5, r5
 800e2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2d8:	4858      	ldr	r0, [pc, #352]	@ (800e43c <_printf_i+0x234>)
 800e2da:	230a      	movs	r3, #10
 800e2dc:	e011      	b.n	800e302 <_printf_i+0xfa>
 800e2de:	6821      	ldr	r1, [r4, #0]
 800e2e0:	6833      	ldr	r3, [r6, #0]
 800e2e2:	0608      	lsls	r0, r1, #24
 800e2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2e8:	d402      	bmi.n	800e2f0 <_printf_i+0xe8>
 800e2ea:	0649      	lsls	r1, r1, #25
 800e2ec:	bf48      	it	mi
 800e2ee:	b2ad      	uxthmi	r5, r5
 800e2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e2f2:	4852      	ldr	r0, [pc, #328]	@ (800e43c <_printf_i+0x234>)
 800e2f4:	6033      	str	r3, [r6, #0]
 800e2f6:	bf14      	ite	ne
 800e2f8:	230a      	movne	r3, #10
 800e2fa:	2308      	moveq	r3, #8
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e302:	6866      	ldr	r6, [r4, #4]
 800e304:	60a6      	str	r6, [r4, #8]
 800e306:	2e00      	cmp	r6, #0
 800e308:	db05      	blt.n	800e316 <_printf_i+0x10e>
 800e30a:	6821      	ldr	r1, [r4, #0]
 800e30c:	432e      	orrs	r6, r5
 800e30e:	f021 0104 	bic.w	r1, r1, #4
 800e312:	6021      	str	r1, [r4, #0]
 800e314:	d04b      	beq.n	800e3ae <_printf_i+0x1a6>
 800e316:	4616      	mov	r6, r2
 800e318:	fbb5 f1f3 	udiv	r1, r5, r3
 800e31c:	fb03 5711 	mls	r7, r3, r1, r5
 800e320:	5dc7      	ldrb	r7, [r0, r7]
 800e322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e326:	462f      	mov	r7, r5
 800e328:	42bb      	cmp	r3, r7
 800e32a:	460d      	mov	r5, r1
 800e32c:	d9f4      	bls.n	800e318 <_printf_i+0x110>
 800e32e:	2b08      	cmp	r3, #8
 800e330:	d10b      	bne.n	800e34a <_printf_i+0x142>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	07df      	lsls	r7, r3, #31
 800e336:	d508      	bpl.n	800e34a <_printf_i+0x142>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	6861      	ldr	r1, [r4, #4]
 800e33c:	4299      	cmp	r1, r3
 800e33e:	bfde      	ittt	le
 800e340:	2330      	movle	r3, #48	@ 0x30
 800e342:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e346:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e34a:	1b92      	subs	r2, r2, r6
 800e34c:	6122      	str	r2, [r4, #16]
 800e34e:	f8cd a000 	str.w	sl, [sp]
 800e352:	464b      	mov	r3, r9
 800e354:	aa03      	add	r2, sp, #12
 800e356:	4621      	mov	r1, r4
 800e358:	4640      	mov	r0, r8
 800e35a:	f7ff fee7 	bl	800e12c <_printf_common>
 800e35e:	3001      	adds	r0, #1
 800e360:	d14a      	bne.n	800e3f8 <_printf_i+0x1f0>
 800e362:	f04f 30ff 	mov.w	r0, #4294967295
 800e366:	b004      	add	sp, #16
 800e368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	f043 0320 	orr.w	r3, r3, #32
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	4832      	ldr	r0, [pc, #200]	@ (800e440 <_printf_i+0x238>)
 800e376:	2778      	movs	r7, #120	@ 0x78
 800e378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	6831      	ldr	r1, [r6, #0]
 800e380:	061f      	lsls	r7, r3, #24
 800e382:	f851 5b04 	ldr.w	r5, [r1], #4
 800e386:	d402      	bmi.n	800e38e <_printf_i+0x186>
 800e388:	065f      	lsls	r7, r3, #25
 800e38a:	bf48      	it	mi
 800e38c:	b2ad      	uxthmi	r5, r5
 800e38e:	6031      	str	r1, [r6, #0]
 800e390:	07d9      	lsls	r1, r3, #31
 800e392:	bf44      	itt	mi
 800e394:	f043 0320 	orrmi.w	r3, r3, #32
 800e398:	6023      	strmi	r3, [r4, #0]
 800e39a:	b11d      	cbz	r5, 800e3a4 <_printf_i+0x19c>
 800e39c:	2310      	movs	r3, #16
 800e39e:	e7ad      	b.n	800e2fc <_printf_i+0xf4>
 800e3a0:	4826      	ldr	r0, [pc, #152]	@ (800e43c <_printf_i+0x234>)
 800e3a2:	e7e9      	b.n	800e378 <_printf_i+0x170>
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	f023 0320 	bic.w	r3, r3, #32
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	e7f6      	b.n	800e39c <_printf_i+0x194>
 800e3ae:	4616      	mov	r6, r2
 800e3b0:	e7bd      	b.n	800e32e <_printf_i+0x126>
 800e3b2:	6833      	ldr	r3, [r6, #0]
 800e3b4:	6825      	ldr	r5, [r4, #0]
 800e3b6:	6961      	ldr	r1, [r4, #20]
 800e3b8:	1d18      	adds	r0, r3, #4
 800e3ba:	6030      	str	r0, [r6, #0]
 800e3bc:	062e      	lsls	r6, r5, #24
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	d501      	bpl.n	800e3c6 <_printf_i+0x1be>
 800e3c2:	6019      	str	r1, [r3, #0]
 800e3c4:	e002      	b.n	800e3cc <_printf_i+0x1c4>
 800e3c6:	0668      	lsls	r0, r5, #25
 800e3c8:	d5fb      	bpl.n	800e3c2 <_printf_i+0x1ba>
 800e3ca:	8019      	strh	r1, [r3, #0]
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	6123      	str	r3, [r4, #16]
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	e7bc      	b.n	800e34e <_printf_i+0x146>
 800e3d4:	6833      	ldr	r3, [r6, #0]
 800e3d6:	1d1a      	adds	r2, r3, #4
 800e3d8:	6032      	str	r2, [r6, #0]
 800e3da:	681e      	ldr	r6, [r3, #0]
 800e3dc:	6862      	ldr	r2, [r4, #4]
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7f1 fef5 	bl	80001d0 <memchr>
 800e3e6:	b108      	cbz	r0, 800e3ec <_printf_i+0x1e4>
 800e3e8:	1b80      	subs	r0, r0, r6
 800e3ea:	6060      	str	r0, [r4, #4]
 800e3ec:	6863      	ldr	r3, [r4, #4]
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3f6:	e7aa      	b.n	800e34e <_printf_i+0x146>
 800e3f8:	6923      	ldr	r3, [r4, #16]
 800e3fa:	4632      	mov	r2, r6
 800e3fc:	4649      	mov	r1, r9
 800e3fe:	4640      	mov	r0, r8
 800e400:	47d0      	blx	sl
 800e402:	3001      	adds	r0, #1
 800e404:	d0ad      	beq.n	800e362 <_printf_i+0x15a>
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	079b      	lsls	r3, r3, #30
 800e40a:	d413      	bmi.n	800e434 <_printf_i+0x22c>
 800e40c:	68e0      	ldr	r0, [r4, #12]
 800e40e:	9b03      	ldr	r3, [sp, #12]
 800e410:	4298      	cmp	r0, r3
 800e412:	bfb8      	it	lt
 800e414:	4618      	movlt	r0, r3
 800e416:	e7a6      	b.n	800e366 <_printf_i+0x15e>
 800e418:	2301      	movs	r3, #1
 800e41a:	4632      	mov	r2, r6
 800e41c:	4649      	mov	r1, r9
 800e41e:	4640      	mov	r0, r8
 800e420:	47d0      	blx	sl
 800e422:	3001      	adds	r0, #1
 800e424:	d09d      	beq.n	800e362 <_printf_i+0x15a>
 800e426:	3501      	adds	r5, #1
 800e428:	68e3      	ldr	r3, [r4, #12]
 800e42a:	9903      	ldr	r1, [sp, #12]
 800e42c:	1a5b      	subs	r3, r3, r1
 800e42e:	42ab      	cmp	r3, r5
 800e430:	dcf2      	bgt.n	800e418 <_printf_i+0x210>
 800e432:	e7eb      	b.n	800e40c <_printf_i+0x204>
 800e434:	2500      	movs	r5, #0
 800e436:	f104 0619 	add.w	r6, r4, #25
 800e43a:	e7f5      	b.n	800e428 <_printf_i+0x220>
 800e43c:	080128aa 	.word	0x080128aa
 800e440:	080128bb 	.word	0x080128bb

0800e444 <_scanf_float>:
 800e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	b087      	sub	sp, #28
 800e44a:	4691      	mov	r9, r2
 800e44c:	9303      	str	r3, [sp, #12]
 800e44e:	688b      	ldr	r3, [r1, #8]
 800e450:	1e5a      	subs	r2, r3, #1
 800e452:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e456:	bf81      	itttt	hi
 800e458:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e45c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e460:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e464:	608b      	strhi	r3, [r1, #8]
 800e466:	680b      	ldr	r3, [r1, #0]
 800e468:	460a      	mov	r2, r1
 800e46a:	f04f 0500 	mov.w	r5, #0
 800e46e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e472:	f842 3b1c 	str.w	r3, [r2], #28
 800e476:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e47a:	4680      	mov	r8, r0
 800e47c:	460c      	mov	r4, r1
 800e47e:	bf98      	it	ls
 800e480:	f04f 0b00 	movls.w	fp, #0
 800e484:	9201      	str	r2, [sp, #4]
 800e486:	4616      	mov	r6, r2
 800e488:	46aa      	mov	sl, r5
 800e48a:	462f      	mov	r7, r5
 800e48c:	9502      	str	r5, [sp, #8]
 800e48e:	68a2      	ldr	r2, [r4, #8]
 800e490:	b15a      	cbz	r2, 800e4aa <_scanf_float+0x66>
 800e492:	f8d9 3000 	ldr.w	r3, [r9]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b4e      	cmp	r3, #78	@ 0x4e
 800e49a:	d863      	bhi.n	800e564 <_scanf_float+0x120>
 800e49c:	2b40      	cmp	r3, #64	@ 0x40
 800e49e:	d83b      	bhi.n	800e518 <_scanf_float+0xd4>
 800e4a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e4a4:	b2c8      	uxtb	r0, r1
 800e4a6:	280e      	cmp	r0, #14
 800e4a8:	d939      	bls.n	800e51e <_scanf_float+0xda>
 800e4aa:	b11f      	cbz	r7, 800e4b4 <_scanf_float+0x70>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4b2:	6023      	str	r3, [r4, #0]
 800e4b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4b8:	f1ba 0f01 	cmp.w	sl, #1
 800e4bc:	f200 8114 	bhi.w	800e6e8 <_scanf_float+0x2a4>
 800e4c0:	9b01      	ldr	r3, [sp, #4]
 800e4c2:	429e      	cmp	r6, r3
 800e4c4:	f200 8105 	bhi.w	800e6d2 <_scanf_float+0x28e>
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	b007      	add	sp, #28
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e4d4:	2a0d      	cmp	r2, #13
 800e4d6:	d8e8      	bhi.n	800e4aa <_scanf_float+0x66>
 800e4d8:	a101      	add	r1, pc, #4	@ (adr r1, 800e4e0 <_scanf_float+0x9c>)
 800e4da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4de:	bf00      	nop
 800e4e0:	0800e629 	.word	0x0800e629
 800e4e4:	0800e4ab 	.word	0x0800e4ab
 800e4e8:	0800e4ab 	.word	0x0800e4ab
 800e4ec:	0800e4ab 	.word	0x0800e4ab
 800e4f0:	0800e685 	.word	0x0800e685
 800e4f4:	0800e65f 	.word	0x0800e65f
 800e4f8:	0800e4ab 	.word	0x0800e4ab
 800e4fc:	0800e4ab 	.word	0x0800e4ab
 800e500:	0800e637 	.word	0x0800e637
 800e504:	0800e4ab 	.word	0x0800e4ab
 800e508:	0800e4ab 	.word	0x0800e4ab
 800e50c:	0800e4ab 	.word	0x0800e4ab
 800e510:	0800e4ab 	.word	0x0800e4ab
 800e514:	0800e5f3 	.word	0x0800e5f3
 800e518:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e51c:	e7da      	b.n	800e4d4 <_scanf_float+0x90>
 800e51e:	290e      	cmp	r1, #14
 800e520:	d8c3      	bhi.n	800e4aa <_scanf_float+0x66>
 800e522:	a001      	add	r0, pc, #4	@ (adr r0, 800e528 <_scanf_float+0xe4>)
 800e524:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e528:	0800e5e3 	.word	0x0800e5e3
 800e52c:	0800e4ab 	.word	0x0800e4ab
 800e530:	0800e5e3 	.word	0x0800e5e3
 800e534:	0800e673 	.word	0x0800e673
 800e538:	0800e4ab 	.word	0x0800e4ab
 800e53c:	0800e585 	.word	0x0800e585
 800e540:	0800e5c9 	.word	0x0800e5c9
 800e544:	0800e5c9 	.word	0x0800e5c9
 800e548:	0800e5c9 	.word	0x0800e5c9
 800e54c:	0800e5c9 	.word	0x0800e5c9
 800e550:	0800e5c9 	.word	0x0800e5c9
 800e554:	0800e5c9 	.word	0x0800e5c9
 800e558:	0800e5c9 	.word	0x0800e5c9
 800e55c:	0800e5c9 	.word	0x0800e5c9
 800e560:	0800e5c9 	.word	0x0800e5c9
 800e564:	2b6e      	cmp	r3, #110	@ 0x6e
 800e566:	d809      	bhi.n	800e57c <_scanf_float+0x138>
 800e568:	2b60      	cmp	r3, #96	@ 0x60
 800e56a:	d8b1      	bhi.n	800e4d0 <_scanf_float+0x8c>
 800e56c:	2b54      	cmp	r3, #84	@ 0x54
 800e56e:	d07b      	beq.n	800e668 <_scanf_float+0x224>
 800e570:	2b59      	cmp	r3, #89	@ 0x59
 800e572:	d19a      	bne.n	800e4aa <_scanf_float+0x66>
 800e574:	2d07      	cmp	r5, #7
 800e576:	d198      	bne.n	800e4aa <_scanf_float+0x66>
 800e578:	2508      	movs	r5, #8
 800e57a:	e02f      	b.n	800e5dc <_scanf_float+0x198>
 800e57c:	2b74      	cmp	r3, #116	@ 0x74
 800e57e:	d073      	beq.n	800e668 <_scanf_float+0x224>
 800e580:	2b79      	cmp	r3, #121	@ 0x79
 800e582:	e7f6      	b.n	800e572 <_scanf_float+0x12e>
 800e584:	6821      	ldr	r1, [r4, #0]
 800e586:	05c8      	lsls	r0, r1, #23
 800e588:	d51e      	bpl.n	800e5c8 <_scanf_float+0x184>
 800e58a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e58e:	6021      	str	r1, [r4, #0]
 800e590:	3701      	adds	r7, #1
 800e592:	f1bb 0f00 	cmp.w	fp, #0
 800e596:	d003      	beq.n	800e5a0 <_scanf_float+0x15c>
 800e598:	3201      	adds	r2, #1
 800e59a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e59e:	60a2      	str	r2, [r4, #8]
 800e5a0:	68a3      	ldr	r3, [r4, #8]
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	60a3      	str	r3, [r4, #8]
 800e5a6:	6923      	ldr	r3, [r4, #16]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	6123      	str	r3, [r4, #16]
 800e5ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f8c9 3004 	str.w	r3, [r9, #4]
 800e5b8:	f340 8082 	ble.w	800e6c0 <_scanf_float+0x27c>
 800e5bc:	f8d9 3000 	ldr.w	r3, [r9]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	f8c9 3000 	str.w	r3, [r9]
 800e5c6:	e762      	b.n	800e48e <_scanf_float+0x4a>
 800e5c8:	eb1a 0105 	adds.w	r1, sl, r5
 800e5cc:	f47f af6d 	bne.w	800e4aa <_scanf_float+0x66>
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e5d6:	6022      	str	r2, [r4, #0]
 800e5d8:	460d      	mov	r5, r1
 800e5da:	468a      	mov	sl, r1
 800e5dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e5e0:	e7de      	b.n	800e5a0 <_scanf_float+0x15c>
 800e5e2:	6822      	ldr	r2, [r4, #0]
 800e5e4:	0610      	lsls	r0, r2, #24
 800e5e6:	f57f af60 	bpl.w	800e4aa <_scanf_float+0x66>
 800e5ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e5ee:	6022      	str	r2, [r4, #0]
 800e5f0:	e7f4      	b.n	800e5dc <_scanf_float+0x198>
 800e5f2:	f1ba 0f00 	cmp.w	sl, #0
 800e5f6:	d10c      	bne.n	800e612 <_scanf_float+0x1ce>
 800e5f8:	b977      	cbnz	r7, 800e618 <_scanf_float+0x1d4>
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e600:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e604:	d108      	bne.n	800e618 <_scanf_float+0x1d4>
 800e606:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e60a:	6022      	str	r2, [r4, #0]
 800e60c:	f04f 0a01 	mov.w	sl, #1
 800e610:	e7e4      	b.n	800e5dc <_scanf_float+0x198>
 800e612:	f1ba 0f02 	cmp.w	sl, #2
 800e616:	d050      	beq.n	800e6ba <_scanf_float+0x276>
 800e618:	2d01      	cmp	r5, #1
 800e61a:	d002      	beq.n	800e622 <_scanf_float+0x1de>
 800e61c:	2d04      	cmp	r5, #4
 800e61e:	f47f af44 	bne.w	800e4aa <_scanf_float+0x66>
 800e622:	3501      	adds	r5, #1
 800e624:	b2ed      	uxtb	r5, r5
 800e626:	e7d9      	b.n	800e5dc <_scanf_float+0x198>
 800e628:	f1ba 0f01 	cmp.w	sl, #1
 800e62c:	f47f af3d 	bne.w	800e4aa <_scanf_float+0x66>
 800e630:	f04f 0a02 	mov.w	sl, #2
 800e634:	e7d2      	b.n	800e5dc <_scanf_float+0x198>
 800e636:	b975      	cbnz	r5, 800e656 <_scanf_float+0x212>
 800e638:	2f00      	cmp	r7, #0
 800e63a:	f47f af37 	bne.w	800e4ac <_scanf_float+0x68>
 800e63e:	6822      	ldr	r2, [r4, #0]
 800e640:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e644:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e648:	f040 8103 	bne.w	800e852 <_scanf_float+0x40e>
 800e64c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e650:	6022      	str	r2, [r4, #0]
 800e652:	2501      	movs	r5, #1
 800e654:	e7c2      	b.n	800e5dc <_scanf_float+0x198>
 800e656:	2d03      	cmp	r5, #3
 800e658:	d0e3      	beq.n	800e622 <_scanf_float+0x1de>
 800e65a:	2d05      	cmp	r5, #5
 800e65c:	e7df      	b.n	800e61e <_scanf_float+0x1da>
 800e65e:	2d02      	cmp	r5, #2
 800e660:	f47f af23 	bne.w	800e4aa <_scanf_float+0x66>
 800e664:	2503      	movs	r5, #3
 800e666:	e7b9      	b.n	800e5dc <_scanf_float+0x198>
 800e668:	2d06      	cmp	r5, #6
 800e66a:	f47f af1e 	bne.w	800e4aa <_scanf_float+0x66>
 800e66e:	2507      	movs	r5, #7
 800e670:	e7b4      	b.n	800e5dc <_scanf_float+0x198>
 800e672:	6822      	ldr	r2, [r4, #0]
 800e674:	0591      	lsls	r1, r2, #22
 800e676:	f57f af18 	bpl.w	800e4aa <_scanf_float+0x66>
 800e67a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e67e:	6022      	str	r2, [r4, #0]
 800e680:	9702      	str	r7, [sp, #8]
 800e682:	e7ab      	b.n	800e5dc <_scanf_float+0x198>
 800e684:	6822      	ldr	r2, [r4, #0]
 800e686:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e68a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e68e:	d005      	beq.n	800e69c <_scanf_float+0x258>
 800e690:	0550      	lsls	r0, r2, #21
 800e692:	f57f af0a 	bpl.w	800e4aa <_scanf_float+0x66>
 800e696:	2f00      	cmp	r7, #0
 800e698:	f000 80db 	beq.w	800e852 <_scanf_float+0x40e>
 800e69c:	0591      	lsls	r1, r2, #22
 800e69e:	bf58      	it	pl
 800e6a0:	9902      	ldrpl	r1, [sp, #8]
 800e6a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e6a6:	bf58      	it	pl
 800e6a8:	1a79      	subpl	r1, r7, r1
 800e6aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e6ae:	bf58      	it	pl
 800e6b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e6b4:	6022      	str	r2, [r4, #0]
 800e6b6:	2700      	movs	r7, #0
 800e6b8:	e790      	b.n	800e5dc <_scanf_float+0x198>
 800e6ba:	f04f 0a03 	mov.w	sl, #3
 800e6be:	e78d      	b.n	800e5dc <_scanf_float+0x198>
 800e6c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4798      	blx	r3
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	f43f aedf 	beq.w	800e48e <_scanf_float+0x4a>
 800e6d0:	e6eb      	b.n	800e4aa <_scanf_float+0x66>
 800e6d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e6da:	464a      	mov	r2, r9
 800e6dc:	4640      	mov	r0, r8
 800e6de:	4798      	blx	r3
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	6123      	str	r3, [r4, #16]
 800e6e6:	e6eb      	b.n	800e4c0 <_scanf_float+0x7c>
 800e6e8:	1e6b      	subs	r3, r5, #1
 800e6ea:	2b06      	cmp	r3, #6
 800e6ec:	d824      	bhi.n	800e738 <_scanf_float+0x2f4>
 800e6ee:	2d02      	cmp	r5, #2
 800e6f0:	d836      	bhi.n	800e760 <_scanf_float+0x31c>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	429e      	cmp	r6, r3
 800e6f6:	f67f aee7 	bls.w	800e4c8 <_scanf_float+0x84>
 800e6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e702:	464a      	mov	r2, r9
 800e704:	4640      	mov	r0, r8
 800e706:	4798      	blx	r3
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	6123      	str	r3, [r4, #16]
 800e70e:	e7f0      	b.n	800e6f2 <_scanf_float+0x2ae>
 800e710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e714:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e718:	464a      	mov	r2, r9
 800e71a:	4640      	mov	r0, r8
 800e71c:	4798      	blx	r3
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	3b01      	subs	r3, #1
 800e722:	6123      	str	r3, [r4, #16]
 800e724:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e728:	fa5f fa8a 	uxtb.w	sl, sl
 800e72c:	f1ba 0f02 	cmp.w	sl, #2
 800e730:	d1ee      	bne.n	800e710 <_scanf_float+0x2cc>
 800e732:	3d03      	subs	r5, #3
 800e734:	b2ed      	uxtb	r5, r5
 800e736:	1b76      	subs	r6, r6, r5
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	05da      	lsls	r2, r3, #23
 800e73c:	d530      	bpl.n	800e7a0 <_scanf_float+0x35c>
 800e73e:	055b      	lsls	r3, r3, #21
 800e740:	d511      	bpl.n	800e766 <_scanf_float+0x322>
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	429e      	cmp	r6, r3
 800e746:	f67f aebf 	bls.w	800e4c8 <_scanf_float+0x84>
 800e74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e74e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e752:	464a      	mov	r2, r9
 800e754:	4640      	mov	r0, r8
 800e756:	4798      	blx	r3
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	3b01      	subs	r3, #1
 800e75c:	6123      	str	r3, [r4, #16]
 800e75e:	e7f0      	b.n	800e742 <_scanf_float+0x2fe>
 800e760:	46aa      	mov	sl, r5
 800e762:	46b3      	mov	fp, r6
 800e764:	e7de      	b.n	800e724 <_scanf_float+0x2e0>
 800e766:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e76a:	6923      	ldr	r3, [r4, #16]
 800e76c:	2965      	cmp	r1, #101	@ 0x65
 800e76e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e772:	f106 35ff 	add.w	r5, r6, #4294967295
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	d00c      	beq.n	800e794 <_scanf_float+0x350>
 800e77a:	2945      	cmp	r1, #69	@ 0x45
 800e77c:	d00a      	beq.n	800e794 <_scanf_float+0x350>
 800e77e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e782:	464a      	mov	r2, r9
 800e784:	4640      	mov	r0, r8
 800e786:	4798      	blx	r3
 800e788:	6923      	ldr	r3, [r4, #16]
 800e78a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e78e:	3b01      	subs	r3, #1
 800e790:	1eb5      	subs	r5, r6, #2
 800e792:	6123      	str	r3, [r4, #16]
 800e794:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e798:	464a      	mov	r2, r9
 800e79a:	4640      	mov	r0, r8
 800e79c:	4798      	blx	r3
 800e79e:	462e      	mov	r6, r5
 800e7a0:	6822      	ldr	r2, [r4, #0]
 800e7a2:	f012 0210 	ands.w	r2, r2, #16
 800e7a6:	d001      	beq.n	800e7ac <_scanf_float+0x368>
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	e68e      	b.n	800e4ca <_scanf_float+0x86>
 800e7ac:	7032      	strb	r2, [r6, #0]
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e7b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7b8:	d125      	bne.n	800e806 <_scanf_float+0x3c2>
 800e7ba:	9b02      	ldr	r3, [sp, #8]
 800e7bc:	429f      	cmp	r7, r3
 800e7be:	d00a      	beq.n	800e7d6 <_scanf_float+0x392>
 800e7c0:	1bda      	subs	r2, r3, r7
 800e7c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e7c6:	429e      	cmp	r6, r3
 800e7c8:	bf28      	it	cs
 800e7ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e7ce:	4922      	ldr	r1, [pc, #136]	@ (800e858 <_scanf_float+0x414>)
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f000 f907 	bl	800e9e4 <siprintf>
 800e7d6:	9901      	ldr	r1, [sp, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4640      	mov	r0, r8
 800e7dc:	f002 fc00 	bl	8010fe0 <_strtod_r>
 800e7e0:	9b03      	ldr	r3, [sp, #12]
 800e7e2:	6821      	ldr	r1, [r4, #0]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f011 0f02 	tst.w	r1, #2
 800e7ea:	ec57 6b10 	vmov	r6, r7, d0
 800e7ee:	f103 0204 	add.w	r2, r3, #4
 800e7f2:	d015      	beq.n	800e820 <_scanf_float+0x3dc>
 800e7f4:	9903      	ldr	r1, [sp, #12]
 800e7f6:	600a      	str	r2, [r1, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	e9c3 6700 	strd	r6, r7, [r3]
 800e7fe:	68e3      	ldr	r3, [r4, #12]
 800e800:	3301      	adds	r3, #1
 800e802:	60e3      	str	r3, [r4, #12]
 800e804:	e7d0      	b.n	800e7a8 <_scanf_float+0x364>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0e4      	beq.n	800e7d6 <_scanf_float+0x392>
 800e80c:	9905      	ldr	r1, [sp, #20]
 800e80e:	230a      	movs	r3, #10
 800e810:	3101      	adds	r1, #1
 800e812:	4640      	mov	r0, r8
 800e814:	f002 fc64 	bl	80110e0 <_strtol_r>
 800e818:	9b04      	ldr	r3, [sp, #16]
 800e81a:	9e05      	ldr	r6, [sp, #20]
 800e81c:	1ac2      	subs	r2, r0, r3
 800e81e:	e7d0      	b.n	800e7c2 <_scanf_float+0x37e>
 800e820:	f011 0f04 	tst.w	r1, #4
 800e824:	9903      	ldr	r1, [sp, #12]
 800e826:	600a      	str	r2, [r1, #0]
 800e828:	d1e6      	bne.n	800e7f8 <_scanf_float+0x3b4>
 800e82a:	681d      	ldr	r5, [r3, #0]
 800e82c:	4632      	mov	r2, r6
 800e82e:	463b      	mov	r3, r7
 800e830:	4630      	mov	r0, r6
 800e832:	4639      	mov	r1, r7
 800e834:	f7f2 f97a 	bl	8000b2c <__aeabi_dcmpun>
 800e838:	b128      	cbz	r0, 800e846 <_scanf_float+0x402>
 800e83a:	4808      	ldr	r0, [pc, #32]	@ (800e85c <_scanf_float+0x418>)
 800e83c:	f000 f9c6 	bl	800ebcc <nanf>
 800e840:	ed85 0a00 	vstr	s0, [r5]
 800e844:	e7db      	b.n	800e7fe <_scanf_float+0x3ba>
 800e846:	4630      	mov	r0, r6
 800e848:	4639      	mov	r1, r7
 800e84a:	f7f2 f9cd 	bl	8000be8 <__aeabi_d2f>
 800e84e:	6028      	str	r0, [r5, #0]
 800e850:	e7d5      	b.n	800e7fe <_scanf_float+0x3ba>
 800e852:	2700      	movs	r7, #0
 800e854:	e62e      	b.n	800e4b4 <_scanf_float+0x70>
 800e856:	bf00      	nop
 800e858:	080128cc 	.word	0x080128cc
 800e85c:	08012a0d 	.word	0x08012a0d

0800e860 <std>:
 800e860:	2300      	movs	r3, #0
 800e862:	b510      	push	{r4, lr}
 800e864:	4604      	mov	r4, r0
 800e866:	e9c0 3300 	strd	r3, r3, [r0]
 800e86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e86e:	6083      	str	r3, [r0, #8]
 800e870:	8181      	strh	r1, [r0, #12]
 800e872:	6643      	str	r3, [r0, #100]	@ 0x64
 800e874:	81c2      	strh	r2, [r0, #14]
 800e876:	6183      	str	r3, [r0, #24]
 800e878:	4619      	mov	r1, r3
 800e87a:	2208      	movs	r2, #8
 800e87c:	305c      	adds	r0, #92	@ 0x5c
 800e87e:	f000 f916 	bl	800eaae <memset>
 800e882:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b8 <std+0x58>)
 800e884:	6263      	str	r3, [r4, #36]	@ 0x24
 800e886:	4b0d      	ldr	r3, [pc, #52]	@ (800e8bc <std+0x5c>)
 800e888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e88a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c0 <std+0x60>)
 800e88c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e88e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c4 <std+0x64>)
 800e890:	6323      	str	r3, [r4, #48]	@ 0x30
 800e892:	4b0d      	ldr	r3, [pc, #52]	@ (800e8c8 <std+0x68>)
 800e894:	6224      	str	r4, [r4, #32]
 800e896:	429c      	cmp	r4, r3
 800e898:	d006      	beq.n	800e8a8 <std+0x48>
 800e89a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e89e:	4294      	cmp	r4, r2
 800e8a0:	d002      	beq.n	800e8a8 <std+0x48>
 800e8a2:	33d0      	adds	r3, #208	@ 0xd0
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d105      	bne.n	800e8b4 <std+0x54>
 800e8a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8b0:	f000 b97a 	b.w	800eba8 <__retarget_lock_init_recursive>
 800e8b4:	bd10      	pop	{r4, pc}
 800e8b6:	bf00      	nop
 800e8b8:	0800ea29 	.word	0x0800ea29
 800e8bc:	0800ea4b 	.word	0x0800ea4b
 800e8c0:	0800ea83 	.word	0x0800ea83
 800e8c4:	0800eaa7 	.word	0x0800eaa7
 800e8c8:	200044dc 	.word	0x200044dc

0800e8cc <stdio_exit_handler>:
 800e8cc:	4a02      	ldr	r2, [pc, #8]	@ (800e8d8 <stdio_exit_handler+0xc>)
 800e8ce:	4903      	ldr	r1, [pc, #12]	@ (800e8dc <stdio_exit_handler+0x10>)
 800e8d0:	4803      	ldr	r0, [pc, #12]	@ (800e8e0 <stdio_exit_handler+0x14>)
 800e8d2:	f000 b869 	b.w	800e9a8 <_fwalk_sglue>
 800e8d6:	bf00      	nop
 800e8d8:	20000010 	.word	0x20000010
 800e8dc:	0801149d 	.word	0x0801149d
 800e8e0:	20000020 	.word	0x20000020

0800e8e4 <cleanup_stdio>:
 800e8e4:	6841      	ldr	r1, [r0, #4]
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e918 <cleanup_stdio+0x34>)
 800e8e8:	4299      	cmp	r1, r3
 800e8ea:	b510      	push	{r4, lr}
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	d001      	beq.n	800e8f4 <cleanup_stdio+0x10>
 800e8f0:	f002 fdd4 	bl	801149c <_fflush_r>
 800e8f4:	68a1      	ldr	r1, [r4, #8]
 800e8f6:	4b09      	ldr	r3, [pc, #36]	@ (800e91c <cleanup_stdio+0x38>)
 800e8f8:	4299      	cmp	r1, r3
 800e8fa:	d002      	beq.n	800e902 <cleanup_stdio+0x1e>
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f002 fdcd 	bl	801149c <_fflush_r>
 800e902:	68e1      	ldr	r1, [r4, #12]
 800e904:	4b06      	ldr	r3, [pc, #24]	@ (800e920 <cleanup_stdio+0x3c>)
 800e906:	4299      	cmp	r1, r3
 800e908:	d004      	beq.n	800e914 <cleanup_stdio+0x30>
 800e90a:	4620      	mov	r0, r4
 800e90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e910:	f002 bdc4 	b.w	801149c <_fflush_r>
 800e914:	bd10      	pop	{r4, pc}
 800e916:	bf00      	nop
 800e918:	200044dc 	.word	0x200044dc
 800e91c:	20004544 	.word	0x20004544
 800e920:	200045ac 	.word	0x200045ac

0800e924 <global_stdio_init.part.0>:
 800e924:	b510      	push	{r4, lr}
 800e926:	4b0b      	ldr	r3, [pc, #44]	@ (800e954 <global_stdio_init.part.0+0x30>)
 800e928:	4c0b      	ldr	r4, [pc, #44]	@ (800e958 <global_stdio_init.part.0+0x34>)
 800e92a:	4a0c      	ldr	r2, [pc, #48]	@ (800e95c <global_stdio_init.part.0+0x38>)
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	4620      	mov	r0, r4
 800e930:	2200      	movs	r2, #0
 800e932:	2104      	movs	r1, #4
 800e934:	f7ff ff94 	bl	800e860 <std>
 800e938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e93c:	2201      	movs	r2, #1
 800e93e:	2109      	movs	r1, #9
 800e940:	f7ff ff8e 	bl	800e860 <std>
 800e944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e948:	2202      	movs	r2, #2
 800e94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e94e:	2112      	movs	r1, #18
 800e950:	f7ff bf86 	b.w	800e860 <std>
 800e954:	20004614 	.word	0x20004614
 800e958:	200044dc 	.word	0x200044dc
 800e95c:	0800e8cd 	.word	0x0800e8cd

0800e960 <__sfp_lock_acquire>:
 800e960:	4801      	ldr	r0, [pc, #4]	@ (800e968 <__sfp_lock_acquire+0x8>)
 800e962:	f000 b922 	b.w	800ebaa <__retarget_lock_acquire_recursive>
 800e966:	bf00      	nop
 800e968:	2000461d 	.word	0x2000461d

0800e96c <__sfp_lock_release>:
 800e96c:	4801      	ldr	r0, [pc, #4]	@ (800e974 <__sfp_lock_release+0x8>)
 800e96e:	f000 b91d 	b.w	800ebac <__retarget_lock_release_recursive>
 800e972:	bf00      	nop
 800e974:	2000461d 	.word	0x2000461d

0800e978 <__sinit>:
 800e978:	b510      	push	{r4, lr}
 800e97a:	4604      	mov	r4, r0
 800e97c:	f7ff fff0 	bl	800e960 <__sfp_lock_acquire>
 800e980:	6a23      	ldr	r3, [r4, #32]
 800e982:	b11b      	cbz	r3, 800e98c <__sinit+0x14>
 800e984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e988:	f7ff bff0 	b.w	800e96c <__sfp_lock_release>
 800e98c:	4b04      	ldr	r3, [pc, #16]	@ (800e9a0 <__sinit+0x28>)
 800e98e:	6223      	str	r3, [r4, #32]
 800e990:	4b04      	ldr	r3, [pc, #16]	@ (800e9a4 <__sinit+0x2c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1f5      	bne.n	800e984 <__sinit+0xc>
 800e998:	f7ff ffc4 	bl	800e924 <global_stdio_init.part.0>
 800e99c:	e7f2      	b.n	800e984 <__sinit+0xc>
 800e99e:	bf00      	nop
 800e9a0:	0800e8e5 	.word	0x0800e8e5
 800e9a4:	20004614 	.word	0x20004614

0800e9a8 <_fwalk_sglue>:
 800e9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	4688      	mov	r8, r1
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	2600      	movs	r6, #0
 800e9b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9b8:	f1b9 0901 	subs.w	r9, r9, #1
 800e9bc:	d505      	bpl.n	800e9ca <_fwalk_sglue+0x22>
 800e9be:	6824      	ldr	r4, [r4, #0]
 800e9c0:	2c00      	cmp	r4, #0
 800e9c2:	d1f7      	bne.n	800e9b4 <_fwalk_sglue+0xc>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ca:	89ab      	ldrh	r3, [r5, #12]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d907      	bls.n	800e9e0 <_fwalk_sglue+0x38>
 800e9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	d003      	beq.n	800e9e0 <_fwalk_sglue+0x38>
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4638      	mov	r0, r7
 800e9dc:	47c0      	blx	r8
 800e9de:	4306      	orrs	r6, r0
 800e9e0:	3568      	adds	r5, #104	@ 0x68
 800e9e2:	e7e9      	b.n	800e9b8 <_fwalk_sglue+0x10>

0800e9e4 <siprintf>:
 800e9e4:	b40e      	push	{r1, r2, r3}
 800e9e6:	b510      	push	{r4, lr}
 800e9e8:	b09d      	sub	sp, #116	@ 0x74
 800e9ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e9ec:	9002      	str	r0, [sp, #8]
 800e9ee:	9006      	str	r0, [sp, #24]
 800e9f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e9f4:	480a      	ldr	r0, [pc, #40]	@ (800ea20 <siprintf+0x3c>)
 800e9f6:	9107      	str	r1, [sp, #28]
 800e9f8:	9104      	str	r1, [sp, #16]
 800e9fa:	490a      	ldr	r1, [pc, #40]	@ (800ea24 <siprintf+0x40>)
 800e9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea00:	9105      	str	r1, [sp, #20]
 800ea02:	2400      	movs	r4, #0
 800ea04:	a902      	add	r1, sp, #8
 800ea06:	6800      	ldr	r0, [r0, #0]
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ea0c:	f002 fbc6 	bl	801119c <_svfiprintf_r>
 800ea10:	9b02      	ldr	r3, [sp, #8]
 800ea12:	701c      	strb	r4, [r3, #0]
 800ea14:	b01d      	add	sp, #116	@ 0x74
 800ea16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea1a:	b003      	add	sp, #12
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	2000001c 	.word	0x2000001c
 800ea24:	ffff0208 	.word	0xffff0208

0800ea28 <__sread>:
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	460c      	mov	r4, r1
 800ea2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea30:	f000 f86c 	bl	800eb0c <_read_r>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	bfab      	itete	ge
 800ea38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ea3c:	181b      	addge	r3, r3, r0
 800ea3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ea42:	bfac      	ite	ge
 800ea44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea46:	81a3      	strhlt	r3, [r4, #12]
 800ea48:	bd10      	pop	{r4, pc}

0800ea4a <__swrite>:
 800ea4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4e:	461f      	mov	r7, r3
 800ea50:	898b      	ldrh	r3, [r1, #12]
 800ea52:	05db      	lsls	r3, r3, #23
 800ea54:	4605      	mov	r5, r0
 800ea56:	460c      	mov	r4, r1
 800ea58:	4616      	mov	r6, r2
 800ea5a:	d505      	bpl.n	800ea68 <__swrite+0x1e>
 800ea5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea60:	2302      	movs	r3, #2
 800ea62:	2200      	movs	r2, #0
 800ea64:	f000 f840 	bl	800eae8 <_lseek_r>
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea72:	81a3      	strh	r3, [r4, #12]
 800ea74:	4632      	mov	r2, r6
 800ea76:	463b      	mov	r3, r7
 800ea78:	4628      	mov	r0, r5
 800ea7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea7e:	f000 b857 	b.w	800eb30 <_write_r>

0800ea82 <__sseek>:
 800ea82:	b510      	push	{r4, lr}
 800ea84:	460c      	mov	r4, r1
 800ea86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8a:	f000 f82d 	bl	800eae8 <_lseek_r>
 800ea8e:	1c43      	adds	r3, r0, #1
 800ea90:	89a3      	ldrh	r3, [r4, #12]
 800ea92:	bf15      	itete	ne
 800ea94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea9e:	81a3      	strheq	r3, [r4, #12]
 800eaa0:	bf18      	it	ne
 800eaa2:	81a3      	strhne	r3, [r4, #12]
 800eaa4:	bd10      	pop	{r4, pc}

0800eaa6 <__sclose>:
 800eaa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaaa:	f000 b80d 	b.w	800eac8 <_close_r>

0800eaae <memset>:
 800eaae:	4402      	add	r2, r0
 800eab0:	4603      	mov	r3, r0
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d100      	bne.n	800eab8 <memset+0xa>
 800eab6:	4770      	bx	lr
 800eab8:	f803 1b01 	strb.w	r1, [r3], #1
 800eabc:	e7f9      	b.n	800eab2 <memset+0x4>
	...

0800eac0 <_localeconv_r>:
 800eac0:	4800      	ldr	r0, [pc, #0]	@ (800eac4 <_localeconv_r+0x4>)
 800eac2:	4770      	bx	lr
 800eac4:	2000015c 	.word	0x2000015c

0800eac8 <_close_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	4d06      	ldr	r5, [pc, #24]	@ (800eae4 <_close_r+0x1c>)
 800eacc:	2300      	movs	r3, #0
 800eace:	4604      	mov	r4, r0
 800ead0:	4608      	mov	r0, r1
 800ead2:	602b      	str	r3, [r5, #0]
 800ead4:	f7f3 ff1c 	bl	8002910 <_close>
 800ead8:	1c43      	adds	r3, r0, #1
 800eada:	d102      	bne.n	800eae2 <_close_r+0x1a>
 800eadc:	682b      	ldr	r3, [r5, #0]
 800eade:	b103      	cbz	r3, 800eae2 <_close_r+0x1a>
 800eae0:	6023      	str	r3, [r4, #0]
 800eae2:	bd38      	pop	{r3, r4, r5, pc}
 800eae4:	20004618 	.word	0x20004618

0800eae8 <_lseek_r>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4d07      	ldr	r5, [pc, #28]	@ (800eb08 <_lseek_r+0x20>)
 800eaec:	4604      	mov	r4, r0
 800eaee:	4608      	mov	r0, r1
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	602a      	str	r2, [r5, #0]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	f7f3 ff31 	bl	800295e <_lseek>
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	d102      	bne.n	800eb06 <_lseek_r+0x1e>
 800eb00:	682b      	ldr	r3, [r5, #0]
 800eb02:	b103      	cbz	r3, 800eb06 <_lseek_r+0x1e>
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	bd38      	pop	{r3, r4, r5, pc}
 800eb08:	20004618 	.word	0x20004618

0800eb0c <_read_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d07      	ldr	r5, [pc, #28]	@ (800eb2c <_read_r+0x20>)
 800eb10:	4604      	mov	r4, r0
 800eb12:	4608      	mov	r0, r1
 800eb14:	4611      	mov	r1, r2
 800eb16:	2200      	movs	r2, #0
 800eb18:	602a      	str	r2, [r5, #0]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f7f3 febf 	bl	800289e <_read>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d102      	bne.n	800eb2a <_read_r+0x1e>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	b103      	cbz	r3, 800eb2a <_read_r+0x1e>
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	20004618 	.word	0x20004618

0800eb30 <_write_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4d07      	ldr	r5, [pc, #28]	@ (800eb50 <_write_r+0x20>)
 800eb34:	4604      	mov	r4, r0
 800eb36:	4608      	mov	r0, r1
 800eb38:	4611      	mov	r1, r2
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	602a      	str	r2, [r5, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	f7f3 feca 	bl	80028d8 <_write>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	d102      	bne.n	800eb4e <_write_r+0x1e>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	b103      	cbz	r3, 800eb4e <_write_r+0x1e>
 800eb4c:	6023      	str	r3, [r4, #0]
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	20004618 	.word	0x20004618

0800eb54 <__errno>:
 800eb54:	4b01      	ldr	r3, [pc, #4]	@ (800eb5c <__errno+0x8>)
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	2000001c 	.word	0x2000001c

0800eb60 <__libc_init_array>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	4d0d      	ldr	r5, [pc, #52]	@ (800eb98 <__libc_init_array+0x38>)
 800eb64:	4c0d      	ldr	r4, [pc, #52]	@ (800eb9c <__libc_init_array+0x3c>)
 800eb66:	1b64      	subs	r4, r4, r5
 800eb68:	10a4      	asrs	r4, r4, #2
 800eb6a:	2600      	movs	r6, #0
 800eb6c:	42a6      	cmp	r6, r4
 800eb6e:	d109      	bne.n	800eb84 <__libc_init_array+0x24>
 800eb70:	4d0b      	ldr	r5, [pc, #44]	@ (800eba0 <__libc_init_array+0x40>)
 800eb72:	4c0c      	ldr	r4, [pc, #48]	@ (800eba4 <__libc_init_array+0x44>)
 800eb74:	f003 fb76 	bl	8012264 <_init>
 800eb78:	1b64      	subs	r4, r4, r5
 800eb7a:	10a4      	asrs	r4, r4, #2
 800eb7c:	2600      	movs	r6, #0
 800eb7e:	42a6      	cmp	r6, r4
 800eb80:	d105      	bne.n	800eb8e <__libc_init_array+0x2e>
 800eb82:	bd70      	pop	{r4, r5, r6, pc}
 800eb84:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb88:	4798      	blx	r3
 800eb8a:	3601      	adds	r6, #1
 800eb8c:	e7ee      	b.n	800eb6c <__libc_init_array+0xc>
 800eb8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb92:	4798      	blx	r3
 800eb94:	3601      	adds	r6, #1
 800eb96:	e7f2      	b.n	800eb7e <__libc_init_array+0x1e>
 800eb98:	08012ccc 	.word	0x08012ccc
 800eb9c:	08012ccc 	.word	0x08012ccc
 800eba0:	08012ccc 	.word	0x08012ccc
 800eba4:	08012cd0 	.word	0x08012cd0

0800eba8 <__retarget_lock_init_recursive>:
 800eba8:	4770      	bx	lr

0800ebaa <__retarget_lock_acquire_recursive>:
 800ebaa:	4770      	bx	lr

0800ebac <__retarget_lock_release_recursive>:
 800ebac:	4770      	bx	lr

0800ebae <memcpy>:
 800ebae:	440a      	add	r2, r1
 800ebb0:	4291      	cmp	r1, r2
 800ebb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebb6:	d100      	bne.n	800ebba <memcpy+0xc>
 800ebb8:	4770      	bx	lr
 800ebba:	b510      	push	{r4, lr}
 800ebbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebc4:	4291      	cmp	r1, r2
 800ebc6:	d1f9      	bne.n	800ebbc <memcpy+0xe>
 800ebc8:	bd10      	pop	{r4, pc}
	...

0800ebcc <nanf>:
 800ebcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ebd4 <nanf+0x8>
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	7fc00000 	.word	0x7fc00000

0800ebd8 <quorem>:
 800ebd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	6903      	ldr	r3, [r0, #16]
 800ebde:	690c      	ldr	r4, [r1, #16]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	4607      	mov	r7, r0
 800ebe4:	db7e      	blt.n	800ece4 <quorem+0x10c>
 800ebe6:	3c01      	subs	r4, #1
 800ebe8:	f101 0814 	add.w	r8, r1, #20
 800ebec:	00a3      	lsls	r3, r4, #2
 800ebee:	f100 0514 	add.w	r5, r0, #20
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec02:	3301      	adds	r3, #1
 800ec04:	429a      	cmp	r2, r3
 800ec06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec0e:	d32e      	bcc.n	800ec6e <quorem+0x96>
 800ec10:	f04f 0a00 	mov.w	sl, #0
 800ec14:	46c4      	mov	ip, r8
 800ec16:	46ae      	mov	lr, r5
 800ec18:	46d3      	mov	fp, sl
 800ec1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec1e:	b298      	uxth	r0, r3
 800ec20:	fb06 a000 	mla	r0, r6, r0, sl
 800ec24:	0c02      	lsrs	r2, r0, #16
 800ec26:	0c1b      	lsrs	r3, r3, #16
 800ec28:	fb06 2303 	mla	r3, r6, r3, r2
 800ec2c:	f8de 2000 	ldr.w	r2, [lr]
 800ec30:	b280      	uxth	r0, r0
 800ec32:	b292      	uxth	r2, r2
 800ec34:	1a12      	subs	r2, r2, r0
 800ec36:	445a      	add	r2, fp
 800ec38:	f8de 0000 	ldr.w	r0, [lr]
 800ec3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ec46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ec4a:	b292      	uxth	r2, r2
 800ec4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ec50:	45e1      	cmp	r9, ip
 800ec52:	f84e 2b04 	str.w	r2, [lr], #4
 800ec56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ec5a:	d2de      	bcs.n	800ec1a <quorem+0x42>
 800ec5c:	9b00      	ldr	r3, [sp, #0]
 800ec5e:	58eb      	ldr	r3, [r5, r3]
 800ec60:	b92b      	cbnz	r3, 800ec6e <quorem+0x96>
 800ec62:	9b01      	ldr	r3, [sp, #4]
 800ec64:	3b04      	subs	r3, #4
 800ec66:	429d      	cmp	r5, r3
 800ec68:	461a      	mov	r2, r3
 800ec6a:	d32f      	bcc.n	800eccc <quorem+0xf4>
 800ec6c:	613c      	str	r4, [r7, #16]
 800ec6e:	4638      	mov	r0, r7
 800ec70:	f001 f9c6 	bl	8010000 <__mcmp>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	db25      	blt.n	800ecc4 <quorem+0xec>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec80:	f8d1 c000 	ldr.w	ip, [r1]
 800ec84:	fa1f fe82 	uxth.w	lr, r2
 800ec88:	fa1f f38c 	uxth.w	r3, ip
 800ec8c:	eba3 030e 	sub.w	r3, r3, lr
 800ec90:	4403      	add	r3, r0
 800ec92:	0c12      	lsrs	r2, r2, #16
 800ec94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ec98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eca2:	45c1      	cmp	r9, r8
 800eca4:	f841 3b04 	str.w	r3, [r1], #4
 800eca8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ecac:	d2e6      	bcs.n	800ec7c <quorem+0xa4>
 800ecae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecb6:	b922      	cbnz	r2, 800ecc2 <quorem+0xea>
 800ecb8:	3b04      	subs	r3, #4
 800ecba:	429d      	cmp	r5, r3
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	d30b      	bcc.n	800ecd8 <quorem+0x100>
 800ecc0:	613c      	str	r4, [r7, #16]
 800ecc2:	3601      	adds	r6, #1
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	b003      	add	sp, #12
 800ecc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eccc:	6812      	ldr	r2, [r2, #0]
 800ecce:	3b04      	subs	r3, #4
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	d1cb      	bne.n	800ec6c <quorem+0x94>
 800ecd4:	3c01      	subs	r4, #1
 800ecd6:	e7c6      	b.n	800ec66 <quorem+0x8e>
 800ecd8:	6812      	ldr	r2, [r2, #0]
 800ecda:	3b04      	subs	r3, #4
 800ecdc:	2a00      	cmp	r2, #0
 800ecde:	d1ef      	bne.n	800ecc0 <quorem+0xe8>
 800ece0:	3c01      	subs	r4, #1
 800ece2:	e7ea      	b.n	800ecba <quorem+0xe2>
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7ee      	b.n	800ecc6 <quorem+0xee>

0800ece8 <_dtoa_r>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	69c7      	ldr	r7, [r0, #28]
 800ecee:	b097      	sub	sp, #92	@ 0x5c
 800ecf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ecf4:	ec55 4b10 	vmov	r4, r5, d0
 800ecf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ecfa:	9107      	str	r1, [sp, #28]
 800ecfc:	4681      	mov	r9, r0
 800ecfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed02:	b97f      	cbnz	r7, 800ed24 <_dtoa_r+0x3c>
 800ed04:	2010      	movs	r0, #16
 800ed06:	f000 fe09 	bl	800f91c <malloc>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ed10:	b920      	cbnz	r0, 800ed1c <_dtoa_r+0x34>
 800ed12:	4ba9      	ldr	r3, [pc, #676]	@ (800efb8 <_dtoa_r+0x2d0>)
 800ed14:	21ef      	movs	r1, #239	@ 0xef
 800ed16:	48a9      	ldr	r0, [pc, #676]	@ (800efbc <_dtoa_r+0x2d4>)
 800ed18:	f002 fc2e 	bl	8011578 <__assert_func>
 800ed1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ed20:	6007      	str	r7, [r0, #0]
 800ed22:	60c7      	str	r7, [r0, #12]
 800ed24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ed28:	6819      	ldr	r1, [r3, #0]
 800ed2a:	b159      	cbz	r1, 800ed44 <_dtoa_r+0x5c>
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	604a      	str	r2, [r1, #4]
 800ed30:	2301      	movs	r3, #1
 800ed32:	4093      	lsls	r3, r2
 800ed34:	608b      	str	r3, [r1, #8]
 800ed36:	4648      	mov	r0, r9
 800ed38:	f000 fee6 	bl	800fb08 <_Bfree>
 800ed3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	1e2b      	subs	r3, r5, #0
 800ed46:	bfb9      	ittee	lt
 800ed48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ed4c:	9305      	strlt	r3, [sp, #20]
 800ed4e:	2300      	movge	r3, #0
 800ed50:	6033      	strge	r3, [r6, #0]
 800ed52:	9f05      	ldr	r7, [sp, #20]
 800ed54:	4b9a      	ldr	r3, [pc, #616]	@ (800efc0 <_dtoa_r+0x2d8>)
 800ed56:	bfbc      	itt	lt
 800ed58:	2201      	movlt	r2, #1
 800ed5a:	6032      	strlt	r2, [r6, #0]
 800ed5c:	43bb      	bics	r3, r7
 800ed5e:	d112      	bne.n	800ed86 <_dtoa_r+0x9e>
 800ed60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ed66:	6013      	str	r3, [r2, #0]
 800ed68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed6c:	4323      	orrs	r3, r4
 800ed6e:	f000 855a 	beq.w	800f826 <_dtoa_r+0xb3e>
 800ed72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800efd4 <_dtoa_r+0x2ec>
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 855c 	beq.w	800f836 <_dtoa_r+0xb4e>
 800ed7e:	f10a 0303 	add.w	r3, sl, #3
 800ed82:	f000 bd56 	b.w	800f832 <_dtoa_r+0xb4a>
 800ed86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	ec51 0b17 	vmov	r0, r1, d7
 800ed90:	2300      	movs	r3, #0
 800ed92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ed96:	f7f1 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed9a:	4680      	mov	r8, r0
 800ed9c:	b158      	cbz	r0, 800edb6 <_dtoa_r+0xce>
 800ed9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eda0:	2301      	movs	r3, #1
 800eda2:	6013      	str	r3, [r2, #0]
 800eda4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eda6:	b113      	cbz	r3, 800edae <_dtoa_r+0xc6>
 800eda8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800edaa:	4b86      	ldr	r3, [pc, #536]	@ (800efc4 <_dtoa_r+0x2dc>)
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800efd8 <_dtoa_r+0x2f0>
 800edb2:	f000 bd40 	b.w	800f836 <_dtoa_r+0xb4e>
 800edb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800edba:	aa14      	add	r2, sp, #80	@ 0x50
 800edbc:	a915      	add	r1, sp, #84	@ 0x54
 800edbe:	4648      	mov	r0, r9
 800edc0:	f001 fa3e 	bl	8010240 <__d2b>
 800edc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800edc8:	9002      	str	r0, [sp, #8]
 800edca:	2e00      	cmp	r6, #0
 800edcc:	d078      	beq.n	800eec0 <_dtoa_r+0x1d8>
 800edce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800edd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ede0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ede4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ede8:	4619      	mov	r1, r3
 800edea:	2200      	movs	r2, #0
 800edec:	4b76      	ldr	r3, [pc, #472]	@ (800efc8 <_dtoa_r+0x2e0>)
 800edee:	f7f1 fa4b 	bl	8000288 <__aeabi_dsub>
 800edf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800efa0 <_dtoa_r+0x2b8>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f7f1 fbfe 	bl	80005f8 <__aeabi_dmul>
 800edfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800efa8 <_dtoa_r+0x2c0>)
 800edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee02:	f7f1 fa43 	bl	800028c <__adddf3>
 800ee06:	4604      	mov	r4, r0
 800ee08:	4630      	mov	r0, r6
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	f7f1 fb8a 	bl	8000524 <__aeabi_i2d>
 800ee10:	a367      	add	r3, pc, #412	@ (adr r3, 800efb0 <_dtoa_r+0x2c8>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f7f1 fbef 	bl	80005f8 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4620      	mov	r0, r4
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7f1 fa33 	bl	800028c <__adddf3>
 800ee26:	4604      	mov	r4, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	f7f1 fe95 	bl	8000b58 <__aeabi_d2iz>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4607      	mov	r7, r0
 800ee32:	2300      	movs	r3, #0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fe50 	bl	8000adc <__aeabi_dcmplt>
 800ee3c:	b140      	cbz	r0, 800ee50 <_dtoa_r+0x168>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f7f1 fb70 	bl	8000524 <__aeabi_i2d>
 800ee44:	4622      	mov	r2, r4
 800ee46:	462b      	mov	r3, r5
 800ee48:	f7f1 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee4c:	b900      	cbnz	r0, 800ee50 <_dtoa_r+0x168>
 800ee4e:	3f01      	subs	r7, #1
 800ee50:	2f16      	cmp	r7, #22
 800ee52:	d852      	bhi.n	800eefa <_dtoa_r+0x212>
 800ee54:	4b5d      	ldr	r3, [pc, #372]	@ (800efcc <_dtoa_r+0x2e4>)
 800ee56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee62:	f7f1 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d049      	beq.n	800eefe <_dtoa_r+0x216>
 800ee6a:	3f01      	subs	r7, #1
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee72:	1b9b      	subs	r3, r3, r6
 800ee74:	1e5a      	subs	r2, r3, #1
 800ee76:	bf45      	ittet	mi
 800ee78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ee7c:	9300      	strmi	r3, [sp, #0]
 800ee7e:	2300      	movpl	r3, #0
 800ee80:	2300      	movmi	r3, #0
 800ee82:	9206      	str	r2, [sp, #24]
 800ee84:	bf54      	ite	pl
 800ee86:	9300      	strpl	r3, [sp, #0]
 800ee88:	9306      	strmi	r3, [sp, #24]
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	db39      	blt.n	800ef02 <_dtoa_r+0x21a>
 800ee8e:	9b06      	ldr	r3, [sp, #24]
 800ee90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ee92:	443b      	add	r3, r7
 800ee94:	9306      	str	r3, [sp, #24]
 800ee96:	2300      	movs	r3, #0
 800ee98:	9308      	str	r3, [sp, #32]
 800ee9a:	9b07      	ldr	r3, [sp, #28]
 800ee9c:	2b09      	cmp	r3, #9
 800ee9e:	d863      	bhi.n	800ef68 <_dtoa_r+0x280>
 800eea0:	2b05      	cmp	r3, #5
 800eea2:	bfc4      	itt	gt
 800eea4:	3b04      	subgt	r3, #4
 800eea6:	9307      	strgt	r3, [sp, #28]
 800eea8:	9b07      	ldr	r3, [sp, #28]
 800eeaa:	f1a3 0302 	sub.w	r3, r3, #2
 800eeae:	bfcc      	ite	gt
 800eeb0:	2400      	movgt	r4, #0
 800eeb2:	2401      	movle	r4, #1
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d863      	bhi.n	800ef80 <_dtoa_r+0x298>
 800eeb8:	e8df f003 	tbb	[pc, r3]
 800eebc:	2b375452 	.word	0x2b375452
 800eec0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eec4:	441e      	add	r6, r3
 800eec6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eeca:	2b20      	cmp	r3, #32
 800eecc:	bfc1      	itttt	gt
 800eece:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eed2:	409f      	lslgt	r7, r3
 800eed4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eed8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eedc:	bfd6      	itet	le
 800eede:	f1c3 0320 	rsble	r3, r3, #32
 800eee2:	ea47 0003 	orrgt.w	r0, r7, r3
 800eee6:	fa04 f003 	lslle.w	r0, r4, r3
 800eeea:	f7f1 fb0b 	bl	8000504 <__aeabi_ui2d>
 800eeee:	2201      	movs	r2, #1
 800eef0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eef4:	3e01      	subs	r6, #1
 800eef6:	9212      	str	r2, [sp, #72]	@ 0x48
 800eef8:	e776      	b.n	800ede8 <_dtoa_r+0x100>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e7b7      	b.n	800ee6e <_dtoa_r+0x186>
 800eefe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ef00:	e7b6      	b.n	800ee70 <_dtoa_r+0x188>
 800ef02:	9b00      	ldr	r3, [sp, #0]
 800ef04:	1bdb      	subs	r3, r3, r7
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	427b      	negs	r3, r7
 800ef0a:	9308      	str	r3, [sp, #32]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef10:	e7c3      	b.n	800ee9a <_dtoa_r+0x1b2>
 800ef12:	2301      	movs	r3, #1
 800ef14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef18:	eb07 0b03 	add.w	fp, r7, r3
 800ef1c:	f10b 0301 	add.w	r3, fp, #1
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	9303      	str	r3, [sp, #12]
 800ef24:	bfb8      	it	lt
 800ef26:	2301      	movlt	r3, #1
 800ef28:	e006      	b.n	800ef38 <_dtoa_r+0x250>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dd28      	ble.n	800ef86 <_dtoa_r+0x29e>
 800ef34:	469b      	mov	fp, r3
 800ef36:	9303      	str	r3, [sp, #12]
 800ef38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	2204      	movs	r2, #4
 800ef40:	f102 0514 	add.w	r5, r2, #20
 800ef44:	429d      	cmp	r5, r3
 800ef46:	d926      	bls.n	800ef96 <_dtoa_r+0x2ae>
 800ef48:	6041      	str	r1, [r0, #4]
 800ef4a:	4648      	mov	r0, r9
 800ef4c:	f000 fd9c 	bl	800fa88 <_Balloc>
 800ef50:	4682      	mov	sl, r0
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d142      	bne.n	800efdc <_dtoa_r+0x2f4>
 800ef56:	4b1e      	ldr	r3, [pc, #120]	@ (800efd0 <_dtoa_r+0x2e8>)
 800ef58:	4602      	mov	r2, r0
 800ef5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ef5e:	e6da      	b.n	800ed16 <_dtoa_r+0x2e>
 800ef60:	2300      	movs	r3, #0
 800ef62:	e7e3      	b.n	800ef2c <_dtoa_r+0x244>
 800ef64:	2300      	movs	r3, #0
 800ef66:	e7d5      	b.n	800ef14 <_dtoa_r+0x22c>
 800ef68:	2401      	movs	r4, #1
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	9307      	str	r3, [sp, #28]
 800ef6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ef70:	f04f 3bff 	mov.w	fp, #4294967295
 800ef74:	2200      	movs	r2, #0
 800ef76:	f8cd b00c 	str.w	fp, [sp, #12]
 800ef7a:	2312      	movs	r3, #18
 800ef7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef7e:	e7db      	b.n	800ef38 <_dtoa_r+0x250>
 800ef80:	2301      	movs	r3, #1
 800ef82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef84:	e7f4      	b.n	800ef70 <_dtoa_r+0x288>
 800ef86:	f04f 0b01 	mov.w	fp, #1
 800ef8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ef8e:	465b      	mov	r3, fp
 800ef90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ef94:	e7d0      	b.n	800ef38 <_dtoa_r+0x250>
 800ef96:	3101      	adds	r1, #1
 800ef98:	0052      	lsls	r2, r2, #1
 800ef9a:	e7d1      	b.n	800ef40 <_dtoa_r+0x258>
 800ef9c:	f3af 8000 	nop.w
 800efa0:	636f4361 	.word	0x636f4361
 800efa4:	3fd287a7 	.word	0x3fd287a7
 800efa8:	8b60c8b3 	.word	0x8b60c8b3
 800efac:	3fc68a28 	.word	0x3fc68a28
 800efb0:	509f79fb 	.word	0x509f79fb
 800efb4:	3fd34413 	.word	0x3fd34413
 800efb8:	080128de 	.word	0x080128de
 800efbc:	080128f5 	.word	0x080128f5
 800efc0:	7ff00000 	.word	0x7ff00000
 800efc4:	080128a9 	.word	0x080128a9
 800efc8:	3ff80000 	.word	0x3ff80000
 800efcc:	08012aa8 	.word	0x08012aa8
 800efd0:	0801294d 	.word	0x0801294d
 800efd4:	080128da 	.word	0x080128da
 800efd8:	080128a8 	.word	0x080128a8
 800efdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800efe0:	6018      	str	r0, [r3, #0]
 800efe2:	9b03      	ldr	r3, [sp, #12]
 800efe4:	2b0e      	cmp	r3, #14
 800efe6:	f200 80a1 	bhi.w	800f12c <_dtoa_r+0x444>
 800efea:	2c00      	cmp	r4, #0
 800efec:	f000 809e 	beq.w	800f12c <_dtoa_r+0x444>
 800eff0:	2f00      	cmp	r7, #0
 800eff2:	dd33      	ble.n	800f05c <_dtoa_r+0x374>
 800eff4:	4b9c      	ldr	r3, [pc, #624]	@ (800f268 <_dtoa_r+0x580>)
 800eff6:	f007 020f 	and.w	r2, r7, #15
 800effa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800effe:	ed93 7b00 	vldr	d7, [r3]
 800f002:	05f8      	lsls	r0, r7, #23
 800f004:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f00c:	d516      	bpl.n	800f03c <_dtoa_r+0x354>
 800f00e:	4b97      	ldr	r3, [pc, #604]	@ (800f26c <_dtoa_r+0x584>)
 800f010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f018:	f7f1 fc18 	bl	800084c <__aeabi_ddiv>
 800f01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f020:	f004 040f 	and.w	r4, r4, #15
 800f024:	2603      	movs	r6, #3
 800f026:	4d91      	ldr	r5, [pc, #580]	@ (800f26c <_dtoa_r+0x584>)
 800f028:	b954      	cbnz	r4, 800f040 <_dtoa_r+0x358>
 800f02a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f032:	f7f1 fc0b 	bl	800084c <__aeabi_ddiv>
 800f036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f03a:	e028      	b.n	800f08e <_dtoa_r+0x3a6>
 800f03c:	2602      	movs	r6, #2
 800f03e:	e7f2      	b.n	800f026 <_dtoa_r+0x33e>
 800f040:	07e1      	lsls	r1, r4, #31
 800f042:	d508      	bpl.n	800f056 <_dtoa_r+0x36e>
 800f044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f04c:	f7f1 fad4 	bl	80005f8 <__aeabi_dmul>
 800f050:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f054:	3601      	adds	r6, #1
 800f056:	1064      	asrs	r4, r4, #1
 800f058:	3508      	adds	r5, #8
 800f05a:	e7e5      	b.n	800f028 <_dtoa_r+0x340>
 800f05c:	f000 80af 	beq.w	800f1be <_dtoa_r+0x4d6>
 800f060:	427c      	negs	r4, r7
 800f062:	4b81      	ldr	r3, [pc, #516]	@ (800f268 <_dtoa_r+0x580>)
 800f064:	4d81      	ldr	r5, [pc, #516]	@ (800f26c <_dtoa_r+0x584>)
 800f066:	f004 020f 	and.w	r2, r4, #15
 800f06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f076:	f7f1 fabf 	bl	80005f8 <__aeabi_dmul>
 800f07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f07e:	1124      	asrs	r4, r4, #4
 800f080:	2300      	movs	r3, #0
 800f082:	2602      	movs	r6, #2
 800f084:	2c00      	cmp	r4, #0
 800f086:	f040 808f 	bne.w	800f1a8 <_dtoa_r+0x4c0>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1d3      	bne.n	800f036 <_dtoa_r+0x34e>
 800f08e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f090:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 8094 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f09a:	4b75      	ldr	r3, [pc, #468]	@ (800f270 <_dtoa_r+0x588>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	f000 808b 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f0ac:	9b03      	ldr	r3, [sp, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8087 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f0b4:	f1bb 0f00 	cmp.w	fp, #0
 800f0b8:	dd34      	ble.n	800f124 <_dtoa_r+0x43c>
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4b6d      	ldr	r3, [pc, #436]	@ (800f274 <_dtoa_r+0x58c>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 fa99 	bl	80005f8 <__aeabi_dmul>
 800f0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800f0ce:	3601      	adds	r6, #1
 800f0d0:	465c      	mov	r4, fp
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f7f1 fa26 	bl	8000524 <__aeabi_i2d>
 800f0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0dc:	f7f1 fa8c 	bl	80005f8 <__aeabi_dmul>
 800f0e0:	4b65      	ldr	r3, [pc, #404]	@ (800f278 <_dtoa_r+0x590>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f7f1 f8d2 	bl	800028c <__adddf3>
 800f0e8:	4605      	mov	r5, r0
 800f0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	d16a      	bne.n	800f1c8 <_dtoa_r+0x4e0>
 800f0f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0f6:	4b61      	ldr	r3, [pc, #388]	@ (800f27c <_dtoa_r+0x594>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f7f1 f8c5 	bl	8000288 <__aeabi_dsub>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f106:	462a      	mov	r2, r5
 800f108:	4633      	mov	r3, r6
 800f10a:	f7f1 fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	f040 8298 	bne.w	800f644 <_dtoa_r+0x95c>
 800f114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f118:	462a      	mov	r2, r5
 800f11a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f11e:	f7f1 fcdd 	bl	8000adc <__aeabi_dcmplt>
 800f122:	bb38      	cbnz	r0, 800f174 <_dtoa_r+0x48c>
 800f124:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f128:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f12c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f2c0 8157 	blt.w	800f3e2 <_dtoa_r+0x6fa>
 800f134:	2f0e      	cmp	r7, #14
 800f136:	f300 8154 	bgt.w	800f3e2 <_dtoa_r+0x6fa>
 800f13a:	4b4b      	ldr	r3, [pc, #300]	@ (800f268 <_dtoa_r+0x580>)
 800f13c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f140:	ed93 7b00 	vldr	d7, [r3]
 800f144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	ed8d 7b00 	vstr	d7, [sp]
 800f14c:	f280 80e5 	bge.w	800f31a <_dtoa_r+0x632>
 800f150:	9b03      	ldr	r3, [sp, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	f300 80e1 	bgt.w	800f31a <_dtoa_r+0x632>
 800f158:	d10c      	bne.n	800f174 <_dtoa_r+0x48c>
 800f15a:	4b48      	ldr	r3, [pc, #288]	@ (800f27c <_dtoa_r+0x594>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	ec51 0b17 	vmov	r0, r1, d7
 800f162:	f7f1 fa49 	bl	80005f8 <__aeabi_dmul>
 800f166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f16a:	f7f1 fccb 	bl	8000b04 <__aeabi_dcmpge>
 800f16e:	2800      	cmp	r0, #0
 800f170:	f000 8266 	beq.w	800f640 <_dtoa_r+0x958>
 800f174:	2400      	movs	r4, #0
 800f176:	4625      	mov	r5, r4
 800f178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f17a:	4656      	mov	r6, sl
 800f17c:	ea6f 0803 	mvn.w	r8, r3
 800f180:	2700      	movs	r7, #0
 800f182:	4621      	mov	r1, r4
 800f184:	4648      	mov	r0, r9
 800f186:	f000 fcbf 	bl	800fb08 <_Bfree>
 800f18a:	2d00      	cmp	r5, #0
 800f18c:	f000 80bd 	beq.w	800f30a <_dtoa_r+0x622>
 800f190:	b12f      	cbz	r7, 800f19e <_dtoa_r+0x4b6>
 800f192:	42af      	cmp	r7, r5
 800f194:	d003      	beq.n	800f19e <_dtoa_r+0x4b6>
 800f196:	4639      	mov	r1, r7
 800f198:	4648      	mov	r0, r9
 800f19a:	f000 fcb5 	bl	800fb08 <_Bfree>
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4648      	mov	r0, r9
 800f1a2:	f000 fcb1 	bl	800fb08 <_Bfree>
 800f1a6:	e0b0      	b.n	800f30a <_dtoa_r+0x622>
 800f1a8:	07e2      	lsls	r2, r4, #31
 800f1aa:	d505      	bpl.n	800f1b8 <_dtoa_r+0x4d0>
 800f1ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1b0:	f7f1 fa22 	bl	80005f8 <__aeabi_dmul>
 800f1b4:	3601      	adds	r6, #1
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	1064      	asrs	r4, r4, #1
 800f1ba:	3508      	adds	r5, #8
 800f1bc:	e762      	b.n	800f084 <_dtoa_r+0x39c>
 800f1be:	2602      	movs	r6, #2
 800f1c0:	e765      	b.n	800f08e <_dtoa_r+0x3a6>
 800f1c2:	9c03      	ldr	r4, [sp, #12]
 800f1c4:	46b8      	mov	r8, r7
 800f1c6:	e784      	b.n	800f0d2 <_dtoa_r+0x3ea>
 800f1c8:	4b27      	ldr	r3, [pc, #156]	@ (800f268 <_dtoa_r+0x580>)
 800f1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1d4:	4454      	add	r4, sl
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	d054      	beq.n	800f284 <_dtoa_r+0x59c>
 800f1da:	4929      	ldr	r1, [pc, #164]	@ (800f280 <_dtoa_r+0x598>)
 800f1dc:	2000      	movs	r0, #0
 800f1de:	f7f1 fb35 	bl	800084c <__aeabi_ddiv>
 800f1e2:	4633      	mov	r3, r6
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	f7f1 f84f 	bl	8000288 <__aeabi_dsub>
 800f1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f1ee:	4656      	mov	r6, sl
 800f1f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1f4:	f7f1 fcb0 	bl	8000b58 <__aeabi_d2iz>
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f7f1 f993 	bl	8000524 <__aeabi_i2d>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f206:	f7f1 f83f 	bl	8000288 <__aeabi_dsub>
 800f20a:	3530      	adds	r5, #48	@ 0x30
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f214:	f806 5b01 	strb.w	r5, [r6], #1
 800f218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f21c:	f7f1 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800f220:	2800      	cmp	r0, #0
 800f222:	d172      	bne.n	800f30a <_dtoa_r+0x622>
 800f224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f228:	4911      	ldr	r1, [pc, #68]	@ (800f270 <_dtoa_r+0x588>)
 800f22a:	2000      	movs	r0, #0
 800f22c:	f7f1 f82c 	bl	8000288 <__aeabi_dsub>
 800f230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f234:	f7f1 fc52 	bl	8000adc <__aeabi_dcmplt>
 800f238:	2800      	cmp	r0, #0
 800f23a:	f040 80b4 	bne.w	800f3a6 <_dtoa_r+0x6be>
 800f23e:	42a6      	cmp	r6, r4
 800f240:	f43f af70 	beq.w	800f124 <_dtoa_r+0x43c>
 800f244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f248:	4b0a      	ldr	r3, [pc, #40]	@ (800f274 <_dtoa_r+0x58c>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f9d4 	bl	80005f8 <__aeabi_dmul>
 800f250:	4b08      	ldr	r3, [pc, #32]	@ (800f274 <_dtoa_r+0x58c>)
 800f252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f256:	2200      	movs	r2, #0
 800f258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f25c:	f7f1 f9cc 	bl	80005f8 <__aeabi_dmul>
 800f260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f264:	e7c4      	b.n	800f1f0 <_dtoa_r+0x508>
 800f266:	bf00      	nop
 800f268:	08012aa8 	.word	0x08012aa8
 800f26c:	08012a80 	.word	0x08012a80
 800f270:	3ff00000 	.word	0x3ff00000
 800f274:	40240000 	.word	0x40240000
 800f278:	401c0000 	.word	0x401c0000
 800f27c:	40140000 	.word	0x40140000
 800f280:	3fe00000 	.word	0x3fe00000
 800f284:	4631      	mov	r1, r6
 800f286:	4628      	mov	r0, r5
 800f288:	f7f1 f9b6 	bl	80005f8 <__aeabi_dmul>
 800f28c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f290:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f292:	4656      	mov	r6, sl
 800f294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f298:	f7f1 fc5e 	bl	8000b58 <__aeabi_d2iz>
 800f29c:	4605      	mov	r5, r0
 800f29e:	f7f1 f941 	bl	8000524 <__aeabi_i2d>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2aa:	f7f0 ffed 	bl	8000288 <__aeabi_dsub>
 800f2ae:	3530      	adds	r5, #48	@ 0x30
 800f2b0:	f806 5b01 	strb.w	r5, [r6], #1
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	42a6      	cmp	r6, r4
 800f2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2be:	f04f 0200 	mov.w	r2, #0
 800f2c2:	d124      	bne.n	800f30e <_dtoa_r+0x626>
 800f2c4:	4baf      	ldr	r3, [pc, #700]	@ (800f584 <_dtoa_r+0x89c>)
 800f2c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f2ca:	f7f0 ffdf 	bl	800028c <__adddf3>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2d6:	f7f1 fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d163      	bne.n	800f3a6 <_dtoa_r+0x6be>
 800f2de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f2e2:	49a8      	ldr	r1, [pc, #672]	@ (800f584 <_dtoa_r+0x89c>)
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f7f0 ffcf 	bl	8000288 <__aeabi_dsub>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2f2:	f7f1 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	f43f af14 	beq.w	800f124 <_dtoa_r+0x43c>
 800f2fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f2fe:	1e73      	subs	r3, r6, #1
 800f300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f306:	2b30      	cmp	r3, #48	@ 0x30
 800f308:	d0f8      	beq.n	800f2fc <_dtoa_r+0x614>
 800f30a:	4647      	mov	r7, r8
 800f30c:	e03b      	b.n	800f386 <_dtoa_r+0x69e>
 800f30e:	4b9e      	ldr	r3, [pc, #632]	@ (800f588 <_dtoa_r+0x8a0>)
 800f310:	f7f1 f972 	bl	80005f8 <__aeabi_dmul>
 800f314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f318:	e7bc      	b.n	800f294 <_dtoa_r+0x5ac>
 800f31a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f31e:	4656      	mov	r6, sl
 800f320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f1 fa90 	bl	800084c <__aeabi_ddiv>
 800f32c:	f7f1 fc14 	bl	8000b58 <__aeabi_d2iz>
 800f330:	4680      	mov	r8, r0
 800f332:	f7f1 f8f7 	bl	8000524 <__aeabi_i2d>
 800f336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f33a:	f7f1 f95d 	bl	80005f8 <__aeabi_dmul>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4620      	mov	r0, r4
 800f344:	4629      	mov	r1, r5
 800f346:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f34a:	f7f0 ff9d 	bl	8000288 <__aeabi_dsub>
 800f34e:	f806 4b01 	strb.w	r4, [r6], #1
 800f352:	9d03      	ldr	r5, [sp, #12]
 800f354:	eba6 040a 	sub.w	r4, r6, sl
 800f358:	42a5      	cmp	r5, r4
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	d133      	bne.n	800f3c8 <_dtoa_r+0x6e0>
 800f360:	f7f0 ff94 	bl	800028c <__adddf3>
 800f364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	f7f1 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 800f370:	b9c0      	cbnz	r0, 800f3a4 <_dtoa_r+0x6bc>
 800f372:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f1 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f37e:	b110      	cbz	r0, 800f386 <_dtoa_r+0x69e>
 800f380:	f018 0f01 	tst.w	r8, #1
 800f384:	d10e      	bne.n	800f3a4 <_dtoa_r+0x6bc>
 800f386:	9902      	ldr	r1, [sp, #8]
 800f388:	4648      	mov	r0, r9
 800f38a:	f000 fbbd 	bl	800fb08 <_Bfree>
 800f38e:	2300      	movs	r3, #0
 800f390:	7033      	strb	r3, [r6, #0]
 800f392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f394:	3701      	adds	r7, #1
 800f396:	601f      	str	r7, [r3, #0]
 800f398:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 824b 	beq.w	800f836 <_dtoa_r+0xb4e>
 800f3a0:	601e      	str	r6, [r3, #0]
 800f3a2:	e248      	b.n	800f836 <_dtoa_r+0xb4e>
 800f3a4:	46b8      	mov	r8, r7
 800f3a6:	4633      	mov	r3, r6
 800f3a8:	461e      	mov	r6, r3
 800f3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3ae:	2a39      	cmp	r2, #57	@ 0x39
 800f3b0:	d106      	bne.n	800f3c0 <_dtoa_r+0x6d8>
 800f3b2:	459a      	cmp	sl, r3
 800f3b4:	d1f8      	bne.n	800f3a8 <_dtoa_r+0x6c0>
 800f3b6:	2230      	movs	r2, #48	@ 0x30
 800f3b8:	f108 0801 	add.w	r8, r8, #1
 800f3bc:	f88a 2000 	strb.w	r2, [sl]
 800f3c0:	781a      	ldrb	r2, [r3, #0]
 800f3c2:	3201      	adds	r2, #1
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	e7a0      	b.n	800f30a <_dtoa_r+0x622>
 800f3c8:	4b6f      	ldr	r3, [pc, #444]	@ (800f588 <_dtoa_r+0x8a0>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	f7f1 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d09f      	beq.n	800f320 <_dtoa_r+0x638>
 800f3e0:	e7d1      	b.n	800f386 <_dtoa_r+0x69e>
 800f3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	f000 80ea 	beq.w	800f5be <_dtoa_r+0x8d6>
 800f3ea:	9a07      	ldr	r2, [sp, #28]
 800f3ec:	2a01      	cmp	r2, #1
 800f3ee:	f300 80cd 	bgt.w	800f58c <_dtoa_r+0x8a4>
 800f3f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	f000 80c1 	beq.w	800f57c <_dtoa_r+0x894>
 800f3fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f3fe:	9c08      	ldr	r4, [sp, #32]
 800f400:	9e00      	ldr	r6, [sp, #0]
 800f402:	9a00      	ldr	r2, [sp, #0]
 800f404:	441a      	add	r2, r3
 800f406:	9200      	str	r2, [sp, #0]
 800f408:	9a06      	ldr	r2, [sp, #24]
 800f40a:	2101      	movs	r1, #1
 800f40c:	441a      	add	r2, r3
 800f40e:	4648      	mov	r0, r9
 800f410:	9206      	str	r2, [sp, #24]
 800f412:	f000 fc77 	bl	800fd04 <__i2b>
 800f416:	4605      	mov	r5, r0
 800f418:	b166      	cbz	r6, 800f434 <_dtoa_r+0x74c>
 800f41a:	9b06      	ldr	r3, [sp, #24]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd09      	ble.n	800f434 <_dtoa_r+0x74c>
 800f420:	42b3      	cmp	r3, r6
 800f422:	9a00      	ldr	r2, [sp, #0]
 800f424:	bfa8      	it	ge
 800f426:	4633      	movge	r3, r6
 800f428:	1ad2      	subs	r2, r2, r3
 800f42a:	9200      	str	r2, [sp, #0]
 800f42c:	9a06      	ldr	r2, [sp, #24]
 800f42e:	1af6      	subs	r6, r6, r3
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	9306      	str	r3, [sp, #24]
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	b30b      	cbz	r3, 800f47c <_dtoa_r+0x794>
 800f438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 80c6 	beq.w	800f5cc <_dtoa_r+0x8e4>
 800f440:	2c00      	cmp	r4, #0
 800f442:	f000 80c0 	beq.w	800f5c6 <_dtoa_r+0x8de>
 800f446:	4629      	mov	r1, r5
 800f448:	4622      	mov	r2, r4
 800f44a:	4648      	mov	r0, r9
 800f44c:	f000 fd12 	bl	800fe74 <__pow5mult>
 800f450:	9a02      	ldr	r2, [sp, #8]
 800f452:	4601      	mov	r1, r0
 800f454:	4605      	mov	r5, r0
 800f456:	4648      	mov	r0, r9
 800f458:	f000 fc6a 	bl	800fd30 <__multiply>
 800f45c:	9902      	ldr	r1, [sp, #8]
 800f45e:	4680      	mov	r8, r0
 800f460:	4648      	mov	r0, r9
 800f462:	f000 fb51 	bl	800fb08 <_Bfree>
 800f466:	9b08      	ldr	r3, [sp, #32]
 800f468:	1b1b      	subs	r3, r3, r4
 800f46a:	9308      	str	r3, [sp, #32]
 800f46c:	f000 80b1 	beq.w	800f5d2 <_dtoa_r+0x8ea>
 800f470:	9a08      	ldr	r2, [sp, #32]
 800f472:	4641      	mov	r1, r8
 800f474:	4648      	mov	r0, r9
 800f476:	f000 fcfd 	bl	800fe74 <__pow5mult>
 800f47a:	9002      	str	r0, [sp, #8]
 800f47c:	2101      	movs	r1, #1
 800f47e:	4648      	mov	r0, r9
 800f480:	f000 fc40 	bl	800fd04 <__i2b>
 800f484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f486:	4604      	mov	r4, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 81d8 	beq.w	800f83e <_dtoa_r+0xb56>
 800f48e:	461a      	mov	r2, r3
 800f490:	4601      	mov	r1, r0
 800f492:	4648      	mov	r0, r9
 800f494:	f000 fcee 	bl	800fe74 <__pow5mult>
 800f498:	9b07      	ldr	r3, [sp, #28]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	4604      	mov	r4, r0
 800f49e:	f300 809f 	bgt.w	800f5e0 <_dtoa_r+0x8f8>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f040 8097 	bne.w	800f5d8 <_dtoa_r+0x8f0>
 800f4aa:	9b05      	ldr	r3, [sp, #20]
 800f4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f040 8093 	bne.w	800f5dc <_dtoa_r+0x8f4>
 800f4b6:	9b05      	ldr	r3, [sp, #20]
 800f4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4bc:	0d1b      	lsrs	r3, r3, #20
 800f4be:	051b      	lsls	r3, r3, #20
 800f4c0:	b133      	cbz	r3, 800f4d0 <_dtoa_r+0x7e8>
 800f4c2:	9b00      	ldr	r3, [sp, #0]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	9b06      	ldr	r3, [sp, #24]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	9306      	str	r3, [sp, #24]
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	9308      	str	r3, [sp, #32]
 800f4d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 81b8 	beq.w	800f84a <_dtoa_r+0xb62>
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4e0:	6918      	ldr	r0, [r3, #16]
 800f4e2:	f000 fbc3 	bl	800fc6c <__hi0bits>
 800f4e6:	f1c0 0020 	rsb	r0, r0, #32
 800f4ea:	9b06      	ldr	r3, [sp, #24]
 800f4ec:	4418      	add	r0, r3
 800f4ee:	f010 001f 	ands.w	r0, r0, #31
 800f4f2:	f000 8082 	beq.w	800f5fa <_dtoa_r+0x912>
 800f4f6:	f1c0 0320 	rsb	r3, r0, #32
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	dd73      	ble.n	800f5e6 <_dtoa_r+0x8fe>
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	f1c0 001c 	rsb	r0, r0, #28
 800f504:	4403      	add	r3, r0
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	9b06      	ldr	r3, [sp, #24]
 800f50a:	4403      	add	r3, r0
 800f50c:	4406      	add	r6, r0
 800f50e:	9306      	str	r3, [sp, #24]
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	dd05      	ble.n	800f522 <_dtoa_r+0x83a>
 800f516:	9902      	ldr	r1, [sp, #8]
 800f518:	461a      	mov	r2, r3
 800f51a:	4648      	mov	r0, r9
 800f51c:	f000 fd04 	bl	800ff28 <__lshift>
 800f520:	9002      	str	r0, [sp, #8]
 800f522:	9b06      	ldr	r3, [sp, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	dd05      	ble.n	800f534 <_dtoa_r+0x84c>
 800f528:	4621      	mov	r1, r4
 800f52a:	461a      	mov	r2, r3
 800f52c:	4648      	mov	r0, r9
 800f52e:	f000 fcfb 	bl	800ff28 <__lshift>
 800f532:	4604      	mov	r4, r0
 800f534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f536:	2b00      	cmp	r3, #0
 800f538:	d061      	beq.n	800f5fe <_dtoa_r+0x916>
 800f53a:	9802      	ldr	r0, [sp, #8]
 800f53c:	4621      	mov	r1, r4
 800f53e:	f000 fd5f 	bl	8010000 <__mcmp>
 800f542:	2800      	cmp	r0, #0
 800f544:	da5b      	bge.n	800f5fe <_dtoa_r+0x916>
 800f546:	2300      	movs	r3, #0
 800f548:	9902      	ldr	r1, [sp, #8]
 800f54a:	220a      	movs	r2, #10
 800f54c:	4648      	mov	r0, r9
 800f54e:	f000 fafd 	bl	800fb4c <__multadd>
 800f552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f554:	9002      	str	r0, [sp, #8]
 800f556:	f107 38ff 	add.w	r8, r7, #4294967295
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f000 8177 	beq.w	800f84e <_dtoa_r+0xb66>
 800f560:	4629      	mov	r1, r5
 800f562:	2300      	movs	r3, #0
 800f564:	220a      	movs	r2, #10
 800f566:	4648      	mov	r0, r9
 800f568:	f000 faf0 	bl	800fb4c <__multadd>
 800f56c:	f1bb 0f00 	cmp.w	fp, #0
 800f570:	4605      	mov	r5, r0
 800f572:	dc6f      	bgt.n	800f654 <_dtoa_r+0x96c>
 800f574:	9b07      	ldr	r3, [sp, #28]
 800f576:	2b02      	cmp	r3, #2
 800f578:	dc49      	bgt.n	800f60e <_dtoa_r+0x926>
 800f57a:	e06b      	b.n	800f654 <_dtoa_r+0x96c>
 800f57c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f57e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f582:	e73c      	b.n	800f3fe <_dtoa_r+0x716>
 800f584:	3fe00000 	.word	0x3fe00000
 800f588:	40240000 	.word	0x40240000
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	1e5c      	subs	r4, r3, #1
 800f590:	9b08      	ldr	r3, [sp, #32]
 800f592:	42a3      	cmp	r3, r4
 800f594:	db09      	blt.n	800f5aa <_dtoa_r+0x8c2>
 800f596:	1b1c      	subs	r4, r3, r4
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f6bf af30 	bge.w	800f400 <_dtoa_r+0x718>
 800f5a0:	9b00      	ldr	r3, [sp, #0]
 800f5a2:	9a03      	ldr	r2, [sp, #12]
 800f5a4:	1a9e      	subs	r6, r3, r2
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e72b      	b.n	800f402 <_dtoa_r+0x71a>
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5ae:	9408      	str	r4, [sp, #32]
 800f5b0:	1ae3      	subs	r3, r4, r3
 800f5b2:	441a      	add	r2, r3
 800f5b4:	9e00      	ldr	r6, [sp, #0]
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f5ba:	2400      	movs	r4, #0
 800f5bc:	e721      	b.n	800f402 <_dtoa_r+0x71a>
 800f5be:	9c08      	ldr	r4, [sp, #32]
 800f5c0:	9e00      	ldr	r6, [sp, #0]
 800f5c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f5c4:	e728      	b.n	800f418 <_dtoa_r+0x730>
 800f5c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f5ca:	e751      	b.n	800f470 <_dtoa_r+0x788>
 800f5cc:	9a08      	ldr	r2, [sp, #32]
 800f5ce:	9902      	ldr	r1, [sp, #8]
 800f5d0:	e750      	b.n	800f474 <_dtoa_r+0x78c>
 800f5d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f5d6:	e751      	b.n	800f47c <_dtoa_r+0x794>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e779      	b.n	800f4d0 <_dtoa_r+0x7e8>
 800f5dc:	9b04      	ldr	r3, [sp, #16]
 800f5de:	e777      	b.n	800f4d0 <_dtoa_r+0x7e8>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9308      	str	r3, [sp, #32]
 800f5e4:	e779      	b.n	800f4da <_dtoa_r+0x7f2>
 800f5e6:	d093      	beq.n	800f510 <_dtoa_r+0x828>
 800f5e8:	9a00      	ldr	r2, [sp, #0]
 800f5ea:	331c      	adds	r3, #28
 800f5ec:	441a      	add	r2, r3
 800f5ee:	9200      	str	r2, [sp, #0]
 800f5f0:	9a06      	ldr	r2, [sp, #24]
 800f5f2:	441a      	add	r2, r3
 800f5f4:	441e      	add	r6, r3
 800f5f6:	9206      	str	r2, [sp, #24]
 800f5f8:	e78a      	b.n	800f510 <_dtoa_r+0x828>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	e7f4      	b.n	800f5e8 <_dtoa_r+0x900>
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	46b8      	mov	r8, r7
 800f604:	dc20      	bgt.n	800f648 <_dtoa_r+0x960>
 800f606:	469b      	mov	fp, r3
 800f608:	9b07      	ldr	r3, [sp, #28]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	dd1e      	ble.n	800f64c <_dtoa_r+0x964>
 800f60e:	f1bb 0f00 	cmp.w	fp, #0
 800f612:	f47f adb1 	bne.w	800f178 <_dtoa_r+0x490>
 800f616:	4621      	mov	r1, r4
 800f618:	465b      	mov	r3, fp
 800f61a:	2205      	movs	r2, #5
 800f61c:	4648      	mov	r0, r9
 800f61e:	f000 fa95 	bl	800fb4c <__multadd>
 800f622:	4601      	mov	r1, r0
 800f624:	4604      	mov	r4, r0
 800f626:	9802      	ldr	r0, [sp, #8]
 800f628:	f000 fcea 	bl	8010000 <__mcmp>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f77f ada3 	ble.w	800f178 <_dtoa_r+0x490>
 800f632:	4656      	mov	r6, sl
 800f634:	2331      	movs	r3, #49	@ 0x31
 800f636:	f806 3b01 	strb.w	r3, [r6], #1
 800f63a:	f108 0801 	add.w	r8, r8, #1
 800f63e:	e59f      	b.n	800f180 <_dtoa_r+0x498>
 800f640:	9c03      	ldr	r4, [sp, #12]
 800f642:	46b8      	mov	r8, r7
 800f644:	4625      	mov	r5, r4
 800f646:	e7f4      	b.n	800f632 <_dtoa_r+0x94a>
 800f648:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 8101 	beq.w	800f856 <_dtoa_r+0xb6e>
 800f654:	2e00      	cmp	r6, #0
 800f656:	dd05      	ble.n	800f664 <_dtoa_r+0x97c>
 800f658:	4629      	mov	r1, r5
 800f65a:	4632      	mov	r2, r6
 800f65c:	4648      	mov	r0, r9
 800f65e:	f000 fc63 	bl	800ff28 <__lshift>
 800f662:	4605      	mov	r5, r0
 800f664:	9b08      	ldr	r3, [sp, #32]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d05c      	beq.n	800f724 <_dtoa_r+0xa3c>
 800f66a:	6869      	ldr	r1, [r5, #4]
 800f66c:	4648      	mov	r0, r9
 800f66e:	f000 fa0b 	bl	800fa88 <_Balloc>
 800f672:	4606      	mov	r6, r0
 800f674:	b928      	cbnz	r0, 800f682 <_dtoa_r+0x99a>
 800f676:	4b82      	ldr	r3, [pc, #520]	@ (800f880 <_dtoa_r+0xb98>)
 800f678:	4602      	mov	r2, r0
 800f67a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f67e:	f7ff bb4a 	b.w	800ed16 <_dtoa_r+0x2e>
 800f682:	692a      	ldr	r2, [r5, #16]
 800f684:	3202      	adds	r2, #2
 800f686:	0092      	lsls	r2, r2, #2
 800f688:	f105 010c 	add.w	r1, r5, #12
 800f68c:	300c      	adds	r0, #12
 800f68e:	f7ff fa8e 	bl	800ebae <memcpy>
 800f692:	2201      	movs	r2, #1
 800f694:	4631      	mov	r1, r6
 800f696:	4648      	mov	r0, r9
 800f698:	f000 fc46 	bl	800ff28 <__lshift>
 800f69c:	f10a 0301 	add.w	r3, sl, #1
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	eb0a 030b 	add.w	r3, sl, fp
 800f6a6:	9308      	str	r3, [sp, #32]
 800f6a8:	9b04      	ldr	r3, [sp, #16]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	462f      	mov	r7, r5
 800f6b0:	9306      	str	r3, [sp, #24]
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	9802      	ldr	r0, [sp, #8]
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800f6be:	f7ff fa8b 	bl	800ebd8 <quorem>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	3330      	adds	r3, #48	@ 0x30
 800f6c6:	9003      	str	r0, [sp, #12]
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	9802      	ldr	r0, [sp, #8]
 800f6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ce:	f000 fc97 	bl	8010000 <__mcmp>
 800f6d2:	462a      	mov	r2, r5
 800f6d4:	9004      	str	r0, [sp, #16]
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4648      	mov	r0, r9
 800f6da:	f000 fcad 	bl	8010038 <__mdiff>
 800f6de:	68c2      	ldr	r2, [r0, #12]
 800f6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	bb02      	cbnz	r2, 800f728 <_dtoa_r+0xa40>
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	9802      	ldr	r0, [sp, #8]
 800f6ea:	f000 fc89 	bl	8010000 <__mcmp>
 800f6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fa:	f000 fa05 	bl	800fb08 <_Bfree>
 800f6fe:	9b07      	ldr	r3, [sp, #28]
 800f700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f702:	9e00      	ldr	r6, [sp, #0]
 800f704:	ea42 0103 	orr.w	r1, r2, r3
 800f708:	9b06      	ldr	r3, [sp, #24]
 800f70a:	4319      	orrs	r1, r3
 800f70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70e:	d10d      	bne.n	800f72c <_dtoa_r+0xa44>
 800f710:	2b39      	cmp	r3, #57	@ 0x39
 800f712:	d027      	beq.n	800f764 <_dtoa_r+0xa7c>
 800f714:	9a04      	ldr	r2, [sp, #16]
 800f716:	2a00      	cmp	r2, #0
 800f718:	dd01      	ble.n	800f71e <_dtoa_r+0xa36>
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	3331      	adds	r3, #49	@ 0x31
 800f71e:	f88b 3000 	strb.w	r3, [fp]
 800f722:	e52e      	b.n	800f182 <_dtoa_r+0x49a>
 800f724:	4628      	mov	r0, r5
 800f726:	e7b9      	b.n	800f69c <_dtoa_r+0x9b4>
 800f728:	2201      	movs	r2, #1
 800f72a:	e7e2      	b.n	800f6f2 <_dtoa_r+0xa0a>
 800f72c:	9904      	ldr	r1, [sp, #16]
 800f72e:	2900      	cmp	r1, #0
 800f730:	db04      	blt.n	800f73c <_dtoa_r+0xa54>
 800f732:	9807      	ldr	r0, [sp, #28]
 800f734:	4301      	orrs	r1, r0
 800f736:	9806      	ldr	r0, [sp, #24]
 800f738:	4301      	orrs	r1, r0
 800f73a:	d120      	bne.n	800f77e <_dtoa_r+0xa96>
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	ddee      	ble.n	800f71e <_dtoa_r+0xa36>
 800f740:	9902      	ldr	r1, [sp, #8]
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	2201      	movs	r2, #1
 800f746:	4648      	mov	r0, r9
 800f748:	f000 fbee 	bl	800ff28 <__lshift>
 800f74c:	4621      	mov	r1, r4
 800f74e:	9002      	str	r0, [sp, #8]
 800f750:	f000 fc56 	bl	8010000 <__mcmp>
 800f754:	2800      	cmp	r0, #0
 800f756:	9b00      	ldr	r3, [sp, #0]
 800f758:	dc02      	bgt.n	800f760 <_dtoa_r+0xa78>
 800f75a:	d1e0      	bne.n	800f71e <_dtoa_r+0xa36>
 800f75c:	07da      	lsls	r2, r3, #31
 800f75e:	d5de      	bpl.n	800f71e <_dtoa_r+0xa36>
 800f760:	2b39      	cmp	r3, #57	@ 0x39
 800f762:	d1da      	bne.n	800f71a <_dtoa_r+0xa32>
 800f764:	2339      	movs	r3, #57	@ 0x39
 800f766:	f88b 3000 	strb.w	r3, [fp]
 800f76a:	4633      	mov	r3, r6
 800f76c:	461e      	mov	r6, r3
 800f76e:	3b01      	subs	r3, #1
 800f770:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f774:	2a39      	cmp	r2, #57	@ 0x39
 800f776:	d04e      	beq.n	800f816 <_dtoa_r+0xb2e>
 800f778:	3201      	adds	r2, #1
 800f77a:	701a      	strb	r2, [r3, #0]
 800f77c:	e501      	b.n	800f182 <_dtoa_r+0x49a>
 800f77e:	2a00      	cmp	r2, #0
 800f780:	dd03      	ble.n	800f78a <_dtoa_r+0xaa2>
 800f782:	2b39      	cmp	r3, #57	@ 0x39
 800f784:	d0ee      	beq.n	800f764 <_dtoa_r+0xa7c>
 800f786:	3301      	adds	r3, #1
 800f788:	e7c9      	b.n	800f71e <_dtoa_r+0xa36>
 800f78a:	9a00      	ldr	r2, [sp, #0]
 800f78c:	9908      	ldr	r1, [sp, #32]
 800f78e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f792:	428a      	cmp	r2, r1
 800f794:	d028      	beq.n	800f7e8 <_dtoa_r+0xb00>
 800f796:	9902      	ldr	r1, [sp, #8]
 800f798:	2300      	movs	r3, #0
 800f79a:	220a      	movs	r2, #10
 800f79c:	4648      	mov	r0, r9
 800f79e:	f000 f9d5 	bl	800fb4c <__multadd>
 800f7a2:	42af      	cmp	r7, r5
 800f7a4:	9002      	str	r0, [sp, #8]
 800f7a6:	f04f 0300 	mov.w	r3, #0
 800f7aa:	f04f 020a 	mov.w	r2, #10
 800f7ae:	4639      	mov	r1, r7
 800f7b0:	4648      	mov	r0, r9
 800f7b2:	d107      	bne.n	800f7c4 <_dtoa_r+0xadc>
 800f7b4:	f000 f9ca 	bl	800fb4c <__multadd>
 800f7b8:	4607      	mov	r7, r0
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	9b00      	ldr	r3, [sp, #0]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	e777      	b.n	800f6b4 <_dtoa_r+0x9cc>
 800f7c4:	f000 f9c2 	bl	800fb4c <__multadd>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	220a      	movs	r2, #10
 800f7d0:	4648      	mov	r0, r9
 800f7d2:	f000 f9bb 	bl	800fb4c <__multadd>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	e7f0      	b.n	800f7bc <_dtoa_r+0xad4>
 800f7da:	f1bb 0f00 	cmp.w	fp, #0
 800f7de:	bfcc      	ite	gt
 800f7e0:	465e      	movgt	r6, fp
 800f7e2:	2601      	movle	r6, #1
 800f7e4:	4456      	add	r6, sl
 800f7e6:	2700      	movs	r7, #0
 800f7e8:	9902      	ldr	r1, [sp, #8]
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	4648      	mov	r0, r9
 800f7f0:	f000 fb9a 	bl	800ff28 <__lshift>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	9002      	str	r0, [sp, #8]
 800f7f8:	f000 fc02 	bl	8010000 <__mcmp>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	dcb4      	bgt.n	800f76a <_dtoa_r+0xa82>
 800f800:	d102      	bne.n	800f808 <_dtoa_r+0xb20>
 800f802:	9b00      	ldr	r3, [sp, #0]
 800f804:	07db      	lsls	r3, r3, #31
 800f806:	d4b0      	bmi.n	800f76a <_dtoa_r+0xa82>
 800f808:	4633      	mov	r3, r6
 800f80a:	461e      	mov	r6, r3
 800f80c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f810:	2a30      	cmp	r2, #48	@ 0x30
 800f812:	d0fa      	beq.n	800f80a <_dtoa_r+0xb22>
 800f814:	e4b5      	b.n	800f182 <_dtoa_r+0x49a>
 800f816:	459a      	cmp	sl, r3
 800f818:	d1a8      	bne.n	800f76c <_dtoa_r+0xa84>
 800f81a:	2331      	movs	r3, #49	@ 0x31
 800f81c:	f108 0801 	add.w	r8, r8, #1
 800f820:	f88a 3000 	strb.w	r3, [sl]
 800f824:	e4ad      	b.n	800f182 <_dtoa_r+0x49a>
 800f826:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f828:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f884 <_dtoa_r+0xb9c>
 800f82c:	b11b      	cbz	r3, 800f836 <_dtoa_r+0xb4e>
 800f82e:	f10a 0308 	add.w	r3, sl, #8
 800f832:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f834:	6013      	str	r3, [r2, #0]
 800f836:	4650      	mov	r0, sl
 800f838:	b017      	add	sp, #92	@ 0x5c
 800f83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83e:	9b07      	ldr	r3, [sp, #28]
 800f840:	2b01      	cmp	r3, #1
 800f842:	f77f ae2e 	ble.w	800f4a2 <_dtoa_r+0x7ba>
 800f846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f848:	9308      	str	r3, [sp, #32]
 800f84a:	2001      	movs	r0, #1
 800f84c:	e64d      	b.n	800f4ea <_dtoa_r+0x802>
 800f84e:	f1bb 0f00 	cmp.w	fp, #0
 800f852:	f77f aed9 	ble.w	800f608 <_dtoa_r+0x920>
 800f856:	4656      	mov	r6, sl
 800f858:	9802      	ldr	r0, [sp, #8]
 800f85a:	4621      	mov	r1, r4
 800f85c:	f7ff f9bc 	bl	800ebd8 <quorem>
 800f860:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f864:	f806 3b01 	strb.w	r3, [r6], #1
 800f868:	eba6 020a 	sub.w	r2, r6, sl
 800f86c:	4593      	cmp	fp, r2
 800f86e:	ddb4      	ble.n	800f7da <_dtoa_r+0xaf2>
 800f870:	9902      	ldr	r1, [sp, #8]
 800f872:	2300      	movs	r3, #0
 800f874:	220a      	movs	r2, #10
 800f876:	4648      	mov	r0, r9
 800f878:	f000 f968 	bl	800fb4c <__multadd>
 800f87c:	9002      	str	r0, [sp, #8]
 800f87e:	e7eb      	b.n	800f858 <_dtoa_r+0xb70>
 800f880:	0801294d 	.word	0x0801294d
 800f884:	080128d1 	.word	0x080128d1

0800f888 <_free_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4605      	mov	r5, r0
 800f88c:	2900      	cmp	r1, #0
 800f88e:	d041      	beq.n	800f914 <_free_r+0x8c>
 800f890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f894:	1f0c      	subs	r4, r1, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	bfb8      	it	lt
 800f89a:	18e4      	addlt	r4, r4, r3
 800f89c:	f000 f8e8 	bl	800fa70 <__malloc_lock>
 800f8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f918 <_free_r+0x90>)
 800f8a2:	6813      	ldr	r3, [r2, #0]
 800f8a4:	b933      	cbnz	r3, 800f8b4 <_free_r+0x2c>
 800f8a6:	6063      	str	r3, [r4, #4]
 800f8a8:	6014      	str	r4, [r2, #0]
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b0:	f000 b8e4 	b.w	800fa7c <__malloc_unlock>
 800f8b4:	42a3      	cmp	r3, r4
 800f8b6:	d908      	bls.n	800f8ca <_free_r+0x42>
 800f8b8:	6820      	ldr	r0, [r4, #0]
 800f8ba:	1821      	adds	r1, r4, r0
 800f8bc:	428b      	cmp	r3, r1
 800f8be:	bf01      	itttt	eq
 800f8c0:	6819      	ldreq	r1, [r3, #0]
 800f8c2:	685b      	ldreq	r3, [r3, #4]
 800f8c4:	1809      	addeq	r1, r1, r0
 800f8c6:	6021      	streq	r1, [r4, #0]
 800f8c8:	e7ed      	b.n	800f8a6 <_free_r+0x1e>
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	b10b      	cbz	r3, 800f8d4 <_free_r+0x4c>
 800f8d0:	42a3      	cmp	r3, r4
 800f8d2:	d9fa      	bls.n	800f8ca <_free_r+0x42>
 800f8d4:	6811      	ldr	r1, [r2, #0]
 800f8d6:	1850      	adds	r0, r2, r1
 800f8d8:	42a0      	cmp	r0, r4
 800f8da:	d10b      	bne.n	800f8f4 <_free_r+0x6c>
 800f8dc:	6820      	ldr	r0, [r4, #0]
 800f8de:	4401      	add	r1, r0
 800f8e0:	1850      	adds	r0, r2, r1
 800f8e2:	4283      	cmp	r3, r0
 800f8e4:	6011      	str	r1, [r2, #0]
 800f8e6:	d1e0      	bne.n	800f8aa <_free_r+0x22>
 800f8e8:	6818      	ldr	r0, [r3, #0]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	6053      	str	r3, [r2, #4]
 800f8ee:	4408      	add	r0, r1
 800f8f0:	6010      	str	r0, [r2, #0]
 800f8f2:	e7da      	b.n	800f8aa <_free_r+0x22>
 800f8f4:	d902      	bls.n	800f8fc <_free_r+0x74>
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	602b      	str	r3, [r5, #0]
 800f8fa:	e7d6      	b.n	800f8aa <_free_r+0x22>
 800f8fc:	6820      	ldr	r0, [r4, #0]
 800f8fe:	1821      	adds	r1, r4, r0
 800f900:	428b      	cmp	r3, r1
 800f902:	bf04      	itt	eq
 800f904:	6819      	ldreq	r1, [r3, #0]
 800f906:	685b      	ldreq	r3, [r3, #4]
 800f908:	6063      	str	r3, [r4, #4]
 800f90a:	bf04      	itt	eq
 800f90c:	1809      	addeq	r1, r1, r0
 800f90e:	6021      	streq	r1, [r4, #0]
 800f910:	6054      	str	r4, [r2, #4]
 800f912:	e7ca      	b.n	800f8aa <_free_r+0x22>
 800f914:	bd38      	pop	{r3, r4, r5, pc}
 800f916:	bf00      	nop
 800f918:	20004624 	.word	0x20004624

0800f91c <malloc>:
 800f91c:	4b02      	ldr	r3, [pc, #8]	@ (800f928 <malloc+0xc>)
 800f91e:	4601      	mov	r1, r0
 800f920:	6818      	ldr	r0, [r3, #0]
 800f922:	f000 b825 	b.w	800f970 <_malloc_r>
 800f926:	bf00      	nop
 800f928:	2000001c 	.word	0x2000001c

0800f92c <sbrk_aligned>:
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	4e0f      	ldr	r6, [pc, #60]	@ (800f96c <sbrk_aligned+0x40>)
 800f930:	460c      	mov	r4, r1
 800f932:	6831      	ldr	r1, [r6, #0]
 800f934:	4605      	mov	r5, r0
 800f936:	b911      	cbnz	r1, 800f93e <sbrk_aligned+0x12>
 800f938:	f001 fe04 	bl	8011544 <_sbrk_r>
 800f93c:	6030      	str	r0, [r6, #0]
 800f93e:	4621      	mov	r1, r4
 800f940:	4628      	mov	r0, r5
 800f942:	f001 fdff 	bl	8011544 <_sbrk_r>
 800f946:	1c43      	adds	r3, r0, #1
 800f948:	d103      	bne.n	800f952 <sbrk_aligned+0x26>
 800f94a:	f04f 34ff 	mov.w	r4, #4294967295
 800f94e:	4620      	mov	r0, r4
 800f950:	bd70      	pop	{r4, r5, r6, pc}
 800f952:	1cc4      	adds	r4, r0, #3
 800f954:	f024 0403 	bic.w	r4, r4, #3
 800f958:	42a0      	cmp	r0, r4
 800f95a:	d0f8      	beq.n	800f94e <sbrk_aligned+0x22>
 800f95c:	1a21      	subs	r1, r4, r0
 800f95e:	4628      	mov	r0, r5
 800f960:	f001 fdf0 	bl	8011544 <_sbrk_r>
 800f964:	3001      	adds	r0, #1
 800f966:	d1f2      	bne.n	800f94e <sbrk_aligned+0x22>
 800f968:	e7ef      	b.n	800f94a <sbrk_aligned+0x1e>
 800f96a:	bf00      	nop
 800f96c:	20004620 	.word	0x20004620

0800f970 <_malloc_r>:
 800f970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f974:	1ccd      	adds	r5, r1, #3
 800f976:	f025 0503 	bic.w	r5, r5, #3
 800f97a:	3508      	adds	r5, #8
 800f97c:	2d0c      	cmp	r5, #12
 800f97e:	bf38      	it	cc
 800f980:	250c      	movcc	r5, #12
 800f982:	2d00      	cmp	r5, #0
 800f984:	4606      	mov	r6, r0
 800f986:	db01      	blt.n	800f98c <_malloc_r+0x1c>
 800f988:	42a9      	cmp	r1, r5
 800f98a:	d904      	bls.n	800f996 <_malloc_r+0x26>
 800f98c:	230c      	movs	r3, #12
 800f98e:	6033      	str	r3, [r6, #0]
 800f990:	2000      	movs	r0, #0
 800f992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa6c <_malloc_r+0xfc>
 800f99a:	f000 f869 	bl	800fa70 <__malloc_lock>
 800f99e:	f8d8 3000 	ldr.w	r3, [r8]
 800f9a2:	461c      	mov	r4, r3
 800f9a4:	bb44      	cbnz	r4, 800f9f8 <_malloc_r+0x88>
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f7ff ffbf 	bl	800f92c <sbrk_aligned>
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	d158      	bne.n	800fa66 <_malloc_r+0xf6>
 800f9b4:	f8d8 4000 	ldr.w	r4, [r8]
 800f9b8:	4627      	mov	r7, r4
 800f9ba:	2f00      	cmp	r7, #0
 800f9bc:	d143      	bne.n	800fa46 <_malloc_r+0xd6>
 800f9be:	2c00      	cmp	r4, #0
 800f9c0:	d04b      	beq.n	800fa5a <_malloc_r+0xea>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	4639      	mov	r1, r7
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	eb04 0903 	add.w	r9, r4, r3
 800f9cc:	f001 fdba 	bl	8011544 <_sbrk_r>
 800f9d0:	4581      	cmp	r9, r0
 800f9d2:	d142      	bne.n	800fa5a <_malloc_r+0xea>
 800f9d4:	6821      	ldr	r1, [r4, #0]
 800f9d6:	1a6d      	subs	r5, r5, r1
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff ffa6 	bl	800f92c <sbrk_aligned>
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	d03a      	beq.n	800fa5a <_malloc_r+0xea>
 800f9e4:	6823      	ldr	r3, [r4, #0]
 800f9e6:	442b      	add	r3, r5
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ee:	685a      	ldr	r2, [r3, #4]
 800f9f0:	bb62      	cbnz	r2, 800fa4c <_malloc_r+0xdc>
 800f9f2:	f8c8 7000 	str.w	r7, [r8]
 800f9f6:	e00f      	b.n	800fa18 <_malloc_r+0xa8>
 800f9f8:	6822      	ldr	r2, [r4, #0]
 800f9fa:	1b52      	subs	r2, r2, r5
 800f9fc:	d420      	bmi.n	800fa40 <_malloc_r+0xd0>
 800f9fe:	2a0b      	cmp	r2, #11
 800fa00:	d917      	bls.n	800fa32 <_malloc_r+0xc2>
 800fa02:	1961      	adds	r1, r4, r5
 800fa04:	42a3      	cmp	r3, r4
 800fa06:	6025      	str	r5, [r4, #0]
 800fa08:	bf18      	it	ne
 800fa0a:	6059      	strne	r1, [r3, #4]
 800fa0c:	6863      	ldr	r3, [r4, #4]
 800fa0e:	bf08      	it	eq
 800fa10:	f8c8 1000 	streq.w	r1, [r8]
 800fa14:	5162      	str	r2, [r4, r5]
 800fa16:	604b      	str	r3, [r1, #4]
 800fa18:	4630      	mov	r0, r6
 800fa1a:	f000 f82f 	bl	800fa7c <__malloc_unlock>
 800fa1e:	f104 000b 	add.w	r0, r4, #11
 800fa22:	1d23      	adds	r3, r4, #4
 800fa24:	f020 0007 	bic.w	r0, r0, #7
 800fa28:	1ac2      	subs	r2, r0, r3
 800fa2a:	bf1c      	itt	ne
 800fa2c:	1a1b      	subne	r3, r3, r0
 800fa2e:	50a3      	strne	r3, [r4, r2]
 800fa30:	e7af      	b.n	800f992 <_malloc_r+0x22>
 800fa32:	6862      	ldr	r2, [r4, #4]
 800fa34:	42a3      	cmp	r3, r4
 800fa36:	bf0c      	ite	eq
 800fa38:	f8c8 2000 	streq.w	r2, [r8]
 800fa3c:	605a      	strne	r2, [r3, #4]
 800fa3e:	e7eb      	b.n	800fa18 <_malloc_r+0xa8>
 800fa40:	4623      	mov	r3, r4
 800fa42:	6864      	ldr	r4, [r4, #4]
 800fa44:	e7ae      	b.n	800f9a4 <_malloc_r+0x34>
 800fa46:	463c      	mov	r4, r7
 800fa48:	687f      	ldr	r7, [r7, #4]
 800fa4a:	e7b6      	b.n	800f9ba <_malloc_r+0x4a>
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	42a3      	cmp	r3, r4
 800fa52:	d1fb      	bne.n	800fa4c <_malloc_r+0xdc>
 800fa54:	2300      	movs	r3, #0
 800fa56:	6053      	str	r3, [r2, #4]
 800fa58:	e7de      	b.n	800fa18 <_malloc_r+0xa8>
 800fa5a:	230c      	movs	r3, #12
 800fa5c:	6033      	str	r3, [r6, #0]
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f000 f80c 	bl	800fa7c <__malloc_unlock>
 800fa64:	e794      	b.n	800f990 <_malloc_r+0x20>
 800fa66:	6005      	str	r5, [r0, #0]
 800fa68:	e7d6      	b.n	800fa18 <_malloc_r+0xa8>
 800fa6a:	bf00      	nop
 800fa6c:	20004624 	.word	0x20004624

0800fa70 <__malloc_lock>:
 800fa70:	4801      	ldr	r0, [pc, #4]	@ (800fa78 <__malloc_lock+0x8>)
 800fa72:	f7ff b89a 	b.w	800ebaa <__retarget_lock_acquire_recursive>
 800fa76:	bf00      	nop
 800fa78:	2000461c 	.word	0x2000461c

0800fa7c <__malloc_unlock>:
 800fa7c:	4801      	ldr	r0, [pc, #4]	@ (800fa84 <__malloc_unlock+0x8>)
 800fa7e:	f7ff b895 	b.w	800ebac <__retarget_lock_release_recursive>
 800fa82:	bf00      	nop
 800fa84:	2000461c 	.word	0x2000461c

0800fa88 <_Balloc>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	69c6      	ldr	r6, [r0, #28]
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	460d      	mov	r5, r1
 800fa90:	b976      	cbnz	r6, 800fab0 <_Balloc+0x28>
 800fa92:	2010      	movs	r0, #16
 800fa94:	f7ff ff42 	bl	800f91c <malloc>
 800fa98:	4602      	mov	r2, r0
 800fa9a:	61e0      	str	r0, [r4, #28]
 800fa9c:	b920      	cbnz	r0, 800faa8 <_Balloc+0x20>
 800fa9e:	4b18      	ldr	r3, [pc, #96]	@ (800fb00 <_Balloc+0x78>)
 800faa0:	4818      	ldr	r0, [pc, #96]	@ (800fb04 <_Balloc+0x7c>)
 800faa2:	216b      	movs	r1, #107	@ 0x6b
 800faa4:	f001 fd68 	bl	8011578 <__assert_func>
 800faa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faac:	6006      	str	r6, [r0, #0]
 800faae:	60c6      	str	r6, [r0, #12]
 800fab0:	69e6      	ldr	r6, [r4, #28]
 800fab2:	68f3      	ldr	r3, [r6, #12]
 800fab4:	b183      	cbz	r3, 800fad8 <_Balloc+0x50>
 800fab6:	69e3      	ldr	r3, [r4, #28]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fabe:	b9b8      	cbnz	r0, 800faf0 <_Balloc+0x68>
 800fac0:	2101      	movs	r1, #1
 800fac2:	fa01 f605 	lsl.w	r6, r1, r5
 800fac6:	1d72      	adds	r2, r6, #5
 800fac8:	0092      	lsls	r2, r2, #2
 800faca:	4620      	mov	r0, r4
 800facc:	f001 fd72 	bl	80115b4 <_calloc_r>
 800fad0:	b160      	cbz	r0, 800faec <_Balloc+0x64>
 800fad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fad6:	e00e      	b.n	800faf6 <_Balloc+0x6e>
 800fad8:	2221      	movs	r2, #33	@ 0x21
 800fada:	2104      	movs	r1, #4
 800fadc:	4620      	mov	r0, r4
 800fade:	f001 fd69 	bl	80115b4 <_calloc_r>
 800fae2:	69e3      	ldr	r3, [r4, #28]
 800fae4:	60f0      	str	r0, [r6, #12]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1e4      	bne.n	800fab6 <_Balloc+0x2e>
 800faec:	2000      	movs	r0, #0
 800faee:	bd70      	pop	{r4, r5, r6, pc}
 800faf0:	6802      	ldr	r2, [r0, #0]
 800faf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800faf6:	2300      	movs	r3, #0
 800faf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fafc:	e7f7      	b.n	800faee <_Balloc+0x66>
 800fafe:	bf00      	nop
 800fb00:	080128de 	.word	0x080128de
 800fb04:	0801295e 	.word	0x0801295e

0800fb08 <_Bfree>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	69c6      	ldr	r6, [r0, #28]
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	460c      	mov	r4, r1
 800fb10:	b976      	cbnz	r6, 800fb30 <_Bfree+0x28>
 800fb12:	2010      	movs	r0, #16
 800fb14:	f7ff ff02 	bl	800f91c <malloc>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	61e8      	str	r0, [r5, #28]
 800fb1c:	b920      	cbnz	r0, 800fb28 <_Bfree+0x20>
 800fb1e:	4b09      	ldr	r3, [pc, #36]	@ (800fb44 <_Bfree+0x3c>)
 800fb20:	4809      	ldr	r0, [pc, #36]	@ (800fb48 <_Bfree+0x40>)
 800fb22:	218f      	movs	r1, #143	@ 0x8f
 800fb24:	f001 fd28 	bl	8011578 <__assert_func>
 800fb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb2c:	6006      	str	r6, [r0, #0]
 800fb2e:	60c6      	str	r6, [r0, #12]
 800fb30:	b13c      	cbz	r4, 800fb42 <_Bfree+0x3a>
 800fb32:	69eb      	ldr	r3, [r5, #28]
 800fb34:	6862      	ldr	r2, [r4, #4]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb3c:	6021      	str	r1, [r4, #0]
 800fb3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb42:	bd70      	pop	{r4, r5, r6, pc}
 800fb44:	080128de 	.word	0x080128de
 800fb48:	0801295e 	.word	0x0801295e

0800fb4c <__multadd>:
 800fb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb50:	690d      	ldr	r5, [r1, #16]
 800fb52:	4607      	mov	r7, r0
 800fb54:	460c      	mov	r4, r1
 800fb56:	461e      	mov	r6, r3
 800fb58:	f101 0c14 	add.w	ip, r1, #20
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb62:	b299      	uxth	r1, r3
 800fb64:	fb02 6101 	mla	r1, r2, r1, r6
 800fb68:	0c1e      	lsrs	r6, r3, #16
 800fb6a:	0c0b      	lsrs	r3, r1, #16
 800fb6c:	fb02 3306 	mla	r3, r2, r6, r3
 800fb70:	b289      	uxth	r1, r1
 800fb72:	3001      	adds	r0, #1
 800fb74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb78:	4285      	cmp	r5, r0
 800fb7a:	f84c 1b04 	str.w	r1, [ip], #4
 800fb7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb82:	dcec      	bgt.n	800fb5e <__multadd+0x12>
 800fb84:	b30e      	cbz	r6, 800fbca <__multadd+0x7e>
 800fb86:	68a3      	ldr	r3, [r4, #8]
 800fb88:	42ab      	cmp	r3, r5
 800fb8a:	dc19      	bgt.n	800fbc0 <__multadd+0x74>
 800fb8c:	6861      	ldr	r1, [r4, #4]
 800fb8e:	4638      	mov	r0, r7
 800fb90:	3101      	adds	r1, #1
 800fb92:	f7ff ff79 	bl	800fa88 <_Balloc>
 800fb96:	4680      	mov	r8, r0
 800fb98:	b928      	cbnz	r0, 800fba6 <__multadd+0x5a>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd0 <__multadd+0x84>)
 800fb9e:	480d      	ldr	r0, [pc, #52]	@ (800fbd4 <__multadd+0x88>)
 800fba0:	21ba      	movs	r1, #186	@ 0xba
 800fba2:	f001 fce9 	bl	8011578 <__assert_func>
 800fba6:	6922      	ldr	r2, [r4, #16]
 800fba8:	3202      	adds	r2, #2
 800fbaa:	f104 010c 	add.w	r1, r4, #12
 800fbae:	0092      	lsls	r2, r2, #2
 800fbb0:	300c      	adds	r0, #12
 800fbb2:	f7fe fffc 	bl	800ebae <memcpy>
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f7ff ffa5 	bl	800fb08 <_Bfree>
 800fbbe:	4644      	mov	r4, r8
 800fbc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbc4:	3501      	adds	r5, #1
 800fbc6:	615e      	str	r6, [r3, #20]
 800fbc8:	6125      	str	r5, [r4, #16]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	0801294d 	.word	0x0801294d
 800fbd4:	0801295e 	.word	0x0801295e

0800fbd8 <__s2b>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	460c      	mov	r4, r1
 800fbde:	4615      	mov	r5, r2
 800fbe0:	461f      	mov	r7, r3
 800fbe2:	2209      	movs	r2, #9
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbec:	2100      	movs	r1, #0
 800fbee:	2201      	movs	r2, #1
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	db09      	blt.n	800fc08 <__s2b+0x30>
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7ff ff47 	bl	800fa88 <_Balloc>
 800fbfa:	b940      	cbnz	r0, 800fc0e <__s2b+0x36>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	4b19      	ldr	r3, [pc, #100]	@ (800fc64 <__s2b+0x8c>)
 800fc00:	4819      	ldr	r0, [pc, #100]	@ (800fc68 <__s2b+0x90>)
 800fc02:	21d3      	movs	r1, #211	@ 0xd3
 800fc04:	f001 fcb8 	bl	8011578 <__assert_func>
 800fc08:	0052      	lsls	r2, r2, #1
 800fc0a:	3101      	adds	r1, #1
 800fc0c:	e7f0      	b.n	800fbf0 <__s2b+0x18>
 800fc0e:	9b08      	ldr	r3, [sp, #32]
 800fc10:	6143      	str	r3, [r0, #20]
 800fc12:	2d09      	cmp	r5, #9
 800fc14:	f04f 0301 	mov.w	r3, #1
 800fc18:	6103      	str	r3, [r0, #16]
 800fc1a:	dd16      	ble.n	800fc4a <__s2b+0x72>
 800fc1c:	f104 0909 	add.w	r9, r4, #9
 800fc20:	46c8      	mov	r8, r9
 800fc22:	442c      	add	r4, r5
 800fc24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc28:	4601      	mov	r1, r0
 800fc2a:	3b30      	subs	r3, #48	@ 0x30
 800fc2c:	220a      	movs	r2, #10
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7ff ff8c 	bl	800fb4c <__multadd>
 800fc34:	45a0      	cmp	r8, r4
 800fc36:	d1f5      	bne.n	800fc24 <__s2b+0x4c>
 800fc38:	f1a5 0408 	sub.w	r4, r5, #8
 800fc3c:	444c      	add	r4, r9
 800fc3e:	1b2d      	subs	r5, r5, r4
 800fc40:	1963      	adds	r3, r4, r5
 800fc42:	42bb      	cmp	r3, r7
 800fc44:	db04      	blt.n	800fc50 <__s2b+0x78>
 800fc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc4a:	340a      	adds	r4, #10
 800fc4c:	2509      	movs	r5, #9
 800fc4e:	e7f6      	b.n	800fc3e <__s2b+0x66>
 800fc50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc54:	4601      	mov	r1, r0
 800fc56:	3b30      	subs	r3, #48	@ 0x30
 800fc58:	220a      	movs	r2, #10
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f7ff ff76 	bl	800fb4c <__multadd>
 800fc60:	e7ee      	b.n	800fc40 <__s2b+0x68>
 800fc62:	bf00      	nop
 800fc64:	0801294d 	.word	0x0801294d
 800fc68:	0801295e 	.word	0x0801295e

0800fc6c <__hi0bits>:
 800fc6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc70:	4603      	mov	r3, r0
 800fc72:	bf36      	itet	cc
 800fc74:	0403      	lslcc	r3, r0, #16
 800fc76:	2000      	movcs	r0, #0
 800fc78:	2010      	movcc	r0, #16
 800fc7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc7e:	bf3c      	itt	cc
 800fc80:	021b      	lslcc	r3, r3, #8
 800fc82:	3008      	addcc	r0, #8
 800fc84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc88:	bf3c      	itt	cc
 800fc8a:	011b      	lslcc	r3, r3, #4
 800fc8c:	3004      	addcc	r0, #4
 800fc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc92:	bf3c      	itt	cc
 800fc94:	009b      	lslcc	r3, r3, #2
 800fc96:	3002      	addcc	r0, #2
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	db05      	blt.n	800fca8 <__hi0bits+0x3c>
 800fc9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fca0:	f100 0001 	add.w	r0, r0, #1
 800fca4:	bf08      	it	eq
 800fca6:	2020      	moveq	r0, #32
 800fca8:	4770      	bx	lr

0800fcaa <__lo0bits>:
 800fcaa:	6803      	ldr	r3, [r0, #0]
 800fcac:	4602      	mov	r2, r0
 800fcae:	f013 0007 	ands.w	r0, r3, #7
 800fcb2:	d00b      	beq.n	800fccc <__lo0bits+0x22>
 800fcb4:	07d9      	lsls	r1, r3, #31
 800fcb6:	d421      	bmi.n	800fcfc <__lo0bits+0x52>
 800fcb8:	0798      	lsls	r0, r3, #30
 800fcba:	bf49      	itett	mi
 800fcbc:	085b      	lsrmi	r3, r3, #1
 800fcbe:	089b      	lsrpl	r3, r3, #2
 800fcc0:	2001      	movmi	r0, #1
 800fcc2:	6013      	strmi	r3, [r2, #0]
 800fcc4:	bf5c      	itt	pl
 800fcc6:	6013      	strpl	r3, [r2, #0]
 800fcc8:	2002      	movpl	r0, #2
 800fcca:	4770      	bx	lr
 800fccc:	b299      	uxth	r1, r3
 800fcce:	b909      	cbnz	r1, 800fcd4 <__lo0bits+0x2a>
 800fcd0:	0c1b      	lsrs	r3, r3, #16
 800fcd2:	2010      	movs	r0, #16
 800fcd4:	b2d9      	uxtb	r1, r3
 800fcd6:	b909      	cbnz	r1, 800fcdc <__lo0bits+0x32>
 800fcd8:	3008      	adds	r0, #8
 800fcda:	0a1b      	lsrs	r3, r3, #8
 800fcdc:	0719      	lsls	r1, r3, #28
 800fcde:	bf04      	itt	eq
 800fce0:	091b      	lsreq	r3, r3, #4
 800fce2:	3004      	addeq	r0, #4
 800fce4:	0799      	lsls	r1, r3, #30
 800fce6:	bf04      	itt	eq
 800fce8:	089b      	lsreq	r3, r3, #2
 800fcea:	3002      	addeq	r0, #2
 800fcec:	07d9      	lsls	r1, r3, #31
 800fcee:	d403      	bmi.n	800fcf8 <__lo0bits+0x4e>
 800fcf0:	085b      	lsrs	r3, r3, #1
 800fcf2:	f100 0001 	add.w	r0, r0, #1
 800fcf6:	d003      	beq.n	800fd00 <__lo0bits+0x56>
 800fcf8:	6013      	str	r3, [r2, #0]
 800fcfa:	4770      	bx	lr
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	4770      	bx	lr
 800fd00:	2020      	movs	r0, #32
 800fd02:	4770      	bx	lr

0800fd04 <__i2b>:
 800fd04:	b510      	push	{r4, lr}
 800fd06:	460c      	mov	r4, r1
 800fd08:	2101      	movs	r1, #1
 800fd0a:	f7ff febd 	bl	800fa88 <_Balloc>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	b928      	cbnz	r0, 800fd1e <__i2b+0x1a>
 800fd12:	4b05      	ldr	r3, [pc, #20]	@ (800fd28 <__i2b+0x24>)
 800fd14:	4805      	ldr	r0, [pc, #20]	@ (800fd2c <__i2b+0x28>)
 800fd16:	f240 1145 	movw	r1, #325	@ 0x145
 800fd1a:	f001 fc2d 	bl	8011578 <__assert_func>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	6144      	str	r4, [r0, #20]
 800fd22:	6103      	str	r3, [r0, #16]
 800fd24:	bd10      	pop	{r4, pc}
 800fd26:	bf00      	nop
 800fd28:	0801294d 	.word	0x0801294d
 800fd2c:	0801295e 	.word	0x0801295e

0800fd30 <__multiply>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	4617      	mov	r7, r2
 800fd36:	690a      	ldr	r2, [r1, #16]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	bfa8      	it	ge
 800fd3e:	463b      	movge	r3, r7
 800fd40:	4689      	mov	r9, r1
 800fd42:	bfa4      	itt	ge
 800fd44:	460f      	movge	r7, r1
 800fd46:	4699      	movge	r9, r3
 800fd48:	693d      	ldr	r5, [r7, #16]
 800fd4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	6879      	ldr	r1, [r7, #4]
 800fd52:	eb05 060a 	add.w	r6, r5, sl
 800fd56:	42b3      	cmp	r3, r6
 800fd58:	b085      	sub	sp, #20
 800fd5a:	bfb8      	it	lt
 800fd5c:	3101      	addlt	r1, #1
 800fd5e:	f7ff fe93 	bl	800fa88 <_Balloc>
 800fd62:	b930      	cbnz	r0, 800fd72 <__multiply+0x42>
 800fd64:	4602      	mov	r2, r0
 800fd66:	4b41      	ldr	r3, [pc, #260]	@ (800fe6c <__multiply+0x13c>)
 800fd68:	4841      	ldr	r0, [pc, #260]	@ (800fe70 <__multiply+0x140>)
 800fd6a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd6e:	f001 fc03 	bl	8011578 <__assert_func>
 800fd72:	f100 0414 	add.w	r4, r0, #20
 800fd76:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fd7a:	4623      	mov	r3, r4
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4573      	cmp	r3, lr
 800fd80:	d320      	bcc.n	800fdc4 <__multiply+0x94>
 800fd82:	f107 0814 	add.w	r8, r7, #20
 800fd86:	f109 0114 	add.w	r1, r9, #20
 800fd8a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fd8e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fd92:	9302      	str	r3, [sp, #8]
 800fd94:	1beb      	subs	r3, r5, r7
 800fd96:	3b15      	subs	r3, #21
 800fd98:	f023 0303 	bic.w	r3, r3, #3
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	3715      	adds	r7, #21
 800fda0:	42bd      	cmp	r5, r7
 800fda2:	bf38      	it	cc
 800fda4:	2304      	movcc	r3, #4
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	9b02      	ldr	r3, [sp, #8]
 800fdaa:	9103      	str	r1, [sp, #12]
 800fdac:	428b      	cmp	r3, r1
 800fdae:	d80c      	bhi.n	800fdca <__multiply+0x9a>
 800fdb0:	2e00      	cmp	r6, #0
 800fdb2:	dd03      	ble.n	800fdbc <__multiply+0x8c>
 800fdb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d055      	beq.n	800fe68 <__multiply+0x138>
 800fdbc:	6106      	str	r6, [r0, #16]
 800fdbe:	b005      	add	sp, #20
 800fdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc4:	f843 2b04 	str.w	r2, [r3], #4
 800fdc8:	e7d9      	b.n	800fd7e <__multiply+0x4e>
 800fdca:	f8b1 a000 	ldrh.w	sl, [r1]
 800fdce:	f1ba 0f00 	cmp.w	sl, #0
 800fdd2:	d01f      	beq.n	800fe14 <__multiply+0xe4>
 800fdd4:	46c4      	mov	ip, r8
 800fdd6:	46a1      	mov	r9, r4
 800fdd8:	2700      	movs	r7, #0
 800fdda:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fdde:	f8d9 3000 	ldr.w	r3, [r9]
 800fde2:	fa1f fb82 	uxth.w	fp, r2
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	fb0a 330b 	mla	r3, sl, fp, r3
 800fdec:	443b      	add	r3, r7
 800fdee:	f8d9 7000 	ldr.w	r7, [r9]
 800fdf2:	0c12      	lsrs	r2, r2, #16
 800fdf4:	0c3f      	lsrs	r7, r7, #16
 800fdf6:	fb0a 7202 	mla	r2, sl, r2, r7
 800fdfa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe04:	4565      	cmp	r5, ip
 800fe06:	f849 3b04 	str.w	r3, [r9], #4
 800fe0a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fe0e:	d8e4      	bhi.n	800fdda <__multiply+0xaa>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	50e7      	str	r7, [r4, r3]
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe1a:	3104      	adds	r1, #4
 800fe1c:	f1b9 0f00 	cmp.w	r9, #0
 800fe20:	d020      	beq.n	800fe64 <__multiply+0x134>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	4647      	mov	r7, r8
 800fe26:	46a4      	mov	ip, r4
 800fe28:	f04f 0a00 	mov.w	sl, #0
 800fe2c:	f8b7 b000 	ldrh.w	fp, [r7]
 800fe30:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fe34:	fb09 220b 	mla	r2, r9, fp, r2
 800fe38:	4452      	add	r2, sl
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe40:	f84c 3b04 	str.w	r3, [ip], #4
 800fe44:	f857 3b04 	ldr.w	r3, [r7], #4
 800fe48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe4c:	f8bc 3000 	ldrh.w	r3, [ip]
 800fe50:	fb09 330a 	mla	r3, r9, sl, r3
 800fe54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fe58:	42bd      	cmp	r5, r7
 800fe5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe5e:	d8e5      	bhi.n	800fe2c <__multiply+0xfc>
 800fe60:	9a01      	ldr	r2, [sp, #4]
 800fe62:	50a3      	str	r3, [r4, r2]
 800fe64:	3404      	adds	r4, #4
 800fe66:	e79f      	b.n	800fda8 <__multiply+0x78>
 800fe68:	3e01      	subs	r6, #1
 800fe6a:	e7a1      	b.n	800fdb0 <__multiply+0x80>
 800fe6c:	0801294d 	.word	0x0801294d
 800fe70:	0801295e 	.word	0x0801295e

0800fe74 <__pow5mult>:
 800fe74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe78:	4615      	mov	r5, r2
 800fe7a:	f012 0203 	ands.w	r2, r2, #3
 800fe7e:	4607      	mov	r7, r0
 800fe80:	460e      	mov	r6, r1
 800fe82:	d007      	beq.n	800fe94 <__pow5mult+0x20>
 800fe84:	4c25      	ldr	r4, [pc, #148]	@ (800ff1c <__pow5mult+0xa8>)
 800fe86:	3a01      	subs	r2, #1
 800fe88:	2300      	movs	r3, #0
 800fe8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe8e:	f7ff fe5d 	bl	800fb4c <__multadd>
 800fe92:	4606      	mov	r6, r0
 800fe94:	10ad      	asrs	r5, r5, #2
 800fe96:	d03d      	beq.n	800ff14 <__pow5mult+0xa0>
 800fe98:	69fc      	ldr	r4, [r7, #28]
 800fe9a:	b97c      	cbnz	r4, 800febc <__pow5mult+0x48>
 800fe9c:	2010      	movs	r0, #16
 800fe9e:	f7ff fd3d 	bl	800f91c <malloc>
 800fea2:	4602      	mov	r2, r0
 800fea4:	61f8      	str	r0, [r7, #28]
 800fea6:	b928      	cbnz	r0, 800feb4 <__pow5mult+0x40>
 800fea8:	4b1d      	ldr	r3, [pc, #116]	@ (800ff20 <__pow5mult+0xac>)
 800feaa:	481e      	ldr	r0, [pc, #120]	@ (800ff24 <__pow5mult+0xb0>)
 800feac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800feb0:	f001 fb62 	bl	8011578 <__assert_func>
 800feb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800feb8:	6004      	str	r4, [r0, #0]
 800feba:	60c4      	str	r4, [r0, #12]
 800febc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fec4:	b94c      	cbnz	r4, 800feda <__pow5mult+0x66>
 800fec6:	f240 2171 	movw	r1, #625	@ 0x271
 800feca:	4638      	mov	r0, r7
 800fecc:	f7ff ff1a 	bl	800fd04 <__i2b>
 800fed0:	2300      	movs	r3, #0
 800fed2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fed6:	4604      	mov	r4, r0
 800fed8:	6003      	str	r3, [r0, #0]
 800feda:	f04f 0900 	mov.w	r9, #0
 800fede:	07eb      	lsls	r3, r5, #31
 800fee0:	d50a      	bpl.n	800fef8 <__pow5mult+0x84>
 800fee2:	4631      	mov	r1, r6
 800fee4:	4622      	mov	r2, r4
 800fee6:	4638      	mov	r0, r7
 800fee8:	f7ff ff22 	bl	800fd30 <__multiply>
 800feec:	4631      	mov	r1, r6
 800feee:	4680      	mov	r8, r0
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7ff fe09 	bl	800fb08 <_Bfree>
 800fef6:	4646      	mov	r6, r8
 800fef8:	106d      	asrs	r5, r5, #1
 800fefa:	d00b      	beq.n	800ff14 <__pow5mult+0xa0>
 800fefc:	6820      	ldr	r0, [r4, #0]
 800fefe:	b938      	cbnz	r0, 800ff10 <__pow5mult+0x9c>
 800ff00:	4622      	mov	r2, r4
 800ff02:	4621      	mov	r1, r4
 800ff04:	4638      	mov	r0, r7
 800ff06:	f7ff ff13 	bl	800fd30 <__multiply>
 800ff0a:	6020      	str	r0, [r4, #0]
 800ff0c:	f8c0 9000 	str.w	r9, [r0]
 800ff10:	4604      	mov	r4, r0
 800ff12:	e7e4      	b.n	800fede <__pow5mult+0x6a>
 800ff14:	4630      	mov	r0, r6
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	bf00      	nop
 800ff1c:	08012a70 	.word	0x08012a70
 800ff20:	080128de 	.word	0x080128de
 800ff24:	0801295e 	.word	0x0801295e

0800ff28 <__lshift>:
 800ff28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	6849      	ldr	r1, [r1, #4]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	4607      	mov	r7, r0
 800ff3a:	4691      	mov	r9, r2
 800ff3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff40:	f108 0601 	add.w	r6, r8, #1
 800ff44:	42b3      	cmp	r3, r6
 800ff46:	db0b      	blt.n	800ff60 <__lshift+0x38>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	f7ff fd9d 	bl	800fa88 <_Balloc>
 800ff4e:	4605      	mov	r5, r0
 800ff50:	b948      	cbnz	r0, 800ff66 <__lshift+0x3e>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4b28      	ldr	r3, [pc, #160]	@ (800fff8 <__lshift+0xd0>)
 800ff56:	4829      	ldr	r0, [pc, #164]	@ (800fffc <__lshift+0xd4>)
 800ff58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff5c:	f001 fb0c 	bl	8011578 <__assert_func>
 800ff60:	3101      	adds	r1, #1
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	e7ee      	b.n	800ff44 <__lshift+0x1c>
 800ff66:	2300      	movs	r3, #0
 800ff68:	f100 0114 	add.w	r1, r0, #20
 800ff6c:	f100 0210 	add.w	r2, r0, #16
 800ff70:	4618      	mov	r0, r3
 800ff72:	4553      	cmp	r3, sl
 800ff74:	db33      	blt.n	800ffde <__lshift+0xb6>
 800ff76:	6920      	ldr	r0, [r4, #16]
 800ff78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff7c:	f104 0314 	add.w	r3, r4, #20
 800ff80:	f019 091f 	ands.w	r9, r9, #31
 800ff84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff8c:	d02b      	beq.n	800ffe6 <__lshift+0xbe>
 800ff8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ff92:	468a      	mov	sl, r1
 800ff94:	2200      	movs	r2, #0
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	fa00 f009 	lsl.w	r0, r0, r9
 800ff9c:	4310      	orrs	r0, r2
 800ff9e:	f84a 0b04 	str.w	r0, [sl], #4
 800ffa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffa6:	459c      	cmp	ip, r3
 800ffa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffac:	d8f3      	bhi.n	800ff96 <__lshift+0x6e>
 800ffae:	ebac 0304 	sub.w	r3, ip, r4
 800ffb2:	3b15      	subs	r3, #21
 800ffb4:	f023 0303 	bic.w	r3, r3, #3
 800ffb8:	3304      	adds	r3, #4
 800ffba:	f104 0015 	add.w	r0, r4, #21
 800ffbe:	4560      	cmp	r0, ip
 800ffc0:	bf88      	it	hi
 800ffc2:	2304      	movhi	r3, #4
 800ffc4:	50ca      	str	r2, [r1, r3]
 800ffc6:	b10a      	cbz	r2, 800ffcc <__lshift+0xa4>
 800ffc8:	f108 0602 	add.w	r6, r8, #2
 800ffcc:	3e01      	subs	r6, #1
 800ffce:	4638      	mov	r0, r7
 800ffd0:	612e      	str	r6, [r5, #16]
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	f7ff fd98 	bl	800fb08 <_Bfree>
 800ffd8:	4628      	mov	r0, r5
 800ffda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	e7c5      	b.n	800ff72 <__lshift+0x4a>
 800ffe6:	3904      	subs	r1, #4
 800ffe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffec:	f841 2f04 	str.w	r2, [r1, #4]!
 800fff0:	459c      	cmp	ip, r3
 800fff2:	d8f9      	bhi.n	800ffe8 <__lshift+0xc0>
 800fff4:	e7ea      	b.n	800ffcc <__lshift+0xa4>
 800fff6:	bf00      	nop
 800fff8:	0801294d 	.word	0x0801294d
 800fffc:	0801295e 	.word	0x0801295e

08010000 <__mcmp>:
 8010000:	690a      	ldr	r2, [r1, #16]
 8010002:	4603      	mov	r3, r0
 8010004:	6900      	ldr	r0, [r0, #16]
 8010006:	1a80      	subs	r0, r0, r2
 8010008:	b530      	push	{r4, r5, lr}
 801000a:	d10e      	bne.n	801002a <__mcmp+0x2a>
 801000c:	3314      	adds	r3, #20
 801000e:	3114      	adds	r1, #20
 8010010:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010014:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010018:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801001c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010020:	4295      	cmp	r5, r2
 8010022:	d003      	beq.n	801002c <__mcmp+0x2c>
 8010024:	d205      	bcs.n	8010032 <__mcmp+0x32>
 8010026:	f04f 30ff 	mov.w	r0, #4294967295
 801002a:	bd30      	pop	{r4, r5, pc}
 801002c:	42a3      	cmp	r3, r4
 801002e:	d3f3      	bcc.n	8010018 <__mcmp+0x18>
 8010030:	e7fb      	b.n	801002a <__mcmp+0x2a>
 8010032:	2001      	movs	r0, #1
 8010034:	e7f9      	b.n	801002a <__mcmp+0x2a>
	...

08010038 <__mdiff>:
 8010038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	4689      	mov	r9, r1
 801003e:	4606      	mov	r6, r0
 8010040:	4611      	mov	r1, r2
 8010042:	4648      	mov	r0, r9
 8010044:	4614      	mov	r4, r2
 8010046:	f7ff ffdb 	bl	8010000 <__mcmp>
 801004a:	1e05      	subs	r5, r0, #0
 801004c:	d112      	bne.n	8010074 <__mdiff+0x3c>
 801004e:	4629      	mov	r1, r5
 8010050:	4630      	mov	r0, r6
 8010052:	f7ff fd19 	bl	800fa88 <_Balloc>
 8010056:	4602      	mov	r2, r0
 8010058:	b928      	cbnz	r0, 8010066 <__mdiff+0x2e>
 801005a:	4b3f      	ldr	r3, [pc, #252]	@ (8010158 <__mdiff+0x120>)
 801005c:	f240 2137 	movw	r1, #567	@ 0x237
 8010060:	483e      	ldr	r0, [pc, #248]	@ (801015c <__mdiff+0x124>)
 8010062:	f001 fa89 	bl	8011578 <__assert_func>
 8010066:	2301      	movs	r3, #1
 8010068:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801006c:	4610      	mov	r0, r2
 801006e:	b003      	add	sp, #12
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	bfbc      	itt	lt
 8010076:	464b      	movlt	r3, r9
 8010078:	46a1      	movlt	r9, r4
 801007a:	4630      	mov	r0, r6
 801007c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010080:	bfba      	itte	lt
 8010082:	461c      	movlt	r4, r3
 8010084:	2501      	movlt	r5, #1
 8010086:	2500      	movge	r5, #0
 8010088:	f7ff fcfe 	bl	800fa88 <_Balloc>
 801008c:	4602      	mov	r2, r0
 801008e:	b918      	cbnz	r0, 8010098 <__mdiff+0x60>
 8010090:	4b31      	ldr	r3, [pc, #196]	@ (8010158 <__mdiff+0x120>)
 8010092:	f240 2145 	movw	r1, #581	@ 0x245
 8010096:	e7e3      	b.n	8010060 <__mdiff+0x28>
 8010098:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801009c:	6926      	ldr	r6, [r4, #16]
 801009e:	60c5      	str	r5, [r0, #12]
 80100a0:	f109 0310 	add.w	r3, r9, #16
 80100a4:	f109 0514 	add.w	r5, r9, #20
 80100a8:	f104 0e14 	add.w	lr, r4, #20
 80100ac:	f100 0b14 	add.w	fp, r0, #20
 80100b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80100b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	46d9      	mov	r9, fp
 80100bc:	f04f 0c00 	mov.w	ip, #0
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80100c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	fa1f f38a 	uxth.w	r3, sl
 80100d0:	4619      	mov	r1, r3
 80100d2:	b283      	uxth	r3, r0
 80100d4:	1acb      	subs	r3, r1, r3
 80100d6:	0c00      	lsrs	r0, r0, #16
 80100d8:	4463      	add	r3, ip
 80100da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80100e8:	4576      	cmp	r6, lr
 80100ea:	f849 3b04 	str.w	r3, [r9], #4
 80100ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100f2:	d8e5      	bhi.n	80100c0 <__mdiff+0x88>
 80100f4:	1b33      	subs	r3, r6, r4
 80100f6:	3b15      	subs	r3, #21
 80100f8:	f023 0303 	bic.w	r3, r3, #3
 80100fc:	3415      	adds	r4, #21
 80100fe:	3304      	adds	r3, #4
 8010100:	42a6      	cmp	r6, r4
 8010102:	bf38      	it	cc
 8010104:	2304      	movcc	r3, #4
 8010106:	441d      	add	r5, r3
 8010108:	445b      	add	r3, fp
 801010a:	461e      	mov	r6, r3
 801010c:	462c      	mov	r4, r5
 801010e:	4544      	cmp	r4, r8
 8010110:	d30e      	bcc.n	8010130 <__mdiff+0xf8>
 8010112:	f108 0103 	add.w	r1, r8, #3
 8010116:	1b49      	subs	r1, r1, r5
 8010118:	f021 0103 	bic.w	r1, r1, #3
 801011c:	3d03      	subs	r5, #3
 801011e:	45a8      	cmp	r8, r5
 8010120:	bf38      	it	cc
 8010122:	2100      	movcc	r1, #0
 8010124:	440b      	add	r3, r1
 8010126:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801012a:	b191      	cbz	r1, 8010152 <__mdiff+0x11a>
 801012c:	6117      	str	r7, [r2, #16]
 801012e:	e79d      	b.n	801006c <__mdiff+0x34>
 8010130:	f854 1b04 	ldr.w	r1, [r4], #4
 8010134:	46e6      	mov	lr, ip
 8010136:	0c08      	lsrs	r0, r1, #16
 8010138:	fa1c fc81 	uxtah	ip, ip, r1
 801013c:	4471      	add	r1, lr
 801013e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010142:	b289      	uxth	r1, r1
 8010144:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010148:	f846 1b04 	str.w	r1, [r6], #4
 801014c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010150:	e7dd      	b.n	801010e <__mdiff+0xd6>
 8010152:	3f01      	subs	r7, #1
 8010154:	e7e7      	b.n	8010126 <__mdiff+0xee>
 8010156:	bf00      	nop
 8010158:	0801294d 	.word	0x0801294d
 801015c:	0801295e 	.word	0x0801295e

08010160 <__ulp>:
 8010160:	b082      	sub	sp, #8
 8010162:	ed8d 0b00 	vstr	d0, [sp]
 8010166:	9a01      	ldr	r2, [sp, #4]
 8010168:	4b0f      	ldr	r3, [pc, #60]	@ (80101a8 <__ulp+0x48>)
 801016a:	4013      	ands	r3, r2
 801016c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010170:	2b00      	cmp	r3, #0
 8010172:	dc08      	bgt.n	8010186 <__ulp+0x26>
 8010174:	425b      	negs	r3, r3
 8010176:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801017a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801017e:	da04      	bge.n	801018a <__ulp+0x2a>
 8010180:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010184:	4113      	asrs	r3, r2
 8010186:	2200      	movs	r2, #0
 8010188:	e008      	b.n	801019c <__ulp+0x3c>
 801018a:	f1a2 0314 	sub.w	r3, r2, #20
 801018e:	2b1e      	cmp	r3, #30
 8010190:	bfda      	itte	le
 8010192:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010196:	40da      	lsrle	r2, r3
 8010198:	2201      	movgt	r2, #1
 801019a:	2300      	movs	r3, #0
 801019c:	4619      	mov	r1, r3
 801019e:	4610      	mov	r0, r2
 80101a0:	ec41 0b10 	vmov	d0, r0, r1
 80101a4:	b002      	add	sp, #8
 80101a6:	4770      	bx	lr
 80101a8:	7ff00000 	.word	0x7ff00000

080101ac <__b2d>:
 80101ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b0:	6906      	ldr	r6, [r0, #16]
 80101b2:	f100 0814 	add.w	r8, r0, #20
 80101b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80101ba:	1f37      	subs	r7, r6, #4
 80101bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101c0:	4610      	mov	r0, r2
 80101c2:	f7ff fd53 	bl	800fc6c <__hi0bits>
 80101c6:	f1c0 0320 	rsb	r3, r0, #32
 80101ca:	280a      	cmp	r0, #10
 80101cc:	600b      	str	r3, [r1, #0]
 80101ce:	491b      	ldr	r1, [pc, #108]	@ (801023c <__b2d+0x90>)
 80101d0:	dc15      	bgt.n	80101fe <__b2d+0x52>
 80101d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80101d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80101da:	45b8      	cmp	r8, r7
 80101dc:	ea43 0501 	orr.w	r5, r3, r1
 80101e0:	bf34      	ite	cc
 80101e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80101e6:	2300      	movcs	r3, #0
 80101e8:	3015      	adds	r0, #21
 80101ea:	fa02 f000 	lsl.w	r0, r2, r0
 80101ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80101f2:	4303      	orrs	r3, r0
 80101f4:	461c      	mov	r4, r3
 80101f6:	ec45 4b10 	vmov	d0, r4, r5
 80101fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fe:	45b8      	cmp	r8, r7
 8010200:	bf3a      	itte	cc
 8010202:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010206:	f1a6 0708 	subcc.w	r7, r6, #8
 801020a:	2300      	movcs	r3, #0
 801020c:	380b      	subs	r0, #11
 801020e:	d012      	beq.n	8010236 <__b2d+0x8a>
 8010210:	f1c0 0120 	rsb	r1, r0, #32
 8010214:	fa23 f401 	lsr.w	r4, r3, r1
 8010218:	4082      	lsls	r2, r0
 801021a:	4322      	orrs	r2, r4
 801021c:	4547      	cmp	r7, r8
 801021e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010222:	bf8c      	ite	hi
 8010224:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010228:	2200      	movls	r2, #0
 801022a:	4083      	lsls	r3, r0
 801022c:	40ca      	lsrs	r2, r1
 801022e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010232:	4313      	orrs	r3, r2
 8010234:	e7de      	b.n	80101f4 <__b2d+0x48>
 8010236:	ea42 0501 	orr.w	r5, r2, r1
 801023a:	e7db      	b.n	80101f4 <__b2d+0x48>
 801023c:	3ff00000 	.word	0x3ff00000

08010240 <__d2b>:
 8010240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010244:	460f      	mov	r7, r1
 8010246:	2101      	movs	r1, #1
 8010248:	ec59 8b10 	vmov	r8, r9, d0
 801024c:	4616      	mov	r6, r2
 801024e:	f7ff fc1b 	bl	800fa88 <_Balloc>
 8010252:	4604      	mov	r4, r0
 8010254:	b930      	cbnz	r0, 8010264 <__d2b+0x24>
 8010256:	4602      	mov	r2, r0
 8010258:	4b23      	ldr	r3, [pc, #140]	@ (80102e8 <__d2b+0xa8>)
 801025a:	4824      	ldr	r0, [pc, #144]	@ (80102ec <__d2b+0xac>)
 801025c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010260:	f001 f98a 	bl	8011578 <__assert_func>
 8010264:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801026c:	b10d      	cbz	r5, 8010272 <__d2b+0x32>
 801026e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	f1b8 0300 	subs.w	r3, r8, #0
 8010278:	d023      	beq.n	80102c2 <__d2b+0x82>
 801027a:	4668      	mov	r0, sp
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	f7ff fd14 	bl	800fcaa <__lo0bits>
 8010282:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010286:	b1d0      	cbz	r0, 80102be <__d2b+0x7e>
 8010288:	f1c0 0320 	rsb	r3, r0, #32
 801028c:	fa02 f303 	lsl.w	r3, r2, r3
 8010290:	430b      	orrs	r3, r1
 8010292:	40c2      	lsrs	r2, r0
 8010294:	6163      	str	r3, [r4, #20]
 8010296:	9201      	str	r2, [sp, #4]
 8010298:	9b01      	ldr	r3, [sp, #4]
 801029a:	61a3      	str	r3, [r4, #24]
 801029c:	2b00      	cmp	r3, #0
 801029e:	bf0c      	ite	eq
 80102a0:	2201      	moveq	r2, #1
 80102a2:	2202      	movne	r2, #2
 80102a4:	6122      	str	r2, [r4, #16]
 80102a6:	b1a5      	cbz	r5, 80102d2 <__d2b+0x92>
 80102a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102ac:	4405      	add	r5, r0
 80102ae:	603d      	str	r5, [r7, #0]
 80102b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102b4:	6030      	str	r0, [r6, #0]
 80102b6:	4620      	mov	r0, r4
 80102b8:	b003      	add	sp, #12
 80102ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102be:	6161      	str	r1, [r4, #20]
 80102c0:	e7ea      	b.n	8010298 <__d2b+0x58>
 80102c2:	a801      	add	r0, sp, #4
 80102c4:	f7ff fcf1 	bl	800fcaa <__lo0bits>
 80102c8:	9b01      	ldr	r3, [sp, #4]
 80102ca:	6163      	str	r3, [r4, #20]
 80102cc:	3020      	adds	r0, #32
 80102ce:	2201      	movs	r2, #1
 80102d0:	e7e8      	b.n	80102a4 <__d2b+0x64>
 80102d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102da:	6038      	str	r0, [r7, #0]
 80102dc:	6918      	ldr	r0, [r3, #16]
 80102de:	f7ff fcc5 	bl	800fc6c <__hi0bits>
 80102e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102e6:	e7e5      	b.n	80102b4 <__d2b+0x74>
 80102e8:	0801294d 	.word	0x0801294d
 80102ec:	0801295e 	.word	0x0801295e

080102f0 <__ratio>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	b085      	sub	sp, #20
 80102f6:	e9cd 1000 	strd	r1, r0, [sp]
 80102fa:	a902      	add	r1, sp, #8
 80102fc:	f7ff ff56 	bl	80101ac <__b2d>
 8010300:	9800      	ldr	r0, [sp, #0]
 8010302:	a903      	add	r1, sp, #12
 8010304:	ec55 4b10 	vmov	r4, r5, d0
 8010308:	f7ff ff50 	bl	80101ac <__b2d>
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	6919      	ldr	r1, [r3, #16]
 8010310:	9b00      	ldr	r3, [sp, #0]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	1ac9      	subs	r1, r1, r3
 8010316:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801031a:	1a9b      	subs	r3, r3, r2
 801031c:	ec5b ab10 	vmov	sl, fp, d0
 8010320:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010324:	2b00      	cmp	r3, #0
 8010326:	bfce      	itee	gt
 8010328:	462a      	movgt	r2, r5
 801032a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801032e:	465a      	movle	r2, fp
 8010330:	462f      	mov	r7, r5
 8010332:	46d9      	mov	r9, fp
 8010334:	bfcc      	ite	gt
 8010336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801033a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801033e:	464b      	mov	r3, r9
 8010340:	4652      	mov	r2, sl
 8010342:	4620      	mov	r0, r4
 8010344:	4639      	mov	r1, r7
 8010346:	f7f0 fa81 	bl	800084c <__aeabi_ddiv>
 801034a:	ec41 0b10 	vmov	d0, r0, r1
 801034e:	b005      	add	sp, #20
 8010350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010354 <__copybits>:
 8010354:	3901      	subs	r1, #1
 8010356:	b570      	push	{r4, r5, r6, lr}
 8010358:	1149      	asrs	r1, r1, #5
 801035a:	6914      	ldr	r4, [r2, #16]
 801035c:	3101      	adds	r1, #1
 801035e:	f102 0314 	add.w	r3, r2, #20
 8010362:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010366:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801036a:	1f05      	subs	r5, r0, #4
 801036c:	42a3      	cmp	r3, r4
 801036e:	d30c      	bcc.n	801038a <__copybits+0x36>
 8010370:	1aa3      	subs	r3, r4, r2
 8010372:	3b11      	subs	r3, #17
 8010374:	f023 0303 	bic.w	r3, r3, #3
 8010378:	3211      	adds	r2, #17
 801037a:	42a2      	cmp	r2, r4
 801037c:	bf88      	it	hi
 801037e:	2300      	movhi	r3, #0
 8010380:	4418      	add	r0, r3
 8010382:	2300      	movs	r3, #0
 8010384:	4288      	cmp	r0, r1
 8010386:	d305      	bcc.n	8010394 <__copybits+0x40>
 8010388:	bd70      	pop	{r4, r5, r6, pc}
 801038a:	f853 6b04 	ldr.w	r6, [r3], #4
 801038e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010392:	e7eb      	b.n	801036c <__copybits+0x18>
 8010394:	f840 3b04 	str.w	r3, [r0], #4
 8010398:	e7f4      	b.n	8010384 <__copybits+0x30>

0801039a <__any_on>:
 801039a:	f100 0214 	add.w	r2, r0, #20
 801039e:	6900      	ldr	r0, [r0, #16]
 80103a0:	114b      	asrs	r3, r1, #5
 80103a2:	4298      	cmp	r0, r3
 80103a4:	b510      	push	{r4, lr}
 80103a6:	db11      	blt.n	80103cc <__any_on+0x32>
 80103a8:	dd0a      	ble.n	80103c0 <__any_on+0x26>
 80103aa:	f011 011f 	ands.w	r1, r1, #31
 80103ae:	d007      	beq.n	80103c0 <__any_on+0x26>
 80103b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103b4:	fa24 f001 	lsr.w	r0, r4, r1
 80103b8:	fa00 f101 	lsl.w	r1, r0, r1
 80103bc:	428c      	cmp	r4, r1
 80103be:	d10b      	bne.n	80103d8 <__any_on+0x3e>
 80103c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d803      	bhi.n	80103d0 <__any_on+0x36>
 80103c8:	2000      	movs	r0, #0
 80103ca:	bd10      	pop	{r4, pc}
 80103cc:	4603      	mov	r3, r0
 80103ce:	e7f7      	b.n	80103c0 <__any_on+0x26>
 80103d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103d4:	2900      	cmp	r1, #0
 80103d6:	d0f5      	beq.n	80103c4 <__any_on+0x2a>
 80103d8:	2001      	movs	r0, #1
 80103da:	e7f6      	b.n	80103ca <__any_on+0x30>

080103dc <sulp>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	4604      	mov	r4, r0
 80103e0:	460d      	mov	r5, r1
 80103e2:	ec45 4b10 	vmov	d0, r4, r5
 80103e6:	4616      	mov	r6, r2
 80103e8:	f7ff feba 	bl	8010160 <__ulp>
 80103ec:	ec51 0b10 	vmov	r0, r1, d0
 80103f0:	b17e      	cbz	r6, 8010412 <sulp+0x36>
 80103f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80103f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	dd09      	ble.n	8010412 <sulp+0x36>
 80103fe:	051b      	lsls	r3, r3, #20
 8010400:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010404:	2400      	movs	r4, #0
 8010406:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801040a:	4622      	mov	r2, r4
 801040c:	462b      	mov	r3, r5
 801040e:	f7f0 f8f3 	bl	80005f8 <__aeabi_dmul>
 8010412:	ec41 0b10 	vmov	d0, r0, r1
 8010416:	bd70      	pop	{r4, r5, r6, pc}

08010418 <_strtod_l>:
 8010418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801041c:	b09f      	sub	sp, #124	@ 0x7c
 801041e:	460c      	mov	r4, r1
 8010420:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010422:	2200      	movs	r2, #0
 8010424:	921a      	str	r2, [sp, #104]	@ 0x68
 8010426:	9005      	str	r0, [sp, #20]
 8010428:	f04f 0a00 	mov.w	sl, #0
 801042c:	f04f 0b00 	mov.w	fp, #0
 8010430:	460a      	mov	r2, r1
 8010432:	9219      	str	r2, [sp, #100]	@ 0x64
 8010434:	7811      	ldrb	r1, [r2, #0]
 8010436:	292b      	cmp	r1, #43	@ 0x2b
 8010438:	d04a      	beq.n	80104d0 <_strtod_l+0xb8>
 801043a:	d838      	bhi.n	80104ae <_strtod_l+0x96>
 801043c:	290d      	cmp	r1, #13
 801043e:	d832      	bhi.n	80104a6 <_strtod_l+0x8e>
 8010440:	2908      	cmp	r1, #8
 8010442:	d832      	bhi.n	80104aa <_strtod_l+0x92>
 8010444:	2900      	cmp	r1, #0
 8010446:	d03b      	beq.n	80104c0 <_strtod_l+0xa8>
 8010448:	2200      	movs	r2, #0
 801044a:	920e      	str	r2, [sp, #56]	@ 0x38
 801044c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801044e:	782a      	ldrb	r2, [r5, #0]
 8010450:	2a30      	cmp	r2, #48	@ 0x30
 8010452:	f040 80b2 	bne.w	80105ba <_strtod_l+0x1a2>
 8010456:	786a      	ldrb	r2, [r5, #1]
 8010458:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801045c:	2a58      	cmp	r2, #88	@ 0x58
 801045e:	d16e      	bne.n	801053e <_strtod_l+0x126>
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010464:	9301      	str	r3, [sp, #4]
 8010466:	ab1a      	add	r3, sp, #104	@ 0x68
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	4a8f      	ldr	r2, [pc, #572]	@ (80106a8 <_strtod_l+0x290>)
 801046c:	9805      	ldr	r0, [sp, #20]
 801046e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010470:	a919      	add	r1, sp, #100	@ 0x64
 8010472:	f001 f91b 	bl	80116ac <__gethex>
 8010476:	f010 060f 	ands.w	r6, r0, #15
 801047a:	4604      	mov	r4, r0
 801047c:	d005      	beq.n	801048a <_strtod_l+0x72>
 801047e:	2e06      	cmp	r6, #6
 8010480:	d128      	bne.n	80104d4 <_strtod_l+0xbc>
 8010482:	3501      	adds	r5, #1
 8010484:	2300      	movs	r3, #0
 8010486:	9519      	str	r5, [sp, #100]	@ 0x64
 8010488:	930e      	str	r3, [sp, #56]	@ 0x38
 801048a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801048c:	2b00      	cmp	r3, #0
 801048e:	f040 858e 	bne.w	8010fae <_strtod_l+0xb96>
 8010492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010494:	b1cb      	cbz	r3, 80104ca <_strtod_l+0xb2>
 8010496:	4652      	mov	r2, sl
 8010498:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801049c:	ec43 2b10 	vmov	d0, r2, r3
 80104a0:	b01f      	add	sp, #124	@ 0x7c
 80104a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a6:	2920      	cmp	r1, #32
 80104a8:	d1ce      	bne.n	8010448 <_strtod_l+0x30>
 80104aa:	3201      	adds	r2, #1
 80104ac:	e7c1      	b.n	8010432 <_strtod_l+0x1a>
 80104ae:	292d      	cmp	r1, #45	@ 0x2d
 80104b0:	d1ca      	bne.n	8010448 <_strtod_l+0x30>
 80104b2:	2101      	movs	r1, #1
 80104b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80104b6:	1c51      	adds	r1, r2, #1
 80104b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80104ba:	7852      	ldrb	r2, [r2, #1]
 80104bc:	2a00      	cmp	r2, #0
 80104be:	d1c5      	bne.n	801044c <_strtod_l+0x34>
 80104c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f040 8570 	bne.w	8010faa <_strtod_l+0xb92>
 80104ca:	4652      	mov	r2, sl
 80104cc:	465b      	mov	r3, fp
 80104ce:	e7e5      	b.n	801049c <_strtod_l+0x84>
 80104d0:	2100      	movs	r1, #0
 80104d2:	e7ef      	b.n	80104b4 <_strtod_l+0x9c>
 80104d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80104d6:	b13a      	cbz	r2, 80104e8 <_strtod_l+0xd0>
 80104d8:	2135      	movs	r1, #53	@ 0x35
 80104da:	a81c      	add	r0, sp, #112	@ 0x70
 80104dc:	f7ff ff3a 	bl	8010354 <__copybits>
 80104e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80104e2:	9805      	ldr	r0, [sp, #20]
 80104e4:	f7ff fb10 	bl	800fb08 <_Bfree>
 80104e8:	3e01      	subs	r6, #1
 80104ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80104ec:	2e04      	cmp	r6, #4
 80104ee:	d806      	bhi.n	80104fe <_strtod_l+0xe6>
 80104f0:	e8df f006 	tbb	[pc, r6]
 80104f4:	201d0314 	.word	0x201d0314
 80104f8:	14          	.byte	0x14
 80104f9:	00          	.byte	0x00
 80104fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80104fe:	05e1      	lsls	r1, r4, #23
 8010500:	bf48      	it	mi
 8010502:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010506:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801050a:	0d1b      	lsrs	r3, r3, #20
 801050c:	051b      	lsls	r3, r3, #20
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1bb      	bne.n	801048a <_strtod_l+0x72>
 8010512:	f7fe fb1f 	bl	800eb54 <__errno>
 8010516:	2322      	movs	r3, #34	@ 0x22
 8010518:	6003      	str	r3, [r0, #0]
 801051a:	e7b6      	b.n	801048a <_strtod_l+0x72>
 801051c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010520:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010524:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010528:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801052c:	e7e7      	b.n	80104fe <_strtod_l+0xe6>
 801052e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80106b0 <_strtod_l+0x298>
 8010532:	e7e4      	b.n	80104fe <_strtod_l+0xe6>
 8010534:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010538:	f04f 3aff 	mov.w	sl, #4294967295
 801053c:	e7df      	b.n	80104fe <_strtod_l+0xe6>
 801053e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	9219      	str	r2, [sp, #100]	@ 0x64
 8010544:	785b      	ldrb	r3, [r3, #1]
 8010546:	2b30      	cmp	r3, #48	@ 0x30
 8010548:	d0f9      	beq.n	801053e <_strtod_l+0x126>
 801054a:	2b00      	cmp	r3, #0
 801054c:	d09d      	beq.n	801048a <_strtod_l+0x72>
 801054e:	2301      	movs	r3, #1
 8010550:	2700      	movs	r7, #0
 8010552:	9308      	str	r3, [sp, #32]
 8010554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010556:	930c      	str	r3, [sp, #48]	@ 0x30
 8010558:	970b      	str	r7, [sp, #44]	@ 0x2c
 801055a:	46b9      	mov	r9, r7
 801055c:	220a      	movs	r2, #10
 801055e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010560:	7805      	ldrb	r5, [r0, #0]
 8010562:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010566:	b2d9      	uxtb	r1, r3
 8010568:	2909      	cmp	r1, #9
 801056a:	d928      	bls.n	80105be <_strtod_l+0x1a6>
 801056c:	494f      	ldr	r1, [pc, #316]	@ (80106ac <_strtod_l+0x294>)
 801056e:	2201      	movs	r2, #1
 8010570:	f000 ffd6 	bl	8011520 <strncmp>
 8010574:	2800      	cmp	r0, #0
 8010576:	d032      	beq.n	80105de <_strtod_l+0x1c6>
 8010578:	2000      	movs	r0, #0
 801057a:	462a      	mov	r2, r5
 801057c:	900a      	str	r0, [sp, #40]	@ 0x28
 801057e:	464d      	mov	r5, r9
 8010580:	4603      	mov	r3, r0
 8010582:	2a65      	cmp	r2, #101	@ 0x65
 8010584:	d001      	beq.n	801058a <_strtod_l+0x172>
 8010586:	2a45      	cmp	r2, #69	@ 0x45
 8010588:	d114      	bne.n	80105b4 <_strtod_l+0x19c>
 801058a:	b91d      	cbnz	r5, 8010594 <_strtod_l+0x17c>
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	4302      	orrs	r2, r0
 8010590:	d096      	beq.n	80104c0 <_strtod_l+0xa8>
 8010592:	2500      	movs	r5, #0
 8010594:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010596:	1c62      	adds	r2, r4, #1
 8010598:	9219      	str	r2, [sp, #100]	@ 0x64
 801059a:	7862      	ldrb	r2, [r4, #1]
 801059c:	2a2b      	cmp	r2, #43	@ 0x2b
 801059e:	d07a      	beq.n	8010696 <_strtod_l+0x27e>
 80105a0:	2a2d      	cmp	r2, #45	@ 0x2d
 80105a2:	d07e      	beq.n	80106a2 <_strtod_l+0x28a>
 80105a4:	f04f 0c00 	mov.w	ip, #0
 80105a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80105ac:	2909      	cmp	r1, #9
 80105ae:	f240 8085 	bls.w	80106bc <_strtod_l+0x2a4>
 80105b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80105b4:	f04f 0800 	mov.w	r8, #0
 80105b8:	e0a5      	b.n	8010706 <_strtod_l+0x2ee>
 80105ba:	2300      	movs	r3, #0
 80105bc:	e7c8      	b.n	8010550 <_strtod_l+0x138>
 80105be:	f1b9 0f08 	cmp.w	r9, #8
 80105c2:	bfd8      	it	le
 80105c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80105c6:	f100 0001 	add.w	r0, r0, #1
 80105ca:	bfda      	itte	le
 80105cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80105d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80105d2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80105d6:	f109 0901 	add.w	r9, r9, #1
 80105da:	9019      	str	r0, [sp, #100]	@ 0x64
 80105dc:	e7bf      	b.n	801055e <_strtod_l+0x146>
 80105de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105e0:	1c5a      	adds	r2, r3, #1
 80105e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80105e4:	785a      	ldrb	r2, [r3, #1]
 80105e6:	f1b9 0f00 	cmp.w	r9, #0
 80105ea:	d03b      	beq.n	8010664 <_strtod_l+0x24c>
 80105ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80105ee:	464d      	mov	r5, r9
 80105f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80105f4:	2b09      	cmp	r3, #9
 80105f6:	d912      	bls.n	801061e <_strtod_l+0x206>
 80105f8:	2301      	movs	r3, #1
 80105fa:	e7c2      	b.n	8010582 <_strtod_l+0x16a>
 80105fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	9219      	str	r2, [sp, #100]	@ 0x64
 8010602:	785a      	ldrb	r2, [r3, #1]
 8010604:	3001      	adds	r0, #1
 8010606:	2a30      	cmp	r2, #48	@ 0x30
 8010608:	d0f8      	beq.n	80105fc <_strtod_l+0x1e4>
 801060a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801060e:	2b08      	cmp	r3, #8
 8010610:	f200 84d2 	bhi.w	8010fb8 <_strtod_l+0xba0>
 8010614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010616:	900a      	str	r0, [sp, #40]	@ 0x28
 8010618:	2000      	movs	r0, #0
 801061a:	930c      	str	r3, [sp, #48]	@ 0x30
 801061c:	4605      	mov	r5, r0
 801061e:	3a30      	subs	r2, #48	@ 0x30
 8010620:	f100 0301 	add.w	r3, r0, #1
 8010624:	d018      	beq.n	8010658 <_strtod_l+0x240>
 8010626:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010628:	4419      	add	r1, r3
 801062a:	910a      	str	r1, [sp, #40]	@ 0x28
 801062c:	462e      	mov	r6, r5
 801062e:	f04f 0e0a 	mov.w	lr, #10
 8010632:	1c71      	adds	r1, r6, #1
 8010634:	eba1 0c05 	sub.w	ip, r1, r5
 8010638:	4563      	cmp	r3, ip
 801063a:	dc15      	bgt.n	8010668 <_strtod_l+0x250>
 801063c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010640:	182b      	adds	r3, r5, r0
 8010642:	2b08      	cmp	r3, #8
 8010644:	f105 0501 	add.w	r5, r5, #1
 8010648:	4405      	add	r5, r0
 801064a:	dc1a      	bgt.n	8010682 <_strtod_l+0x26a>
 801064c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801064e:	230a      	movs	r3, #10
 8010650:	fb03 2301 	mla	r3, r3, r1, r2
 8010654:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010656:	2300      	movs	r3, #0
 8010658:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801065a:	1c51      	adds	r1, r2, #1
 801065c:	9119      	str	r1, [sp, #100]	@ 0x64
 801065e:	7852      	ldrb	r2, [r2, #1]
 8010660:	4618      	mov	r0, r3
 8010662:	e7c5      	b.n	80105f0 <_strtod_l+0x1d8>
 8010664:	4648      	mov	r0, r9
 8010666:	e7ce      	b.n	8010606 <_strtod_l+0x1ee>
 8010668:	2e08      	cmp	r6, #8
 801066a:	dc05      	bgt.n	8010678 <_strtod_l+0x260>
 801066c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801066e:	fb0e f606 	mul.w	r6, lr, r6
 8010672:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010674:	460e      	mov	r6, r1
 8010676:	e7dc      	b.n	8010632 <_strtod_l+0x21a>
 8010678:	2910      	cmp	r1, #16
 801067a:	bfd8      	it	le
 801067c:	fb0e f707 	mulle.w	r7, lr, r7
 8010680:	e7f8      	b.n	8010674 <_strtod_l+0x25c>
 8010682:	2b0f      	cmp	r3, #15
 8010684:	bfdc      	itt	le
 8010686:	230a      	movle	r3, #10
 8010688:	fb03 2707 	mlale	r7, r3, r7, r2
 801068c:	e7e3      	b.n	8010656 <_strtod_l+0x23e>
 801068e:	2300      	movs	r3, #0
 8010690:	930a      	str	r3, [sp, #40]	@ 0x28
 8010692:	2301      	movs	r3, #1
 8010694:	e77a      	b.n	801058c <_strtod_l+0x174>
 8010696:	f04f 0c00 	mov.w	ip, #0
 801069a:	1ca2      	adds	r2, r4, #2
 801069c:	9219      	str	r2, [sp, #100]	@ 0x64
 801069e:	78a2      	ldrb	r2, [r4, #2]
 80106a0:	e782      	b.n	80105a8 <_strtod_l+0x190>
 80106a2:	f04f 0c01 	mov.w	ip, #1
 80106a6:	e7f8      	b.n	801069a <_strtod_l+0x282>
 80106a8:	08012b84 	.word	0x08012b84
 80106ac:	080129b7 	.word	0x080129b7
 80106b0:	7ff00000 	.word	0x7ff00000
 80106b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106b6:	1c51      	adds	r1, r2, #1
 80106b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80106ba:	7852      	ldrb	r2, [r2, #1]
 80106bc:	2a30      	cmp	r2, #48	@ 0x30
 80106be:	d0f9      	beq.n	80106b4 <_strtod_l+0x29c>
 80106c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80106c4:	2908      	cmp	r1, #8
 80106c6:	f63f af75 	bhi.w	80105b4 <_strtod_l+0x19c>
 80106ca:	3a30      	subs	r2, #48	@ 0x30
 80106cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80106ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80106d2:	f04f 080a 	mov.w	r8, #10
 80106d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106d8:	1c56      	adds	r6, r2, #1
 80106da:	9619      	str	r6, [sp, #100]	@ 0x64
 80106dc:	7852      	ldrb	r2, [r2, #1]
 80106de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80106e2:	f1be 0f09 	cmp.w	lr, #9
 80106e6:	d939      	bls.n	801075c <_strtod_l+0x344>
 80106e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80106ea:	1a76      	subs	r6, r6, r1
 80106ec:	2e08      	cmp	r6, #8
 80106ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80106f2:	dc03      	bgt.n	80106fc <_strtod_l+0x2e4>
 80106f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106f6:	4588      	cmp	r8, r1
 80106f8:	bfa8      	it	ge
 80106fa:	4688      	movge	r8, r1
 80106fc:	f1bc 0f00 	cmp.w	ip, #0
 8010700:	d001      	beq.n	8010706 <_strtod_l+0x2ee>
 8010702:	f1c8 0800 	rsb	r8, r8, #0
 8010706:	2d00      	cmp	r5, #0
 8010708:	d14e      	bne.n	80107a8 <_strtod_l+0x390>
 801070a:	9908      	ldr	r1, [sp, #32]
 801070c:	4308      	orrs	r0, r1
 801070e:	f47f aebc 	bne.w	801048a <_strtod_l+0x72>
 8010712:	2b00      	cmp	r3, #0
 8010714:	f47f aed4 	bne.w	80104c0 <_strtod_l+0xa8>
 8010718:	2a69      	cmp	r2, #105	@ 0x69
 801071a:	d028      	beq.n	801076e <_strtod_l+0x356>
 801071c:	dc25      	bgt.n	801076a <_strtod_l+0x352>
 801071e:	2a49      	cmp	r2, #73	@ 0x49
 8010720:	d025      	beq.n	801076e <_strtod_l+0x356>
 8010722:	2a4e      	cmp	r2, #78	@ 0x4e
 8010724:	f47f aecc 	bne.w	80104c0 <_strtod_l+0xa8>
 8010728:	499a      	ldr	r1, [pc, #616]	@ (8010994 <_strtod_l+0x57c>)
 801072a:	a819      	add	r0, sp, #100	@ 0x64
 801072c:	f001 f9e0 	bl	8011af0 <__match>
 8010730:	2800      	cmp	r0, #0
 8010732:	f43f aec5 	beq.w	80104c0 <_strtod_l+0xa8>
 8010736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	2b28      	cmp	r3, #40	@ 0x28
 801073c:	d12e      	bne.n	801079c <_strtod_l+0x384>
 801073e:	4996      	ldr	r1, [pc, #600]	@ (8010998 <_strtod_l+0x580>)
 8010740:	aa1c      	add	r2, sp, #112	@ 0x70
 8010742:	a819      	add	r0, sp, #100	@ 0x64
 8010744:	f001 f9e8 	bl	8011b18 <__hexnan>
 8010748:	2805      	cmp	r0, #5
 801074a:	d127      	bne.n	801079c <_strtod_l+0x384>
 801074c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801074e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010752:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010756:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801075a:	e696      	b.n	801048a <_strtod_l+0x72>
 801075c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801075e:	fb08 2101 	mla	r1, r8, r1, r2
 8010762:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010766:	9209      	str	r2, [sp, #36]	@ 0x24
 8010768:	e7b5      	b.n	80106d6 <_strtod_l+0x2be>
 801076a:	2a6e      	cmp	r2, #110	@ 0x6e
 801076c:	e7da      	b.n	8010724 <_strtod_l+0x30c>
 801076e:	498b      	ldr	r1, [pc, #556]	@ (801099c <_strtod_l+0x584>)
 8010770:	a819      	add	r0, sp, #100	@ 0x64
 8010772:	f001 f9bd 	bl	8011af0 <__match>
 8010776:	2800      	cmp	r0, #0
 8010778:	f43f aea2 	beq.w	80104c0 <_strtod_l+0xa8>
 801077c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801077e:	4988      	ldr	r1, [pc, #544]	@ (80109a0 <_strtod_l+0x588>)
 8010780:	3b01      	subs	r3, #1
 8010782:	a819      	add	r0, sp, #100	@ 0x64
 8010784:	9319      	str	r3, [sp, #100]	@ 0x64
 8010786:	f001 f9b3 	bl	8011af0 <__match>
 801078a:	b910      	cbnz	r0, 8010792 <_strtod_l+0x37a>
 801078c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801078e:	3301      	adds	r3, #1
 8010790:	9319      	str	r3, [sp, #100]	@ 0x64
 8010792:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80109b0 <_strtod_l+0x598>
 8010796:	f04f 0a00 	mov.w	sl, #0
 801079a:	e676      	b.n	801048a <_strtod_l+0x72>
 801079c:	4881      	ldr	r0, [pc, #516]	@ (80109a4 <_strtod_l+0x58c>)
 801079e:	f000 fee3 	bl	8011568 <nan>
 80107a2:	ec5b ab10 	vmov	sl, fp, d0
 80107a6:	e670      	b.n	801048a <_strtod_l+0x72>
 80107a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80107ac:	eba8 0303 	sub.w	r3, r8, r3
 80107b0:	f1b9 0f00 	cmp.w	r9, #0
 80107b4:	bf08      	it	eq
 80107b6:	46a9      	moveq	r9, r5
 80107b8:	2d10      	cmp	r5, #16
 80107ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80107bc:	462c      	mov	r4, r5
 80107be:	bfa8      	it	ge
 80107c0:	2410      	movge	r4, #16
 80107c2:	f7ef fe9f 	bl	8000504 <__aeabi_ui2d>
 80107c6:	2d09      	cmp	r5, #9
 80107c8:	4682      	mov	sl, r0
 80107ca:	468b      	mov	fp, r1
 80107cc:	dc13      	bgt.n	80107f6 <_strtod_l+0x3de>
 80107ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f43f ae5a 	beq.w	801048a <_strtod_l+0x72>
 80107d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d8:	dd78      	ble.n	80108cc <_strtod_l+0x4b4>
 80107da:	2b16      	cmp	r3, #22
 80107dc:	dc5f      	bgt.n	801089e <_strtod_l+0x486>
 80107de:	4972      	ldr	r1, [pc, #456]	@ (80109a8 <_strtod_l+0x590>)
 80107e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80107e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107e8:	4652      	mov	r2, sl
 80107ea:	465b      	mov	r3, fp
 80107ec:	f7ef ff04 	bl	80005f8 <__aeabi_dmul>
 80107f0:	4682      	mov	sl, r0
 80107f2:	468b      	mov	fp, r1
 80107f4:	e649      	b.n	801048a <_strtod_l+0x72>
 80107f6:	4b6c      	ldr	r3, [pc, #432]	@ (80109a8 <_strtod_l+0x590>)
 80107f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010800:	f7ef fefa 	bl	80005f8 <__aeabi_dmul>
 8010804:	4682      	mov	sl, r0
 8010806:	4638      	mov	r0, r7
 8010808:	468b      	mov	fp, r1
 801080a:	f7ef fe7b 	bl	8000504 <__aeabi_ui2d>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4650      	mov	r0, sl
 8010814:	4659      	mov	r1, fp
 8010816:	f7ef fd39 	bl	800028c <__adddf3>
 801081a:	2d0f      	cmp	r5, #15
 801081c:	4682      	mov	sl, r0
 801081e:	468b      	mov	fp, r1
 8010820:	ddd5      	ble.n	80107ce <_strtod_l+0x3b6>
 8010822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010824:	1b2c      	subs	r4, r5, r4
 8010826:	441c      	add	r4, r3
 8010828:	2c00      	cmp	r4, #0
 801082a:	f340 8093 	ble.w	8010954 <_strtod_l+0x53c>
 801082e:	f014 030f 	ands.w	r3, r4, #15
 8010832:	d00a      	beq.n	801084a <_strtod_l+0x432>
 8010834:	495c      	ldr	r1, [pc, #368]	@ (80109a8 <_strtod_l+0x590>)
 8010836:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801083a:	4652      	mov	r2, sl
 801083c:	465b      	mov	r3, fp
 801083e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010842:	f7ef fed9 	bl	80005f8 <__aeabi_dmul>
 8010846:	4682      	mov	sl, r0
 8010848:	468b      	mov	fp, r1
 801084a:	f034 040f 	bics.w	r4, r4, #15
 801084e:	d073      	beq.n	8010938 <_strtod_l+0x520>
 8010850:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010854:	dd49      	ble.n	80108ea <_strtod_l+0x4d2>
 8010856:	2400      	movs	r4, #0
 8010858:	46a0      	mov	r8, r4
 801085a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801085c:	46a1      	mov	r9, r4
 801085e:	9a05      	ldr	r2, [sp, #20]
 8010860:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80109b0 <_strtod_l+0x598>
 8010864:	2322      	movs	r3, #34	@ 0x22
 8010866:	6013      	str	r3, [r2, #0]
 8010868:	f04f 0a00 	mov.w	sl, #0
 801086c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801086e:	2b00      	cmp	r3, #0
 8010870:	f43f ae0b 	beq.w	801048a <_strtod_l+0x72>
 8010874:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010876:	9805      	ldr	r0, [sp, #20]
 8010878:	f7ff f946 	bl	800fb08 <_Bfree>
 801087c:	9805      	ldr	r0, [sp, #20]
 801087e:	4649      	mov	r1, r9
 8010880:	f7ff f942 	bl	800fb08 <_Bfree>
 8010884:	9805      	ldr	r0, [sp, #20]
 8010886:	4641      	mov	r1, r8
 8010888:	f7ff f93e 	bl	800fb08 <_Bfree>
 801088c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801088e:	9805      	ldr	r0, [sp, #20]
 8010890:	f7ff f93a 	bl	800fb08 <_Bfree>
 8010894:	9805      	ldr	r0, [sp, #20]
 8010896:	4621      	mov	r1, r4
 8010898:	f7ff f936 	bl	800fb08 <_Bfree>
 801089c:	e5f5      	b.n	801048a <_strtod_l+0x72>
 801089e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80108a4:	4293      	cmp	r3, r2
 80108a6:	dbbc      	blt.n	8010822 <_strtod_l+0x40a>
 80108a8:	4c3f      	ldr	r4, [pc, #252]	@ (80109a8 <_strtod_l+0x590>)
 80108aa:	f1c5 050f 	rsb	r5, r5, #15
 80108ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80108b2:	4652      	mov	r2, sl
 80108b4:	465b      	mov	r3, fp
 80108b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ba:	f7ef fe9d 	bl	80005f8 <__aeabi_dmul>
 80108be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108c0:	1b5d      	subs	r5, r3, r5
 80108c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80108c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80108ca:	e78f      	b.n	80107ec <_strtod_l+0x3d4>
 80108cc:	3316      	adds	r3, #22
 80108ce:	dba8      	blt.n	8010822 <_strtod_l+0x40a>
 80108d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108d2:	eba3 0808 	sub.w	r8, r3, r8
 80108d6:	4b34      	ldr	r3, [pc, #208]	@ (80109a8 <_strtod_l+0x590>)
 80108d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80108dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80108e0:	4650      	mov	r0, sl
 80108e2:	4659      	mov	r1, fp
 80108e4:	f7ef ffb2 	bl	800084c <__aeabi_ddiv>
 80108e8:	e782      	b.n	80107f0 <_strtod_l+0x3d8>
 80108ea:	2300      	movs	r3, #0
 80108ec:	4f2f      	ldr	r7, [pc, #188]	@ (80109ac <_strtod_l+0x594>)
 80108ee:	1124      	asrs	r4, r4, #4
 80108f0:	4650      	mov	r0, sl
 80108f2:	4659      	mov	r1, fp
 80108f4:	461e      	mov	r6, r3
 80108f6:	2c01      	cmp	r4, #1
 80108f8:	dc21      	bgt.n	801093e <_strtod_l+0x526>
 80108fa:	b10b      	cbz	r3, 8010900 <_strtod_l+0x4e8>
 80108fc:	4682      	mov	sl, r0
 80108fe:	468b      	mov	fp, r1
 8010900:	492a      	ldr	r1, [pc, #168]	@ (80109ac <_strtod_l+0x594>)
 8010902:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010906:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801090a:	4652      	mov	r2, sl
 801090c:	465b      	mov	r3, fp
 801090e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010912:	f7ef fe71 	bl	80005f8 <__aeabi_dmul>
 8010916:	4b26      	ldr	r3, [pc, #152]	@ (80109b0 <_strtod_l+0x598>)
 8010918:	460a      	mov	r2, r1
 801091a:	400b      	ands	r3, r1
 801091c:	4925      	ldr	r1, [pc, #148]	@ (80109b4 <_strtod_l+0x59c>)
 801091e:	428b      	cmp	r3, r1
 8010920:	4682      	mov	sl, r0
 8010922:	d898      	bhi.n	8010856 <_strtod_l+0x43e>
 8010924:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010928:	428b      	cmp	r3, r1
 801092a:	bf86      	itte	hi
 801092c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80109b8 <_strtod_l+0x5a0>
 8010930:	f04f 3aff 	movhi.w	sl, #4294967295
 8010934:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010938:	2300      	movs	r3, #0
 801093a:	9308      	str	r3, [sp, #32]
 801093c:	e076      	b.n	8010a2c <_strtod_l+0x614>
 801093e:	07e2      	lsls	r2, r4, #31
 8010940:	d504      	bpl.n	801094c <_strtod_l+0x534>
 8010942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010946:	f7ef fe57 	bl	80005f8 <__aeabi_dmul>
 801094a:	2301      	movs	r3, #1
 801094c:	3601      	adds	r6, #1
 801094e:	1064      	asrs	r4, r4, #1
 8010950:	3708      	adds	r7, #8
 8010952:	e7d0      	b.n	80108f6 <_strtod_l+0x4de>
 8010954:	d0f0      	beq.n	8010938 <_strtod_l+0x520>
 8010956:	4264      	negs	r4, r4
 8010958:	f014 020f 	ands.w	r2, r4, #15
 801095c:	d00a      	beq.n	8010974 <_strtod_l+0x55c>
 801095e:	4b12      	ldr	r3, [pc, #72]	@ (80109a8 <_strtod_l+0x590>)
 8010960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010964:	4650      	mov	r0, sl
 8010966:	4659      	mov	r1, fp
 8010968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096c:	f7ef ff6e 	bl	800084c <__aeabi_ddiv>
 8010970:	4682      	mov	sl, r0
 8010972:	468b      	mov	fp, r1
 8010974:	1124      	asrs	r4, r4, #4
 8010976:	d0df      	beq.n	8010938 <_strtod_l+0x520>
 8010978:	2c1f      	cmp	r4, #31
 801097a:	dd1f      	ble.n	80109bc <_strtod_l+0x5a4>
 801097c:	2400      	movs	r4, #0
 801097e:	46a0      	mov	r8, r4
 8010980:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010982:	46a1      	mov	r9, r4
 8010984:	9a05      	ldr	r2, [sp, #20]
 8010986:	2322      	movs	r3, #34	@ 0x22
 8010988:	f04f 0a00 	mov.w	sl, #0
 801098c:	f04f 0b00 	mov.w	fp, #0
 8010990:	6013      	str	r3, [r2, #0]
 8010992:	e76b      	b.n	801086c <_strtod_l+0x454>
 8010994:	080128a5 	.word	0x080128a5
 8010998:	08012b70 	.word	0x08012b70
 801099c:	0801289d 	.word	0x0801289d
 80109a0:	080128d4 	.word	0x080128d4
 80109a4:	08012a0d 	.word	0x08012a0d
 80109a8:	08012aa8 	.word	0x08012aa8
 80109ac:	08012a80 	.word	0x08012a80
 80109b0:	7ff00000 	.word	0x7ff00000
 80109b4:	7ca00000 	.word	0x7ca00000
 80109b8:	7fefffff 	.word	0x7fefffff
 80109bc:	f014 0310 	ands.w	r3, r4, #16
 80109c0:	bf18      	it	ne
 80109c2:	236a      	movne	r3, #106	@ 0x6a
 80109c4:	4ea9      	ldr	r6, [pc, #676]	@ (8010c6c <_strtod_l+0x854>)
 80109c6:	9308      	str	r3, [sp, #32]
 80109c8:	4650      	mov	r0, sl
 80109ca:	4659      	mov	r1, fp
 80109cc:	2300      	movs	r3, #0
 80109ce:	07e7      	lsls	r7, r4, #31
 80109d0:	d504      	bpl.n	80109dc <_strtod_l+0x5c4>
 80109d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109d6:	f7ef fe0f 	bl	80005f8 <__aeabi_dmul>
 80109da:	2301      	movs	r3, #1
 80109dc:	1064      	asrs	r4, r4, #1
 80109de:	f106 0608 	add.w	r6, r6, #8
 80109e2:	d1f4      	bne.n	80109ce <_strtod_l+0x5b6>
 80109e4:	b10b      	cbz	r3, 80109ea <_strtod_l+0x5d2>
 80109e6:	4682      	mov	sl, r0
 80109e8:	468b      	mov	fp, r1
 80109ea:	9b08      	ldr	r3, [sp, #32]
 80109ec:	b1b3      	cbz	r3, 8010a1c <_strtod_l+0x604>
 80109ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80109f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	4659      	mov	r1, fp
 80109fa:	dd0f      	ble.n	8010a1c <_strtod_l+0x604>
 80109fc:	2b1f      	cmp	r3, #31
 80109fe:	dd56      	ble.n	8010aae <_strtod_l+0x696>
 8010a00:	2b34      	cmp	r3, #52	@ 0x34
 8010a02:	bfde      	ittt	le
 8010a04:	f04f 33ff 	movle.w	r3, #4294967295
 8010a08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010a0c:	4093      	lslle	r3, r2
 8010a0e:	f04f 0a00 	mov.w	sl, #0
 8010a12:	bfcc      	ite	gt
 8010a14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a18:	ea03 0b01 	andle.w	fp, r3, r1
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	2300      	movs	r3, #0
 8010a20:	4650      	mov	r0, sl
 8010a22:	4659      	mov	r1, fp
 8010a24:	f7f0 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d1a7      	bne.n	801097c <_strtod_l+0x564>
 8010a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a32:	9805      	ldr	r0, [sp, #20]
 8010a34:	462b      	mov	r3, r5
 8010a36:	464a      	mov	r2, r9
 8010a38:	f7ff f8ce 	bl	800fbd8 <__s2b>
 8010a3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	f43f af09 	beq.w	8010856 <_strtod_l+0x43e>
 8010a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a48:	2a00      	cmp	r2, #0
 8010a4a:	eba3 0308 	sub.w	r3, r3, r8
 8010a4e:	bfa8      	it	ge
 8010a50:	2300      	movge	r3, #0
 8010a52:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a54:	2400      	movs	r4, #0
 8010a56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010a5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8010a5c:	46a0      	mov	r8, r4
 8010a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a60:	9805      	ldr	r0, [sp, #20]
 8010a62:	6859      	ldr	r1, [r3, #4]
 8010a64:	f7ff f810 	bl	800fa88 <_Balloc>
 8010a68:	4681      	mov	r9, r0
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	f43f aef7 	beq.w	801085e <_strtod_l+0x446>
 8010a70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a72:	691a      	ldr	r2, [r3, #16]
 8010a74:	3202      	adds	r2, #2
 8010a76:	f103 010c 	add.w	r1, r3, #12
 8010a7a:	0092      	lsls	r2, r2, #2
 8010a7c:	300c      	adds	r0, #12
 8010a7e:	f7fe f896 	bl	800ebae <memcpy>
 8010a82:	ec4b ab10 	vmov	d0, sl, fp
 8010a86:	9805      	ldr	r0, [sp, #20]
 8010a88:	aa1c      	add	r2, sp, #112	@ 0x70
 8010a8a:	a91b      	add	r1, sp, #108	@ 0x6c
 8010a8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010a90:	f7ff fbd6 	bl	8010240 <__d2b>
 8010a94:	901a      	str	r0, [sp, #104]	@ 0x68
 8010a96:	2800      	cmp	r0, #0
 8010a98:	f43f aee1 	beq.w	801085e <_strtod_l+0x446>
 8010a9c:	9805      	ldr	r0, [sp, #20]
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	f7ff f930 	bl	800fd04 <__i2b>
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	b948      	cbnz	r0, 8010abc <_strtod_l+0x6a4>
 8010aa8:	f04f 0800 	mov.w	r8, #0
 8010aac:	e6d7      	b.n	801085e <_strtod_l+0x446>
 8010aae:	f04f 32ff 	mov.w	r2, #4294967295
 8010ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ab6:	ea03 0a0a 	and.w	sl, r3, sl
 8010aba:	e7af      	b.n	8010a1c <_strtod_l+0x604>
 8010abc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010abe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010ac0:	2d00      	cmp	r5, #0
 8010ac2:	bfab      	itete	ge
 8010ac4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010ac6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010ac8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010aca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010acc:	bfac      	ite	ge
 8010ace:	18ef      	addge	r7, r5, r3
 8010ad0:	1b5e      	sublt	r6, r3, r5
 8010ad2:	9b08      	ldr	r3, [sp, #32]
 8010ad4:	1aed      	subs	r5, r5, r3
 8010ad6:	4415      	add	r5, r2
 8010ad8:	4b65      	ldr	r3, [pc, #404]	@ (8010c70 <_strtod_l+0x858>)
 8010ada:	3d01      	subs	r5, #1
 8010adc:	429d      	cmp	r5, r3
 8010ade:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010ae2:	da50      	bge.n	8010b86 <_strtod_l+0x76e>
 8010ae4:	1b5b      	subs	r3, r3, r5
 8010ae6:	2b1f      	cmp	r3, #31
 8010ae8:	eba2 0203 	sub.w	r2, r2, r3
 8010aec:	f04f 0101 	mov.w	r1, #1
 8010af0:	dc3d      	bgt.n	8010b6e <_strtod_l+0x756>
 8010af2:	fa01 f303 	lsl.w	r3, r1, r3
 8010af6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010af8:	2300      	movs	r3, #0
 8010afa:	9310      	str	r3, [sp, #64]	@ 0x40
 8010afc:	18bd      	adds	r5, r7, r2
 8010afe:	9b08      	ldr	r3, [sp, #32]
 8010b00:	42af      	cmp	r7, r5
 8010b02:	4416      	add	r6, r2
 8010b04:	441e      	add	r6, r3
 8010b06:	463b      	mov	r3, r7
 8010b08:	bfa8      	it	ge
 8010b0a:	462b      	movge	r3, r5
 8010b0c:	42b3      	cmp	r3, r6
 8010b0e:	bfa8      	it	ge
 8010b10:	4633      	movge	r3, r6
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bfc2      	ittt	gt
 8010b16:	1aed      	subgt	r5, r5, r3
 8010b18:	1af6      	subgt	r6, r6, r3
 8010b1a:	1aff      	subgt	r7, r7, r3
 8010b1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	dd16      	ble.n	8010b50 <_strtod_l+0x738>
 8010b22:	4641      	mov	r1, r8
 8010b24:	9805      	ldr	r0, [sp, #20]
 8010b26:	461a      	mov	r2, r3
 8010b28:	f7ff f9a4 	bl	800fe74 <__pow5mult>
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d0ba      	beq.n	8010aa8 <_strtod_l+0x690>
 8010b32:	4601      	mov	r1, r0
 8010b34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b36:	9805      	ldr	r0, [sp, #20]
 8010b38:	f7ff f8fa 	bl	800fd30 <__multiply>
 8010b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f43f ae8d 	beq.w	801085e <_strtod_l+0x446>
 8010b44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b46:	9805      	ldr	r0, [sp, #20]
 8010b48:	f7fe ffde 	bl	800fb08 <_Bfree>
 8010b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	dc1d      	bgt.n	8010b90 <_strtod_l+0x778>
 8010b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	dd23      	ble.n	8010ba2 <_strtod_l+0x78a>
 8010b5a:	4649      	mov	r1, r9
 8010b5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010b5e:	9805      	ldr	r0, [sp, #20]
 8010b60:	f7ff f988 	bl	800fe74 <__pow5mult>
 8010b64:	4681      	mov	r9, r0
 8010b66:	b9e0      	cbnz	r0, 8010ba2 <_strtod_l+0x78a>
 8010b68:	f04f 0900 	mov.w	r9, #0
 8010b6c:	e677      	b.n	801085e <_strtod_l+0x446>
 8010b6e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010b72:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010b76:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010b7a:	35e2      	adds	r5, #226	@ 0xe2
 8010b7c:	fa01 f305 	lsl.w	r3, r1, r5
 8010b80:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b82:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010b84:	e7ba      	b.n	8010afc <_strtod_l+0x6e4>
 8010b86:	2300      	movs	r3, #0
 8010b88:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b8e:	e7b5      	b.n	8010afc <_strtod_l+0x6e4>
 8010b90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b92:	9805      	ldr	r0, [sp, #20]
 8010b94:	462a      	mov	r2, r5
 8010b96:	f7ff f9c7 	bl	800ff28 <__lshift>
 8010b9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d1d9      	bne.n	8010b54 <_strtod_l+0x73c>
 8010ba0:	e65d      	b.n	801085e <_strtod_l+0x446>
 8010ba2:	2e00      	cmp	r6, #0
 8010ba4:	dd07      	ble.n	8010bb6 <_strtod_l+0x79e>
 8010ba6:	4649      	mov	r1, r9
 8010ba8:	9805      	ldr	r0, [sp, #20]
 8010baa:	4632      	mov	r2, r6
 8010bac:	f7ff f9bc 	bl	800ff28 <__lshift>
 8010bb0:	4681      	mov	r9, r0
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	d0d8      	beq.n	8010b68 <_strtod_l+0x750>
 8010bb6:	2f00      	cmp	r7, #0
 8010bb8:	dd08      	ble.n	8010bcc <_strtod_l+0x7b4>
 8010bba:	4641      	mov	r1, r8
 8010bbc:	9805      	ldr	r0, [sp, #20]
 8010bbe:	463a      	mov	r2, r7
 8010bc0:	f7ff f9b2 	bl	800ff28 <__lshift>
 8010bc4:	4680      	mov	r8, r0
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	f43f ae49 	beq.w	801085e <_strtod_l+0x446>
 8010bcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bce:	9805      	ldr	r0, [sp, #20]
 8010bd0:	464a      	mov	r2, r9
 8010bd2:	f7ff fa31 	bl	8010038 <__mdiff>
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	f43f ae40 	beq.w	801085e <_strtod_l+0x446>
 8010bde:	68c3      	ldr	r3, [r0, #12]
 8010be0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010be2:	2300      	movs	r3, #0
 8010be4:	60c3      	str	r3, [r0, #12]
 8010be6:	4641      	mov	r1, r8
 8010be8:	f7ff fa0a 	bl	8010000 <__mcmp>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	da45      	bge.n	8010c7c <_strtod_l+0x864>
 8010bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bf2:	ea53 030a 	orrs.w	r3, r3, sl
 8010bf6:	d16b      	bne.n	8010cd0 <_strtod_l+0x8b8>
 8010bf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d167      	bne.n	8010cd0 <_strtod_l+0x8b8>
 8010c00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c04:	0d1b      	lsrs	r3, r3, #20
 8010c06:	051b      	lsls	r3, r3, #20
 8010c08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c0c:	d960      	bls.n	8010cd0 <_strtod_l+0x8b8>
 8010c0e:	6963      	ldr	r3, [r4, #20]
 8010c10:	b913      	cbnz	r3, 8010c18 <_strtod_l+0x800>
 8010c12:	6923      	ldr	r3, [r4, #16]
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	dd5b      	ble.n	8010cd0 <_strtod_l+0x8b8>
 8010c18:	4621      	mov	r1, r4
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	9805      	ldr	r0, [sp, #20]
 8010c1e:	f7ff f983 	bl	800ff28 <__lshift>
 8010c22:	4641      	mov	r1, r8
 8010c24:	4604      	mov	r4, r0
 8010c26:	f7ff f9eb 	bl	8010000 <__mcmp>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	dd50      	ble.n	8010cd0 <_strtod_l+0x8b8>
 8010c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c32:	9a08      	ldr	r2, [sp, #32]
 8010c34:	0d1b      	lsrs	r3, r3, #20
 8010c36:	051b      	lsls	r3, r3, #20
 8010c38:	2a00      	cmp	r2, #0
 8010c3a:	d06a      	beq.n	8010d12 <_strtod_l+0x8fa>
 8010c3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c40:	d867      	bhi.n	8010d12 <_strtod_l+0x8fa>
 8010c42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c46:	f67f ae9d 	bls.w	8010984 <_strtod_l+0x56c>
 8010c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c74 <_strtod_l+0x85c>)
 8010c4c:	4650      	mov	r0, sl
 8010c4e:	4659      	mov	r1, fp
 8010c50:	2200      	movs	r2, #0
 8010c52:	f7ef fcd1 	bl	80005f8 <__aeabi_dmul>
 8010c56:	4b08      	ldr	r3, [pc, #32]	@ (8010c78 <_strtod_l+0x860>)
 8010c58:	400b      	ands	r3, r1
 8010c5a:	4682      	mov	sl, r0
 8010c5c:	468b      	mov	fp, r1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f47f ae08 	bne.w	8010874 <_strtod_l+0x45c>
 8010c64:	9a05      	ldr	r2, [sp, #20]
 8010c66:	2322      	movs	r3, #34	@ 0x22
 8010c68:	6013      	str	r3, [r2, #0]
 8010c6a:	e603      	b.n	8010874 <_strtod_l+0x45c>
 8010c6c:	08012b98 	.word	0x08012b98
 8010c70:	fffffc02 	.word	0xfffffc02
 8010c74:	39500000 	.word	0x39500000
 8010c78:	7ff00000 	.word	0x7ff00000
 8010c7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010c80:	d165      	bne.n	8010d4e <_strtod_l+0x936>
 8010c82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010c84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c88:	b35a      	cbz	r2, 8010ce2 <_strtod_l+0x8ca>
 8010c8a:	4a9f      	ldr	r2, [pc, #636]	@ (8010f08 <_strtod_l+0xaf0>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d12b      	bne.n	8010ce8 <_strtod_l+0x8d0>
 8010c90:	9b08      	ldr	r3, [sp, #32]
 8010c92:	4651      	mov	r1, sl
 8010c94:	b303      	cbz	r3, 8010cd8 <_strtod_l+0x8c0>
 8010c96:	4b9d      	ldr	r3, [pc, #628]	@ (8010f0c <_strtod_l+0xaf4>)
 8010c98:	465a      	mov	r2, fp
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca4:	d81b      	bhi.n	8010cde <_strtod_l+0x8c6>
 8010ca6:	0d1b      	lsrs	r3, r3, #20
 8010ca8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010cac:	fa02 f303 	lsl.w	r3, r2, r3
 8010cb0:	4299      	cmp	r1, r3
 8010cb2:	d119      	bne.n	8010ce8 <_strtod_l+0x8d0>
 8010cb4:	4b96      	ldr	r3, [pc, #600]	@ (8010f10 <_strtod_l+0xaf8>)
 8010cb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d102      	bne.n	8010cc2 <_strtod_l+0x8aa>
 8010cbc:	3101      	adds	r1, #1
 8010cbe:	f43f adce 	beq.w	801085e <_strtod_l+0x446>
 8010cc2:	4b92      	ldr	r3, [pc, #584]	@ (8010f0c <_strtod_l+0xaf4>)
 8010cc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cc6:	401a      	ands	r2, r3
 8010cc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010ccc:	f04f 0a00 	mov.w	sl, #0
 8010cd0:	9b08      	ldr	r3, [sp, #32]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1b9      	bne.n	8010c4a <_strtod_l+0x832>
 8010cd6:	e5cd      	b.n	8010874 <_strtod_l+0x45c>
 8010cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cdc:	e7e8      	b.n	8010cb0 <_strtod_l+0x898>
 8010cde:	4613      	mov	r3, r2
 8010ce0:	e7e6      	b.n	8010cb0 <_strtod_l+0x898>
 8010ce2:	ea53 030a 	orrs.w	r3, r3, sl
 8010ce6:	d0a2      	beq.n	8010c2e <_strtod_l+0x816>
 8010ce8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cea:	b1db      	cbz	r3, 8010d24 <_strtod_l+0x90c>
 8010cec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cee:	4213      	tst	r3, r2
 8010cf0:	d0ee      	beq.n	8010cd0 <_strtod_l+0x8b8>
 8010cf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cf4:	9a08      	ldr	r2, [sp, #32]
 8010cf6:	4650      	mov	r0, sl
 8010cf8:	4659      	mov	r1, fp
 8010cfa:	b1bb      	cbz	r3, 8010d2c <_strtod_l+0x914>
 8010cfc:	f7ff fb6e 	bl	80103dc <sulp>
 8010d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d04:	ec53 2b10 	vmov	r2, r3, d0
 8010d08:	f7ef fac0 	bl	800028c <__adddf3>
 8010d0c:	4682      	mov	sl, r0
 8010d0e:	468b      	mov	fp, r1
 8010d10:	e7de      	b.n	8010cd0 <_strtod_l+0x8b8>
 8010d12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d1e:	f04f 3aff 	mov.w	sl, #4294967295
 8010d22:	e7d5      	b.n	8010cd0 <_strtod_l+0x8b8>
 8010d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d26:	ea13 0f0a 	tst.w	r3, sl
 8010d2a:	e7e1      	b.n	8010cf0 <_strtod_l+0x8d8>
 8010d2c:	f7ff fb56 	bl	80103dc <sulp>
 8010d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d34:	ec53 2b10 	vmov	r2, r3, d0
 8010d38:	f7ef faa6 	bl	8000288 <__aeabi_dsub>
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	2300      	movs	r3, #0
 8010d40:	4682      	mov	sl, r0
 8010d42:	468b      	mov	fp, r1
 8010d44:	f7ef fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d0c1      	beq.n	8010cd0 <_strtod_l+0x8b8>
 8010d4c:	e61a      	b.n	8010984 <_strtod_l+0x56c>
 8010d4e:	4641      	mov	r1, r8
 8010d50:	4620      	mov	r0, r4
 8010d52:	f7ff facd 	bl	80102f0 <__ratio>
 8010d56:	ec57 6b10 	vmov	r6, r7, d0
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010d60:	4630      	mov	r0, r6
 8010d62:	4639      	mov	r1, r7
 8010d64:	f7ef fec4 	bl	8000af0 <__aeabi_dcmple>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d06f      	beq.n	8010e4c <_strtod_l+0xa34>
 8010d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d17a      	bne.n	8010e68 <_strtod_l+0xa50>
 8010d72:	f1ba 0f00 	cmp.w	sl, #0
 8010d76:	d158      	bne.n	8010e2a <_strtod_l+0xa12>
 8010d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d15a      	bne.n	8010e38 <_strtod_l+0xa20>
 8010d82:	4b64      	ldr	r3, [pc, #400]	@ (8010f14 <_strtod_l+0xafc>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	4630      	mov	r0, r6
 8010d88:	4639      	mov	r1, r7
 8010d8a:	f7ef fea7 	bl	8000adc <__aeabi_dcmplt>
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d159      	bne.n	8010e46 <_strtod_l+0xa2e>
 8010d92:	4630      	mov	r0, r6
 8010d94:	4639      	mov	r1, r7
 8010d96:	4b60      	ldr	r3, [pc, #384]	@ (8010f18 <_strtod_l+0xb00>)
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f7ef fc2d 	bl	80005f8 <__aeabi_dmul>
 8010d9e:	4606      	mov	r6, r0
 8010da0:	460f      	mov	r7, r1
 8010da2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010da6:	9606      	str	r6, [sp, #24]
 8010da8:	9307      	str	r3, [sp, #28]
 8010daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dae:	4d57      	ldr	r5, [pc, #348]	@ (8010f0c <_strtod_l+0xaf4>)
 8010db0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010db6:	401d      	ands	r5, r3
 8010db8:	4b58      	ldr	r3, [pc, #352]	@ (8010f1c <_strtod_l+0xb04>)
 8010dba:	429d      	cmp	r5, r3
 8010dbc:	f040 80b2 	bne.w	8010f24 <_strtod_l+0xb0c>
 8010dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010dc6:	ec4b ab10 	vmov	d0, sl, fp
 8010dca:	f7ff f9c9 	bl	8010160 <__ulp>
 8010dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dd2:	ec51 0b10 	vmov	r0, r1, d0
 8010dd6:	f7ef fc0f 	bl	80005f8 <__aeabi_dmul>
 8010dda:	4652      	mov	r2, sl
 8010ddc:	465b      	mov	r3, fp
 8010dde:	f7ef fa55 	bl	800028c <__adddf3>
 8010de2:	460b      	mov	r3, r1
 8010de4:	4949      	ldr	r1, [pc, #292]	@ (8010f0c <_strtod_l+0xaf4>)
 8010de6:	4a4e      	ldr	r2, [pc, #312]	@ (8010f20 <_strtod_l+0xb08>)
 8010de8:	4019      	ands	r1, r3
 8010dea:	4291      	cmp	r1, r2
 8010dec:	4682      	mov	sl, r0
 8010dee:	d942      	bls.n	8010e76 <_strtod_l+0xa5e>
 8010df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010df2:	4b47      	ldr	r3, [pc, #284]	@ (8010f10 <_strtod_l+0xaf8>)
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d103      	bne.n	8010e00 <_strtod_l+0x9e8>
 8010df8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	f43f ad2f 	beq.w	801085e <_strtod_l+0x446>
 8010e00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010f10 <_strtod_l+0xaf8>
 8010e04:	f04f 3aff 	mov.w	sl, #4294967295
 8010e08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010e0a:	9805      	ldr	r0, [sp, #20]
 8010e0c:	f7fe fe7c 	bl	800fb08 <_Bfree>
 8010e10:	9805      	ldr	r0, [sp, #20]
 8010e12:	4649      	mov	r1, r9
 8010e14:	f7fe fe78 	bl	800fb08 <_Bfree>
 8010e18:	9805      	ldr	r0, [sp, #20]
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	f7fe fe74 	bl	800fb08 <_Bfree>
 8010e20:	9805      	ldr	r0, [sp, #20]
 8010e22:	4621      	mov	r1, r4
 8010e24:	f7fe fe70 	bl	800fb08 <_Bfree>
 8010e28:	e619      	b.n	8010a5e <_strtod_l+0x646>
 8010e2a:	f1ba 0f01 	cmp.w	sl, #1
 8010e2e:	d103      	bne.n	8010e38 <_strtod_l+0xa20>
 8010e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f43f ada6 	beq.w	8010984 <_strtod_l+0x56c>
 8010e38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010ee8 <_strtod_l+0xad0>
 8010e3c:	4f35      	ldr	r7, [pc, #212]	@ (8010f14 <_strtod_l+0xafc>)
 8010e3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e42:	2600      	movs	r6, #0
 8010e44:	e7b1      	b.n	8010daa <_strtod_l+0x992>
 8010e46:	4f34      	ldr	r7, [pc, #208]	@ (8010f18 <_strtod_l+0xb00>)
 8010e48:	2600      	movs	r6, #0
 8010e4a:	e7aa      	b.n	8010da2 <_strtod_l+0x98a>
 8010e4c:	4b32      	ldr	r3, [pc, #200]	@ (8010f18 <_strtod_l+0xb00>)
 8010e4e:	4630      	mov	r0, r6
 8010e50:	4639      	mov	r1, r7
 8010e52:	2200      	movs	r2, #0
 8010e54:	f7ef fbd0 	bl	80005f8 <__aeabi_dmul>
 8010e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e5a:	4606      	mov	r6, r0
 8010e5c:	460f      	mov	r7, r1
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d09f      	beq.n	8010da2 <_strtod_l+0x98a>
 8010e62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010e66:	e7a0      	b.n	8010daa <_strtod_l+0x992>
 8010e68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010ef0 <_strtod_l+0xad8>
 8010e6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e70:	ec57 6b17 	vmov	r6, r7, d7
 8010e74:	e799      	b.n	8010daa <_strtod_l+0x992>
 8010e76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1c1      	bne.n	8010e08 <_strtod_l+0x9f0>
 8010e84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010e88:	0d1b      	lsrs	r3, r3, #20
 8010e8a:	051b      	lsls	r3, r3, #20
 8010e8c:	429d      	cmp	r5, r3
 8010e8e:	d1bb      	bne.n	8010e08 <_strtod_l+0x9f0>
 8010e90:	4630      	mov	r0, r6
 8010e92:	4639      	mov	r1, r7
 8010e94:	f7ef ff10 	bl	8000cb8 <__aeabi_d2lz>
 8010e98:	f7ef fb80 	bl	800059c <__aeabi_l2d>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	f7ef f9f0 	bl	8000288 <__aeabi_dsub>
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4602      	mov	r2, r0
 8010eac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010eb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eb6:	ea46 060a 	orr.w	r6, r6, sl
 8010eba:	431e      	orrs	r6, r3
 8010ebc:	d06f      	beq.n	8010f9e <_strtod_l+0xb86>
 8010ebe:	a30e      	add	r3, pc, #56	@ (adr r3, 8010ef8 <_strtod_l+0xae0>)
 8010ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec4:	f7ef fe0a 	bl	8000adc <__aeabi_dcmplt>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	f47f acd3 	bne.w	8010874 <_strtod_l+0x45c>
 8010ece:	a30c      	add	r3, pc, #48	@ (adr r3, 8010f00 <_strtod_l+0xae8>)
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ed8:	f7ef fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d093      	beq.n	8010e08 <_strtod_l+0x9f0>
 8010ee0:	e4c8      	b.n	8010874 <_strtod_l+0x45c>
 8010ee2:	bf00      	nop
 8010ee4:	f3af 8000 	nop.w
 8010ee8:	00000000 	.word	0x00000000
 8010eec:	bff00000 	.word	0xbff00000
 8010ef0:	00000000 	.word	0x00000000
 8010ef4:	3ff00000 	.word	0x3ff00000
 8010ef8:	94a03595 	.word	0x94a03595
 8010efc:	3fdfffff 	.word	0x3fdfffff
 8010f00:	35afe535 	.word	0x35afe535
 8010f04:	3fe00000 	.word	0x3fe00000
 8010f08:	000fffff 	.word	0x000fffff
 8010f0c:	7ff00000 	.word	0x7ff00000
 8010f10:	7fefffff 	.word	0x7fefffff
 8010f14:	3ff00000 	.word	0x3ff00000
 8010f18:	3fe00000 	.word	0x3fe00000
 8010f1c:	7fe00000 	.word	0x7fe00000
 8010f20:	7c9fffff 	.word	0x7c9fffff
 8010f24:	9b08      	ldr	r3, [sp, #32]
 8010f26:	b323      	cbz	r3, 8010f72 <_strtod_l+0xb5a>
 8010f28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010f2c:	d821      	bhi.n	8010f72 <_strtod_l+0xb5a>
 8010f2e:	a328      	add	r3, pc, #160	@ (adr r3, 8010fd0 <_strtod_l+0xbb8>)
 8010f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	f7ef fdda 	bl	8000af0 <__aeabi_dcmple>
 8010f3c:	b1a0      	cbz	r0, 8010f68 <_strtod_l+0xb50>
 8010f3e:	4639      	mov	r1, r7
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7ef fe31 	bl	8000ba8 <__aeabi_d2uiz>
 8010f46:	2801      	cmp	r0, #1
 8010f48:	bf38      	it	cc
 8010f4a:	2001      	movcc	r0, #1
 8010f4c:	f7ef fada 	bl	8000504 <__aeabi_ui2d>
 8010f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f52:	4606      	mov	r6, r0
 8010f54:	460f      	mov	r7, r1
 8010f56:	b9fb      	cbnz	r3, 8010f98 <_strtod_l+0xb80>
 8010f58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8010f5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010f60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010f64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010f68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010f6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010f6e:	1b5b      	subs	r3, r3, r5
 8010f70:	9311      	str	r3, [sp, #68]	@ 0x44
 8010f72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010f7a:	f7ff f8f1 	bl	8010160 <__ulp>
 8010f7e:	4650      	mov	r0, sl
 8010f80:	ec53 2b10 	vmov	r2, r3, d0
 8010f84:	4659      	mov	r1, fp
 8010f86:	f7ef fb37 	bl	80005f8 <__aeabi_dmul>
 8010f8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010f8e:	f7ef f97d 	bl	800028c <__adddf3>
 8010f92:	4682      	mov	sl, r0
 8010f94:	468b      	mov	fp, r1
 8010f96:	e770      	b.n	8010e7a <_strtod_l+0xa62>
 8010f98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010f9c:	e7e0      	b.n	8010f60 <_strtod_l+0xb48>
 8010f9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010fd8 <_strtod_l+0xbc0>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	f7ef fd9a 	bl	8000adc <__aeabi_dcmplt>
 8010fa8:	e798      	b.n	8010edc <_strtod_l+0xac4>
 8010faa:	2300      	movs	r3, #0
 8010fac:	930e      	str	r3, [sp, #56]	@ 0x38
 8010fae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010fb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	f7ff ba6d 	b.w	8010492 <_strtod_l+0x7a>
 8010fb8:	2a65      	cmp	r2, #101	@ 0x65
 8010fba:	f43f ab68 	beq.w	801068e <_strtod_l+0x276>
 8010fbe:	2a45      	cmp	r2, #69	@ 0x45
 8010fc0:	f43f ab65 	beq.w	801068e <_strtod_l+0x276>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	f7ff bba0 	b.w	801070a <_strtod_l+0x2f2>
 8010fca:	bf00      	nop
 8010fcc:	f3af 8000 	nop.w
 8010fd0:	ffc00000 	.word	0xffc00000
 8010fd4:	41dfffff 	.word	0x41dfffff
 8010fd8:	94a03595 	.word	0x94a03595
 8010fdc:	3fcfffff 	.word	0x3fcfffff

08010fe0 <_strtod_r>:
 8010fe0:	4b01      	ldr	r3, [pc, #4]	@ (8010fe8 <_strtod_r+0x8>)
 8010fe2:	f7ff ba19 	b.w	8010418 <_strtod_l>
 8010fe6:	bf00      	nop
 8010fe8:	2000006c 	.word	0x2000006c

08010fec <_strtol_l.isra.0>:
 8010fec:	2b24      	cmp	r3, #36	@ 0x24
 8010fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff2:	4686      	mov	lr, r0
 8010ff4:	4690      	mov	r8, r2
 8010ff6:	d801      	bhi.n	8010ffc <_strtol_l.isra.0+0x10>
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d106      	bne.n	801100a <_strtol_l.isra.0+0x1e>
 8010ffc:	f7fd fdaa 	bl	800eb54 <__errno>
 8011000:	2316      	movs	r3, #22
 8011002:	6003      	str	r3, [r0, #0]
 8011004:	2000      	movs	r0, #0
 8011006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100a:	4834      	ldr	r0, [pc, #208]	@ (80110dc <_strtol_l.isra.0+0xf0>)
 801100c:	460d      	mov	r5, r1
 801100e:	462a      	mov	r2, r5
 8011010:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011014:	5d06      	ldrb	r6, [r0, r4]
 8011016:	f016 0608 	ands.w	r6, r6, #8
 801101a:	d1f8      	bne.n	801100e <_strtol_l.isra.0+0x22>
 801101c:	2c2d      	cmp	r4, #45	@ 0x2d
 801101e:	d110      	bne.n	8011042 <_strtol_l.isra.0+0x56>
 8011020:	782c      	ldrb	r4, [r5, #0]
 8011022:	2601      	movs	r6, #1
 8011024:	1c95      	adds	r5, r2, #2
 8011026:	f033 0210 	bics.w	r2, r3, #16
 801102a:	d115      	bne.n	8011058 <_strtol_l.isra.0+0x6c>
 801102c:	2c30      	cmp	r4, #48	@ 0x30
 801102e:	d10d      	bne.n	801104c <_strtol_l.isra.0+0x60>
 8011030:	782a      	ldrb	r2, [r5, #0]
 8011032:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011036:	2a58      	cmp	r2, #88	@ 0x58
 8011038:	d108      	bne.n	801104c <_strtol_l.isra.0+0x60>
 801103a:	786c      	ldrb	r4, [r5, #1]
 801103c:	3502      	adds	r5, #2
 801103e:	2310      	movs	r3, #16
 8011040:	e00a      	b.n	8011058 <_strtol_l.isra.0+0x6c>
 8011042:	2c2b      	cmp	r4, #43	@ 0x2b
 8011044:	bf04      	itt	eq
 8011046:	782c      	ldrbeq	r4, [r5, #0]
 8011048:	1c95      	addeq	r5, r2, #2
 801104a:	e7ec      	b.n	8011026 <_strtol_l.isra.0+0x3a>
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1f6      	bne.n	801103e <_strtol_l.isra.0+0x52>
 8011050:	2c30      	cmp	r4, #48	@ 0x30
 8011052:	bf14      	ite	ne
 8011054:	230a      	movne	r3, #10
 8011056:	2308      	moveq	r3, #8
 8011058:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801105c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011060:	2200      	movs	r2, #0
 8011062:	fbbc f9f3 	udiv	r9, ip, r3
 8011066:	4610      	mov	r0, r2
 8011068:	fb03 ca19 	mls	sl, r3, r9, ip
 801106c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011070:	2f09      	cmp	r7, #9
 8011072:	d80f      	bhi.n	8011094 <_strtol_l.isra.0+0xa8>
 8011074:	463c      	mov	r4, r7
 8011076:	42a3      	cmp	r3, r4
 8011078:	dd1b      	ble.n	80110b2 <_strtol_l.isra.0+0xc6>
 801107a:	1c57      	adds	r7, r2, #1
 801107c:	d007      	beq.n	801108e <_strtol_l.isra.0+0xa2>
 801107e:	4581      	cmp	r9, r0
 8011080:	d314      	bcc.n	80110ac <_strtol_l.isra.0+0xc0>
 8011082:	d101      	bne.n	8011088 <_strtol_l.isra.0+0x9c>
 8011084:	45a2      	cmp	sl, r4
 8011086:	db11      	blt.n	80110ac <_strtol_l.isra.0+0xc0>
 8011088:	fb00 4003 	mla	r0, r0, r3, r4
 801108c:	2201      	movs	r2, #1
 801108e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011092:	e7eb      	b.n	801106c <_strtol_l.isra.0+0x80>
 8011094:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011098:	2f19      	cmp	r7, #25
 801109a:	d801      	bhi.n	80110a0 <_strtol_l.isra.0+0xb4>
 801109c:	3c37      	subs	r4, #55	@ 0x37
 801109e:	e7ea      	b.n	8011076 <_strtol_l.isra.0+0x8a>
 80110a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80110a4:	2f19      	cmp	r7, #25
 80110a6:	d804      	bhi.n	80110b2 <_strtol_l.isra.0+0xc6>
 80110a8:	3c57      	subs	r4, #87	@ 0x57
 80110aa:	e7e4      	b.n	8011076 <_strtol_l.isra.0+0x8a>
 80110ac:	f04f 32ff 	mov.w	r2, #4294967295
 80110b0:	e7ed      	b.n	801108e <_strtol_l.isra.0+0xa2>
 80110b2:	1c53      	adds	r3, r2, #1
 80110b4:	d108      	bne.n	80110c8 <_strtol_l.isra.0+0xdc>
 80110b6:	2322      	movs	r3, #34	@ 0x22
 80110b8:	f8ce 3000 	str.w	r3, [lr]
 80110bc:	4660      	mov	r0, ip
 80110be:	f1b8 0f00 	cmp.w	r8, #0
 80110c2:	d0a0      	beq.n	8011006 <_strtol_l.isra.0+0x1a>
 80110c4:	1e69      	subs	r1, r5, #1
 80110c6:	e006      	b.n	80110d6 <_strtol_l.isra.0+0xea>
 80110c8:	b106      	cbz	r6, 80110cc <_strtol_l.isra.0+0xe0>
 80110ca:	4240      	negs	r0, r0
 80110cc:	f1b8 0f00 	cmp.w	r8, #0
 80110d0:	d099      	beq.n	8011006 <_strtol_l.isra.0+0x1a>
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	d1f6      	bne.n	80110c4 <_strtol_l.isra.0+0xd8>
 80110d6:	f8c8 1000 	str.w	r1, [r8]
 80110da:	e794      	b.n	8011006 <_strtol_l.isra.0+0x1a>
 80110dc:	08012bc1 	.word	0x08012bc1

080110e0 <_strtol_r>:
 80110e0:	f7ff bf84 	b.w	8010fec <_strtol_l.isra.0>

080110e4 <__ssputs_r>:
 80110e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110e8:	688e      	ldr	r6, [r1, #8]
 80110ea:	461f      	mov	r7, r3
 80110ec:	42be      	cmp	r6, r7
 80110ee:	680b      	ldr	r3, [r1, #0]
 80110f0:	4682      	mov	sl, r0
 80110f2:	460c      	mov	r4, r1
 80110f4:	4690      	mov	r8, r2
 80110f6:	d82d      	bhi.n	8011154 <__ssputs_r+0x70>
 80110f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011100:	d026      	beq.n	8011150 <__ssputs_r+0x6c>
 8011102:	6965      	ldr	r5, [r4, #20]
 8011104:	6909      	ldr	r1, [r1, #16]
 8011106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801110a:	eba3 0901 	sub.w	r9, r3, r1
 801110e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011112:	1c7b      	adds	r3, r7, #1
 8011114:	444b      	add	r3, r9
 8011116:	106d      	asrs	r5, r5, #1
 8011118:	429d      	cmp	r5, r3
 801111a:	bf38      	it	cc
 801111c:	461d      	movcc	r5, r3
 801111e:	0553      	lsls	r3, r2, #21
 8011120:	d527      	bpl.n	8011172 <__ssputs_r+0x8e>
 8011122:	4629      	mov	r1, r5
 8011124:	f7fe fc24 	bl	800f970 <_malloc_r>
 8011128:	4606      	mov	r6, r0
 801112a:	b360      	cbz	r0, 8011186 <__ssputs_r+0xa2>
 801112c:	6921      	ldr	r1, [r4, #16]
 801112e:	464a      	mov	r2, r9
 8011130:	f7fd fd3d 	bl	800ebae <memcpy>
 8011134:	89a3      	ldrh	r3, [r4, #12]
 8011136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801113e:	81a3      	strh	r3, [r4, #12]
 8011140:	6126      	str	r6, [r4, #16]
 8011142:	6165      	str	r5, [r4, #20]
 8011144:	444e      	add	r6, r9
 8011146:	eba5 0509 	sub.w	r5, r5, r9
 801114a:	6026      	str	r6, [r4, #0]
 801114c:	60a5      	str	r5, [r4, #8]
 801114e:	463e      	mov	r6, r7
 8011150:	42be      	cmp	r6, r7
 8011152:	d900      	bls.n	8011156 <__ssputs_r+0x72>
 8011154:	463e      	mov	r6, r7
 8011156:	6820      	ldr	r0, [r4, #0]
 8011158:	4632      	mov	r2, r6
 801115a:	4641      	mov	r1, r8
 801115c:	f000 f9c6 	bl	80114ec <memmove>
 8011160:	68a3      	ldr	r3, [r4, #8]
 8011162:	1b9b      	subs	r3, r3, r6
 8011164:	60a3      	str	r3, [r4, #8]
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	4433      	add	r3, r6
 801116a:	6023      	str	r3, [r4, #0]
 801116c:	2000      	movs	r0, #0
 801116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011172:	462a      	mov	r2, r5
 8011174:	f000 fd7d 	bl	8011c72 <_realloc_r>
 8011178:	4606      	mov	r6, r0
 801117a:	2800      	cmp	r0, #0
 801117c:	d1e0      	bne.n	8011140 <__ssputs_r+0x5c>
 801117e:	6921      	ldr	r1, [r4, #16]
 8011180:	4650      	mov	r0, sl
 8011182:	f7fe fb81 	bl	800f888 <_free_r>
 8011186:	230c      	movs	r3, #12
 8011188:	f8ca 3000 	str.w	r3, [sl]
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011192:	81a3      	strh	r3, [r4, #12]
 8011194:	f04f 30ff 	mov.w	r0, #4294967295
 8011198:	e7e9      	b.n	801116e <__ssputs_r+0x8a>
	...

0801119c <_svfiprintf_r>:
 801119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a0:	4698      	mov	r8, r3
 80111a2:	898b      	ldrh	r3, [r1, #12]
 80111a4:	061b      	lsls	r3, r3, #24
 80111a6:	b09d      	sub	sp, #116	@ 0x74
 80111a8:	4607      	mov	r7, r0
 80111aa:	460d      	mov	r5, r1
 80111ac:	4614      	mov	r4, r2
 80111ae:	d510      	bpl.n	80111d2 <_svfiprintf_r+0x36>
 80111b0:	690b      	ldr	r3, [r1, #16]
 80111b2:	b973      	cbnz	r3, 80111d2 <_svfiprintf_r+0x36>
 80111b4:	2140      	movs	r1, #64	@ 0x40
 80111b6:	f7fe fbdb 	bl	800f970 <_malloc_r>
 80111ba:	6028      	str	r0, [r5, #0]
 80111bc:	6128      	str	r0, [r5, #16]
 80111be:	b930      	cbnz	r0, 80111ce <_svfiprintf_r+0x32>
 80111c0:	230c      	movs	r3, #12
 80111c2:	603b      	str	r3, [r7, #0]
 80111c4:	f04f 30ff 	mov.w	r0, #4294967295
 80111c8:	b01d      	add	sp, #116	@ 0x74
 80111ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ce:	2340      	movs	r3, #64	@ 0x40
 80111d0:	616b      	str	r3, [r5, #20]
 80111d2:	2300      	movs	r3, #0
 80111d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80111d6:	2320      	movs	r3, #32
 80111d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80111e0:	2330      	movs	r3, #48	@ 0x30
 80111e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011380 <_svfiprintf_r+0x1e4>
 80111e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111ea:	f04f 0901 	mov.w	r9, #1
 80111ee:	4623      	mov	r3, r4
 80111f0:	469a      	mov	sl, r3
 80111f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111f6:	b10a      	cbz	r2, 80111fc <_svfiprintf_r+0x60>
 80111f8:	2a25      	cmp	r2, #37	@ 0x25
 80111fa:	d1f9      	bne.n	80111f0 <_svfiprintf_r+0x54>
 80111fc:	ebba 0b04 	subs.w	fp, sl, r4
 8011200:	d00b      	beq.n	801121a <_svfiprintf_r+0x7e>
 8011202:	465b      	mov	r3, fp
 8011204:	4622      	mov	r2, r4
 8011206:	4629      	mov	r1, r5
 8011208:	4638      	mov	r0, r7
 801120a:	f7ff ff6b 	bl	80110e4 <__ssputs_r>
 801120e:	3001      	adds	r0, #1
 8011210:	f000 80a7 	beq.w	8011362 <_svfiprintf_r+0x1c6>
 8011214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011216:	445a      	add	r2, fp
 8011218:	9209      	str	r2, [sp, #36]	@ 0x24
 801121a:	f89a 3000 	ldrb.w	r3, [sl]
 801121e:	2b00      	cmp	r3, #0
 8011220:	f000 809f 	beq.w	8011362 <_svfiprintf_r+0x1c6>
 8011224:	2300      	movs	r3, #0
 8011226:	f04f 32ff 	mov.w	r2, #4294967295
 801122a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801122e:	f10a 0a01 	add.w	sl, sl, #1
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	9307      	str	r3, [sp, #28]
 8011236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801123a:	931a      	str	r3, [sp, #104]	@ 0x68
 801123c:	4654      	mov	r4, sl
 801123e:	2205      	movs	r2, #5
 8011240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011244:	484e      	ldr	r0, [pc, #312]	@ (8011380 <_svfiprintf_r+0x1e4>)
 8011246:	f7ee ffc3 	bl	80001d0 <memchr>
 801124a:	9a04      	ldr	r2, [sp, #16]
 801124c:	b9d8      	cbnz	r0, 8011286 <_svfiprintf_r+0xea>
 801124e:	06d0      	lsls	r0, r2, #27
 8011250:	bf44      	itt	mi
 8011252:	2320      	movmi	r3, #32
 8011254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011258:	0711      	lsls	r1, r2, #28
 801125a:	bf44      	itt	mi
 801125c:	232b      	movmi	r3, #43	@ 0x2b
 801125e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011262:	f89a 3000 	ldrb.w	r3, [sl]
 8011266:	2b2a      	cmp	r3, #42	@ 0x2a
 8011268:	d015      	beq.n	8011296 <_svfiprintf_r+0xfa>
 801126a:	9a07      	ldr	r2, [sp, #28]
 801126c:	4654      	mov	r4, sl
 801126e:	2000      	movs	r0, #0
 8011270:	f04f 0c0a 	mov.w	ip, #10
 8011274:	4621      	mov	r1, r4
 8011276:	f811 3b01 	ldrb.w	r3, [r1], #1
 801127a:	3b30      	subs	r3, #48	@ 0x30
 801127c:	2b09      	cmp	r3, #9
 801127e:	d94b      	bls.n	8011318 <_svfiprintf_r+0x17c>
 8011280:	b1b0      	cbz	r0, 80112b0 <_svfiprintf_r+0x114>
 8011282:	9207      	str	r2, [sp, #28]
 8011284:	e014      	b.n	80112b0 <_svfiprintf_r+0x114>
 8011286:	eba0 0308 	sub.w	r3, r0, r8
 801128a:	fa09 f303 	lsl.w	r3, r9, r3
 801128e:	4313      	orrs	r3, r2
 8011290:	9304      	str	r3, [sp, #16]
 8011292:	46a2      	mov	sl, r4
 8011294:	e7d2      	b.n	801123c <_svfiprintf_r+0xa0>
 8011296:	9b03      	ldr	r3, [sp, #12]
 8011298:	1d19      	adds	r1, r3, #4
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	9103      	str	r1, [sp, #12]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	bfbb      	ittet	lt
 80112a2:	425b      	neglt	r3, r3
 80112a4:	f042 0202 	orrlt.w	r2, r2, #2
 80112a8:	9307      	strge	r3, [sp, #28]
 80112aa:	9307      	strlt	r3, [sp, #28]
 80112ac:	bfb8      	it	lt
 80112ae:	9204      	strlt	r2, [sp, #16]
 80112b0:	7823      	ldrb	r3, [r4, #0]
 80112b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80112b4:	d10a      	bne.n	80112cc <_svfiprintf_r+0x130>
 80112b6:	7863      	ldrb	r3, [r4, #1]
 80112b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80112ba:	d132      	bne.n	8011322 <_svfiprintf_r+0x186>
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	1d1a      	adds	r2, r3, #4
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	9203      	str	r2, [sp, #12]
 80112c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112c8:	3402      	adds	r4, #2
 80112ca:	9305      	str	r3, [sp, #20]
 80112cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011390 <_svfiprintf_r+0x1f4>
 80112d0:	7821      	ldrb	r1, [r4, #0]
 80112d2:	2203      	movs	r2, #3
 80112d4:	4650      	mov	r0, sl
 80112d6:	f7ee ff7b 	bl	80001d0 <memchr>
 80112da:	b138      	cbz	r0, 80112ec <_svfiprintf_r+0x150>
 80112dc:	9b04      	ldr	r3, [sp, #16]
 80112de:	eba0 000a 	sub.w	r0, r0, sl
 80112e2:	2240      	movs	r2, #64	@ 0x40
 80112e4:	4082      	lsls	r2, r0
 80112e6:	4313      	orrs	r3, r2
 80112e8:	3401      	adds	r4, #1
 80112ea:	9304      	str	r3, [sp, #16]
 80112ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f0:	4824      	ldr	r0, [pc, #144]	@ (8011384 <_svfiprintf_r+0x1e8>)
 80112f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112f6:	2206      	movs	r2, #6
 80112f8:	f7ee ff6a 	bl	80001d0 <memchr>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d036      	beq.n	801136e <_svfiprintf_r+0x1d2>
 8011300:	4b21      	ldr	r3, [pc, #132]	@ (8011388 <_svfiprintf_r+0x1ec>)
 8011302:	bb1b      	cbnz	r3, 801134c <_svfiprintf_r+0x1b0>
 8011304:	9b03      	ldr	r3, [sp, #12]
 8011306:	3307      	adds	r3, #7
 8011308:	f023 0307 	bic.w	r3, r3, #7
 801130c:	3308      	adds	r3, #8
 801130e:	9303      	str	r3, [sp, #12]
 8011310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011312:	4433      	add	r3, r6
 8011314:	9309      	str	r3, [sp, #36]	@ 0x24
 8011316:	e76a      	b.n	80111ee <_svfiprintf_r+0x52>
 8011318:	fb0c 3202 	mla	r2, ip, r2, r3
 801131c:	460c      	mov	r4, r1
 801131e:	2001      	movs	r0, #1
 8011320:	e7a8      	b.n	8011274 <_svfiprintf_r+0xd8>
 8011322:	2300      	movs	r3, #0
 8011324:	3401      	adds	r4, #1
 8011326:	9305      	str	r3, [sp, #20]
 8011328:	4619      	mov	r1, r3
 801132a:	f04f 0c0a 	mov.w	ip, #10
 801132e:	4620      	mov	r0, r4
 8011330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011334:	3a30      	subs	r2, #48	@ 0x30
 8011336:	2a09      	cmp	r2, #9
 8011338:	d903      	bls.n	8011342 <_svfiprintf_r+0x1a6>
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0c6      	beq.n	80112cc <_svfiprintf_r+0x130>
 801133e:	9105      	str	r1, [sp, #20]
 8011340:	e7c4      	b.n	80112cc <_svfiprintf_r+0x130>
 8011342:	fb0c 2101 	mla	r1, ip, r1, r2
 8011346:	4604      	mov	r4, r0
 8011348:	2301      	movs	r3, #1
 801134a:	e7f0      	b.n	801132e <_svfiprintf_r+0x192>
 801134c:	ab03      	add	r3, sp, #12
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	462a      	mov	r2, r5
 8011352:	4b0e      	ldr	r3, [pc, #56]	@ (801138c <_svfiprintf_r+0x1f0>)
 8011354:	a904      	add	r1, sp, #16
 8011356:	4638      	mov	r0, r7
 8011358:	f7fc fcbe 	bl	800dcd8 <_printf_float>
 801135c:	1c42      	adds	r2, r0, #1
 801135e:	4606      	mov	r6, r0
 8011360:	d1d6      	bne.n	8011310 <_svfiprintf_r+0x174>
 8011362:	89ab      	ldrh	r3, [r5, #12]
 8011364:	065b      	lsls	r3, r3, #25
 8011366:	f53f af2d 	bmi.w	80111c4 <_svfiprintf_r+0x28>
 801136a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801136c:	e72c      	b.n	80111c8 <_svfiprintf_r+0x2c>
 801136e:	ab03      	add	r3, sp, #12
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	462a      	mov	r2, r5
 8011374:	4b05      	ldr	r3, [pc, #20]	@ (801138c <_svfiprintf_r+0x1f0>)
 8011376:	a904      	add	r1, sp, #16
 8011378:	4638      	mov	r0, r7
 801137a:	f7fc ff45 	bl	800e208 <_printf_i>
 801137e:	e7ed      	b.n	801135c <_svfiprintf_r+0x1c0>
 8011380:	080129b9 	.word	0x080129b9
 8011384:	080129c3 	.word	0x080129c3
 8011388:	0800dcd9 	.word	0x0800dcd9
 801138c:	080110e5 	.word	0x080110e5
 8011390:	080129bf 	.word	0x080129bf

08011394 <__sflush_r>:
 8011394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801139c:	0716      	lsls	r6, r2, #28
 801139e:	4605      	mov	r5, r0
 80113a0:	460c      	mov	r4, r1
 80113a2:	d454      	bmi.n	801144e <__sflush_r+0xba>
 80113a4:	684b      	ldr	r3, [r1, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	dc02      	bgt.n	80113b0 <__sflush_r+0x1c>
 80113aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	dd48      	ble.n	8011442 <__sflush_r+0xae>
 80113b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113b2:	2e00      	cmp	r6, #0
 80113b4:	d045      	beq.n	8011442 <__sflush_r+0xae>
 80113b6:	2300      	movs	r3, #0
 80113b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80113bc:	682f      	ldr	r7, [r5, #0]
 80113be:	6a21      	ldr	r1, [r4, #32]
 80113c0:	602b      	str	r3, [r5, #0]
 80113c2:	d030      	beq.n	8011426 <__sflush_r+0x92>
 80113c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	0759      	lsls	r1, r3, #29
 80113ca:	d505      	bpl.n	80113d8 <__sflush_r+0x44>
 80113cc:	6863      	ldr	r3, [r4, #4]
 80113ce:	1ad2      	subs	r2, r2, r3
 80113d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113d2:	b10b      	cbz	r3, 80113d8 <__sflush_r+0x44>
 80113d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113d6:	1ad2      	subs	r2, r2, r3
 80113d8:	2300      	movs	r3, #0
 80113da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113dc:	6a21      	ldr	r1, [r4, #32]
 80113de:	4628      	mov	r0, r5
 80113e0:	47b0      	blx	r6
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	d106      	bne.n	80113f6 <__sflush_r+0x62>
 80113e8:	6829      	ldr	r1, [r5, #0]
 80113ea:	291d      	cmp	r1, #29
 80113ec:	d82b      	bhi.n	8011446 <__sflush_r+0xb2>
 80113ee:	4a2a      	ldr	r2, [pc, #168]	@ (8011498 <__sflush_r+0x104>)
 80113f0:	40ca      	lsrs	r2, r1
 80113f2:	07d6      	lsls	r6, r2, #31
 80113f4:	d527      	bpl.n	8011446 <__sflush_r+0xb2>
 80113f6:	2200      	movs	r2, #0
 80113f8:	6062      	str	r2, [r4, #4]
 80113fa:	04d9      	lsls	r1, r3, #19
 80113fc:	6922      	ldr	r2, [r4, #16]
 80113fe:	6022      	str	r2, [r4, #0]
 8011400:	d504      	bpl.n	801140c <__sflush_r+0x78>
 8011402:	1c42      	adds	r2, r0, #1
 8011404:	d101      	bne.n	801140a <__sflush_r+0x76>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	b903      	cbnz	r3, 801140c <__sflush_r+0x78>
 801140a:	6560      	str	r0, [r4, #84]	@ 0x54
 801140c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801140e:	602f      	str	r7, [r5, #0]
 8011410:	b1b9      	cbz	r1, 8011442 <__sflush_r+0xae>
 8011412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011416:	4299      	cmp	r1, r3
 8011418:	d002      	beq.n	8011420 <__sflush_r+0x8c>
 801141a:	4628      	mov	r0, r5
 801141c:	f7fe fa34 	bl	800f888 <_free_r>
 8011420:	2300      	movs	r3, #0
 8011422:	6363      	str	r3, [r4, #52]	@ 0x34
 8011424:	e00d      	b.n	8011442 <__sflush_r+0xae>
 8011426:	2301      	movs	r3, #1
 8011428:	4628      	mov	r0, r5
 801142a:	47b0      	blx	r6
 801142c:	4602      	mov	r2, r0
 801142e:	1c50      	adds	r0, r2, #1
 8011430:	d1c9      	bne.n	80113c6 <__sflush_r+0x32>
 8011432:	682b      	ldr	r3, [r5, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0c6      	beq.n	80113c6 <__sflush_r+0x32>
 8011438:	2b1d      	cmp	r3, #29
 801143a:	d001      	beq.n	8011440 <__sflush_r+0xac>
 801143c:	2b16      	cmp	r3, #22
 801143e:	d11e      	bne.n	801147e <__sflush_r+0xea>
 8011440:	602f      	str	r7, [r5, #0]
 8011442:	2000      	movs	r0, #0
 8011444:	e022      	b.n	801148c <__sflush_r+0xf8>
 8011446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801144a:	b21b      	sxth	r3, r3
 801144c:	e01b      	b.n	8011486 <__sflush_r+0xf2>
 801144e:	690f      	ldr	r7, [r1, #16]
 8011450:	2f00      	cmp	r7, #0
 8011452:	d0f6      	beq.n	8011442 <__sflush_r+0xae>
 8011454:	0793      	lsls	r3, r2, #30
 8011456:	680e      	ldr	r6, [r1, #0]
 8011458:	bf08      	it	eq
 801145a:	694b      	ldreq	r3, [r1, #20]
 801145c:	600f      	str	r7, [r1, #0]
 801145e:	bf18      	it	ne
 8011460:	2300      	movne	r3, #0
 8011462:	eba6 0807 	sub.w	r8, r6, r7
 8011466:	608b      	str	r3, [r1, #8]
 8011468:	f1b8 0f00 	cmp.w	r8, #0
 801146c:	dde9      	ble.n	8011442 <__sflush_r+0xae>
 801146e:	6a21      	ldr	r1, [r4, #32]
 8011470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011472:	4643      	mov	r3, r8
 8011474:	463a      	mov	r2, r7
 8011476:	4628      	mov	r0, r5
 8011478:	47b0      	blx	r6
 801147a:	2800      	cmp	r0, #0
 801147c:	dc08      	bgt.n	8011490 <__sflush_r+0xfc>
 801147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011486:	81a3      	strh	r3, [r4, #12]
 8011488:	f04f 30ff 	mov.w	r0, #4294967295
 801148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011490:	4407      	add	r7, r0
 8011492:	eba8 0800 	sub.w	r8, r8, r0
 8011496:	e7e7      	b.n	8011468 <__sflush_r+0xd4>
 8011498:	20400001 	.word	0x20400001

0801149c <_fflush_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	690b      	ldr	r3, [r1, #16]
 80114a0:	4605      	mov	r5, r0
 80114a2:	460c      	mov	r4, r1
 80114a4:	b913      	cbnz	r3, 80114ac <_fflush_r+0x10>
 80114a6:	2500      	movs	r5, #0
 80114a8:	4628      	mov	r0, r5
 80114aa:	bd38      	pop	{r3, r4, r5, pc}
 80114ac:	b118      	cbz	r0, 80114b6 <_fflush_r+0x1a>
 80114ae:	6a03      	ldr	r3, [r0, #32]
 80114b0:	b90b      	cbnz	r3, 80114b6 <_fflush_r+0x1a>
 80114b2:	f7fd fa61 	bl	800e978 <__sinit>
 80114b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d0f3      	beq.n	80114a6 <_fflush_r+0xa>
 80114be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80114c0:	07d0      	lsls	r0, r2, #31
 80114c2:	d404      	bmi.n	80114ce <_fflush_r+0x32>
 80114c4:	0599      	lsls	r1, r3, #22
 80114c6:	d402      	bmi.n	80114ce <_fflush_r+0x32>
 80114c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ca:	f7fd fb6e 	bl	800ebaa <__retarget_lock_acquire_recursive>
 80114ce:	4628      	mov	r0, r5
 80114d0:	4621      	mov	r1, r4
 80114d2:	f7ff ff5f 	bl	8011394 <__sflush_r>
 80114d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114d8:	07da      	lsls	r2, r3, #31
 80114da:	4605      	mov	r5, r0
 80114dc:	d4e4      	bmi.n	80114a8 <_fflush_r+0xc>
 80114de:	89a3      	ldrh	r3, [r4, #12]
 80114e0:	059b      	lsls	r3, r3, #22
 80114e2:	d4e1      	bmi.n	80114a8 <_fflush_r+0xc>
 80114e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114e6:	f7fd fb61 	bl	800ebac <__retarget_lock_release_recursive>
 80114ea:	e7dd      	b.n	80114a8 <_fflush_r+0xc>

080114ec <memmove>:
 80114ec:	4288      	cmp	r0, r1
 80114ee:	b510      	push	{r4, lr}
 80114f0:	eb01 0402 	add.w	r4, r1, r2
 80114f4:	d902      	bls.n	80114fc <memmove+0x10>
 80114f6:	4284      	cmp	r4, r0
 80114f8:	4623      	mov	r3, r4
 80114fa:	d807      	bhi.n	801150c <memmove+0x20>
 80114fc:	1e43      	subs	r3, r0, #1
 80114fe:	42a1      	cmp	r1, r4
 8011500:	d008      	beq.n	8011514 <memmove+0x28>
 8011502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011506:	f803 2f01 	strb.w	r2, [r3, #1]!
 801150a:	e7f8      	b.n	80114fe <memmove+0x12>
 801150c:	4402      	add	r2, r0
 801150e:	4601      	mov	r1, r0
 8011510:	428a      	cmp	r2, r1
 8011512:	d100      	bne.n	8011516 <memmove+0x2a>
 8011514:	bd10      	pop	{r4, pc}
 8011516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801151a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801151e:	e7f7      	b.n	8011510 <memmove+0x24>

08011520 <strncmp>:
 8011520:	b510      	push	{r4, lr}
 8011522:	b16a      	cbz	r2, 8011540 <strncmp+0x20>
 8011524:	3901      	subs	r1, #1
 8011526:	1884      	adds	r4, r0, r2
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011530:	429a      	cmp	r2, r3
 8011532:	d103      	bne.n	801153c <strncmp+0x1c>
 8011534:	42a0      	cmp	r0, r4
 8011536:	d001      	beq.n	801153c <strncmp+0x1c>
 8011538:	2a00      	cmp	r2, #0
 801153a:	d1f5      	bne.n	8011528 <strncmp+0x8>
 801153c:	1ad0      	subs	r0, r2, r3
 801153e:	bd10      	pop	{r4, pc}
 8011540:	4610      	mov	r0, r2
 8011542:	e7fc      	b.n	801153e <strncmp+0x1e>

08011544 <_sbrk_r>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	4d06      	ldr	r5, [pc, #24]	@ (8011560 <_sbrk_r+0x1c>)
 8011548:	2300      	movs	r3, #0
 801154a:	4604      	mov	r4, r0
 801154c:	4608      	mov	r0, r1
 801154e:	602b      	str	r3, [r5, #0]
 8011550:	f7f1 fa12 	bl	8002978 <_sbrk>
 8011554:	1c43      	adds	r3, r0, #1
 8011556:	d102      	bne.n	801155e <_sbrk_r+0x1a>
 8011558:	682b      	ldr	r3, [r5, #0]
 801155a:	b103      	cbz	r3, 801155e <_sbrk_r+0x1a>
 801155c:	6023      	str	r3, [r4, #0]
 801155e:	bd38      	pop	{r3, r4, r5, pc}
 8011560:	20004618 	.word	0x20004618
 8011564:	00000000 	.word	0x00000000

08011568 <nan>:
 8011568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011570 <nan+0x8>
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	00000000 	.word	0x00000000
 8011574:	7ff80000 	.word	0x7ff80000

08011578 <__assert_func>:
 8011578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801157a:	4614      	mov	r4, r2
 801157c:	461a      	mov	r2, r3
 801157e:	4b09      	ldr	r3, [pc, #36]	@ (80115a4 <__assert_func+0x2c>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	4605      	mov	r5, r0
 8011584:	68d8      	ldr	r0, [r3, #12]
 8011586:	b14c      	cbz	r4, 801159c <__assert_func+0x24>
 8011588:	4b07      	ldr	r3, [pc, #28]	@ (80115a8 <__assert_func+0x30>)
 801158a:	9100      	str	r1, [sp, #0]
 801158c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011590:	4906      	ldr	r1, [pc, #24]	@ (80115ac <__assert_func+0x34>)
 8011592:	462b      	mov	r3, r5
 8011594:	f000 fba8 	bl	8011ce8 <fiprintf>
 8011598:	f000 fbb8 	bl	8011d0c <abort>
 801159c:	4b04      	ldr	r3, [pc, #16]	@ (80115b0 <__assert_func+0x38>)
 801159e:	461c      	mov	r4, r3
 80115a0:	e7f3      	b.n	801158a <__assert_func+0x12>
 80115a2:	bf00      	nop
 80115a4:	2000001c 	.word	0x2000001c
 80115a8:	080129d2 	.word	0x080129d2
 80115ac:	080129df 	.word	0x080129df
 80115b0:	08012a0d 	.word	0x08012a0d

080115b4 <_calloc_r>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	fba1 5402 	umull	r5, r4, r1, r2
 80115ba:	b934      	cbnz	r4, 80115ca <_calloc_r+0x16>
 80115bc:	4629      	mov	r1, r5
 80115be:	f7fe f9d7 	bl	800f970 <_malloc_r>
 80115c2:	4606      	mov	r6, r0
 80115c4:	b928      	cbnz	r0, 80115d2 <_calloc_r+0x1e>
 80115c6:	4630      	mov	r0, r6
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
 80115ca:	220c      	movs	r2, #12
 80115cc:	6002      	str	r2, [r0, #0]
 80115ce:	2600      	movs	r6, #0
 80115d0:	e7f9      	b.n	80115c6 <_calloc_r+0x12>
 80115d2:	462a      	mov	r2, r5
 80115d4:	4621      	mov	r1, r4
 80115d6:	f7fd fa6a 	bl	800eaae <memset>
 80115da:	e7f4      	b.n	80115c6 <_calloc_r+0x12>

080115dc <rshift>:
 80115dc:	6903      	ldr	r3, [r0, #16]
 80115de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80115e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80115ea:	f100 0414 	add.w	r4, r0, #20
 80115ee:	dd45      	ble.n	801167c <rshift+0xa0>
 80115f0:	f011 011f 	ands.w	r1, r1, #31
 80115f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80115f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80115fc:	d10c      	bne.n	8011618 <rshift+0x3c>
 80115fe:	f100 0710 	add.w	r7, r0, #16
 8011602:	4629      	mov	r1, r5
 8011604:	42b1      	cmp	r1, r6
 8011606:	d334      	bcc.n	8011672 <rshift+0x96>
 8011608:	1a9b      	subs	r3, r3, r2
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	1eea      	subs	r2, r5, #3
 801160e:	4296      	cmp	r6, r2
 8011610:	bf38      	it	cc
 8011612:	2300      	movcc	r3, #0
 8011614:	4423      	add	r3, r4
 8011616:	e015      	b.n	8011644 <rshift+0x68>
 8011618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801161c:	f1c1 0820 	rsb	r8, r1, #32
 8011620:	40cf      	lsrs	r7, r1
 8011622:	f105 0e04 	add.w	lr, r5, #4
 8011626:	46a1      	mov	r9, r4
 8011628:	4576      	cmp	r6, lr
 801162a:	46f4      	mov	ip, lr
 801162c:	d815      	bhi.n	801165a <rshift+0x7e>
 801162e:	1a9a      	subs	r2, r3, r2
 8011630:	0092      	lsls	r2, r2, #2
 8011632:	3a04      	subs	r2, #4
 8011634:	3501      	adds	r5, #1
 8011636:	42ae      	cmp	r6, r5
 8011638:	bf38      	it	cc
 801163a:	2200      	movcc	r2, #0
 801163c:	18a3      	adds	r3, r4, r2
 801163e:	50a7      	str	r7, [r4, r2]
 8011640:	b107      	cbz	r7, 8011644 <rshift+0x68>
 8011642:	3304      	adds	r3, #4
 8011644:	1b1a      	subs	r2, r3, r4
 8011646:	42a3      	cmp	r3, r4
 8011648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801164c:	bf08      	it	eq
 801164e:	2300      	moveq	r3, #0
 8011650:	6102      	str	r2, [r0, #16]
 8011652:	bf08      	it	eq
 8011654:	6143      	streq	r3, [r0, #20]
 8011656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165a:	f8dc c000 	ldr.w	ip, [ip]
 801165e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011662:	ea4c 0707 	orr.w	r7, ip, r7
 8011666:	f849 7b04 	str.w	r7, [r9], #4
 801166a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801166e:	40cf      	lsrs	r7, r1
 8011670:	e7da      	b.n	8011628 <rshift+0x4c>
 8011672:	f851 cb04 	ldr.w	ip, [r1], #4
 8011676:	f847 cf04 	str.w	ip, [r7, #4]!
 801167a:	e7c3      	b.n	8011604 <rshift+0x28>
 801167c:	4623      	mov	r3, r4
 801167e:	e7e1      	b.n	8011644 <rshift+0x68>

08011680 <__hexdig_fun>:
 8011680:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011684:	2b09      	cmp	r3, #9
 8011686:	d802      	bhi.n	801168e <__hexdig_fun+0xe>
 8011688:	3820      	subs	r0, #32
 801168a:	b2c0      	uxtb	r0, r0
 801168c:	4770      	bx	lr
 801168e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011692:	2b05      	cmp	r3, #5
 8011694:	d801      	bhi.n	801169a <__hexdig_fun+0x1a>
 8011696:	3847      	subs	r0, #71	@ 0x47
 8011698:	e7f7      	b.n	801168a <__hexdig_fun+0xa>
 801169a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801169e:	2b05      	cmp	r3, #5
 80116a0:	d801      	bhi.n	80116a6 <__hexdig_fun+0x26>
 80116a2:	3827      	subs	r0, #39	@ 0x27
 80116a4:	e7f1      	b.n	801168a <__hexdig_fun+0xa>
 80116a6:	2000      	movs	r0, #0
 80116a8:	4770      	bx	lr
	...

080116ac <__gethex>:
 80116ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b0:	b085      	sub	sp, #20
 80116b2:	468a      	mov	sl, r1
 80116b4:	9302      	str	r3, [sp, #8]
 80116b6:	680b      	ldr	r3, [r1, #0]
 80116b8:	9001      	str	r0, [sp, #4]
 80116ba:	4690      	mov	r8, r2
 80116bc:	1c9c      	adds	r4, r3, #2
 80116be:	46a1      	mov	r9, r4
 80116c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80116c4:	2830      	cmp	r0, #48	@ 0x30
 80116c6:	d0fa      	beq.n	80116be <__gethex+0x12>
 80116c8:	eba9 0303 	sub.w	r3, r9, r3
 80116cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80116d0:	f7ff ffd6 	bl	8011680 <__hexdig_fun>
 80116d4:	4605      	mov	r5, r0
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d168      	bne.n	80117ac <__gethex+0x100>
 80116da:	49a0      	ldr	r1, [pc, #640]	@ (801195c <__gethex+0x2b0>)
 80116dc:	2201      	movs	r2, #1
 80116de:	4648      	mov	r0, r9
 80116e0:	f7ff ff1e 	bl	8011520 <strncmp>
 80116e4:	4607      	mov	r7, r0
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d167      	bne.n	80117ba <__gethex+0x10e>
 80116ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80116ee:	4626      	mov	r6, r4
 80116f0:	f7ff ffc6 	bl	8011680 <__hexdig_fun>
 80116f4:	2800      	cmp	r0, #0
 80116f6:	d062      	beq.n	80117be <__gethex+0x112>
 80116f8:	4623      	mov	r3, r4
 80116fa:	7818      	ldrb	r0, [r3, #0]
 80116fc:	2830      	cmp	r0, #48	@ 0x30
 80116fe:	4699      	mov	r9, r3
 8011700:	f103 0301 	add.w	r3, r3, #1
 8011704:	d0f9      	beq.n	80116fa <__gethex+0x4e>
 8011706:	f7ff ffbb 	bl	8011680 <__hexdig_fun>
 801170a:	fab0 f580 	clz	r5, r0
 801170e:	096d      	lsrs	r5, r5, #5
 8011710:	f04f 0b01 	mov.w	fp, #1
 8011714:	464a      	mov	r2, r9
 8011716:	4616      	mov	r6, r2
 8011718:	3201      	adds	r2, #1
 801171a:	7830      	ldrb	r0, [r6, #0]
 801171c:	f7ff ffb0 	bl	8011680 <__hexdig_fun>
 8011720:	2800      	cmp	r0, #0
 8011722:	d1f8      	bne.n	8011716 <__gethex+0x6a>
 8011724:	498d      	ldr	r1, [pc, #564]	@ (801195c <__gethex+0x2b0>)
 8011726:	2201      	movs	r2, #1
 8011728:	4630      	mov	r0, r6
 801172a:	f7ff fef9 	bl	8011520 <strncmp>
 801172e:	2800      	cmp	r0, #0
 8011730:	d13f      	bne.n	80117b2 <__gethex+0x106>
 8011732:	b944      	cbnz	r4, 8011746 <__gethex+0x9a>
 8011734:	1c74      	adds	r4, r6, #1
 8011736:	4622      	mov	r2, r4
 8011738:	4616      	mov	r6, r2
 801173a:	3201      	adds	r2, #1
 801173c:	7830      	ldrb	r0, [r6, #0]
 801173e:	f7ff ff9f 	bl	8011680 <__hexdig_fun>
 8011742:	2800      	cmp	r0, #0
 8011744:	d1f8      	bne.n	8011738 <__gethex+0x8c>
 8011746:	1ba4      	subs	r4, r4, r6
 8011748:	00a7      	lsls	r7, r4, #2
 801174a:	7833      	ldrb	r3, [r6, #0]
 801174c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011750:	2b50      	cmp	r3, #80	@ 0x50
 8011752:	d13e      	bne.n	80117d2 <__gethex+0x126>
 8011754:	7873      	ldrb	r3, [r6, #1]
 8011756:	2b2b      	cmp	r3, #43	@ 0x2b
 8011758:	d033      	beq.n	80117c2 <__gethex+0x116>
 801175a:	2b2d      	cmp	r3, #45	@ 0x2d
 801175c:	d034      	beq.n	80117c8 <__gethex+0x11c>
 801175e:	1c71      	adds	r1, r6, #1
 8011760:	2400      	movs	r4, #0
 8011762:	7808      	ldrb	r0, [r1, #0]
 8011764:	f7ff ff8c 	bl	8011680 <__hexdig_fun>
 8011768:	1e43      	subs	r3, r0, #1
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b18      	cmp	r3, #24
 801176e:	d830      	bhi.n	80117d2 <__gethex+0x126>
 8011770:	f1a0 0210 	sub.w	r2, r0, #16
 8011774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011778:	f7ff ff82 	bl	8011680 <__hexdig_fun>
 801177c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011780:	fa5f fc8c 	uxtb.w	ip, ip
 8011784:	f1bc 0f18 	cmp.w	ip, #24
 8011788:	f04f 030a 	mov.w	r3, #10
 801178c:	d91e      	bls.n	80117cc <__gethex+0x120>
 801178e:	b104      	cbz	r4, 8011792 <__gethex+0xe6>
 8011790:	4252      	negs	r2, r2
 8011792:	4417      	add	r7, r2
 8011794:	f8ca 1000 	str.w	r1, [sl]
 8011798:	b1ed      	cbz	r5, 80117d6 <__gethex+0x12a>
 801179a:	f1bb 0f00 	cmp.w	fp, #0
 801179e:	bf0c      	ite	eq
 80117a0:	2506      	moveq	r5, #6
 80117a2:	2500      	movne	r5, #0
 80117a4:	4628      	mov	r0, r5
 80117a6:	b005      	add	sp, #20
 80117a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ac:	2500      	movs	r5, #0
 80117ae:	462c      	mov	r4, r5
 80117b0:	e7b0      	b.n	8011714 <__gethex+0x68>
 80117b2:	2c00      	cmp	r4, #0
 80117b4:	d1c7      	bne.n	8011746 <__gethex+0x9a>
 80117b6:	4627      	mov	r7, r4
 80117b8:	e7c7      	b.n	801174a <__gethex+0x9e>
 80117ba:	464e      	mov	r6, r9
 80117bc:	462f      	mov	r7, r5
 80117be:	2501      	movs	r5, #1
 80117c0:	e7c3      	b.n	801174a <__gethex+0x9e>
 80117c2:	2400      	movs	r4, #0
 80117c4:	1cb1      	adds	r1, r6, #2
 80117c6:	e7cc      	b.n	8011762 <__gethex+0xb6>
 80117c8:	2401      	movs	r4, #1
 80117ca:	e7fb      	b.n	80117c4 <__gethex+0x118>
 80117cc:	fb03 0002 	mla	r0, r3, r2, r0
 80117d0:	e7ce      	b.n	8011770 <__gethex+0xc4>
 80117d2:	4631      	mov	r1, r6
 80117d4:	e7de      	b.n	8011794 <__gethex+0xe8>
 80117d6:	eba6 0309 	sub.w	r3, r6, r9
 80117da:	3b01      	subs	r3, #1
 80117dc:	4629      	mov	r1, r5
 80117de:	2b07      	cmp	r3, #7
 80117e0:	dc0a      	bgt.n	80117f8 <__gethex+0x14c>
 80117e2:	9801      	ldr	r0, [sp, #4]
 80117e4:	f7fe f950 	bl	800fa88 <_Balloc>
 80117e8:	4604      	mov	r4, r0
 80117ea:	b940      	cbnz	r0, 80117fe <__gethex+0x152>
 80117ec:	4b5c      	ldr	r3, [pc, #368]	@ (8011960 <__gethex+0x2b4>)
 80117ee:	4602      	mov	r2, r0
 80117f0:	21e4      	movs	r1, #228	@ 0xe4
 80117f2:	485c      	ldr	r0, [pc, #368]	@ (8011964 <__gethex+0x2b8>)
 80117f4:	f7ff fec0 	bl	8011578 <__assert_func>
 80117f8:	3101      	adds	r1, #1
 80117fa:	105b      	asrs	r3, r3, #1
 80117fc:	e7ef      	b.n	80117de <__gethex+0x132>
 80117fe:	f100 0a14 	add.w	sl, r0, #20
 8011802:	2300      	movs	r3, #0
 8011804:	4655      	mov	r5, sl
 8011806:	469b      	mov	fp, r3
 8011808:	45b1      	cmp	r9, r6
 801180a:	d337      	bcc.n	801187c <__gethex+0x1d0>
 801180c:	f845 bb04 	str.w	fp, [r5], #4
 8011810:	eba5 050a 	sub.w	r5, r5, sl
 8011814:	10ad      	asrs	r5, r5, #2
 8011816:	6125      	str	r5, [r4, #16]
 8011818:	4658      	mov	r0, fp
 801181a:	f7fe fa27 	bl	800fc6c <__hi0bits>
 801181e:	016d      	lsls	r5, r5, #5
 8011820:	f8d8 6000 	ldr.w	r6, [r8]
 8011824:	1a2d      	subs	r5, r5, r0
 8011826:	42b5      	cmp	r5, r6
 8011828:	dd54      	ble.n	80118d4 <__gethex+0x228>
 801182a:	1bad      	subs	r5, r5, r6
 801182c:	4629      	mov	r1, r5
 801182e:	4620      	mov	r0, r4
 8011830:	f7fe fdb3 	bl	801039a <__any_on>
 8011834:	4681      	mov	r9, r0
 8011836:	b178      	cbz	r0, 8011858 <__gethex+0x1ac>
 8011838:	1e6b      	subs	r3, r5, #1
 801183a:	1159      	asrs	r1, r3, #5
 801183c:	f003 021f 	and.w	r2, r3, #31
 8011840:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011844:	f04f 0901 	mov.w	r9, #1
 8011848:	fa09 f202 	lsl.w	r2, r9, r2
 801184c:	420a      	tst	r2, r1
 801184e:	d003      	beq.n	8011858 <__gethex+0x1ac>
 8011850:	454b      	cmp	r3, r9
 8011852:	dc36      	bgt.n	80118c2 <__gethex+0x216>
 8011854:	f04f 0902 	mov.w	r9, #2
 8011858:	4629      	mov	r1, r5
 801185a:	4620      	mov	r0, r4
 801185c:	f7ff febe 	bl	80115dc <rshift>
 8011860:	442f      	add	r7, r5
 8011862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011866:	42bb      	cmp	r3, r7
 8011868:	da42      	bge.n	80118f0 <__gethex+0x244>
 801186a:	9801      	ldr	r0, [sp, #4]
 801186c:	4621      	mov	r1, r4
 801186e:	f7fe f94b 	bl	800fb08 <_Bfree>
 8011872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011874:	2300      	movs	r3, #0
 8011876:	6013      	str	r3, [r2, #0]
 8011878:	25a3      	movs	r5, #163	@ 0xa3
 801187a:	e793      	b.n	80117a4 <__gethex+0xf8>
 801187c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011880:	2a2e      	cmp	r2, #46	@ 0x2e
 8011882:	d012      	beq.n	80118aa <__gethex+0x1fe>
 8011884:	2b20      	cmp	r3, #32
 8011886:	d104      	bne.n	8011892 <__gethex+0x1e6>
 8011888:	f845 bb04 	str.w	fp, [r5], #4
 801188c:	f04f 0b00 	mov.w	fp, #0
 8011890:	465b      	mov	r3, fp
 8011892:	7830      	ldrb	r0, [r6, #0]
 8011894:	9303      	str	r3, [sp, #12]
 8011896:	f7ff fef3 	bl	8011680 <__hexdig_fun>
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	f000 000f 	and.w	r0, r0, #15
 80118a0:	4098      	lsls	r0, r3
 80118a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80118a6:	3304      	adds	r3, #4
 80118a8:	e7ae      	b.n	8011808 <__gethex+0x15c>
 80118aa:	45b1      	cmp	r9, r6
 80118ac:	d8ea      	bhi.n	8011884 <__gethex+0x1d8>
 80118ae:	492b      	ldr	r1, [pc, #172]	@ (801195c <__gethex+0x2b0>)
 80118b0:	9303      	str	r3, [sp, #12]
 80118b2:	2201      	movs	r2, #1
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff fe33 	bl	8011520 <strncmp>
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	2800      	cmp	r0, #0
 80118be:	d1e1      	bne.n	8011884 <__gethex+0x1d8>
 80118c0:	e7a2      	b.n	8011808 <__gethex+0x15c>
 80118c2:	1ea9      	subs	r1, r5, #2
 80118c4:	4620      	mov	r0, r4
 80118c6:	f7fe fd68 	bl	801039a <__any_on>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d0c2      	beq.n	8011854 <__gethex+0x1a8>
 80118ce:	f04f 0903 	mov.w	r9, #3
 80118d2:	e7c1      	b.n	8011858 <__gethex+0x1ac>
 80118d4:	da09      	bge.n	80118ea <__gethex+0x23e>
 80118d6:	1b75      	subs	r5, r6, r5
 80118d8:	4621      	mov	r1, r4
 80118da:	9801      	ldr	r0, [sp, #4]
 80118dc:	462a      	mov	r2, r5
 80118de:	f7fe fb23 	bl	800ff28 <__lshift>
 80118e2:	1b7f      	subs	r7, r7, r5
 80118e4:	4604      	mov	r4, r0
 80118e6:	f100 0a14 	add.w	sl, r0, #20
 80118ea:	f04f 0900 	mov.w	r9, #0
 80118ee:	e7b8      	b.n	8011862 <__gethex+0x1b6>
 80118f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118f4:	42bd      	cmp	r5, r7
 80118f6:	dd6f      	ble.n	80119d8 <__gethex+0x32c>
 80118f8:	1bed      	subs	r5, r5, r7
 80118fa:	42ae      	cmp	r6, r5
 80118fc:	dc34      	bgt.n	8011968 <__gethex+0x2bc>
 80118fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011902:	2b02      	cmp	r3, #2
 8011904:	d022      	beq.n	801194c <__gethex+0x2a0>
 8011906:	2b03      	cmp	r3, #3
 8011908:	d024      	beq.n	8011954 <__gethex+0x2a8>
 801190a:	2b01      	cmp	r3, #1
 801190c:	d115      	bne.n	801193a <__gethex+0x28e>
 801190e:	42ae      	cmp	r6, r5
 8011910:	d113      	bne.n	801193a <__gethex+0x28e>
 8011912:	2e01      	cmp	r6, #1
 8011914:	d10b      	bne.n	801192e <__gethex+0x282>
 8011916:	9a02      	ldr	r2, [sp, #8]
 8011918:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801191c:	6013      	str	r3, [r2, #0]
 801191e:	2301      	movs	r3, #1
 8011920:	6123      	str	r3, [r4, #16]
 8011922:	f8ca 3000 	str.w	r3, [sl]
 8011926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011928:	2562      	movs	r5, #98	@ 0x62
 801192a:	601c      	str	r4, [r3, #0]
 801192c:	e73a      	b.n	80117a4 <__gethex+0xf8>
 801192e:	1e71      	subs	r1, r6, #1
 8011930:	4620      	mov	r0, r4
 8011932:	f7fe fd32 	bl	801039a <__any_on>
 8011936:	2800      	cmp	r0, #0
 8011938:	d1ed      	bne.n	8011916 <__gethex+0x26a>
 801193a:	9801      	ldr	r0, [sp, #4]
 801193c:	4621      	mov	r1, r4
 801193e:	f7fe f8e3 	bl	800fb08 <_Bfree>
 8011942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011944:	2300      	movs	r3, #0
 8011946:	6013      	str	r3, [r2, #0]
 8011948:	2550      	movs	r5, #80	@ 0x50
 801194a:	e72b      	b.n	80117a4 <__gethex+0xf8>
 801194c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1f3      	bne.n	801193a <__gethex+0x28e>
 8011952:	e7e0      	b.n	8011916 <__gethex+0x26a>
 8011954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1dd      	bne.n	8011916 <__gethex+0x26a>
 801195a:	e7ee      	b.n	801193a <__gethex+0x28e>
 801195c:	080129b7 	.word	0x080129b7
 8011960:	0801294d 	.word	0x0801294d
 8011964:	08012a0e 	.word	0x08012a0e
 8011968:	1e6f      	subs	r7, r5, #1
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	d130      	bne.n	80119d2 <__gethex+0x326>
 8011970:	b127      	cbz	r7, 801197c <__gethex+0x2d0>
 8011972:	4639      	mov	r1, r7
 8011974:	4620      	mov	r0, r4
 8011976:	f7fe fd10 	bl	801039a <__any_on>
 801197a:	4681      	mov	r9, r0
 801197c:	117a      	asrs	r2, r7, #5
 801197e:	2301      	movs	r3, #1
 8011980:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011984:	f007 071f 	and.w	r7, r7, #31
 8011988:	40bb      	lsls	r3, r7
 801198a:	4213      	tst	r3, r2
 801198c:	4629      	mov	r1, r5
 801198e:	4620      	mov	r0, r4
 8011990:	bf18      	it	ne
 8011992:	f049 0902 	orrne.w	r9, r9, #2
 8011996:	f7ff fe21 	bl	80115dc <rshift>
 801199a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801199e:	1b76      	subs	r6, r6, r5
 80119a0:	2502      	movs	r5, #2
 80119a2:	f1b9 0f00 	cmp.w	r9, #0
 80119a6:	d047      	beq.n	8011a38 <__gethex+0x38c>
 80119a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119ac:	2b02      	cmp	r3, #2
 80119ae:	d015      	beq.n	80119dc <__gethex+0x330>
 80119b0:	2b03      	cmp	r3, #3
 80119b2:	d017      	beq.n	80119e4 <__gethex+0x338>
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d109      	bne.n	80119cc <__gethex+0x320>
 80119b8:	f019 0f02 	tst.w	r9, #2
 80119bc:	d006      	beq.n	80119cc <__gethex+0x320>
 80119be:	f8da 3000 	ldr.w	r3, [sl]
 80119c2:	ea49 0903 	orr.w	r9, r9, r3
 80119c6:	f019 0f01 	tst.w	r9, #1
 80119ca:	d10e      	bne.n	80119ea <__gethex+0x33e>
 80119cc:	f045 0510 	orr.w	r5, r5, #16
 80119d0:	e032      	b.n	8011a38 <__gethex+0x38c>
 80119d2:	f04f 0901 	mov.w	r9, #1
 80119d6:	e7d1      	b.n	801197c <__gethex+0x2d0>
 80119d8:	2501      	movs	r5, #1
 80119da:	e7e2      	b.n	80119a2 <__gethex+0x2f6>
 80119dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119de:	f1c3 0301 	rsb	r3, r3, #1
 80119e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d0f0      	beq.n	80119cc <__gethex+0x320>
 80119ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80119ee:	f104 0314 	add.w	r3, r4, #20
 80119f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80119f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80119fa:	f04f 0c00 	mov.w	ip, #0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011a08:	d01b      	beq.n	8011a42 <__gethex+0x396>
 8011a0a:	3201      	adds	r2, #1
 8011a0c:	6002      	str	r2, [r0, #0]
 8011a0e:	2d02      	cmp	r5, #2
 8011a10:	f104 0314 	add.w	r3, r4, #20
 8011a14:	d13c      	bne.n	8011a90 <__gethex+0x3e4>
 8011a16:	f8d8 2000 	ldr.w	r2, [r8]
 8011a1a:	3a01      	subs	r2, #1
 8011a1c:	42b2      	cmp	r2, r6
 8011a1e:	d109      	bne.n	8011a34 <__gethex+0x388>
 8011a20:	1171      	asrs	r1, r6, #5
 8011a22:	2201      	movs	r2, #1
 8011a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a28:	f006 061f 	and.w	r6, r6, #31
 8011a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8011a30:	421e      	tst	r6, r3
 8011a32:	d13a      	bne.n	8011aaa <__gethex+0x3fe>
 8011a34:	f045 0520 	orr.w	r5, r5, #32
 8011a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a3a:	601c      	str	r4, [r3, #0]
 8011a3c:	9b02      	ldr	r3, [sp, #8]
 8011a3e:	601f      	str	r7, [r3, #0]
 8011a40:	e6b0      	b.n	80117a4 <__gethex+0xf8>
 8011a42:	4299      	cmp	r1, r3
 8011a44:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a48:	d8d9      	bhi.n	80119fe <__gethex+0x352>
 8011a4a:	68a3      	ldr	r3, [r4, #8]
 8011a4c:	459b      	cmp	fp, r3
 8011a4e:	db17      	blt.n	8011a80 <__gethex+0x3d4>
 8011a50:	6861      	ldr	r1, [r4, #4]
 8011a52:	9801      	ldr	r0, [sp, #4]
 8011a54:	3101      	adds	r1, #1
 8011a56:	f7fe f817 	bl	800fa88 <_Balloc>
 8011a5a:	4681      	mov	r9, r0
 8011a5c:	b918      	cbnz	r0, 8011a66 <__gethex+0x3ba>
 8011a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ac8 <__gethex+0x41c>)
 8011a60:	4602      	mov	r2, r0
 8011a62:	2184      	movs	r1, #132	@ 0x84
 8011a64:	e6c5      	b.n	80117f2 <__gethex+0x146>
 8011a66:	6922      	ldr	r2, [r4, #16]
 8011a68:	3202      	adds	r2, #2
 8011a6a:	f104 010c 	add.w	r1, r4, #12
 8011a6e:	0092      	lsls	r2, r2, #2
 8011a70:	300c      	adds	r0, #12
 8011a72:	f7fd f89c 	bl	800ebae <memcpy>
 8011a76:	4621      	mov	r1, r4
 8011a78:	9801      	ldr	r0, [sp, #4]
 8011a7a:	f7fe f845 	bl	800fb08 <_Bfree>
 8011a7e:	464c      	mov	r4, r9
 8011a80:	6923      	ldr	r3, [r4, #16]
 8011a82:	1c5a      	adds	r2, r3, #1
 8011a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a88:	6122      	str	r2, [r4, #16]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	615a      	str	r2, [r3, #20]
 8011a8e:	e7be      	b.n	8011a0e <__gethex+0x362>
 8011a90:	6922      	ldr	r2, [r4, #16]
 8011a92:	455a      	cmp	r2, fp
 8011a94:	dd0b      	ble.n	8011aae <__gethex+0x402>
 8011a96:	2101      	movs	r1, #1
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f7ff fd9f 	bl	80115dc <rshift>
 8011a9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011aa2:	3701      	adds	r7, #1
 8011aa4:	42bb      	cmp	r3, r7
 8011aa6:	f6ff aee0 	blt.w	801186a <__gethex+0x1be>
 8011aaa:	2501      	movs	r5, #1
 8011aac:	e7c2      	b.n	8011a34 <__gethex+0x388>
 8011aae:	f016 061f 	ands.w	r6, r6, #31
 8011ab2:	d0fa      	beq.n	8011aaa <__gethex+0x3fe>
 8011ab4:	4453      	add	r3, sl
 8011ab6:	f1c6 0620 	rsb	r6, r6, #32
 8011aba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011abe:	f7fe f8d5 	bl	800fc6c <__hi0bits>
 8011ac2:	42b0      	cmp	r0, r6
 8011ac4:	dbe7      	blt.n	8011a96 <__gethex+0x3ea>
 8011ac6:	e7f0      	b.n	8011aaa <__gethex+0x3fe>
 8011ac8:	0801294d 	.word	0x0801294d

08011acc <L_shift>:
 8011acc:	f1c2 0208 	rsb	r2, r2, #8
 8011ad0:	0092      	lsls	r2, r2, #2
 8011ad2:	b570      	push	{r4, r5, r6, lr}
 8011ad4:	f1c2 0620 	rsb	r6, r2, #32
 8011ad8:	6843      	ldr	r3, [r0, #4]
 8011ada:	6804      	ldr	r4, [r0, #0]
 8011adc:	fa03 f506 	lsl.w	r5, r3, r6
 8011ae0:	432c      	orrs	r4, r5
 8011ae2:	40d3      	lsrs	r3, r2
 8011ae4:	6004      	str	r4, [r0, #0]
 8011ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011aea:	4288      	cmp	r0, r1
 8011aec:	d3f4      	bcc.n	8011ad8 <L_shift+0xc>
 8011aee:	bd70      	pop	{r4, r5, r6, pc}

08011af0 <__match>:
 8011af0:	b530      	push	{r4, r5, lr}
 8011af2:	6803      	ldr	r3, [r0, #0]
 8011af4:	3301      	adds	r3, #1
 8011af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011afa:	b914      	cbnz	r4, 8011b02 <__match+0x12>
 8011afc:	6003      	str	r3, [r0, #0]
 8011afe:	2001      	movs	r0, #1
 8011b00:	bd30      	pop	{r4, r5, pc}
 8011b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011b0a:	2d19      	cmp	r5, #25
 8011b0c:	bf98      	it	ls
 8011b0e:	3220      	addls	r2, #32
 8011b10:	42a2      	cmp	r2, r4
 8011b12:	d0f0      	beq.n	8011af6 <__match+0x6>
 8011b14:	2000      	movs	r0, #0
 8011b16:	e7f3      	b.n	8011b00 <__match+0x10>

08011b18 <__hexnan>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	680b      	ldr	r3, [r1, #0]
 8011b1e:	6801      	ldr	r1, [r0, #0]
 8011b20:	115e      	asrs	r6, r3, #5
 8011b22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011b26:	f013 031f 	ands.w	r3, r3, #31
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	bf18      	it	ne
 8011b2e:	3604      	addne	r6, #4
 8011b30:	2500      	movs	r5, #0
 8011b32:	1f37      	subs	r7, r6, #4
 8011b34:	4682      	mov	sl, r0
 8011b36:	4690      	mov	r8, r2
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011b3e:	46b9      	mov	r9, r7
 8011b40:	463c      	mov	r4, r7
 8011b42:	9502      	str	r5, [sp, #8]
 8011b44:	46ab      	mov	fp, r5
 8011b46:	784a      	ldrb	r2, [r1, #1]
 8011b48:	1c4b      	adds	r3, r1, #1
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	b342      	cbz	r2, 8011ba0 <__hexnan+0x88>
 8011b4e:	4610      	mov	r0, r2
 8011b50:	9105      	str	r1, [sp, #20]
 8011b52:	9204      	str	r2, [sp, #16]
 8011b54:	f7ff fd94 	bl	8011680 <__hexdig_fun>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d151      	bne.n	8011c00 <__hexnan+0xe8>
 8011b5c:	9a04      	ldr	r2, [sp, #16]
 8011b5e:	9905      	ldr	r1, [sp, #20]
 8011b60:	2a20      	cmp	r2, #32
 8011b62:	d818      	bhi.n	8011b96 <__hexnan+0x7e>
 8011b64:	9b02      	ldr	r3, [sp, #8]
 8011b66:	459b      	cmp	fp, r3
 8011b68:	dd13      	ble.n	8011b92 <__hexnan+0x7a>
 8011b6a:	454c      	cmp	r4, r9
 8011b6c:	d206      	bcs.n	8011b7c <__hexnan+0x64>
 8011b6e:	2d07      	cmp	r5, #7
 8011b70:	dc04      	bgt.n	8011b7c <__hexnan+0x64>
 8011b72:	462a      	mov	r2, r5
 8011b74:	4649      	mov	r1, r9
 8011b76:	4620      	mov	r0, r4
 8011b78:	f7ff ffa8 	bl	8011acc <L_shift>
 8011b7c:	4544      	cmp	r4, r8
 8011b7e:	d952      	bls.n	8011c26 <__hexnan+0x10e>
 8011b80:	2300      	movs	r3, #0
 8011b82:	f1a4 0904 	sub.w	r9, r4, #4
 8011b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b8a:	f8cd b008 	str.w	fp, [sp, #8]
 8011b8e:	464c      	mov	r4, r9
 8011b90:	461d      	mov	r5, r3
 8011b92:	9903      	ldr	r1, [sp, #12]
 8011b94:	e7d7      	b.n	8011b46 <__hexnan+0x2e>
 8011b96:	2a29      	cmp	r2, #41	@ 0x29
 8011b98:	d157      	bne.n	8011c4a <__hexnan+0x132>
 8011b9a:	3102      	adds	r1, #2
 8011b9c:	f8ca 1000 	str.w	r1, [sl]
 8011ba0:	f1bb 0f00 	cmp.w	fp, #0
 8011ba4:	d051      	beq.n	8011c4a <__hexnan+0x132>
 8011ba6:	454c      	cmp	r4, r9
 8011ba8:	d206      	bcs.n	8011bb8 <__hexnan+0xa0>
 8011baa:	2d07      	cmp	r5, #7
 8011bac:	dc04      	bgt.n	8011bb8 <__hexnan+0xa0>
 8011bae:	462a      	mov	r2, r5
 8011bb0:	4649      	mov	r1, r9
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7ff ff8a 	bl	8011acc <L_shift>
 8011bb8:	4544      	cmp	r4, r8
 8011bba:	d936      	bls.n	8011c2a <__hexnan+0x112>
 8011bbc:	f1a8 0204 	sub.w	r2, r8, #4
 8011bc0:	4623      	mov	r3, r4
 8011bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011bc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011bca:	429f      	cmp	r7, r3
 8011bcc:	d2f9      	bcs.n	8011bc2 <__hexnan+0xaa>
 8011bce:	1b3b      	subs	r3, r7, r4
 8011bd0:	f023 0303 	bic.w	r3, r3, #3
 8011bd4:	3304      	adds	r3, #4
 8011bd6:	3401      	adds	r4, #1
 8011bd8:	3e03      	subs	r6, #3
 8011bda:	42b4      	cmp	r4, r6
 8011bdc:	bf88      	it	hi
 8011bde:	2304      	movhi	r3, #4
 8011be0:	4443      	add	r3, r8
 8011be2:	2200      	movs	r2, #0
 8011be4:	f843 2b04 	str.w	r2, [r3], #4
 8011be8:	429f      	cmp	r7, r3
 8011bea:	d2fb      	bcs.n	8011be4 <__hexnan+0xcc>
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	b91b      	cbnz	r3, 8011bf8 <__hexnan+0xe0>
 8011bf0:	4547      	cmp	r7, r8
 8011bf2:	d128      	bne.n	8011c46 <__hexnan+0x12e>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	2005      	movs	r0, #5
 8011bfa:	b007      	add	sp, #28
 8011bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c00:	3501      	adds	r5, #1
 8011c02:	2d08      	cmp	r5, #8
 8011c04:	f10b 0b01 	add.w	fp, fp, #1
 8011c08:	dd06      	ble.n	8011c18 <__hexnan+0x100>
 8011c0a:	4544      	cmp	r4, r8
 8011c0c:	d9c1      	bls.n	8011b92 <__hexnan+0x7a>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c14:	2501      	movs	r5, #1
 8011c16:	3c04      	subs	r4, #4
 8011c18:	6822      	ldr	r2, [r4, #0]
 8011c1a:	f000 000f 	and.w	r0, r0, #15
 8011c1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011c22:	6020      	str	r0, [r4, #0]
 8011c24:	e7b5      	b.n	8011b92 <__hexnan+0x7a>
 8011c26:	2508      	movs	r5, #8
 8011c28:	e7b3      	b.n	8011b92 <__hexnan+0x7a>
 8011c2a:	9b01      	ldr	r3, [sp, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d0dd      	beq.n	8011bec <__hexnan+0xd4>
 8011c30:	f1c3 0320 	rsb	r3, r3, #32
 8011c34:	f04f 32ff 	mov.w	r2, #4294967295
 8011c38:	40da      	lsrs	r2, r3
 8011c3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011c3e:	4013      	ands	r3, r2
 8011c40:	f846 3c04 	str.w	r3, [r6, #-4]
 8011c44:	e7d2      	b.n	8011bec <__hexnan+0xd4>
 8011c46:	3f04      	subs	r7, #4
 8011c48:	e7d0      	b.n	8011bec <__hexnan+0xd4>
 8011c4a:	2004      	movs	r0, #4
 8011c4c:	e7d5      	b.n	8011bfa <__hexnan+0xe2>

08011c4e <__ascii_mbtowc>:
 8011c4e:	b082      	sub	sp, #8
 8011c50:	b901      	cbnz	r1, 8011c54 <__ascii_mbtowc+0x6>
 8011c52:	a901      	add	r1, sp, #4
 8011c54:	b142      	cbz	r2, 8011c68 <__ascii_mbtowc+0x1a>
 8011c56:	b14b      	cbz	r3, 8011c6c <__ascii_mbtowc+0x1e>
 8011c58:	7813      	ldrb	r3, [r2, #0]
 8011c5a:	600b      	str	r3, [r1, #0]
 8011c5c:	7812      	ldrb	r2, [r2, #0]
 8011c5e:	1e10      	subs	r0, r2, #0
 8011c60:	bf18      	it	ne
 8011c62:	2001      	movne	r0, #1
 8011c64:	b002      	add	sp, #8
 8011c66:	4770      	bx	lr
 8011c68:	4610      	mov	r0, r2
 8011c6a:	e7fb      	b.n	8011c64 <__ascii_mbtowc+0x16>
 8011c6c:	f06f 0001 	mvn.w	r0, #1
 8011c70:	e7f8      	b.n	8011c64 <__ascii_mbtowc+0x16>

08011c72 <_realloc_r>:
 8011c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c76:	4607      	mov	r7, r0
 8011c78:	4614      	mov	r4, r2
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	b921      	cbnz	r1, 8011c88 <_realloc_r+0x16>
 8011c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c82:	4611      	mov	r1, r2
 8011c84:	f7fd be74 	b.w	800f970 <_malloc_r>
 8011c88:	b92a      	cbnz	r2, 8011c96 <_realloc_r+0x24>
 8011c8a:	f7fd fdfd 	bl	800f888 <_free_r>
 8011c8e:	4625      	mov	r5, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c96:	f000 f840 	bl	8011d1a <_malloc_usable_size_r>
 8011c9a:	4284      	cmp	r4, r0
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	d802      	bhi.n	8011ca6 <_realloc_r+0x34>
 8011ca0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ca4:	d8f4      	bhi.n	8011c90 <_realloc_r+0x1e>
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	4638      	mov	r0, r7
 8011caa:	f7fd fe61 	bl	800f970 <_malloc_r>
 8011cae:	4680      	mov	r8, r0
 8011cb0:	b908      	cbnz	r0, 8011cb6 <_realloc_r+0x44>
 8011cb2:	4645      	mov	r5, r8
 8011cb4:	e7ec      	b.n	8011c90 <_realloc_r+0x1e>
 8011cb6:	42b4      	cmp	r4, r6
 8011cb8:	4622      	mov	r2, r4
 8011cba:	4629      	mov	r1, r5
 8011cbc:	bf28      	it	cs
 8011cbe:	4632      	movcs	r2, r6
 8011cc0:	f7fc ff75 	bl	800ebae <memcpy>
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	f7fd fdde 	bl	800f888 <_free_r>
 8011ccc:	e7f1      	b.n	8011cb2 <_realloc_r+0x40>

08011cce <__ascii_wctomb>:
 8011cce:	4603      	mov	r3, r0
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	b141      	cbz	r1, 8011ce6 <__ascii_wctomb+0x18>
 8011cd4:	2aff      	cmp	r2, #255	@ 0xff
 8011cd6:	d904      	bls.n	8011ce2 <__ascii_wctomb+0x14>
 8011cd8:	228a      	movs	r2, #138	@ 0x8a
 8011cda:	601a      	str	r2, [r3, #0]
 8011cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce0:	4770      	bx	lr
 8011ce2:	700a      	strb	r2, [r1, #0]
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	4770      	bx	lr

08011ce8 <fiprintf>:
 8011ce8:	b40e      	push	{r1, r2, r3}
 8011cea:	b503      	push	{r0, r1, lr}
 8011cec:	4601      	mov	r1, r0
 8011cee:	ab03      	add	r3, sp, #12
 8011cf0:	4805      	ldr	r0, [pc, #20]	@ (8011d08 <fiprintf+0x20>)
 8011cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf6:	6800      	ldr	r0, [r0, #0]
 8011cf8:	9301      	str	r3, [sp, #4]
 8011cfa:	f000 f83f 	bl	8011d7c <_vfiprintf_r>
 8011cfe:	b002      	add	sp, #8
 8011d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d04:	b003      	add	sp, #12
 8011d06:	4770      	bx	lr
 8011d08:	2000001c 	.word	0x2000001c

08011d0c <abort>:
 8011d0c:	b508      	push	{r3, lr}
 8011d0e:	2006      	movs	r0, #6
 8011d10:	f000 fa08 	bl	8012124 <raise>
 8011d14:	2001      	movs	r0, #1
 8011d16:	f7f0 fdb7 	bl	8002888 <_exit>

08011d1a <_malloc_usable_size_r>:
 8011d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d1e:	1f18      	subs	r0, r3, #4
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	bfbc      	itt	lt
 8011d24:	580b      	ldrlt	r3, [r1, r0]
 8011d26:	18c0      	addlt	r0, r0, r3
 8011d28:	4770      	bx	lr

08011d2a <__sfputc_r>:
 8011d2a:	6893      	ldr	r3, [r2, #8]
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	b410      	push	{r4}
 8011d32:	6093      	str	r3, [r2, #8]
 8011d34:	da08      	bge.n	8011d48 <__sfputc_r+0x1e>
 8011d36:	6994      	ldr	r4, [r2, #24]
 8011d38:	42a3      	cmp	r3, r4
 8011d3a:	db01      	blt.n	8011d40 <__sfputc_r+0x16>
 8011d3c:	290a      	cmp	r1, #10
 8011d3e:	d103      	bne.n	8011d48 <__sfputc_r+0x1e>
 8011d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d44:	f000 b932 	b.w	8011fac <__swbuf_r>
 8011d48:	6813      	ldr	r3, [r2, #0]
 8011d4a:	1c58      	adds	r0, r3, #1
 8011d4c:	6010      	str	r0, [r2, #0]
 8011d4e:	7019      	strb	r1, [r3, #0]
 8011d50:	4608      	mov	r0, r1
 8011d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <__sfputs_r>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	460f      	mov	r7, r1
 8011d5e:	4614      	mov	r4, r2
 8011d60:	18d5      	adds	r5, r2, r3
 8011d62:	42ac      	cmp	r4, r5
 8011d64:	d101      	bne.n	8011d6a <__sfputs_r+0x12>
 8011d66:	2000      	movs	r0, #0
 8011d68:	e007      	b.n	8011d7a <__sfputs_r+0x22>
 8011d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d6e:	463a      	mov	r2, r7
 8011d70:	4630      	mov	r0, r6
 8011d72:	f7ff ffda 	bl	8011d2a <__sfputc_r>
 8011d76:	1c43      	adds	r3, r0, #1
 8011d78:	d1f3      	bne.n	8011d62 <__sfputs_r+0xa>
 8011d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d7c <_vfiprintf_r>:
 8011d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d80:	460d      	mov	r5, r1
 8011d82:	b09d      	sub	sp, #116	@ 0x74
 8011d84:	4614      	mov	r4, r2
 8011d86:	4698      	mov	r8, r3
 8011d88:	4606      	mov	r6, r0
 8011d8a:	b118      	cbz	r0, 8011d94 <_vfiprintf_r+0x18>
 8011d8c:	6a03      	ldr	r3, [r0, #32]
 8011d8e:	b90b      	cbnz	r3, 8011d94 <_vfiprintf_r+0x18>
 8011d90:	f7fc fdf2 	bl	800e978 <__sinit>
 8011d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d96:	07d9      	lsls	r1, r3, #31
 8011d98:	d405      	bmi.n	8011da6 <_vfiprintf_r+0x2a>
 8011d9a:	89ab      	ldrh	r3, [r5, #12]
 8011d9c:	059a      	lsls	r2, r3, #22
 8011d9e:	d402      	bmi.n	8011da6 <_vfiprintf_r+0x2a>
 8011da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011da2:	f7fc ff02 	bl	800ebaa <__retarget_lock_acquire_recursive>
 8011da6:	89ab      	ldrh	r3, [r5, #12]
 8011da8:	071b      	lsls	r3, r3, #28
 8011daa:	d501      	bpl.n	8011db0 <_vfiprintf_r+0x34>
 8011dac:	692b      	ldr	r3, [r5, #16]
 8011dae:	b99b      	cbnz	r3, 8011dd8 <_vfiprintf_r+0x5c>
 8011db0:	4629      	mov	r1, r5
 8011db2:	4630      	mov	r0, r6
 8011db4:	f000 f938 	bl	8012028 <__swsetup_r>
 8011db8:	b170      	cbz	r0, 8011dd8 <_vfiprintf_r+0x5c>
 8011dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dbc:	07dc      	lsls	r4, r3, #31
 8011dbe:	d504      	bpl.n	8011dca <_vfiprintf_r+0x4e>
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc4:	b01d      	add	sp, #116	@ 0x74
 8011dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dca:	89ab      	ldrh	r3, [r5, #12]
 8011dcc:	0598      	lsls	r0, r3, #22
 8011dce:	d4f7      	bmi.n	8011dc0 <_vfiprintf_r+0x44>
 8011dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dd2:	f7fc feeb 	bl	800ebac <__retarget_lock_release_recursive>
 8011dd6:	e7f3      	b.n	8011dc0 <_vfiprintf_r+0x44>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ddc:	2320      	movs	r3, #32
 8011dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011de6:	2330      	movs	r3, #48	@ 0x30
 8011de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011f98 <_vfiprintf_r+0x21c>
 8011dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011df0:	f04f 0901 	mov.w	r9, #1
 8011df4:	4623      	mov	r3, r4
 8011df6:	469a      	mov	sl, r3
 8011df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfc:	b10a      	cbz	r2, 8011e02 <_vfiprintf_r+0x86>
 8011dfe:	2a25      	cmp	r2, #37	@ 0x25
 8011e00:	d1f9      	bne.n	8011df6 <_vfiprintf_r+0x7a>
 8011e02:	ebba 0b04 	subs.w	fp, sl, r4
 8011e06:	d00b      	beq.n	8011e20 <_vfiprintf_r+0xa4>
 8011e08:	465b      	mov	r3, fp
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ffa2 	bl	8011d58 <__sfputs_r>
 8011e14:	3001      	adds	r0, #1
 8011e16:	f000 80a7 	beq.w	8011f68 <_vfiprintf_r+0x1ec>
 8011e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e1c:	445a      	add	r2, fp
 8011e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e20:	f89a 3000 	ldrb.w	r3, [sl]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f000 809f 	beq.w	8011f68 <_vfiprintf_r+0x1ec>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e34:	f10a 0a01 	add.w	sl, sl, #1
 8011e38:	9304      	str	r3, [sp, #16]
 8011e3a:	9307      	str	r3, [sp, #28]
 8011e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e42:	4654      	mov	r4, sl
 8011e44:	2205      	movs	r2, #5
 8011e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e4a:	4853      	ldr	r0, [pc, #332]	@ (8011f98 <_vfiprintf_r+0x21c>)
 8011e4c:	f7ee f9c0 	bl	80001d0 <memchr>
 8011e50:	9a04      	ldr	r2, [sp, #16]
 8011e52:	b9d8      	cbnz	r0, 8011e8c <_vfiprintf_r+0x110>
 8011e54:	06d1      	lsls	r1, r2, #27
 8011e56:	bf44      	itt	mi
 8011e58:	2320      	movmi	r3, #32
 8011e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e5e:	0713      	lsls	r3, r2, #28
 8011e60:	bf44      	itt	mi
 8011e62:	232b      	movmi	r3, #43	@ 0x2b
 8011e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e68:	f89a 3000 	ldrb.w	r3, [sl]
 8011e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e6e:	d015      	beq.n	8011e9c <_vfiprintf_r+0x120>
 8011e70:	9a07      	ldr	r2, [sp, #28]
 8011e72:	4654      	mov	r4, sl
 8011e74:	2000      	movs	r0, #0
 8011e76:	f04f 0c0a 	mov.w	ip, #10
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e80:	3b30      	subs	r3, #48	@ 0x30
 8011e82:	2b09      	cmp	r3, #9
 8011e84:	d94b      	bls.n	8011f1e <_vfiprintf_r+0x1a2>
 8011e86:	b1b0      	cbz	r0, 8011eb6 <_vfiprintf_r+0x13a>
 8011e88:	9207      	str	r2, [sp, #28]
 8011e8a:	e014      	b.n	8011eb6 <_vfiprintf_r+0x13a>
 8011e8c:	eba0 0308 	sub.w	r3, r0, r8
 8011e90:	fa09 f303 	lsl.w	r3, r9, r3
 8011e94:	4313      	orrs	r3, r2
 8011e96:	9304      	str	r3, [sp, #16]
 8011e98:	46a2      	mov	sl, r4
 8011e9a:	e7d2      	b.n	8011e42 <_vfiprintf_r+0xc6>
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	1d19      	adds	r1, r3, #4
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	9103      	str	r1, [sp, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	bfbb      	ittet	lt
 8011ea8:	425b      	neglt	r3, r3
 8011eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8011eae:	9307      	strge	r3, [sp, #28]
 8011eb0:	9307      	strlt	r3, [sp, #28]
 8011eb2:	bfb8      	it	lt
 8011eb4:	9204      	strlt	r2, [sp, #16]
 8011eb6:	7823      	ldrb	r3, [r4, #0]
 8011eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011eba:	d10a      	bne.n	8011ed2 <_vfiprintf_r+0x156>
 8011ebc:	7863      	ldrb	r3, [r4, #1]
 8011ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ec0:	d132      	bne.n	8011f28 <_vfiprintf_r+0x1ac>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	1d1a      	adds	r2, r3, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	9203      	str	r2, [sp, #12]
 8011eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ece:	3402      	adds	r4, #2
 8011ed0:	9305      	str	r3, [sp, #20]
 8011ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011fa8 <_vfiprintf_r+0x22c>
 8011ed6:	7821      	ldrb	r1, [r4, #0]
 8011ed8:	2203      	movs	r2, #3
 8011eda:	4650      	mov	r0, sl
 8011edc:	f7ee f978 	bl	80001d0 <memchr>
 8011ee0:	b138      	cbz	r0, 8011ef2 <_vfiprintf_r+0x176>
 8011ee2:	9b04      	ldr	r3, [sp, #16]
 8011ee4:	eba0 000a 	sub.w	r0, r0, sl
 8011ee8:	2240      	movs	r2, #64	@ 0x40
 8011eea:	4082      	lsls	r2, r0
 8011eec:	4313      	orrs	r3, r2
 8011eee:	3401      	adds	r4, #1
 8011ef0:	9304      	str	r3, [sp, #16]
 8011ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ef6:	4829      	ldr	r0, [pc, #164]	@ (8011f9c <_vfiprintf_r+0x220>)
 8011ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011efc:	2206      	movs	r2, #6
 8011efe:	f7ee f967 	bl	80001d0 <memchr>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	d03f      	beq.n	8011f86 <_vfiprintf_r+0x20a>
 8011f06:	4b26      	ldr	r3, [pc, #152]	@ (8011fa0 <_vfiprintf_r+0x224>)
 8011f08:	bb1b      	cbnz	r3, 8011f52 <_vfiprintf_r+0x1d6>
 8011f0a:	9b03      	ldr	r3, [sp, #12]
 8011f0c:	3307      	adds	r3, #7
 8011f0e:	f023 0307 	bic.w	r3, r3, #7
 8011f12:	3308      	adds	r3, #8
 8011f14:	9303      	str	r3, [sp, #12]
 8011f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f18:	443b      	add	r3, r7
 8011f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f1c:	e76a      	b.n	8011df4 <_vfiprintf_r+0x78>
 8011f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f22:	460c      	mov	r4, r1
 8011f24:	2001      	movs	r0, #1
 8011f26:	e7a8      	b.n	8011e7a <_vfiprintf_r+0xfe>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	3401      	adds	r4, #1
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	4619      	mov	r1, r3
 8011f30:	f04f 0c0a 	mov.w	ip, #10
 8011f34:	4620      	mov	r0, r4
 8011f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f3a:	3a30      	subs	r2, #48	@ 0x30
 8011f3c:	2a09      	cmp	r2, #9
 8011f3e:	d903      	bls.n	8011f48 <_vfiprintf_r+0x1cc>
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d0c6      	beq.n	8011ed2 <_vfiprintf_r+0x156>
 8011f44:	9105      	str	r1, [sp, #20]
 8011f46:	e7c4      	b.n	8011ed2 <_vfiprintf_r+0x156>
 8011f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e7f0      	b.n	8011f34 <_vfiprintf_r+0x1b8>
 8011f52:	ab03      	add	r3, sp, #12
 8011f54:	9300      	str	r3, [sp, #0]
 8011f56:	462a      	mov	r2, r5
 8011f58:	4b12      	ldr	r3, [pc, #72]	@ (8011fa4 <_vfiprintf_r+0x228>)
 8011f5a:	a904      	add	r1, sp, #16
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f7fb febb 	bl	800dcd8 <_printf_float>
 8011f62:	4607      	mov	r7, r0
 8011f64:	1c78      	adds	r0, r7, #1
 8011f66:	d1d6      	bne.n	8011f16 <_vfiprintf_r+0x19a>
 8011f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011f6a:	07d9      	lsls	r1, r3, #31
 8011f6c:	d405      	bmi.n	8011f7a <_vfiprintf_r+0x1fe>
 8011f6e:	89ab      	ldrh	r3, [r5, #12]
 8011f70:	059a      	lsls	r2, r3, #22
 8011f72:	d402      	bmi.n	8011f7a <_vfiprintf_r+0x1fe>
 8011f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011f76:	f7fc fe19 	bl	800ebac <__retarget_lock_release_recursive>
 8011f7a:	89ab      	ldrh	r3, [r5, #12]
 8011f7c:	065b      	lsls	r3, r3, #25
 8011f7e:	f53f af1f 	bmi.w	8011dc0 <_vfiprintf_r+0x44>
 8011f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f84:	e71e      	b.n	8011dc4 <_vfiprintf_r+0x48>
 8011f86:	ab03      	add	r3, sp, #12
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	462a      	mov	r2, r5
 8011f8c:	4b05      	ldr	r3, [pc, #20]	@ (8011fa4 <_vfiprintf_r+0x228>)
 8011f8e:	a904      	add	r1, sp, #16
 8011f90:	4630      	mov	r0, r6
 8011f92:	f7fc f939 	bl	800e208 <_printf_i>
 8011f96:	e7e4      	b.n	8011f62 <_vfiprintf_r+0x1e6>
 8011f98:	080129b9 	.word	0x080129b9
 8011f9c:	080129c3 	.word	0x080129c3
 8011fa0:	0800dcd9 	.word	0x0800dcd9
 8011fa4:	08011d59 	.word	0x08011d59
 8011fa8:	080129bf 	.word	0x080129bf

08011fac <__swbuf_r>:
 8011fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fae:	460e      	mov	r6, r1
 8011fb0:	4614      	mov	r4, r2
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	b118      	cbz	r0, 8011fbe <__swbuf_r+0x12>
 8011fb6:	6a03      	ldr	r3, [r0, #32]
 8011fb8:	b90b      	cbnz	r3, 8011fbe <__swbuf_r+0x12>
 8011fba:	f7fc fcdd 	bl	800e978 <__sinit>
 8011fbe:	69a3      	ldr	r3, [r4, #24]
 8011fc0:	60a3      	str	r3, [r4, #8]
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	071a      	lsls	r2, r3, #28
 8011fc6:	d501      	bpl.n	8011fcc <__swbuf_r+0x20>
 8011fc8:	6923      	ldr	r3, [r4, #16]
 8011fca:	b943      	cbnz	r3, 8011fde <__swbuf_r+0x32>
 8011fcc:	4621      	mov	r1, r4
 8011fce:	4628      	mov	r0, r5
 8011fd0:	f000 f82a 	bl	8012028 <__swsetup_r>
 8011fd4:	b118      	cbz	r0, 8011fde <__swbuf_r+0x32>
 8011fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8011fda:	4638      	mov	r0, r7
 8011fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	6922      	ldr	r2, [r4, #16]
 8011fe2:	1a98      	subs	r0, r3, r2
 8011fe4:	6963      	ldr	r3, [r4, #20]
 8011fe6:	b2f6      	uxtb	r6, r6
 8011fe8:	4283      	cmp	r3, r0
 8011fea:	4637      	mov	r7, r6
 8011fec:	dc05      	bgt.n	8011ffa <__swbuf_r+0x4e>
 8011fee:	4621      	mov	r1, r4
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	f7ff fa53 	bl	801149c <_fflush_r>
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d1ed      	bne.n	8011fd6 <__swbuf_r+0x2a>
 8011ffa:	68a3      	ldr	r3, [r4, #8]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	60a3      	str	r3, [r4, #8]
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	1c5a      	adds	r2, r3, #1
 8012004:	6022      	str	r2, [r4, #0]
 8012006:	701e      	strb	r6, [r3, #0]
 8012008:	6962      	ldr	r2, [r4, #20]
 801200a:	1c43      	adds	r3, r0, #1
 801200c:	429a      	cmp	r2, r3
 801200e:	d004      	beq.n	801201a <__swbuf_r+0x6e>
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	07db      	lsls	r3, r3, #31
 8012014:	d5e1      	bpl.n	8011fda <__swbuf_r+0x2e>
 8012016:	2e0a      	cmp	r6, #10
 8012018:	d1df      	bne.n	8011fda <__swbuf_r+0x2e>
 801201a:	4621      	mov	r1, r4
 801201c:	4628      	mov	r0, r5
 801201e:	f7ff fa3d 	bl	801149c <_fflush_r>
 8012022:	2800      	cmp	r0, #0
 8012024:	d0d9      	beq.n	8011fda <__swbuf_r+0x2e>
 8012026:	e7d6      	b.n	8011fd6 <__swbuf_r+0x2a>

08012028 <__swsetup_r>:
 8012028:	b538      	push	{r3, r4, r5, lr}
 801202a:	4b29      	ldr	r3, [pc, #164]	@ (80120d0 <__swsetup_r+0xa8>)
 801202c:	4605      	mov	r5, r0
 801202e:	6818      	ldr	r0, [r3, #0]
 8012030:	460c      	mov	r4, r1
 8012032:	b118      	cbz	r0, 801203c <__swsetup_r+0x14>
 8012034:	6a03      	ldr	r3, [r0, #32]
 8012036:	b90b      	cbnz	r3, 801203c <__swsetup_r+0x14>
 8012038:	f7fc fc9e 	bl	800e978 <__sinit>
 801203c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012040:	0719      	lsls	r1, r3, #28
 8012042:	d422      	bmi.n	801208a <__swsetup_r+0x62>
 8012044:	06da      	lsls	r2, r3, #27
 8012046:	d407      	bmi.n	8012058 <__swsetup_r+0x30>
 8012048:	2209      	movs	r2, #9
 801204a:	602a      	str	r2, [r5, #0]
 801204c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012050:	81a3      	strh	r3, [r4, #12]
 8012052:	f04f 30ff 	mov.w	r0, #4294967295
 8012056:	e033      	b.n	80120c0 <__swsetup_r+0x98>
 8012058:	0758      	lsls	r0, r3, #29
 801205a:	d512      	bpl.n	8012082 <__swsetup_r+0x5a>
 801205c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801205e:	b141      	cbz	r1, 8012072 <__swsetup_r+0x4a>
 8012060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012064:	4299      	cmp	r1, r3
 8012066:	d002      	beq.n	801206e <__swsetup_r+0x46>
 8012068:	4628      	mov	r0, r5
 801206a:	f7fd fc0d 	bl	800f888 <_free_r>
 801206e:	2300      	movs	r3, #0
 8012070:	6363      	str	r3, [r4, #52]	@ 0x34
 8012072:	89a3      	ldrh	r3, [r4, #12]
 8012074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	2300      	movs	r3, #0
 801207c:	6063      	str	r3, [r4, #4]
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	6023      	str	r3, [r4, #0]
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	f043 0308 	orr.w	r3, r3, #8
 8012088:	81a3      	strh	r3, [r4, #12]
 801208a:	6923      	ldr	r3, [r4, #16]
 801208c:	b94b      	cbnz	r3, 80120a2 <__swsetup_r+0x7a>
 801208e:	89a3      	ldrh	r3, [r4, #12]
 8012090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012098:	d003      	beq.n	80120a2 <__swsetup_r+0x7a>
 801209a:	4621      	mov	r1, r4
 801209c:	4628      	mov	r0, r5
 801209e:	f000 f883 	bl	80121a8 <__smakebuf_r>
 80120a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120a6:	f013 0201 	ands.w	r2, r3, #1
 80120aa:	d00a      	beq.n	80120c2 <__swsetup_r+0x9a>
 80120ac:	2200      	movs	r2, #0
 80120ae:	60a2      	str	r2, [r4, #8]
 80120b0:	6962      	ldr	r2, [r4, #20]
 80120b2:	4252      	negs	r2, r2
 80120b4:	61a2      	str	r2, [r4, #24]
 80120b6:	6922      	ldr	r2, [r4, #16]
 80120b8:	b942      	cbnz	r2, 80120cc <__swsetup_r+0xa4>
 80120ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120be:	d1c5      	bne.n	801204c <__swsetup_r+0x24>
 80120c0:	bd38      	pop	{r3, r4, r5, pc}
 80120c2:	0799      	lsls	r1, r3, #30
 80120c4:	bf58      	it	pl
 80120c6:	6962      	ldrpl	r2, [r4, #20]
 80120c8:	60a2      	str	r2, [r4, #8]
 80120ca:	e7f4      	b.n	80120b6 <__swsetup_r+0x8e>
 80120cc:	2000      	movs	r0, #0
 80120ce:	e7f7      	b.n	80120c0 <__swsetup_r+0x98>
 80120d0:	2000001c 	.word	0x2000001c

080120d4 <_raise_r>:
 80120d4:	291f      	cmp	r1, #31
 80120d6:	b538      	push	{r3, r4, r5, lr}
 80120d8:	4605      	mov	r5, r0
 80120da:	460c      	mov	r4, r1
 80120dc:	d904      	bls.n	80120e8 <_raise_r+0x14>
 80120de:	2316      	movs	r3, #22
 80120e0:	6003      	str	r3, [r0, #0]
 80120e2:	f04f 30ff 	mov.w	r0, #4294967295
 80120e6:	bd38      	pop	{r3, r4, r5, pc}
 80120e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80120ea:	b112      	cbz	r2, 80120f2 <_raise_r+0x1e>
 80120ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120f0:	b94b      	cbnz	r3, 8012106 <_raise_r+0x32>
 80120f2:	4628      	mov	r0, r5
 80120f4:	f000 f830 	bl	8012158 <_getpid_r>
 80120f8:	4622      	mov	r2, r4
 80120fa:	4601      	mov	r1, r0
 80120fc:	4628      	mov	r0, r5
 80120fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012102:	f000 b817 	b.w	8012134 <_kill_r>
 8012106:	2b01      	cmp	r3, #1
 8012108:	d00a      	beq.n	8012120 <_raise_r+0x4c>
 801210a:	1c59      	adds	r1, r3, #1
 801210c:	d103      	bne.n	8012116 <_raise_r+0x42>
 801210e:	2316      	movs	r3, #22
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	2001      	movs	r0, #1
 8012114:	e7e7      	b.n	80120e6 <_raise_r+0x12>
 8012116:	2100      	movs	r1, #0
 8012118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801211c:	4620      	mov	r0, r4
 801211e:	4798      	blx	r3
 8012120:	2000      	movs	r0, #0
 8012122:	e7e0      	b.n	80120e6 <_raise_r+0x12>

08012124 <raise>:
 8012124:	4b02      	ldr	r3, [pc, #8]	@ (8012130 <raise+0xc>)
 8012126:	4601      	mov	r1, r0
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	f7ff bfd3 	b.w	80120d4 <_raise_r>
 801212e:	bf00      	nop
 8012130:	2000001c 	.word	0x2000001c

08012134 <_kill_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	4d07      	ldr	r5, [pc, #28]	@ (8012154 <_kill_r+0x20>)
 8012138:	2300      	movs	r3, #0
 801213a:	4604      	mov	r4, r0
 801213c:	4608      	mov	r0, r1
 801213e:	4611      	mov	r1, r2
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	f7f0 fb91 	bl	8002868 <_kill>
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	d102      	bne.n	8012150 <_kill_r+0x1c>
 801214a:	682b      	ldr	r3, [r5, #0]
 801214c:	b103      	cbz	r3, 8012150 <_kill_r+0x1c>
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	bd38      	pop	{r3, r4, r5, pc}
 8012152:	bf00      	nop
 8012154:	20004618 	.word	0x20004618

08012158 <_getpid_r>:
 8012158:	f7f0 bb7e 	b.w	8002858 <_getpid>

0801215c <__swhatbuf_r>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	460c      	mov	r4, r1
 8012160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012164:	2900      	cmp	r1, #0
 8012166:	b096      	sub	sp, #88	@ 0x58
 8012168:	4615      	mov	r5, r2
 801216a:	461e      	mov	r6, r3
 801216c:	da0d      	bge.n	801218a <__swhatbuf_r+0x2e>
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012174:	f04f 0100 	mov.w	r1, #0
 8012178:	bf14      	ite	ne
 801217a:	2340      	movne	r3, #64	@ 0x40
 801217c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012180:	2000      	movs	r0, #0
 8012182:	6031      	str	r1, [r6, #0]
 8012184:	602b      	str	r3, [r5, #0]
 8012186:	b016      	add	sp, #88	@ 0x58
 8012188:	bd70      	pop	{r4, r5, r6, pc}
 801218a:	466a      	mov	r2, sp
 801218c:	f000 f848 	bl	8012220 <_fstat_r>
 8012190:	2800      	cmp	r0, #0
 8012192:	dbec      	blt.n	801216e <__swhatbuf_r+0x12>
 8012194:	9901      	ldr	r1, [sp, #4]
 8012196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801219a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801219e:	4259      	negs	r1, r3
 80121a0:	4159      	adcs	r1, r3
 80121a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121a6:	e7eb      	b.n	8012180 <__swhatbuf_r+0x24>

080121a8 <__smakebuf_r>:
 80121a8:	898b      	ldrh	r3, [r1, #12]
 80121aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121ac:	079d      	lsls	r5, r3, #30
 80121ae:	4606      	mov	r6, r0
 80121b0:	460c      	mov	r4, r1
 80121b2:	d507      	bpl.n	80121c4 <__smakebuf_r+0x1c>
 80121b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121b8:	6023      	str	r3, [r4, #0]
 80121ba:	6123      	str	r3, [r4, #16]
 80121bc:	2301      	movs	r3, #1
 80121be:	6163      	str	r3, [r4, #20]
 80121c0:	b003      	add	sp, #12
 80121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c4:	ab01      	add	r3, sp, #4
 80121c6:	466a      	mov	r2, sp
 80121c8:	f7ff ffc8 	bl	801215c <__swhatbuf_r>
 80121cc:	9f00      	ldr	r7, [sp, #0]
 80121ce:	4605      	mov	r5, r0
 80121d0:	4639      	mov	r1, r7
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7fd fbcc 	bl	800f970 <_malloc_r>
 80121d8:	b948      	cbnz	r0, 80121ee <__smakebuf_r+0x46>
 80121da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121de:	059a      	lsls	r2, r3, #22
 80121e0:	d4ee      	bmi.n	80121c0 <__smakebuf_r+0x18>
 80121e2:	f023 0303 	bic.w	r3, r3, #3
 80121e6:	f043 0302 	orr.w	r3, r3, #2
 80121ea:	81a3      	strh	r3, [r4, #12]
 80121ec:	e7e2      	b.n	80121b4 <__smakebuf_r+0xc>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	6020      	str	r0, [r4, #0]
 80121f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121f6:	81a3      	strh	r3, [r4, #12]
 80121f8:	9b01      	ldr	r3, [sp, #4]
 80121fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121fe:	b15b      	cbz	r3, 8012218 <__smakebuf_r+0x70>
 8012200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012204:	4630      	mov	r0, r6
 8012206:	f000 f81d 	bl	8012244 <_isatty_r>
 801220a:	b128      	cbz	r0, 8012218 <__smakebuf_r+0x70>
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	f023 0303 	bic.w	r3, r3, #3
 8012212:	f043 0301 	orr.w	r3, r3, #1
 8012216:	81a3      	strh	r3, [r4, #12]
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	431d      	orrs	r5, r3
 801221c:	81a5      	strh	r5, [r4, #12]
 801221e:	e7cf      	b.n	80121c0 <__smakebuf_r+0x18>

08012220 <_fstat_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d07      	ldr	r5, [pc, #28]	@ (8012240 <_fstat_r+0x20>)
 8012224:	2300      	movs	r3, #0
 8012226:	4604      	mov	r4, r0
 8012228:	4608      	mov	r0, r1
 801222a:	4611      	mov	r1, r2
 801222c:	602b      	str	r3, [r5, #0]
 801222e:	f7f0 fb7b 	bl	8002928 <_fstat>
 8012232:	1c43      	adds	r3, r0, #1
 8012234:	d102      	bne.n	801223c <_fstat_r+0x1c>
 8012236:	682b      	ldr	r3, [r5, #0]
 8012238:	b103      	cbz	r3, 801223c <_fstat_r+0x1c>
 801223a:	6023      	str	r3, [r4, #0]
 801223c:	bd38      	pop	{r3, r4, r5, pc}
 801223e:	bf00      	nop
 8012240:	20004618 	.word	0x20004618

08012244 <_isatty_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4d06      	ldr	r5, [pc, #24]	@ (8012260 <_isatty_r+0x1c>)
 8012248:	2300      	movs	r3, #0
 801224a:	4604      	mov	r4, r0
 801224c:	4608      	mov	r0, r1
 801224e:	602b      	str	r3, [r5, #0]
 8012250:	f7f0 fb7a 	bl	8002948 <_isatty>
 8012254:	1c43      	adds	r3, r0, #1
 8012256:	d102      	bne.n	801225e <_isatty_r+0x1a>
 8012258:	682b      	ldr	r3, [r5, #0]
 801225a:	b103      	cbz	r3, 801225e <_isatty_r+0x1a>
 801225c:	6023      	str	r3, [r4, #0]
 801225e:	bd38      	pop	{r3, r4, r5, pc}
 8012260:	20004618 	.word	0x20004618

08012264 <_init>:
 8012264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012266:	bf00      	nop
 8012268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801226a:	bc08      	pop	{r3}
 801226c:	469e      	mov	lr, r3
 801226e:	4770      	bx	lr

08012270 <_fini>:
 8012270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012272:	bf00      	nop
 8012274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012276:	bc08      	pop	{r3}
 8012278:	469e      	mov	lr, r3
 801227a:	4770      	bx	lr
