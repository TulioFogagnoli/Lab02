
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baa4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800bc34  0800bc34  0000cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c16c  0800c16c  0000e010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c16c  0800c16c  0000d16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c174  0800c174  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c174  0800c174  0000d174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c178  0800c178  0000d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800c17c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e010  2**0
                  CONTENTS
 10 .bss          000042cc  20000010  20000010  0000e010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042dc  200042dc  0000e010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc53  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004757  00000000  00000000  0002dc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001776  00000000  00000000  000341f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264f7  00000000  00000000  00035966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a84  00000000  00000000  0005be5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfb51  00000000  00000000  000818e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161432  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f90  00000000  00000000  00161478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00169408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc1c 	.word	0x0800bc1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800bc1c 	.word	0x0800bc1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fdd3 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f829 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f9dd 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000552:	f000 f9b3 	bl	80008bc <MX_DMA_Init>
  MX_I2C1_Init();
 8000556:	f000 f88d 	bl	8000674 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800055a:	f000 f8b9 	bl	80006d0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800055e:	f000 f8d9 	bl	8000714 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000562:	f000 f90d 	bl	8000780 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f97f 	bl	8000868 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800056a:	f005 f9ff 	bl	800596c <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <main+0x58>)
 8000570:	1d3c      	adds	r4, r7, #4
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f008 fbfb 	bl	8008d80 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <main+0x5c>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f008 fbd3 	bl	8008d3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x54>
 8000598:	0800bc40 	.word	0x0800bc40
 800059c:	20000500 	.word	0x20000500

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	@ 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00b fafa 	bl	800bba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	@ (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	@ (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	@ (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	@ 0xa8
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fd9b 	bl	8002160 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 fa9a 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fffc 	bl	8002650 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 fa83 	bl	8000b68 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 fc11 	bl	8001ed8 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fa54 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000280 	.word	0x20000280
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <MX_SDIO_SD_Init+0x40>)
 80006d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006f8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80006fa:	4b04      	ldr	r3, [pc, #16]	@ (800070c <MX_SDIO_SD_Init+0x3c>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	619a      	str	r2, [r3, #24]
  // 	Error_Handler();
  // }
  //__HAL_RCC_SDIO_CLK_ENABLE();
  /* USER CODE END SDIO_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200002d4 	.word	0x200002d4
 8000710:	40012c00 	.word	0x40012c00

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_SPI1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	@ (800077c <MX_SPI1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000734:	2202      	movs	r2, #2
 8000736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_SPI1_Init+0x64>)
 800073a:	2201      	movs	r2, #1
 800073c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000760:	220a      	movs	r2, #10
 8000762:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_SPI1_Init+0x64>)
 8000766:	f003 fa2b 	bl	8003bc0 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000770:	f000 f9fa 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000418 	.word	0x20000418
 800077c:	40013000 	.word	0x40013000

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000864 <MX_TIM1_Init+0xe4>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d6:	4822      	ldr	r0, [pc, #136]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007d8:	f003 fa7b 	bl	8003cd2 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80007e2:	f000 f9c1 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4619      	mov	r1, r3
 80007f2:	481b      	ldr	r0, [pc, #108]	@ (8000860 <MX_TIM1_Init+0xe0>)
 80007f4:	f003 fca1 	bl	800413a <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007fe:	f000 f9b3 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000802:	4817      	ldr	r0, [pc, #92]	@ (8000860 <MX_TIM1_Init+0xe0>)
 8000804:	f003 fab4 	bl	8003d70 <HAL_TIM_IC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800080e:	f000 f9ab 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <MX_TIM1_Init+0xe0>)
 8000822:	f003 ffed 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800082c:	f000 f99c 	bl	8000b68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_TIM1_Init+0xe0>)
 8000848:	f003 fbdb 	bl	8004002 <HAL_TIM_IC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000852:	f000 f989 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000470 	.word	0x20000470
 8000864:	40010000 	.word	0x40010000

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART1_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 80008a0:	f004 f83e 	bl	8004920 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f95d 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200004b8 	.word	0x200004b8
 80008b8:	40011000 	.word	0x40011000

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_DMA_Init+0x4c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000908 <MX_DMA_Init+0x4c>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_DMA_Init+0x4c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	203b      	movs	r0, #59	@ 0x3b
 80008e4:	f000 fd75 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008e8:	203b      	movs	r0, #59	@ 0x3b
 80008ea:	f000 fd8e 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	2045      	movs	r0, #69	@ 0x45
 80008f4:	f000 fd6d 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008f8:	2045      	movs	r0, #69	@ 0x45
 80008fa:	f000 fd86 	bl	800140a <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b4f      	ldr	r3, [pc, #316]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a4e      	ldr	r2, [pc, #312]	@ (8000a64 <MX_GPIO_Init+0x158>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b4c      	ldr	r3, [pc, #304]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b41      	ldr	r3, [pc, #260]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a40      	ldr	r2, [pc, #256]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <MX_GPIO_Init+0x158>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a64 <MX_GPIO_Init+0x158>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a39      	ldr	r2, [pc, #228]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a32      	ldr	r2, [pc, #200]	@ (8000a64 <MX_GPIO_Init+0x158>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <MX_GPIO_Init+0x158>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <MX_GPIO_Init+0x158>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <MX_GPIO_Init+0x158>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2130      	movs	r1, #48	@ 0x30
 80009ce:	4826      	ldr	r0, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0x15c>)
 80009d0:	f001 fa4e 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	4824      	ldr	r0, [pc, #144]	@ (8000a6c <MX_GPIO_Init+0x160>)
 80009da:	f001 fa49 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80009e4:	4822      	ldr	r0, [pc, #136]	@ (8000a70 <MX_GPIO_Init+0x164>)
 80009e6:	f001 fa43 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 80009ea:	2330      	movs	r3, #48	@ 0x30
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4819      	ldr	r0, [pc, #100]	@ (8000a68 <MX_GPIO_Init+0x15c>)
 8000a02:	f001 f899 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <MX_GPIO_Init+0x160>)
 8000a1e:	f001 f88b 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_TRIG_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin;
 8000a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HC_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <MX_GPIO_Init+0x168>)
 8000a38:	f001 f87e 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin;
 8000a3c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <MX_GPIO_Init+0x164>)
 8000a56:	f001 f86f 	bl	8001b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	@ 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40021000 	.word	0x40021000

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	f5ad 6d96 	sub.w	sp, sp, #1200	@ 0x4b0
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000a84:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 8000a88:	6018      	str	r0, [r3, #0]
	FRESULT res;
	UINT bytesWritten;
	// A variável SDPath é o caminho correto para o drive (geralmente "0:")
	extern char SDPath[4];

	char writeBuffer[] = "Sucesso! O cartao SD esta funcionando com FATFS!";
 8000a8a:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000a8e:	f2a3 43a4 	subw	r3, r3, #1188	@ 0x4a4
 8000a92:	4a31      	ldr	r2, [pc, #196]	@ (8000b58 <StartDefaultTask+0xe0>)
 8000a94:	461c      	mov	r4, r3
 8000a96:	4615      	mov	r5, r2
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	7023      	strb	r3, [r4, #0]

	// Um pequeno delay para garantir que tudo estabilizou
	osDelay(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aac:	f008 f9b4 	bl	8008e18 <osDelay>

	// 1. Monta o sistema de arquivos
	res = f_mount(&myFATFS, (TCHAR const*)SDPath, 1);
 8000ab0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4929      	ldr	r1, [pc, #164]	@ (8000b5c <StartDefaultTask+0xe4>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 faf9 	bl	80080b0 <f_mount>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
	if (res != FR_OK)
 8000ac4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <StartDefaultTask+0x68>
	{
	  // Falha ao montar - Pisca LED de erro (PD15)
	  while(1)
	  {
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000acc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad0:	4823      	ldr	r0, [pc, #140]	@ (8000b60 <StartDefaultTask+0xe8>)
 8000ad2:	f001 f9e6 	bl	8001ea2 <HAL_GPIO_TogglePin>
		osDelay(200);
 8000ad6:	20c8      	movs	r0, #200	@ 0xc8
 8000ad8:	f008 f99e 	bl	8008e18 <osDelay>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000adc:	bf00      	nop
 8000ade:	e7f5      	b.n	8000acc <StartDefaultTask+0x54>
	  }
	}

	// 2. Abre (ou cria) um arquivo para escrita
	res = f_open(&myFILE, "log.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000ae0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	491f      	ldr	r1, [pc, #124]	@ (8000b64 <StartDefaultTask+0xec>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f007 fb45 	bl	8008178 <f_open>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
	if (res != FR_OK)
 8000af4:	f897 34af 	ldrb.w	r3, [r7, #1199]	@ 0x4af
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00a      	beq.n	8000b12 <StartDefaultTask+0x9a>
	{
	  // Falha ao abrir o arquivo - Pisca LED de erro (PD15)
	  while(1)
	  {
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b00:	4817      	ldr	r0, [pc, #92]	@ (8000b60 <StartDefaultTask+0xe8>)
 8000b02:	f001 f9ce 	bl	8001ea2 <HAL_GPIO_TogglePin>
		osDelay(400);
 8000b06:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000b0a:	f008 f985 	bl	8008e18 <osDelay>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000b0e:	bf00      	nop
 8000b10:	e7f4      	b.n	8000afc <StartDefaultTask+0x84>
	  }
	}

	// 3. Escreve no arquivo
	f_write(&myFILE, writeBuffer, strlen(writeBuffer), &bytesWritten);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb5a 	bl	80001d0 <strlen>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8000b22:	f107 010c 	add.w	r1, r7, #12
 8000b26:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000b2a:	f007 fcfb 	bl	8008524 <f_write>

	// 4. Fecha o arquivo (MUITO IMPORTANTE!)
	f_close(&myFILE);
 8000b2e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 ff23 	bl	800897e <f_close>

	// 5. Desmonta o sistema de arquivos (boa prática)
	f_mount(NULL, (TCHAR const*)SDPath, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <StartDefaultTask+0xe4>)
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f007 fab7 	bl	80080b0 <f_mount>

	// Se tudo deu certo, acende o LED de sucesso (PD14) permanentemente
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <StartDefaultTask+0xe8>)
 8000b4a:	f001 f991 	bl	8001e70 <HAL_GPIO_WritePin>

	// Suspende a tarefa, pois o teste foi concluído com sucesso
	osThreadSuspend(NULL);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f008 fb1c 	bl	800918c <osThreadSuspend>
  {
 8000b54:	e799      	b.n	8000a8a <StartDefaultTask+0x12>
 8000b56:	bf00      	nop
 8000b58:	0800bc64 	.word	0x0800bc64
 8000b5c:	2000050c 	.word	0x2000050c
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	0800bc5c 	.word	0x0800bc5c

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_MspInit+0x54>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	f06f 0001 	mvn.w	r0, #1
 8000bba:	f000 fc0a 	bl	80013d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	@ (8000c50 <HAL_I2C_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MP_SCL_Pin|MP_SDA_Pin;
 8000c0a:	23c0      	movs	r3, #192	@ 0xc0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <HAL_I2C_MspInit+0x8c>)
 8000c26:	f000 ff87 	bl	8001b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	@ 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400

08000c5c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a64      	ldr	r2, [pc, #400]	@ (8000e0c <HAL_SD_MspInit+0x1b0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f040 80c1 	bne.w	8000e02 <HAL_SD_MspInit+0x1a6>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b62      	ldr	r3, [pc, #392]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c88:	4a61      	ldr	r2, [pc, #388]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000c8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c90:	4b5f      	ldr	r3, [pc, #380]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cac:	4b58      	ldr	r3, [pc, #352]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b54      	ldr	r3, [pc, #336]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	4a53      	ldr	r2, [pc, #332]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc8:	4b51      	ldr	r3, [pc, #324]	@ (8000e10 <HAL_SD_MspInit+0x1b4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cd4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000cd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4848      	ldr	r0, [pc, #288]	@ (8000e14 <HAL_SD_MspInit+0x1b8>)
 8000cf2:	f000 ff21 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d06:	230c      	movs	r3, #12
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4841      	ldr	r0, [pc, #260]	@ (8000e18 <HAL_SD_MspInit+0x1bc>)
 8000d12:	f000 ff11 	bl	8001b38 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d16:	4b41      	ldr	r3, [pc, #260]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d18:	4a41      	ldr	r2, [pc, #260]	@ (8000e20 <HAL_SD_MspInit+0x1c4>)
 8000d1a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d22:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d24:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d30:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d36:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d38:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d3e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d40:	4b36      	ldr	r3, [pc, #216]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d46:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d48:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	4b33      	ldr	r3, [pc, #204]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d5a:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d60:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d62:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d68:	4b2c      	ldr	r3, [pc, #176]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d6a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d70:	482a      	ldr	r0, [pc, #168]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d72:	f000 fb65 	bl	8001440 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d7c:	f7ff fef4 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a26      	ldr	r2, [pc, #152]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d86:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <HAL_SD_MspInit+0x1c0>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d8c:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000d8e:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_SD_MspInit+0x1cc>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000d94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000d9c:	2240      	movs	r2, #64	@ 0x40
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dac:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000db0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000db8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dbc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000de0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000de6:	480f      	ldr	r0, [pc, #60]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000de8:	f000 fb2a 	bl	8001440 <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000df2:	f7ff feb9 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dfc:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_SD_MspInit+0x1c8>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	20000358 	.word	0x20000358
 8000e20:	40026458 	.word	0x40026458
 8000e24:	200003b8 	.word	0x200003b8
 8000e28:	400264a0 	.word	0x400264a0

08000e2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <HAL_SPI_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8000e86:	23e0      	movs	r3, #224	@ 0xe0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e96:	2305      	movs	r3, #5
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	f000 fe49 	bl	8001b38 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <HAL_TIM_Base_MspInit+0x94>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d134      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_TIM_Base_MspInit+0x98>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_ECHO_Pin;
 8000f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <HAL_TIM_Base_MspInit+0x9c>)
 8000f34:	f000 fe00 	bl	8001b38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	201b      	movs	r0, #27
 8000f3e:	f000 fa48 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f42:	201b      	movs	r0, #27
 8000f44:	f000 fa61 	bl	800140a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010000 	.word	0x40010000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <HAL_UART_MspInit+0x84>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d12c      	bne.n	8000fd8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_UART_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <HAL_UART_MspInit+0x8c>)
 8000fd4:	f000 fdb0 	bl	8001b38 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f8b5 	bl	8001194 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800102a:	f009 ff59 	bl	800aee0 <xTaskGetSchedulerState>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d001      	beq.n	8001038 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001034:	f00a fb38 	bl	800b6a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <TIM1_CC_IRQHandler+0x10>)
 8001042:	f002 feee 	bl	8003e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000470 	.word	0x20000470

08001050 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <DMA2_Stream3_IRQHandler+0x10>)
 8001056:	f000 faf9 	bl	800164c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000358 	.word	0x20000358

08001064 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <DMA2_Stream6_IRQHandler+0x10>)
 800106a:	f000 faef 	bl	800164c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200003b8 	.word	0x200003b8

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f00a fd75 	bl	800bbb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fa37 	bl	8000540 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010e0:	0800c17c 	.word	0x0800c17c
  ldr r2, =_sbss
 80010e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010e8:	200042dc 	.word	0x200042dc

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f94f 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	200f      	movs	r0, #15
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fd26 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f967 	bl	8001426 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f92f 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000504 	.word	0x20000504

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000504 	.word	0x20000504

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff feb6 	bl	80011bc <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e099      	b.n	8001590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147c:	e00f      	b.n	800149e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147e:	f7ff fe9d 	bl	80011bc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b05      	cmp	r3, #5
 800148a:	d908      	bls.n	800149e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e078      	b.n	8001590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e8      	bne.n	800147e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_DMA_Init+0x158>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d107      	bne.n	8001508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001500:	4313      	orrs	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	2b04      	cmp	r3, #4
 8001530:	d117      	bne.n	8001562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fa7b 	bl	8001a40 <DMA_CheckFifoParam>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2240      	movs	r2, #64	@ 0x40
 8001554:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800155e:	2301      	movs	r3, #1
 8001560:	e016      	b.n	8001590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fa32 	bl	80019d4 <DMA_CalcBaseAndBitshift>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	223f      	movs	r2, #63	@ 0x3f
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f010803f 	.word	0xf010803f

0800159c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_Start_IT+0x26>
 80015be:	2302      	movs	r3, #2
 80015c0:	e040      	b.n	8001644 <HAL_DMA_Start_IT+0xa8>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d12f      	bne.n	8001636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f9c4 	bl	8001978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	223f      	movs	r2, #63	@ 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0216 	orr.w	r2, r2, #22
 800160a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0208 	orr.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e005      	b.n	8001642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001658:	4b8e      	ldr	r3, [pc, #568]	@ (8001894 <HAL_DMA_IRQHandler+0x248>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a8e      	ldr	r2, [pc, #568]	@ (8001898 <HAL_DMA_IRQHandler+0x24c>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0a9b      	lsrs	r3, r3, #10
 8001664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	2208      	movs	r2, #8
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01a      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0204 	bic.w	r2, r2, #4
 800169e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	2201      	movs	r2, #1
 80016be:	409a      	lsls	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d012      	beq.n	80016ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016da:	2201      	movs	r2, #1
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e6:	f043 0202 	orr.w	r2, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f2:	2204      	movs	r2, #4
 80016f4:	409a      	lsls	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d012      	beq.n	8001724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001710:	2204      	movs	r2, #4
 8001712:	409a      	lsls	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	f043 0204 	orr.w	r2, r3, #4
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001728:	2210      	movs	r2, #16
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d043      	beq.n	80017bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d03c      	beq.n	80017bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	2210      	movs	r2, #16
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d018      	beq.n	800178e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d024      	beq.n	80017bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
 800177a:	e01f      	b.n	80017bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
 800178c:	e016      	b.n	80017bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0208 	bic.w	r2, r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	2220      	movs	r2, #32
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 808f 	beq.w	80018ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8087 	beq.w	80018ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e2:	2220      	movs	r2, #32
 80017e4:	409a      	lsls	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d136      	bne.n	8001864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0216 	bic.w	r2, r2, #22
 8001804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <HAL_DMA_IRQHandler+0x1da>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0208 	bic.w	r2, r2, #8
 8001834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183a:	223f      	movs	r2, #63	@ 0x3f
 800183c:	409a      	lsls	r2, r3
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001856:	2b00      	cmp	r3, #0
 8001858:	d07e      	beq.n	8001958 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
        }
        return;
 8001862:	e079      	b.n	8001958 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001884:	2b00      	cmp	r3, #0
 8001886:	d031      	beq.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
 8001890:	e02c      	b.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
 8001892:	bf00      	nop
 8001894:	20000000 	.word	0x20000000
 8001898:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e01e      	b.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10f      	bne.n	80018dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0210 	bic.w	r2, r2, #16
 80018ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d032      	beq.n	800195a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2205      	movs	r2, #5
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d307      	bcc.n	8001934 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f2      	bne.n	8001918 <HAL_DMA_IRQHandler+0x2cc>
 8001932:	e000      	b.n	8001936 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001934:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
 8001956:	e000      	b.n	800195a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001958:	bf00      	nop
    }
  }
}
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b40      	cmp	r3, #64	@ 0x40
 80019a4:	d108      	bne.n	80019b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019b6:	e007      	b.n	80019c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3b10      	subs	r3, #16
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <DMA_CalcBaseAndBitshift+0x64>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <DMA_CalcBaseAndBitshift+0x68>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d909      	bls.n	8001a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	1d1a      	adds	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a14:	e007      	b.n	8001a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	aaaaaaab 	.word	0xaaaaaaab
 8001a3c:	0800bd10 	.word	0x0800bd10

08001a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d856      	bhi.n	8001b0e <DMA_CheckFifoParam+0xce>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <DMA_CheckFifoParam+0x28>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a8b 	.word	0x08001a8b
 8001a70:	08001a79 	.word	0x08001a79
 8001a74:	08001b0f 	.word	0x08001b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d046      	beq.n	8001b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a88:	e043      	b.n	8001b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a92:	d140      	bne.n	8001b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a98:	e03d      	b.n	8001b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aa2:	d121      	bne.n	8001ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d837      	bhi.n	8001b1a <DMA_CheckFifoParam+0xda>
 8001aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <DMA_CheckFifoParam+0x70>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ac7 	.word	0x08001ac7
 8001ab8:	08001ac1 	.word	0x08001ac1
 8001abc:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e030      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d025      	beq.n	8001b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad6:	e022      	b.n	8001b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ae0:	d11f      	bne.n	8001b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ae6:	e01c      	b.n	8001b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d903      	bls.n	8001af6 <DMA_CheckFifoParam+0xb6>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d003      	beq.n	8001afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001af4:	e018      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
      break;
 8001afa:	e015      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0c:	e00b      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b0e:	bf00      	nop
 8001b10:	e00a      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b12:	bf00      	nop
 8001b14:	e008      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b16:	bf00      	nop
 8001b18:	e006      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e004      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e002      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b22:	bf00      	nop
 8001b24:	e000      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
    }
  } 
  
  return status; 
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e16b      	b.n	8001e2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 815a 	bne.w	8001e26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d130      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80b4 	beq.w	8001e26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b60      	ldr	r3, [pc, #384]	@ (8001e44 <HAL_GPIO_Init+0x30c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e44 <HAL_GPIO_Init+0x30c>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <HAL_GPIO_Init+0x30c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a5b      	ldr	r2, [pc, #364]	@ (8001e48 <HAL_GPIO_Init+0x310>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_GPIO_Init+0x314>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a51      	ldr	r2, [pc, #324]	@ (8001e50 <HAL_GPIO_Init+0x318>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a50      	ldr	r2, [pc, #320]	@ (8001e54 <HAL_GPIO_Init+0x31c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	@ (8001e58 <HAL_GPIO_Init+0x320>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	@ (8001e60 <HAL_GPIO_Init+0x328>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <HAL_GPIO_Init+0x32c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	@ (8001e68 <HAL_GPIO_Init+0x330>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x20a>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e00e      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d42:	2308      	movs	r3, #8
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x228>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <HAL_GPIO_Init+0x310>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a32      	ldr	r2, [pc, #200]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <HAL_GPIO_Init+0x334>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f ae90 	bls.w	8001b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40021c00 	.word	0x40021c00
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	041a      	lsls	r2, r3, #16
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	619a      	str	r2, [r3, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e12b      	b.n	8002142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fe64 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	@ 0x24
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f3c:	f000 fd80 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8001f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a81      	ldr	r2, [pc, #516]	@ (800214c <HAL_I2C_Init+0x274>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d807      	bhi.n	8001f5c <HAL_I2C_Init+0x84>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a80      	ldr	r2, [pc, #512]	@ (8002150 <HAL_I2C_Init+0x278>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e006      	b.n	8001f6a <HAL_I2C_Init+0x92>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a7d      	ldr	r2, [pc, #500]	@ (8002154 <HAL_I2C_Init+0x27c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	bf94      	ite	ls
 8001f64:	2301      	movls	r3, #1
 8001f66:	2300      	movhi	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0e7      	b.n	8002142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a78      	ldr	r2, [pc, #480]	@ (8002158 <HAL_I2C_Init+0x280>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9b      	lsrs	r3, r3, #18
 8001f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800214c <HAL_I2C_Init+0x274>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d802      	bhi.n	8001fac <HAL_I2C_Init+0xd4>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	e009      	b.n	8001fc0 <HAL_I2C_Init+0xe8>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a69      	ldr	r2, [pc, #420]	@ (800215c <HAL_I2C_Init+0x284>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	495c      	ldr	r1, [pc, #368]	@ (800214c <HAL_I2C_Init+0x274>)
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d819      	bhi.n	8002014 <HAL_I2C_Init+0x13c>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e59      	subs	r1, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_I2C_Init+0x138>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e59      	subs	r1, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fbb1 f3f3 	udiv	r3, r1, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200e:	e051      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002010:	2304      	movs	r3, #4
 8002012:	e04f      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d111      	bne.n	8002040 <HAL_I2C_Init+0x168>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e012      	b.n	8002066 <HAL_I2C_Init+0x18e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	0099      	lsls	r1, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Init+0x196>
 800206a:	2301      	movs	r3, #1
 800206c:	e022      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <HAL_I2C_Init+0x1bc>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e58      	subs	r0, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	440b      	add	r3, r1
 8002084:	fbb0 f3f3 	udiv	r3, r0, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002092:	e00f      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	0099      	lsls	r1, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	6809      	ldr	r1, [r1, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6911      	ldr	r1, [r2, #16]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68d2      	ldr	r2, [r2, #12]
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	000186a0 	.word	0x000186a0
 8002150:	001e847f 	.word	0x001e847f
 8002154:	003d08ff 	.word	0x003d08ff
 8002158:	431bde83 	.word	0x431bde83
 800215c:	10624dd3 	.word	0x10624dd3

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e267      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e242      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b76      	ldr	r3, [pc, #472]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a75      	ldr	r2, [pc, #468]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b70      	ldr	r3, [pc, #448]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6f      	ldr	r2, [pc, #444]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b6d      	ldr	r3, [pc, #436]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6c      	ldr	r2, [pc, #432]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b69      	ldr	r3, [pc, #420]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a68      	ldr	r2, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b66      	ldr	r3, [pc, #408]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe ffd0 	bl	80011bc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ffcc 	bl	80011bc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e207      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ffbc 	bl	80011bc <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe ffb8 	bl	80011bc <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1f3      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b41      	ldr	r3, [pc, #260]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c7      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_OscConfig+0x244>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe ff71 	bl	80011bc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe ff6d 	bl	80011bc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a8      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4925      	ldr	r1, [pc, #148]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x244>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff50 	bl	80011bc <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe ff4c 	bl	80011bc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e187      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d036      	beq.n	80023b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe ff30 	bl	80011bc <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe ff2c 	bl	80011bc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e167      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe ff19 	bl	80011bc <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe ff15 	bl	80011bc <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e150      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b88      	ldr	r3, [pc, #544]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b7d      	ldr	r3, [pc, #500]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	4a7c      	ldr	r2, [pc, #496]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e6:	4b7a      	ldr	r3, [pc, #488]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b77      	ldr	r3, [pc, #476]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b74      	ldr	r3, [pc, #464]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a73      	ldr	r2, [pc, #460]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7fe fed5 	bl	80011bc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe fed1 	bl	80011bc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e10c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x2ea>
 800243c:	4b64      	ldr	r3, [pc, #400]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a63      	ldr	r2, [pc, #396]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x30c>
 8002452:	4b5f      	ldr	r3, [pc, #380]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	4a5e      	ldr	r2, [pc, #376]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	@ 0x70
 800245e:	4b5c      	ldr	r3, [pc, #368]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	4a5b      	ldr	r2, [pc, #364]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	@ 0x70
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800246c:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a54      	ldr	r2, [pc, #336]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe fe96 	bl	80011bc <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fe92 	bl	80011bc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0cb      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	4b49      	ldr	r3, [pc, #292]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ee      	beq.n	8002494 <HAL_RCC_OscConfig+0x334>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fe80 	bl	80011bc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fe7c 	bl	80011bc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0b5      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a1 	beq.w	8002640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d05c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d141      	bne.n	8002596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b31      	ldr	r3, [pc, #196]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fe50 	bl	80011bc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fe4c 	bl	80011bc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e087      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	491b      	ldr	r1, [pc, #108]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fe25 	bl	80011bc <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fe21 	bl	80011bc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e05c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x416>
 8002594:	e054      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fe0e 	bl	80011bc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fe0a 	bl	80011bc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e045      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e038      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000
 80025d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x4ec>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d028      	beq.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d121      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d11a      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	4293      	cmp	r3, r2
 8002616:	d111      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	3b01      	subs	r3, #1
 8002626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7fe fd3c 	bl	80011bc <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe fd38 	bl	80011bc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	@ (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fc9c 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	0800bcf8 	.word	0x0800bcf8
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b094      	sub	sp, #80	@ 0x50
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80e1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0db      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b73      	ldr	r3, [pc, #460]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002852:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002854:	e0db      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b73      	ldr	r3, [pc, #460]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800285a:	e0d8      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002866:	4b6d      	ldr	r3, [pc, #436]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800287c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
 800288a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4621      	mov	r1, r4
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	6139      	str	r1, [r7, #16]
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	ebb2 0801 	subs.w	r8, r2, r1
 80028d4:	4659      	mov	r1, fp
 80028d6:	eb63 0901 	sbc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	462b      	mov	r3, r5
 80028fc:	eb49 0303 	adc.w	r3, r9, r3
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800290e:	4629      	mov	r1, r5
 8002910:	024b      	lsls	r3, r1, #9
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002918:	4621      	mov	r1, r4
 800291a:	024a      	lsls	r2, r1, #9
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800292c:	f7fd fc58 	bl	80001e0 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002938:	e058      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	4618      	mov	r0, r3
 8002944:	4611      	mov	r1, r2
 8002946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4641      	mov	r1, r8
 800296e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb63 0b01 	sbc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298c:	ebb2 040a 	subs.w	r4, r2, sl
 8002990:	eb63 050b 	sbc.w	r5, r3, fp
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	61fa      	str	r2, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	f7fd fbfe 	bl	80001e0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3750      	adds	r7, #80	@ 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	@ (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	0800bd08 	.word	0x0800bd08

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	@ (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	0800bd08 	.word	0x0800bd08

08002a90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e022      	b.n	8002ae8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fe f8d1 	bl	8000c5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f814 	bl	8002af0 <HAL_SD_InitCard>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00a      	b.n	8002ae8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b08e      	sub	sp, #56	@ 0x38
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002b0c:	2376      	movs	r3, #118	@ 0x76
 8002b0e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681d      	ldr	r5, [r3, #0]
 8002b14:	466c      	mov	r4, sp
 8002b16:	f107 0318 	add.w	r3, r7, #24
 8002b1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f002 f9bd 	bl	8004ea8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_SD_InitCard+0xe8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 f9ed 	bl	8004f18 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002b3e:	4b26      	ldr	r3, [pc, #152]	@ (8002bd8 <HAL_SD_InitCard+0xe8>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fe fb45 	bl	80011d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fe12 	bl	8003774 <SD_PowerON>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e02e      	b.n	8002bce <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fd31 	bl	80035d8 <SD_InitCard>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01b      	b.n	8002bce <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fa4c 	bl	800503c <SDMMC_CmdBlockLength>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00f      	beq.n	8002bcc <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <HAL_SD_InitCard+0xec>)
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3728      	adds	r7, #40	@ 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	422580a0 	.word	0x422580a0
 8002bdc:	004005ff 	.word	0x004005ff

08002be0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	@ 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0c0      	b.n	8002d8a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 80b9 	bne.w	8002d88 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	441a      	add	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d907      	bls.n	8002c3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0a7      	b.n	8002d8a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	4a4c      	ldr	r2, [pc, #304]	@ (8002d94 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002c64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002c6c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2200      	movs	r2, #0
 8002c74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3380      	adds	r3, #128	@ 0x80
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	f7fe fc75 	bl	800159c <HAL_DMA_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8002cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a33      	ldr	r2, [pc, #204]	@ (8002d9c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e050      	b.n	8002d8a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8002da0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d002      	beq.n	8002cfc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d08:	2390      	movs	r3, #144	@ 0x90
 8002d0a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f107 0210 	add.w	r2, r7, #16
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 f95e 	bl	8004fe4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d90a      	bls.n	8002d44 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2282      	movs	r2, #130	@ 0x82
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 f9c2 	bl	80050c4 <SDMMC_CmdReadMultiBlock>
 8002d40:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002d42:	e009      	b.n	8002d58 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2281      	movs	r2, #129	@ 0x81
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 f995 	bl	8005080 <SDMMC_CmdReadSingleBlock>
 8002d56:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e002      	b.n	8002d8a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3730      	adds	r7, #48	@ 0x30
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	080034c3 	.word	0x080034c3
 8002d98:	08003535 	.word	0x08003535
 8002d9c:	004005ff 	.word	0x004005ff
 8002da0:	4225858c 	.word	0x4225858c

08002da4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0c5      	b.n	8002f58 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 80be 	bne.w	8002f56 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d907      	bls.n	8002dfe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0ac      	b.n	8002f58 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e26:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002e30:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	2200      	movs	r2, #0
 8002e38:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d002      	beq.n	8002e48 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e44:	025b      	lsls	r3, r3, #9
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d90a      	bls.n	8002e64 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22a0      	movs	r2, #160	@ 0xa0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 f976 	bl	800514c <SDMMC_CmdWriteMultiBlock>
 8002e60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002e62:	e009      	b.n	8002e78 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2290      	movs	r2, #144	@ 0x90
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 f949 	bl	8005108 <SDMMC_CmdWriteSingleBlock>
 8002e76:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a39      	ldr	r2, [pc, #228]	@ (8002f68 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e059      	b.n	8002f58 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eae:	2240      	movs	r2, #64	@ 0x40
 8002eb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3380      	adds	r3, #128	@ 0x80
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	f7fe fb5b 	bl	800159c <HAL_DMA_Start_IT>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01c      	beq.n	8002f26 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8002efa:	f023 0302 	bic.w	r3, r3, #2
 8002efe:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e018      	b.n	8002f58 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	025b      	lsls	r3, r3, #9
 8002f30:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f32:	2390      	movs	r3, #144	@ 0x90
 8002f34:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f107 0210 	add.w	r2, r7, #16
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 f849 	bl	8004fe4 <SDIO_ConfigData>

      return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3730      	adds	r7, #48	@ 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	08003499 	.word	0x08003499
 8002f64:	08003535 	.word	0x08003535
 8002f68:	004005ff 	.word	0x004005ff
 8002f6c:	4225858c 	.word	0x4225858c

08002f70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f92:	0f9b      	lsrs	r3, r3, #30
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	0e9b      	lsrs	r3, r3, #26
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	0e1b      	lsrs	r3, r3, #24
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe4:	0d1b      	lsrs	r3, r3, #20
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003002:	0bdb      	lsrs	r3, r3, #15
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003014:	0b9b      	lsrs	r3, r3, #14
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003026:	0b5b      	lsrs	r3, r3, #13
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003038:	0b1b      	lsrs	r3, r3, #12
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	2b00      	cmp	r3, #0
 8003052:	d163      	bne.n	800311c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003058:	009a      	lsls	r2, r3, #2
 800305a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003064:	0f92      	lsrs	r2, r2, #30
 8003066:	431a      	orrs	r2, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003070:	0edb      	lsrs	r3, r3, #27
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	b2da      	uxtb	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003082:	0e1b      	lsrs	r3, r3, #24
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	b2da      	uxtb	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	b2da      	uxtb	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b8:	0bdb      	lsrs	r3, r3, #15
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7e1b      	ldrb	r3, [r3, #24]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	3302      	adds	r3, #2
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80030e6:	fb03 f202 	mul.w	r2, r3, r2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	7a1b      	ldrb	r3, [r3, #8]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003108:	0a52      	lsrs	r2, r2, #9
 800310a:	fb03 f202 	mul.w	r2, r3, r2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003118:	661a      	str	r2, [r3, #96]	@ 0x60
 800311a:	e031      	b.n	8003180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	2b01      	cmp	r3, #1
 8003122:	d11d      	bne.n	8003160 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	3301      	adds	r3, #1
 8003140:	029a      	lsls	r2, r3, #10
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003154:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	661a      	str	r2, [r3, #96]	@ 0x60
 800315e:	e00f      	b.n	8003180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <HAL_SD_GetCardCSD+0x344>)
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e09d      	b.n	80032bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003184:	0b9b      	lsrs	r3, r3, #14
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	b2da      	uxtb	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003196:	09db      	lsrs	r3, r3, #7
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	0fdb      	lsrs	r3, r3, #31
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	0f5b      	lsrs	r3, r3, #29
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	0d9b      	lsrs	r3, r3, #22
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	0d5b      	lsrs	r3, r3, #21
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	b2da      	uxtb	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322a:	0bdb      	lsrs	r3, r3, #15
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323e:	0b9b      	lsrs	r3, r3, #14
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	0b5b      	lsrs	r3, r3, #13
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	b2da      	uxtb	r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	0b1b      	lsrs	r3, r3, #12
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	0a9b      	lsrs	r3, r3, #10
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	b2da      	uxtb	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	004005ff 	.word	0x004005ff

080032cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b08e      	sub	sp, #56	@ 0x38
 8003328:	af04      	add	r7, sp, #16
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	2b03      	cmp	r3, #3
 8003342:	d02e      	beq.n	80033a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334a:	d106      	bne.n	800335a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
 8003358:	e029      	b.n	80033ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003360:	d10a      	bne.n	8003378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fabc 	bl	80038e0 <SD_WideBus_Enable>
 8003368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
 8003376:	e01a      	b.n	80033ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 faf9 	bl	8003976 <SD_WideBus_Disable>
 8003384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	639a      	str	r2, [r3, #56]	@ 0x38
 8003392:	e00c      	b.n	80033ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38
 80033a0:	e005      	b.n	80033ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_SD_ConfigWideBusOperation+0x130>)
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033cc:	e01f      	b.n	800340e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681d      	ldr	r5, [r3, #0]
 80033f4:	466c      	mov	r4, sp
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	4628      	mov	r0, r5
 800340a:	f001 fd4d 	bl	8004ea8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fe10 	bl	800503c <SDMMC_CmdBlockLength>
 800341c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_SD_ConfigWideBusOperation+0x130>)
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800344a:	4618      	mov	r0, r3
 800344c:	3728      	adds	r7, #40	@ 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bdb0      	pop	{r4, r5, r7, pc}
 8003452:	bf00      	nop
 8003454:	004005ff 	.word	0x004005ff

08003458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa10 	bl	8003890 <SD_SendStatus>
 8003470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0a5b      	lsrs	r3, r3, #9
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800348e:	693b      	ldr	r3, [r7, #16]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	2b82      	cmp	r3, #130	@ 0x82
 80034d6:	d111      	bne.n	80034fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fe57 	bl	8005190 <SDMMC_CmdStopTransfer>
 80034e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fd3a 	bl	8002f70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0208 	bic.w	r2, r2, #8
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f002 fab3 	bl	8005a90 <HAL_SD_RxCpltCallback>
#endif
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fa0c 	bl	8001960 <HAL_DMA_GetError>
 8003548:	4603      	mov	r3, r0
 800354a:	2b02      	cmp	r3, #2
 800354c:	d03e      	beq.n	80035cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <SD_DMAError+0x36>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12d      	bne.n	80035c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <SD_DMAError+0xa0>)
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff62 	bl	8003458 <HAL_SD_GetCardState>
 8003594:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b06      	cmp	r3, #6
 800359a:	d002      	beq.n	80035a2 <SD_DMAError+0x6e>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d10a      	bne.n	80035b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fdf2 	bl	8005190 <SDMMC_CmdStopTransfer>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	431a      	orrs	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff fcd2 	bl	8002f70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	004005ff 	.word	0x004005ff

080035d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b094      	sub	sp, #80	@ 0x50
 80035dc:	af04      	add	r7, sp, #16
 80035de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fca3 	bl	8004f34 <SDIO_GetPowerState>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80035f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80035f8:	e0b8      	b.n	800376c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d02f      	beq.n	8003662 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fecc 	bl	80053a4 <SDMMC_CmdSendCID>
 800360c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <SD_InitCard+0x40>
    {
      return errorstate;
 8003614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003616:	e0a9      	b.n	800376c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fccd 	bl	8004fbe <SDIO_GetResponse>
 8003624:	4602      	mov	r2, r0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2104      	movs	r1, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fcc4 	bl	8004fbe <SDIO_GetResponse>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2108      	movs	r1, #8
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fcbb 	bl	8004fbe <SDIO_GetResponse>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	210c      	movs	r1, #12
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fcb2 	bl	8004fbe <SDIO_GetResponse>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	2b03      	cmp	r3, #3
 8003668:	d00d      	beq.n	8003686 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f107 020e 	add.w	r2, r7, #14
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fed2 	bl	800541e <SDMMC_CmdSetRelAdd>
 800367a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800367c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <SD_InitCard+0xae>
    {
      return errorstate;
 8003682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003684:	e072      	b.n	800376c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	2b03      	cmp	r3, #3
 800368c:	d036      	beq.n	80036fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800368e:	89fb      	ldrh	r3, [r7, #14]
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f001 fe9c 	bl	80053e0 <SDMMC_CmdSendCSD>
 80036a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80036b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b2:	e05b      	b.n	800376c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fc7f 	bl	8004fbe <SDIO_GetResponse>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2104      	movs	r1, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fc76 	bl	8004fbe <SDIO_GetResponse>
 80036d2:	4602      	mov	r2, r0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2108      	movs	r1, #8
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fc6d 	bl	8004fbe <SDIO_GetResponse>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	210c      	movs	r1, #12
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fc64 	bl	8004fbe <SDIO_GetResponse>
 80036f6:	4602      	mov	r2, r0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2104      	movs	r1, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fc5b 	bl	8004fbe <SDIO_GetResponse>
 8003708:	4603      	mov	r3, r0
 800370a:	0d1a      	lsrs	r2, r3, #20
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fc34 	bl	8002f84 <HAL_SD_GetCardCSD>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003722:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003726:	e021      	b.n	800376c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	2200      	movs	r2, #0
 8003734:	461c      	mov	r4, r3
 8003736:	4615      	mov	r5, r2
 8003738:	4622      	mov	r2, r4
 800373a:	462b      	mov	r3, r5
 800373c:	4608      	mov	r0, r1
 800373e:	f001 fd49 	bl	80051d4 <SDMMC_CmdSelDesel>
 8003742:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <SD_InitCard+0x176>
  {
    return errorstate;
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	e00e      	b.n	800376c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	466c      	mov	r4, sp
 8003756:	f103 0210 	add.w	r2, r3, #16
 800375a:	ca07      	ldmia	r2, {r0, r1, r2}
 800375c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003760:	3304      	adds	r3, #4
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	4628      	mov	r0, r5
 8003766:	f001 fb9f 	bl	8004ea8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3740      	adds	r7, #64	@ 0x40
 8003770:	46bd      	mov	sp, r7
 8003772:	bdb0      	pop	{r4, r5, r7, pc}

08003774 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fd44 	bl	800521a <SDMMC_CmdGoIdleState>
 8003792:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <SD_PowerON+0x2a>
  {
    return errorstate;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	e072      	b.n	8003884 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fd57 	bl	8005256 <SDMMC_CmdOperCond>
 80037a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fd2d 	bl	800521a <SDMMC_CmdGoIdleState>
 80037c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e05b      	b.n	8003884 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d137      	bne.n	800384a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fd57 	bl	8005294 <SDMMC_CmdAppCommand>
 80037e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02d      	beq.n	800384a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80037f2:	e047      	b.n	8003884 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fd4a 	bl	8005294 <SDMMC_CmdAppCommand>
 8003800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SD_PowerON+0x98>
    {
      return errorstate;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	e03b      	b.n	8003884 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	491e      	ldr	r1, [pc, #120]	@ (800388c <SD_PowerON+0x118>)
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fd60 	bl	80052d8 <SDMMC_CmdAppOperCommand>
 8003818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003820:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003824:	e02e      	b.n	8003884 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fbc6 	bl	8004fbe <SDIO_GetResponse>
 8003832:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	0fdb      	lsrs	r3, r3, #31
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <SD_PowerON+0xcc>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <SD_PowerON+0xce>
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]

    count++;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3301      	adds	r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003850:	4293      	cmp	r3, r2
 8003852:	d802      	bhi.n	800385a <SD_PowerON+0xe6>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0cc      	beq.n	80037f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003860:	4293      	cmp	r3, r2
 8003862:	d902      	bls.n	800386a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003868:	e00c      	b.n	8003884 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
 800387a:	e002      	b.n	8003882 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	c1100000 	.word	0xc1100000

08003890 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80038a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038a4:	e018      	b.n	80038d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f001 fdd4 	bl	8005460 <SDMMC_CmdSendStatus>
 80038b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	e009      	b.n	80038d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fb77 	bl	8004fbe <SDIO_GetResponse>
 80038d0:	4602      	mov	r2, r0
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fb61 	bl	8004fbe <SDIO_GetResponse>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003906:	d102      	bne.n	800390e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003908:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800390c:	e02f      	b.n	800396e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f879 	bl	8003a0c <SD_FindSCR>
 800391a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	e023      	b.n	800396e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f001 fca9 	bl	8005294 <SDMMC_CmdAppCommand>
 8003942:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	e00f      	b.n	800396e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fce2 	bl	800531e <SDMMC_CmdBusWidth>
 800395a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	e003      	b.n	800396e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003966:	2300      	movs	r3, #0
 8003968:	e001      	b.n	800396e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800396a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fb16 	bl	8004fbe <SDIO_GetResponse>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800399c:	d102      	bne.n	80039a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800399e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039a2:	e02f      	b.n	8003a04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f82e 	bl	8003a0c <SD_FindSCR>
 80039b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	e023      	b.n	8003a04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01c      	beq.n	8003a00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f001 fc5e 	bl	8005294 <SDMMC_CmdAppCommand>
 80039d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	e00f      	b.n	8003a04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 fc97 	bl	800531e <SDMMC_CmdBusWidth>
 80039f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	e003      	b.n	8003a04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e001      	b.n	8003a04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b08f      	sub	sp, #60	@ 0x3c
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7fd fbd1 	bl	80011bc <HAL_GetTick>
 8003a1a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2108      	movs	r1, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fb02 	bl	800503c <SDMMC_CmdBlockLength>
 8003a38:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	e0b9      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f001 fc1f 	bl	8005294 <SDMMC_CmdAppCommand>
 8003a56:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	e0aa      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003a68:	2308      	movs	r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003a6c:	2330      	movs	r3, #48	@ 0x30
 8003a6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003a70:	2302      	movs	r3, #2
 8003a72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f107 0210 	add.w	r2, r7, #16
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 faac 	bl	8004fe4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 fc66 	bl	8005362 <SDMMC_CmdSendSCR>
 8003a96:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d02a      	beq.n	8003af4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	e08a      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00f      	beq.n	8003ad0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f107 0208 	add.w	r2, r7, #8
 8003abc:	18d4      	adds	r4, r2, r3
 8003abe:	4608      	mov	r0, r1
 8003ac0:	f001 fa1d 	bl	8004efe <SDIO_ReadFIFO>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	6023      	str	r3, [r4, #0]
      index++;
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	3301      	adds	r3, #1
 8003acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ace:	e006      	b.n	8003ade <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003ade:	f7fd fb6d 	bl	80011bc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d102      	bne.n	8003af4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003aee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003af2:	e061      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0cf      	beq.n	8003aa2 <SD_FindSCR+0x96>
 8003b02:	e000      	b.n	8003b06 <SD_FindSCR+0xfa>
      break;
 8003b04:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <SD_FindSCR+0x116>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e044      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b44:	2302      	movs	r3, #2
 8003b46:	e037      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e02a      	b.n	8003bb8 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003b6a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	061a      	lsls	r2, r3, #24
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	0e1b      	lsrs	r3, r3, #24
 8003b88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	601a      	str	r2, [r3, #0]
    scr++;
 8003b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b90:	3304      	adds	r3, #4
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	061a      	lsls	r2, r3, #24
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003ba0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003baa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	0e1b      	lsrs	r3, r3, #24
 8003bb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	373c      	adds	r7, #60	@ 0x3c
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}

08003bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07b      	b.n	8003cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f90a 	bl	8000e2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0104 	and.w	r1, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	f003 0210 	and.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e041      	b.n	8003d68 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fd f8df 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f000 fb0b 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f839 	bl	8003e0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fabc 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01b      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0202 	mvn.w	r2, #2
 8003e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa3f 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003e72:	e005      	b.n	8003e80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fa31 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa42 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0204 	mvn.w	r2, #4
 8003ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa19 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003ebe:	e005      	b.n	8003ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa0b 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa1c 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0208 	mvn.w	r2, #8
 8003eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9f3 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003f0a:	e005      	b.n	8003f18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9e5 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9f6 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01b      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f06f 0210 	mvn.w	r2, #16
 8003f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2208      	movs	r2, #8
 8003f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f9cd 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003f56:	e005      	b.n	8003f64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f9bf 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9d0 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0201 	mvn.w	r2, #1
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f99d 	bl	80042c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fcad 	bl	800490c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00c      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f9a1 	bl	8004318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0220 	mvn.w	r2, #32
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fc7f 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_TIM_IC_ConfigChannel+0x1e>
 800401c:	2302      	movs	r3, #2
 800401e:	e088      	b.n	8004132 <HAL_TIM_IC_ConfigChannel+0x130>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11b      	bne.n	8004066 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800403e:	f000 fa1b 	bl	8004478 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 020c 	bic.w	r2, r2, #12
 8004050:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6999      	ldr	r1, [r3, #24]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
 8004064:	e060      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d11c      	bne.n	80040a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800407c:	f000 fa9f 	bl	80045be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800408e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6999      	ldr	r1, [r3, #24]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
 80040a4:	e040      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80040bc:	f000 faec 	bl	8004698 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 020c 	bic.w	r2, r2, #12
 80040ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69d9      	ldr	r1, [r3, #28]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	61da      	str	r2, [r3, #28]
 80040e2:	e021      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d11c      	bne.n	8004124 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040fa:	f000 fb09 	bl	8004710 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800410c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e001      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_TIM_ConfigClockSource+0x1c>
 8004152:	2302      	movs	r3, #2
 8004154:	e0b4      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x186>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004174:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418e:	d03e      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xd4>
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004194:	f200 8087 	bhi.w	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419c:	f000 8086 	beq.w	80042ac <HAL_TIM_ConfigClockSource+0x172>
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a4:	d87f      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041a6:	2b70      	cmp	r3, #112	@ 0x70
 80041a8:	d01a      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0xa6>
 80041aa:	2b70      	cmp	r3, #112	@ 0x70
 80041ac:	d87b      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041ae:	2b60      	cmp	r3, #96	@ 0x60
 80041b0:	d050      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0x11a>
 80041b2:	2b60      	cmp	r3, #96	@ 0x60
 80041b4:	d877      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041b6:	2b50      	cmp	r3, #80	@ 0x50
 80041b8:	d03c      	beq.n	8004234 <HAL_TIM_ConfigClockSource+0xfa>
 80041ba:	2b50      	cmp	r3, #80	@ 0x50
 80041bc:	d873      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041be:	2b40      	cmp	r3, #64	@ 0x40
 80041c0:	d058      	beq.n	8004274 <HAL_TIM_ConfigClockSource+0x13a>
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d86f      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041c6:	2b30      	cmp	r3, #48	@ 0x30
 80041c8:	d064      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x15a>
 80041ca:	2b30      	cmp	r3, #48	@ 0x30
 80041cc:	d86b      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d060      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x15a>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d867      	bhi.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d05c      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x15a>
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d05a      	beq.n	8004294 <HAL_TIM_ConfigClockSource+0x15a>
 80041de:	e062      	b.n	80042a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	f000 fae6 	bl	80047c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004202:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e04f      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	f000 facf 	bl	80047c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004230:	609a      	str	r2, [r3, #8]
      break;
 8004232:	e03c      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004240:	461a      	mov	r2, r3
 8004242:	f000 f98d 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2150      	movs	r1, #80	@ 0x50
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fa9c 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 8004252:	e02c      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004260:	461a      	mov	r2, r3
 8004262:	f000 f9e9 	bl	8004638 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2160      	movs	r1, #96	@ 0x60
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fa8c 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 8004272:	e01c      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004280:	461a      	mov	r2, r3
 8004282:	f000 f96d 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2140      	movs	r1, #64	@ 0x40
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fa7c 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 8004292:	e00c      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 fa73 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 80042a4:	e003      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a43      	ldr	r2, [pc, #268]	@ (800444c <TIM_Base_SetConfig+0x120>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a40      	ldr	r2, [pc, #256]	@ (8004450 <TIM_Base_SetConfig+0x124>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3f      	ldr	r2, [pc, #252]	@ (8004454 <TIM_Base_SetConfig+0x128>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3e      	ldr	r2, [pc, #248]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3d      	ldr	r2, [pc, #244]	@ (800445c <TIM_Base_SetConfig+0x130>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a32      	ldr	r2, [pc, #200]	@ (800444c <TIM_Base_SetConfig+0x120>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d02b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438c:	d027      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2f      	ldr	r2, [pc, #188]	@ (8004450 <TIM_Base_SetConfig+0x124>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d023      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2e      	ldr	r2, [pc, #184]	@ (8004454 <TIM_Base_SetConfig+0x128>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2c      	ldr	r2, [pc, #176]	@ (800445c <TIM_Base_SetConfig+0x130>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a29      	ldr	r2, [pc, #164]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a28      	ldr	r2, [pc, #160]	@ (800446c <TIM_Base_SetConfig+0x140>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a0e      	ldr	r2, [pc, #56]	@ (800444c <TIM_Base_SetConfig+0x120>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0xf2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a10      	ldr	r2, [pc, #64]	@ (800445c <TIM_Base_SetConfig+0x130>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d103      	bne.n	8004426 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f043 0204 	orr.w	r2, r3, #4
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40010400 	.word	0x40010400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800
 800446c:	40001800 	.word	0x40001800
 8004470:	40001c00 	.word	0x40001c00
 8004474:	40002000 	.word	0x40002000

08004478 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f023 0201 	bic.w	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a28      	ldr	r2, [pc, #160]	@ (8004544 <TIM_TI1_SetConfig+0xcc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01b      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d017      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <TIM_TI1_SetConfig+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a24      	ldr	r2, [pc, #144]	@ (800454c <TIM_TI1_SetConfig+0xd4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a23      	ldr	r2, [pc, #140]	@ (8004550 <TIM_TI1_SetConfig+0xd8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a22      	ldr	r2, [pc, #136]	@ (8004554 <TIM_TI1_SetConfig+0xdc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a21      	ldr	r2, [pc, #132]	@ (8004558 <TIM_TI1_SetConfig+0xe0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_TI1_SetConfig+0x66>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a20      	ldr	r2, [pc, #128]	@ (800455c <TIM_TI1_SetConfig+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <TIM_TI1_SetConfig+0x6a>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <TIM_TI1_SetConfig+0x6c>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e003      	b.n	8004502 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	b2db      	uxtb	r3, r3
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 030a 	and.w	r3, r3, #10
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	621a      	str	r2, [r3, #32]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40010000 	.word	0x40010000
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40010400 	.word	0x40010400
 8004558:	40014000 	.word	0x40014000
 800455c:	40001800 	.word	0x40001800

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045be:	b480      	push	{r7}
 80045c0:	b087      	sub	sp, #28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0210 	bic.w	r2, r3, #16
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	b29b      	uxth	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004610:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	031b      	lsls	r3, r3, #12
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004674:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	b29b      	uxth	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	031b      	lsls	r3, r3, #12
 8004768:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f043 0307 	orr.w	r3, r3, #7
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e05a      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e042      	b.n	80049b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc fb08 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	@ 0x24
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f82b 	bl	80049c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b0c0      	sub	sp, #256	@ 0x100
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	68d9      	ldr	r1, [r3, #12]
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	ea40 0301 	orr.w	r3, r0, r1
 80049e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a18:	f021 010c 	bic.w	r1, r1, #12
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a26:	430b      	orrs	r3, r1
 8004a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3a:	6999      	ldr	r1, [r3, #24]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	ea40 0301 	orr.w	r3, r0, r1
 8004a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c8c <UART_SetConfig+0x2cc>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d005      	beq.n	8004a60 <UART_SetConfig+0xa0>
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c90 <UART_SetConfig+0x2d0>)
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d104      	bne.n	8004a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fe f802 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8004a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a68:	e003      	b.n	8004a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6a:	f7fd ffe9 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8004a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a7c:	f040 810c 	bne.w	8004c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	1891      	adds	r1, r2, r2
 8004a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	eb12 0801 	adds.w	r8, r2, r1
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb43 0901 	adc.w	r9, r3, r1
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac2:	4690      	mov	r8, r2
 8004ac4:	4699      	mov	r9, r3
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	eb18 0303 	adds.w	r3, r8, r3
 8004acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	eb49 0303 	adc.w	r3, r9, r3
 8004ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aee:	460b      	mov	r3, r1
 8004af0:	18db      	adds	r3, r3, r3
 8004af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af4:	4613      	mov	r3, r2
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b04:	f7fb fb6c 	bl	80001e0 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b61      	ldr	r3, [pc, #388]	@ (8004c94 <UART_SetConfig+0x2d4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011c      	lsls	r4, r3, #4
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b30:	415b      	adcs	r3, r3
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b38:	4641      	mov	r1, r8
 8004b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb43 0b01 	adc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b58:	4692      	mov	sl, r2
 8004b5a:	469b      	mov	fp, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b66:	464b      	mov	r3, r9
 8004b68:	eb4b 0303 	adc.w	r3, fp, r3
 8004b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b84:	460b      	mov	r3, r1
 8004b86:	18db      	adds	r3, r3, r3
 8004b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b9a:	f7fb fb21 	bl	80001e0 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <UART_SetConfig+0x2d4>)
 8004ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2264      	movs	r2, #100	@ 0x64
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	1acb      	subs	r3, r1, r3
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bba:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <UART_SetConfig+0x2d4>)
 8004bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bc8:	441c      	add	r4, r3
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004be4:	415b      	adcs	r3, r3
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bec:	4641      	mov	r1, r8
 8004bee:	1851      	adds	r1, r2, r1
 8004bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c04:	4659      	mov	r1, fp
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4651      	mov	r1, sl
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c20:	464b      	mov	r3, r9
 8004c22:	460a      	mov	r2, r1
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c40:	460b      	mov	r3, r1
 8004c42:	18db      	adds	r3, r3, r3
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	4613      	mov	r3, r2
 8004c48:	eb42 0303 	adc.w	r3, r2, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c56:	f7fb fac3 	bl	80001e0 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <UART_SetConfig+0x2d4>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	@ 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	@ 0x32
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <UART_SetConfig+0x2d4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0207 	and.w	r2, r3, #7
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4422      	add	r2, r4
 8004c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c88:	e106      	b.n	8004e98 <UART_SetConfig+0x4d8>
 8004c8a:	bf00      	nop
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40011400 	.word	0x40011400
 8004c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004caa:	4642      	mov	r2, r8
 8004cac:	464b      	mov	r3, r9
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	6239      	str	r1, [r7, #32]
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cba:	4641      	mov	r1, r8
 8004cbc:	1854      	adds	r4, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0501 	adc.w	r5, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	00eb      	lsls	r3, r5, #3
 8004cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd2:	00e2      	lsls	r2, r4, #3
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	4643      	mov	r3, r8
 8004cda:	18e3      	adds	r3, r4, r3
 8004cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	eb45 0303 	adc.w	r3, r5, r3
 8004ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d06:	4629      	mov	r1, r5
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d10:	4621      	mov	r1, r4
 8004d12:	008a      	lsls	r2, r1, #2
 8004d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d18:	f7fb fa62 	bl	80001e0 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b60      	ldr	r3, [pc, #384]	@ (8004ea4 <UART_SetConfig+0x4e4>)
 8004d22:	fba3 2302 	umull	r2, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	011c      	lsls	r4, r3, #4
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	61b9      	str	r1, [r7, #24]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6139      	str	r1, [r7, #16]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004da4:	4649      	mov	r1, r9
 8004da6:	008b      	lsls	r3, r1, #2
 8004da8:	4641      	mov	r1, r8
 8004daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dae:	4641      	mov	r1, r8
 8004db0:	008a      	lsls	r2, r1, #2
 8004db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004db6:	f7fb fa13 	bl	80001e0 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4b38      	ldr	r3, [pc, #224]	@ (8004ea4 <UART_SetConfig+0x4e4>)
 8004dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2264      	movs	r2, #100	@ 0x64
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	1acb      	subs	r3, r1, r3
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	3332      	adds	r3, #50	@ 0x32
 8004dd4:	4a33      	ldr	r2, [pc, #204]	@ (8004ea4 <UART_SetConfig+0x4e4>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de0:	441c      	add	r4, r3
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	1891      	adds	r1, r2, r2
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	415b      	adcs	r3, r3
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e00:	4641      	mov	r1, r8
 8004e02:	1851      	adds	r1, r2, r1
 8004e04:	6039      	str	r1, [r7, #0]
 8004e06:	4649      	mov	r1, r9
 8004e08:	414b      	adcs	r3, r1
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e18:	4659      	mov	r1, fp
 8004e1a:	00cb      	lsls	r3, r1, #3
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e22:	4651      	mov	r1, sl
 8004e24:	00ca      	lsls	r2, r1, #3
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e32:	464b      	mov	r3, r9
 8004e34:	460a      	mov	r2, r1
 8004e36:	eb42 0303 	adc.w	r3, r2, r3
 8004e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e54:	4649      	mov	r1, r9
 8004e56:	008b      	lsls	r3, r1, #2
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5e:	4641      	mov	r1, r8
 8004e60:	008a      	lsls	r2, r1, #2
 8004e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e66:	f7fb f9bb 	bl	80001e0 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <UART_SetConfig+0x4e4>)
 8004e70:	fba3 1302 	umull	r1, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	2164      	movs	r1, #100	@ 0x64
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	3332      	adds	r3, #50	@ 0x32
 8004e82:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <UART_SetConfig+0x4e4>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	f003 020f 	and.w	r2, r3, #15
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4422      	add	r2, r4
 8004e96:	609a      	str	r2, [r3, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea4:	51eb851f 	.word	0x51eb851f

08004ea8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	f107 001c 	add.w	r0, r7, #28
 8004eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004ebe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004ec2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004ec6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004eca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004ece:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004ed2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004ee2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	b004      	add	sp, #16
 8004efc:	4770      	bx	lr

08004efe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0303 	and.w	r3, r3, #3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004f8a:	f023 030f 	bic.w	r3, r3, #15
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	b2db      	uxtb	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	461a      	mov	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
}  
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800500a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005010:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005016:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0

}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800504a:	2310      	movs	r3, #16
 800504c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800504e:	2340      	movs	r3, #64	@ 0x40
 8005050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff74 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506c:	2110      	movs	r1, #16
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa18 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005076:	69fb      	ldr	r3, [r7, #28]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800508e:	2311      	movs	r3, #17
 8005090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005092:	2340      	movs	r3, #64	@ 0x40
 8005094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800509a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800509e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff52 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b0:	2111      	movs	r1, #17
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9f6 	bl	80054a4 <SDMMC_GetCmdResp1>
 80050b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050d2:	2312      	movs	r3, #18
 80050d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d6:	2340      	movs	r3, #64	@ 0x40
 80050d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff30 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	2112      	movs	r1, #18
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9d4 	bl	80054a4 <SDMMC_GetCmdResp1>
 80050fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050fe:	69fb      	ldr	r3, [r7, #28]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005116:	2318      	movs	r3, #24
 8005118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800511a:	2340      	movs	r3, #64	@ 0x40
 800511c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005128:	f107 0308 	add.w	r3, r7, #8
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff0e 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005138:	2118      	movs	r1, #24
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9b2 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005142:	69fb      	ldr	r3, [r7, #28]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800515a:	2319      	movs	r3, #25
 800515c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800515e:	2340      	movs	r3, #64	@ 0x40
 8005160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800516a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff feec 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517c:	2119      	movs	r1, #25
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f990 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800519c:	230c      	movs	r3, #12
 800519e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a0:	2340      	movs	r3, #64	@ 0x40
 80051a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fecb 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051ba:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <SDMMC_CmdStopTransfer+0x40>)
 80051bc:	210c      	movs	r1, #12
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f970 	bl	80054a4 <SDMMC_GetCmdResp1>
 80051c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	05f5e100 	.word	0x05f5e100

080051d4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051e4:	2307      	movs	r3, #7
 80051e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051e8:	2340      	movs	r3, #64	@ 0x40
 80051ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051f4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051f6:	f107 0310 	add.w	r3, r7, #16
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fea7 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	2107      	movs	r1, #7
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f94b 	bl	80054a4 <SDMMC_GetCmdResp1>
 800520e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	@ 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b088      	sub	sp, #32
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005236:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe86 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb65 	bl	8005914 <SDMMC_GetCmdError>
 800524a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800524c:	69fb      	ldr	r3, [r7, #28]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b088      	sub	sp, #32
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800525e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005264:	2308      	movs	r3, #8
 8005266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fe67 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 faf8 	bl	8005878 <SDMMC_GetCmdResp7>
 8005288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052a2:	2337      	movs	r3, #55	@ 0x37
 80052a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052a6:	2340      	movs	r3, #64	@ 0x40
 80052a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe48 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c4:	2137      	movs	r1, #55	@ 0x37
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8ec 	bl	80054a4 <SDMMC_GetCmdResp1>
 80052cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ce:	69fb      	ldr	r3, [r7, #28]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052ee:	2329      	movs	r3, #41	@ 0x29
 80052f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fe22 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9ff 	bl	8005710 <SDMMC_GetCmdResp3>
 8005312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005314:	69fb      	ldr	r3, [r7, #28]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800532c:	2306      	movs	r3, #6
 800532e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005330:	2340      	movs	r3, #64	@ 0x40
 8005332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800533c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800533e:	f107 0308 	add.w	r3, r7, #8
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fe03 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	2106      	movs	r1, #6
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f8a7 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005358:	69fb      	ldr	r3, [r7, #28]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800536e:	2333      	movs	r3, #51	@ 0x33
 8005370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005372:	2340      	movs	r3, #64	@ 0x40
 8005374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800537e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fde2 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800538c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005390:	2133      	movs	r1, #51	@ 0x33
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f886 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053b0:	2302      	movs	r3, #2
 80053b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053b4:	23c0      	movs	r3, #192	@ 0xc0
 80053b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fdc1 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f956 	bl	8005680 <SDMMC_GetCmdResp2>
 80053d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053d6:	69fb      	ldr	r3, [r7, #28]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80053ee:	2309      	movs	r3, #9
 80053f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053f2:	23c0      	movs	r3, #192	@ 0xc0
 80053f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fda2 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f937 	bl	8005680 <SDMMC_GetCmdResp2>
 8005412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800542c:	2303      	movs	r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005430:	2340      	movs	r3, #64	@ 0x40
 8005432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800543c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800543e:	f107 0308 	add.w	r3, r7, #8
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fd83 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	2103      	movs	r1, #3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f99c 	bl	800578c <SDMMC_GetCmdResp6>
 8005454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005456:	69fb      	ldr	r3, [r7, #28]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800546e:	230d      	movs	r3, #13
 8005470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005472:	2340      	movs	r3, #64	@ 0x40
 8005474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800547a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800547e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fd62 	bl	8004f50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800548c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005490:	210d      	movs	r1, #13
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f806 	bl	80054a4 <SDMMC_GetCmdResp1>
 8005498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	460b      	mov	r3, r1
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80054b2:	4b70      	ldr	r3, [pc, #448]	@ (8005674 <SDMMC_GetCmdResp1+0x1d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a70      	ldr	r2, [pc, #448]	@ (8005678 <SDMMC_GetCmdResp1+0x1d4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0a5a      	lsrs	r2, r3, #9
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	61fa      	str	r2, [r7, #28]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054d4:	e0c9      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ef      	beq.n	80054c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ea      	bne.n	80054c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2204      	movs	r2, #4
 8005500:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005502:	2304      	movs	r3, #4
 8005504:	e0b1      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005518:	2301      	movs	r3, #1
 800551a:	e0a6      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	22c5      	movs	r2, #197	@ 0xc5
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff fd3e 	bl	8004fa4 <SDIO_GetCommandResponse>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	7afb      	ldrb	r3, [r7, #11]
 800552e:	4293      	cmp	r3, r2
 8005530:	d001      	beq.n	8005536 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005532:	2301      	movs	r3, #1
 8005534:	e099      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005536:	2100      	movs	r1, #0
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff fd40 	bl	8004fbe <SDIO_GetResponse>
 800553e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4b4e      	ldr	r3, [pc, #312]	@ (800567c <SDMMC_GetCmdResp1+0x1d8>)
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800554a:	2300      	movs	r3, #0
 800554c:	e08d      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da02      	bge.n	800555a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005558:	e087      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005564:	2340      	movs	r3, #64	@ 0x40
 8005566:	e080      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005572:	2380      	movs	r3, #128	@ 0x80
 8005574:	e079      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005584:	e071      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005594:	e069      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80055a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055a4:	e061      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80055b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055b4:	e059      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055c4:	e051      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80055d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055d4:	e049      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80055e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055e4:	e041      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80055f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055f4:	e039      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005600:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005604:	e031      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005610:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005614:	e029      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005624:	e021      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005630:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005634:	e019      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005640:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005644:	e011      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005650:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005654:	e009      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005660:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005664:	e001      	b.n	800566a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005666:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000000 	.word	0x20000000
 8005678:	10624dd3 	.word	0x10624dd3
 800567c:	fdffe008 	.word	0xfdffe008

08005680 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005688:	4b1f      	ldr	r3, [pc, #124]	@ (8005708 <SDMMC_GetCmdResp2+0x88>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	@ (800570c <SDMMC_GetCmdResp2+0x8c>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0a5b      	lsrs	r3, r3, #9
 8005694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1e5a      	subs	r2, r3, #1
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056ac:	e026      	b.n	80056fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0ef      	beq.n	800569e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ea      	bne.n	800569e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2204      	movs	r2, #4
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056da:	2304      	movs	r3, #4
 80056dc:	e00e      	b.n	80056fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e003      	b.n	80056fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	22c5      	movs	r2, #197	@ 0xc5
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20000000 	.word	0x20000000
 800570c:	10624dd3 	.word	0x10624dd3

08005710 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005718:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <SDMMC_GetCmdResp3+0x74>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <SDMMC_GetCmdResp3+0x78>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	0a5b      	lsrs	r3, r3, #9
 8005724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1e5a      	subs	r2, r3, #1
 8005732:	60fa      	str	r2, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005738:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800573c:	e01b      	b.n	8005776 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ef      	beq.n	800572e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ea      	bne.n	800572e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2204      	movs	r2, #4
 8005768:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800576a:	2304      	movs	r3, #4
 800576c:	e003      	b.n	8005776 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	22c5      	movs	r2, #197	@ 0xc5
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000000 	.word	0x20000000
 8005788:	10624dd3 	.word	0x10624dd3

0800578c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	460b      	mov	r3, r1
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800579a:	4b35      	ldr	r3, [pc, #212]	@ (8005870 <SDMMC_GetCmdResp6+0xe4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a35      	ldr	r2, [pc, #212]	@ (8005874 <SDMMC_GetCmdResp6+0xe8>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	0a5b      	lsrs	r3, r3, #9
 80057a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	61fa      	str	r2, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057be:	e052      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ef      	beq.n	80057b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ea      	bne.n	80057b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ec:	2304      	movs	r3, #4
 80057ee:	e03a      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005802:	2301      	movs	r3, #1
 8005804:	e02f      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fbcc 	bl	8004fa4 <SDIO_GetCommandResponse>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	4293      	cmp	r3, r2
 8005814:	d001      	beq.n	800581a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005816:	2301      	movs	r3, #1
 8005818:	e025      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	22c5      	movs	r2, #197	@ 0xc5
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005820:	2100      	movs	r1, #0
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff fbcb 	bl	8004fbe <SDIO_GetResponse>
 8005828:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800583e:	2300      	movs	r3, #0
 8005840:	e011      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800584c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005850:	e009      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800585c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005860:	e001      	b.n	8005866 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000000 	.word	0x20000000
 8005874:	10624dd3 	.word	0x10624dd3

08005878 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005880:	4b22      	ldr	r3, [pc, #136]	@ (800590c <SDMMC_GetCmdResp7+0x94>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a22      	ldr	r2, [pc, #136]	@ (8005910 <SDMMC_GetCmdResp7+0x98>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0a5b      	lsrs	r3, r3, #9
 800588c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	60fa      	str	r2, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058a4:	e02c      	b.n	8005900 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0ef      	beq.n	8005896 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ea      	bne.n	8005896 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2204      	movs	r2, #4
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058d2:	2304      	movs	r3, #4
 80058d4:	e014      	b.n	8005900 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e009      	b.n	8005900 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2240      	movs	r2, #64	@ 0x40
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80058fe:	2300      	movs	r3, #0
  
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000000 	.word	0x20000000
 8005910:	10624dd3 	.word	0x10624dd3

08005914 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800591c:	4b11      	ldr	r3, [pc, #68]	@ (8005964 <SDMMC_GetCmdError+0x50>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a11      	ldr	r2, [pc, #68]	@ (8005968 <SDMMC_GetCmdError+0x54>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0a5b      	lsrs	r3, r3, #9
 8005928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	60fa      	str	r2, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800593c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005940:	e009      	b.n	8005956 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f1      	beq.n	8005932 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	22c5      	movs	r2, #197	@ 0xc5
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000000 	.word	0x20000000
 8005968:	10624dd3 	.word	0x10624dd3

0800596c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005970:	4904      	ldr	r1, [pc, #16]	@ (8005984 <MX_FATFS_Init+0x18>)
 8005972:	4805      	ldr	r0, [pc, #20]	@ (8005988 <MX_FATFS_Init+0x1c>)
 8005974:	f003 f87e 	bl	8008a74 <FATFS_LinkDriver>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	4b03      	ldr	r3, [pc, #12]	@ (800598c <MX_FATFS_Init+0x20>)
 800597e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005980:	bf00      	nop
 8005982:	bd80      	pop	{r7, pc}
 8005984:	2000050c 	.word	0x2000050c
 8005988:	0800bd18 	.word	0x0800bd18
 800598c:	20000508 	.word	0x20000508

08005990 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005994:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80059aa:	f000 f87b 	bl	8005aa4 <BSP_SD_IsDetected>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d001      	beq.n	80059b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e012      	b.n	80059de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80059b8:	480b      	ldr	r0, [pc, #44]	@ (80059e8 <BSP_SD_Init+0x48>)
 80059ba:	f7fd f869 	bl	8002a90 <HAL_SD_Init>
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80059c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059cc:	4806      	ldr	r0, [pc, #24]	@ (80059e8 <BSP_SD_Init+0x48>)
 80059ce:	f7fd fca9 	bl	8003324 <HAL_SD_ConfigWideBusOperation>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80059dc:	79fb      	ldrb	r3, [r7, #7]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200002d4 	.word	0x200002d4

080059ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	68f9      	ldr	r1, [r7, #12]
 8005a02:	4806      	ldr	r0, [pc, #24]	@ (8005a1c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005a04:	f7fd f8ec 	bl	8002be0 <HAL_SD_ReadBlocks_DMA>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200002d4 	.word	0x200002d4

08005a20 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	4806      	ldr	r0, [pc, #24]	@ (8005a50 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005a38:	f7fd f9b4 	bl	8002da4 <HAL_SD_WriteBlocks_DMA>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200002d4 	.word	0x200002d4

08005a54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a58:	4805      	ldr	r0, [pc, #20]	@ (8005a70 <BSP_SD_GetCardState+0x1c>)
 8005a5a:	f7fd fcfd 	bl	8003458 <HAL_SD_GetCardState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200002d4 	.word	0x200002d4

08005a74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4803      	ldr	r0, [pc, #12]	@ (8005a8c <BSP_SD_GetCardInfo+0x18>)
 8005a80:	f7fd fc24 	bl	80032cc <HAL_SD_GetCardInfo>
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200002d4 	.word	0x200002d4

08005a90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005a98:	f000 f996 	bl	8005dc8 <BSP_SD_ReadCpltCallback>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	b2db      	uxtb	r3, r3
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8005ac6:	f003 f94b 	bl	8008d60 <osKernelSysTick>
 8005aca:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8005acc:	e006      	b.n	8005adc <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ace:	f7ff ffc1 	bl	8005a54 <BSP_SD_GetCardState>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e009      	b.n	8005af0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8005adc:	f003 f940 	bl	8008d60 <osKernelSysTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d8f0      	bhi.n	8005ace <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005b02:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <SD_CheckStatus+0x38>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b08:	f7ff ffa4 	bl	8005a54 <BSP_SD_GetCardState>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d107      	bne.n	8005b22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005b12:	4b07      	ldr	r3, [pc, #28]	@ (8005b30 <SD_CheckStatus+0x38>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <SD_CheckStatus+0x38>)
 8005b20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b22:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <SD_CheckStatus+0x38>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000009 	.word	0x20000009

08005b34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005b3e:	4b20      	ldr	r3, [pc, #128]	@ (8005bc0 <SD_initialize+0x8c>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8005b44:	f003 f900 	bl	8008d48 <osKernelRunning>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d030      	beq.n	8005bb0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005b4e:	f7ff ff27 	bl	80059a0 <BSP_SD_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d107      	bne.n	8005b68 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ffcc 	bl	8005af8 <SD_CheckStatus>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	4b16      	ldr	r3, [pc, #88]	@ (8005bc0 <SD_initialize+0x8c>)
 8005b66:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005b68:	4b15      	ldr	r3, [pc, #84]	@ (8005bc0 <SD_initialize+0x8c>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d01e      	beq.n	8005bb0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8005b72:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <SD_initialize+0x90>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10e      	bne.n	8005b98 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8005b7a:	4b13      	ldr	r3, [pc, #76]	@ (8005bc8 <SD_initialize+0x94>)
 8005b7c:	f107 0408 	add.w	r4, r7, #8
 8005b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f003 fa20 	bl	8008fd2 <osMessageCreate>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc4 <SD_initialize+0x90>)
 8005b96:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <SD_initialize+0x90>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <SD_initialize+0x8c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <SD_initialize+0x8c>)
 8005bae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <SD_initialize+0x8c>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	b2db      	uxtb	r3, r3
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000009 	.word	0x20000009
 8005bc4:	20000510 	.word	0x20000510
 8005bc8:	0800bc98 	.word	0x0800bc98

08005bcc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff ff8d 	bl	8005af8 <SD_CheckStatus>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005bfe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005c02:	f7ff ff5c 	bl	8005abe <SD_CheckStatusWithTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da02      	bge.n	8005c12 <SD_read+0x2a>
  {
    return res;
 8005c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c10:	e032      	b.n	8005c78 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff fee8 	bl	80059ec <BSP_SD_ReadBlocks_DMA>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8005c22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d124      	bne.n	8005c74 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005c2a:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <SD_read+0x98>)
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	f107 0314 	add.w	r3, r7, #20
 8005c32:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005c36:	4618      	mov	r0, r3
 8005c38:	f003 fa34 	bl	80090a4 <osMessageGet>

    if (event.status == osEventMessage)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d118      	bne.n	8005c74 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d115      	bne.n	8005c74 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8005c48:	f003 f88a 	bl	8008d60 <osKernelSysTick>
 8005c4c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005c4e:	e008      	b.n	8005c62 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005c50:	f7ff ff00 	bl	8005a54 <BSP_SD_GetCardState>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <SD_read+0x7a>
              {
                res = RES_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005c60:	e008      	b.n	8005c74 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005c62:	f003 f87d 	bl	8008d60 <osKernelSysTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d9ed      	bls.n	8005c50 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	@ 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000510 	.word	0x20000510

08005c84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	@ 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005c9a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005c9e:	f7ff ff0e 	bl	8005abe <SD_CheckStatusWithTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da02      	bge.n	8005cae <SD_write+0x2a>
  {
    return res;
 8005ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cac:	e02e      	b.n	8005d0c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f7ff feb4 	bl	8005a20 <BSP_SD_WriteBlocks_DMA>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d124      	bne.n	8005d08 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005cbe:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <SD_write+0x90>)
 8005cc0:	6819      	ldr	r1, [r3, #0]
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f003 f9ea 	bl	80090a4 <osMessageGet>

    if (event.status == osEventMessage)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d118      	bne.n	8005d08 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d115      	bne.n	8005d08 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8005cdc:	f003 f840 	bl	8008d60 <osKernelSysTick>
 8005ce0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005ce2:	e008      	b.n	8005cf6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ce4:	f7ff feb6 	bl	8005a54 <BSP_SD_GetCardState>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <SD_write+0x72>
          {
            res = RES_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005cf4:	e008      	b.n	8005d08 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005cf6:	f003 f833 	bl	8008d60 <osKernelSysTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d9ed      	bls.n	8005ce4 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 8005d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3728      	adds	r7, #40	@ 0x28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000510 	.word	0x20000510

08005d18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	603a      	str	r2, [r7, #0]
 8005d22:	71fb      	strb	r3, [r7, #7]
 8005d24:	460b      	mov	r3, r1
 8005d26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <SD_ioctl+0xac>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <SD_ioctl+0x28>
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e03c      	b.n	8005dba <SD_ioctl+0xa2>

  switch (cmd)
 8005d40:	79bb      	ldrb	r3, [r7, #6]
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d834      	bhi.n	8005db0 <SD_ioctl+0x98>
 8005d46:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <SD_ioctl+0x34>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d65 	.word	0x08005d65
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d97 	.word	0x08005d97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d62:	e028      	b.n	8005db6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fe83 	bl	8005a74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d7a:	e01c      	b.n	8005db6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fe77 	bl	8005a74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005d94:	e00f      	b.n	8005db6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fe6a 	bl	8005a74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	0a5a      	lsrs	r2, r3, #9
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005dae:	e002      	b.n	8005db6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005db6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3730      	adds	r7, #48	@ 0x30
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000009 	.word	0x20000009

08005dc8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8005dcc:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <BSP_SD_ReadCpltCallback+0x18>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f003 f925 	bl	8009024 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000510 	.word	0x20000510

08005de4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	4a08      	ldr	r2, [pc, #32]	@ (8005e14 <disk_status+0x30>)
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	79fa      	ldrb	r2, [r7, #7]
 8005dfc:	4905      	ldr	r1, [pc, #20]	@ (8005e14 <disk_status+0x30>)
 8005dfe:	440a      	add	r2, r1
 8005e00:	7a12      	ldrb	r2, [r2, #8]
 8005e02:	4610      	mov	r0, r2
 8005e04:	4798      	blx	r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000053c 	.word	0x2000053c

08005e18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	4a0e      	ldr	r2, [pc, #56]	@ (8005e64 <disk_initialize+0x4c>)
 8005e2a:	5cd3      	ldrb	r3, [r2, r3]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d114      	bne.n	8005e5a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	4a0c      	ldr	r2, [pc, #48]	@ (8005e64 <disk_initialize+0x4c>)
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	79fa      	ldrb	r2, [r7, #7]
 8005e3e:	4909      	ldr	r1, [pc, #36]	@ (8005e64 <disk_initialize+0x4c>)
 8005e40:	440a      	add	r2, r1
 8005e42:	7a12      	ldrb	r2, [r2, #8]
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	4a03      	ldr	r2, [pc, #12]	@ (8005e64 <disk_initialize+0x4c>)
 8005e56:	2101      	movs	r1, #1
 8005e58:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000053c 	.word	0x2000053c

08005e68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea4 <disk_read+0x3c>)
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	689c      	ldr	r4, [r3, #8]
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4a07      	ldr	r2, [pc, #28]	@ (8005ea4 <disk_read+0x3c>)
 8005e88:	4413      	add	r3, r2
 8005e8a:	7a18      	ldrb	r0, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	47a0      	blx	r4
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd90      	pop	{r4, r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	2000053c 	.word	0x2000053c

08005ea8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <disk_write+0x3c>)
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68dc      	ldr	r4, [r3, #12]
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	4a07      	ldr	r2, [pc, #28]	@ (8005ee4 <disk_write+0x3c>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	7a18      	ldrb	r0, [r3, #8]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	47a0      	blx	r4
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd90      	pop	{r4, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000053c 	.word	0x2000053c

08005ee8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	603a      	str	r2, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <disk_ioctl+0x38>)
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	79fa      	ldrb	r2, [r7, #7]
 8005f06:	4906      	ldr	r1, [pc, #24]	@ (8005f20 <disk_ioctl+0x38>)
 8005f08:	440a      	add	r2, r1
 8005f0a:	7a10      	ldrb	r0, [r2, #8]
 8005f0c:	79b9      	ldrb	r1, [r7, #6]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	2000053c 	.word	0x2000053c

08005f24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	b21a      	sxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f48:	89fb      	ldrh	r3, [r7, #14]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3303      	adds	r3, #3
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	3202      	adds	r2, #2
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	3201      	adds	r2, #1
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	887b      	ldrh	r3, [r7, #2]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	887a      	ldrh	r2, [r7, #2]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00d      	beq.n	8006060 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	1c53      	adds	r3, r2, #1
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	6179      	str	r1, [r7, #20]
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f1      	bne.n	8006044 <mem_cpy+0x1a>
	}
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	617a      	str	r2, [r7, #20]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f3      	bne.n	800607c <mem_set+0x10>
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80060a2:	b480      	push	{r7}
 80060a4:	b089      	sub	sp, #36	@ 0x24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	61fa      	str	r2, [r7, #28]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	61ba      	str	r2, [r7, #24]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	1acb      	subs	r3, r1, r3
 80060ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <mem_cmp+0x40>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0eb      	beq.n	80060ba <mem_cmp+0x18>

	return r;
 80060e2:	697b      	ldr	r3, [r7, #20]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3724      	adds	r7, #36	@ 0x24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060fa:	e002      	b.n	8006102 <chk_chr+0x12>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <chk_chr+0x26>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	4293      	cmp	r3, r2
 8006114:	d1f2      	bne.n	80060fc <chk_chr+0xc>
	return *str;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	781b      	ldrb	r3, [r3, #0]
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <lock_fs+0x22>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	4618      	mov	r0, r3
 800613a:	f002 fd9d 	bl	8008c78 <ff_req_grant>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <lock_fs+0x22>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <lock_fs+0x24>
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00d      	beq.n	8006180 <unlock_fs+0x2e>
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d00a      	beq.n	8006180 <unlock_fs+0x2e>
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b0b      	cmp	r3, #11
 800616e:	d007      	beq.n	8006180 <unlock_fs+0x2e>
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d004      	beq.n	8006180 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4618      	mov	r0, r3
 800617c:	f002 fd91 	bl	8008ca2 <ff_rel_grant>
	}
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e029      	b.n	80061f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800619c:	4a27      	ldr	r2, [pc, #156]	@ (800623c <chk_lock+0xb4>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4413      	add	r3, r2
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01d      	beq.n	80061e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061aa:	4a24      	ldr	r2, [pc, #144]	@ (800623c <chk_lock+0xb4>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	4413      	add	r3, r2
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d116      	bne.n	80061ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80061bc:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <chk_lock+0xb4>)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	4413      	add	r3, r2
 80061c4:	3304      	adds	r3, #4
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d10c      	bne.n	80061ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80061d0:	4a1a      	ldr	r2, [pc, #104]	@ (800623c <chk_lock+0xb4>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	4413      	add	r3, r2
 80061d8:	3308      	adds	r3, #8
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d102      	bne.n	80061ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80061e4:	e007      	b.n	80061f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3301      	adds	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d9d2      	bls.n	800619c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d109      	bne.n	8006210 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <chk_lock+0x80>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d101      	bne.n	800620c <chk_lock+0x84>
 8006208:	2300      	movs	r3, #0
 800620a:	e010      	b.n	800622e <chk_lock+0xa6>
 800620c:	2312      	movs	r3, #18
 800620e:	e00e      	b.n	800622e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <chk_lock+0xa0>
 8006216:	4a09      	ldr	r2, [pc, #36]	@ (800623c <chk_lock+0xb4>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	330c      	adds	r3, #12
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006226:	d101      	bne.n	800622c <chk_lock+0xa4>
 8006228:	2310      	movs	r3, #16
 800622a:	e000      	b.n	800622e <chk_lock+0xa6>
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	2000051c 	.word	0x2000051c

08006240 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	e002      	b.n	8006252 <enq_lock+0x12>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3301      	adds	r3, #1
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d806      	bhi.n	8006266 <enq_lock+0x26>
 8006258:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <enq_lock+0x40>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f2      	bne.n	800624c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b02      	cmp	r3, #2
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	2000051c 	.word	0x2000051c

08006284 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e01f      	b.n	80062d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006294:	4a41      	ldr	r2, [pc, #260]	@ (800639c <inc_lock+0x118>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	4413      	add	r3, r2
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d113      	bne.n	80062ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80062a6:	4a3d      	ldr	r2, [pc, #244]	@ (800639c <inc_lock+0x118>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	4413      	add	r3, r2
 80062ae:	3304      	adds	r3, #4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d109      	bne.n	80062ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80062ba:	4a38      	ldr	r2, [pc, #224]	@ (800639c <inc_lock+0x118>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	4413      	add	r3, r2
 80062c2:	3308      	adds	r3, #8
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d006      	beq.n	80062dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d9dc      	bls.n	8006294 <inc_lock+0x10>
 80062da:	e000      	b.n	80062de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80062dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d132      	bne.n	800634a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e002      	b.n	80062f0 <inc_lock+0x6c>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d806      	bhi.n	8006304 <inc_lock+0x80>
 80062f6:	4a29      	ldr	r2, [pc, #164]	@ (800639c <inc_lock+0x118>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	4413      	add	r3, r2
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f2      	bne.n	80062ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d101      	bne.n	800630e <inc_lock+0x8a>
 800630a:	2300      	movs	r3, #0
 800630c:	e040      	b.n	8006390 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4922      	ldr	r1, [pc, #136]	@ (800639c <inc_lock+0x118>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	440b      	add	r3, r1
 800631a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	491e      	ldr	r1, [pc, #120]	@ (800639c <inc_lock+0x118>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	440b      	add	r3, r1
 8006328:	3304      	adds	r3, #4
 800632a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	491a      	ldr	r1, [pc, #104]	@ (800639c <inc_lock+0x118>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	440b      	add	r3, r1
 8006338:	3308      	adds	r3, #8
 800633a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800633c:	4a17      	ldr	r2, [pc, #92]	@ (800639c <inc_lock+0x118>)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	4413      	add	r3, r2
 8006344:	330c      	adds	r3, #12
 8006346:	2200      	movs	r2, #0
 8006348:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <inc_lock+0xe0>
 8006350:	4a12      	ldr	r2, [pc, #72]	@ (800639c <inc_lock+0x118>)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	4413      	add	r3, r2
 8006358:	330c      	adds	r3, #12
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <inc_lock+0xe0>
 8006360:	2300      	movs	r3, #0
 8006362:	e015      	b.n	8006390 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <inc_lock+0xf8>
 800636a:	4a0c      	ldr	r2, [pc, #48]	@ (800639c <inc_lock+0x118>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	4413      	add	r3, r2
 8006372:	330c      	adds	r3, #12
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	3301      	adds	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	e001      	b.n	8006380 <inc_lock+0xfc>
 800637c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006380:	4906      	ldr	r1, [pc, #24]	@ (800639c <inc_lock+0x118>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	440b      	add	r3, r1
 8006388:	330c      	adds	r3, #12
 800638a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	2000051c 	.word	0x2000051c

080063a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d825      	bhi.n	8006400 <dec_lock+0x60>
		n = Files[i].ctr;
 80063b4:	4a17      	ldr	r2, [pc, #92]	@ (8006414 <dec_lock+0x74>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	4413      	add	r3, r2
 80063bc:	330c      	adds	r3, #12
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80063c2:	89fb      	ldrh	r3, [r7, #14]
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c8:	d101      	bne.n	80063ce <dec_lock+0x2e>
 80063ca:	2300      	movs	r3, #0
 80063cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80063ce:	89fb      	ldrh	r3, [r7, #14]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <dec_lock+0x3a>
 80063d4:	89fb      	ldrh	r3, [r7, #14]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80063da:	4a0e      	ldr	r2, [pc, #56]	@ (8006414 <dec_lock+0x74>)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	4413      	add	r3, r2
 80063e2:	330c      	adds	r3, #12
 80063e4:	89fa      	ldrh	r2, [r7, #14]
 80063e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <dec_lock+0x5a>
 80063ee:	4a09      	ldr	r2, [pc, #36]	@ (8006414 <dec_lock+0x74>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	4413      	add	r3, r2
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	737b      	strb	r3, [r7, #13]
 80063fe:	e001      	b.n	8006404 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006400:	2302      	movs	r3, #2
 8006402:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006404:	7b7b      	ldrb	r3, [r7, #13]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	2000051c 	.word	0x2000051c

08006418 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e010      	b.n	8006448 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006426:	4a0d      	ldr	r2, [pc, #52]	@ (800645c <clear_lock+0x44>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	4413      	add	r3, r2
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d105      	bne.n	8006442 <clear_lock+0x2a>
 8006436:	4a09      	ldr	r2, [pc, #36]	@ (800645c <clear_lock+0x44>)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	4413      	add	r3, r2
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d9eb      	bls.n	8006426 <clear_lock+0xe>
	}
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000051c 	.word	0x2000051c

08006460 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d034      	beq.n	80064de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006478:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	7858      	ldrb	r0, [r3, #1]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006484:	2301      	movs	r3, #1
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	f7ff fd0e 	bl	8005ea8 <disk_write>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006492:	2301      	movs	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
 8006496:	e022      	b.n	80064de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d217      	bcs.n	80064de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	e010      	b.n	80064d8 <sync_window+0x78>
					wsect += fs->fsize;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7858      	ldrb	r0, [r3, #1]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064ca:	2301      	movs	r3, #1
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	f7ff fceb 	bl	8005ea8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d8eb      	bhi.n	80064b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d01b      	beq.n	8006538 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ffad 	bl	8006460 <sync_window>
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d113      	bne.n	8006538 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7858      	ldrb	r0, [r3, #1]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800651a:	2301      	movs	r3, #1
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	f7ff fca3 	bl	8005e68 <disk_read>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff87 	bl	8006460 <sync_window>
 8006552:	4603      	mov	r3, r0
 8006554:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d158      	bne.n	800660e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d148      	bne.n	80065f6 <sync_fs+0xb2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	791b      	ldrb	r3, [r3, #4]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d144      	bne.n	80065f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3338      	adds	r3, #56	@ 0x38
 8006570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fd78 	bl	800606c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3338      	adds	r3, #56	@ 0x38
 8006580:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006584:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fd07 	bl	8005f9c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3338      	adds	r3, #56	@ 0x38
 8006592:	4921      	ldr	r1, [pc, #132]	@ (8006618 <sync_fs+0xd4>)
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff fd1c 	bl	8005fd2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3338      	adds	r3, #56	@ 0x38
 800659e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80065a2:	491e      	ldr	r1, [pc, #120]	@ (800661c <sync_fs+0xd8>)
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fd14 	bl	8005fd2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3338      	adds	r3, #56	@ 0x38
 80065ae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7ff fd0a 	bl	8005fd2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3338      	adds	r3, #56	@ 0x38
 80065c2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f7ff fd00 	bl	8005fd2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7858      	ldrb	r0, [r3, #1]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ea:	2301      	movs	r3, #1
 80065ec:	f7ff fc5c 	bl	8005ea8 <disk_write>
			fs->fsi_flag = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fc72 	bl	8005ee8 <disk_ioctl>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <sync_fs+0xca>
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	41615252 	.word	0x41615252
 800661c:	61417272 	.word	0x61417272

08006620 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	3b02      	subs	r3, #2
 800662e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	3b02      	subs	r3, #2
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d301      	bcc.n	8006640 <clust2sect+0x20>
 800663c:	2300      	movs	r3, #0
 800663e:	e008      	b.n	8006652 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	895b      	ldrh	r3, [r3, #10]
 8006644:	461a      	mov	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	fb03 f202 	mul.w	r2, r3, r2
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006650:	4413      	add	r3, r2
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b086      	sub	sp, #24
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d904      	bls.n	800667e <get_fat+0x20>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <get_fat+0x26>
		val = 1;	/* Internal error */
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e08e      	b.n	80067a2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d061      	beq.n	8006756 <get_fat+0xf8>
 8006692:	2b03      	cmp	r3, #3
 8006694:	dc7b      	bgt.n	800678e <get_fat+0x130>
 8006696:	2b01      	cmp	r3, #1
 8006698:	d002      	beq.n	80066a0 <get_fat+0x42>
 800669a:	2b02      	cmp	r3, #2
 800669c:	d041      	beq.n	8006722 <get_fat+0xc4>
 800669e:	e076      	b.n	800678e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	0a5b      	lsrs	r3, r3, #9
 80066b6:	4413      	add	r3, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	6938      	ldr	r0, [r7, #16]
 80066bc:	f7ff ff14 	bl	80064e8 <move_window>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d166      	bne.n	8006794 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	60fa      	str	r2, [r7, #12]
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	0a5b      	lsrs	r3, r3, #9
 80066e2:	4413      	add	r3, r2
 80066e4:	4619      	mov	r1, r3
 80066e6:	6938      	ldr	r0, [r7, #16]
 80066e8:	f7ff fefe 	bl	80064e8 <move_window>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d152      	bne.n	8006798 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <get_fat+0xba>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	e002      	b.n	800671e <get_fat+0xc0>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800671e:	617b      	str	r3, [r7, #20]
			break;
 8006720:	e03f      	b.n	80067a2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	4413      	add	r3, r2
 800672c:	4619      	mov	r1, r3
 800672e:	6938      	ldr	r0, [r7, #16]
 8006730:	f7ff feda 	bl	80064e8 <move_window>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d130      	bne.n	800679c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006748:	4413      	add	r3, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fbea 	bl	8005f24 <ld_word>
 8006750:	4603      	mov	r3, r0
 8006752:	617b      	str	r3, [r7, #20]
			break;
 8006754:	e025      	b.n	80067a2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	4413      	add	r3, r2
 8006760:	4619      	mov	r1, r3
 8006762:	6938      	ldr	r0, [r7, #16]
 8006764:	f7ff fec0 	bl	80064e8 <move_window>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d118      	bne.n	80067a0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800677c:	4413      	add	r3, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fbe9 	bl	8005f56 <ld_dword>
 8006784:	4603      	mov	r3, r0
 8006786:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800678a:	617b      	str	r3, [r7, #20]
			break;
 800678c:	e009      	b.n	80067a2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800678e:	2301      	movs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e006      	b.n	80067a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006794:	bf00      	nop
 8006796:	e004      	b.n	80067a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006798:	bf00      	nop
 800679a:	e002      	b.n	80067a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80067a0:	bf00      	nop
		}
	}

	return val;
 80067a2:	697b      	ldr	r3, [r7, #20]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b089      	sub	sp, #36	@ 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80067b8:	2302      	movs	r3, #2
 80067ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	f240 80d9 	bls.w	8006976 <put_fat+0x1ca>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 80d3 	bcs.w	8006976 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	f000 8096 	beq.w	8006906 <put_fat+0x15a>
 80067da:	2b03      	cmp	r3, #3
 80067dc:	f300 80cb 	bgt.w	8006976 <put_fat+0x1ca>
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d002      	beq.n	80067ea <put_fat+0x3e>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d06e      	beq.n	80068c6 <put_fat+0x11a>
 80067e8:	e0c5      	b.n	8006976 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4413      	add	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	0a5b      	lsrs	r3, r3, #9
 8006800:	4413      	add	r3, r2
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fe6f 	bl	80064e8 <move_window>
 800680a:	4603      	mov	r3, r0
 800680c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 80a9 	bne.w	8006968 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	61b9      	str	r1, [r7, #24]
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	4413      	add	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <put_fat+0xa4>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b25b      	sxtb	r3, r3
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b25a      	sxtb	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	b25b      	sxtb	r3, r3
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	b25b      	sxtb	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b25b      	sxtb	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e001      	b.n	8006854 <put_fat+0xa8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	4413      	add	r3, r2
 8006868:	4619      	mov	r1, r3
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fe3c 	bl	80064e8 <move_window>
 8006870:	4603      	mov	r3, r0
 8006872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006874:	7ffb      	ldrb	r3, [r7, #31]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d178      	bne.n	800696c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	4413      	add	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <put_fat+0xf0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e00e      	b.n	80068ba <put_fat+0x10e>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	b25a      	sxtb	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b25b      	sxtb	r3, r3
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	70da      	strb	r2, [r3, #3]
			break;
 80068c4:	e057      	b.n	8006976 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	0a1b      	lsrs	r3, r3, #8
 80068ce:	4413      	add	r3, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7ff fe08 	bl	80064e8 <move_window>
 80068d8:	4603      	mov	r3, r0
 80068da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068dc:	7ffb      	ldrb	r3, [r7, #31]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d146      	bne.n	8006970 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80068f0:	4413      	add	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	b292      	uxth	r2, r2
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fb4f 	bl	8005f9c <st_word>
			fs->wflag = 1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	70da      	strb	r2, [r3, #3]
			break;
 8006904:	e037      	b.n	8006976 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	09db      	lsrs	r3, r3, #7
 800690e:	4413      	add	r3, r2
 8006910:	4619      	mov	r1, r3
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fde8 	bl	80064e8 <move_window>
 8006918:	4603      	mov	r3, r0
 800691a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800691c:	7ffb      	ldrb	r3, [r7, #31]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d128      	bne.n	8006974 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006936:	4413      	add	r3, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fb0c 	bl	8005f56 <ld_dword>
 800693e:	4603      	mov	r3, r0
 8006940:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006944:	4323      	orrs	r3, r4
 8006946:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006956:	4413      	add	r3, r2
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fb39 	bl	8005fd2 <st_dword>
			fs->wflag = 1;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	70da      	strb	r2, [r3, #3]
			break;
 8006966:	e006      	b.n	8006976 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006968:	bf00      	nop
 800696a:	e004      	b.n	8006976 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800696c:	bf00      	nop
 800696e:	e002      	b.n	8006976 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006970:	bf00      	nop
 8006972:	e000      	b.n	8006976 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006974:	bf00      	nop
		}
	}
	return res;
 8006976:	7ffb      	ldrb	r3, [r7, #31]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3724      	adds	r7, #36	@ 0x24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd90      	pop	{r4, r7, pc}

08006980 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d904      	bls.n	80069a6 <remove_chain+0x26>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d301      	bcc.n	80069aa <remove_chain+0x2a>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e04b      	b.n	8006a42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80069b0:	f04f 32ff 	mov.w	r2, #4294967295
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	69b8      	ldr	r0, [r7, #24]
 80069b8:	f7ff fef8 	bl	80067ac <put_fat>
 80069bc:	4603      	mov	r3, r0
 80069be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80069c0:	7ffb      	ldrb	r3, [r7, #31]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <remove_chain+0x4a>
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	e03b      	b.n	8006a42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fe46 	bl	800665e <get_fat>
 80069d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d031      	beq.n	8006a3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <remove_chain+0x64>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e02e      	b.n	8006a42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d101      	bne.n	80069f0 <remove_chain+0x70>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e028      	b.n	8006a42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80069f0:	2200      	movs	r2, #0
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	69b8      	ldr	r0, [r7, #24]
 80069f6:	f7ff fed9 	bl	80067ac <put_fat>
 80069fa:	4603      	mov	r3, r0
 80069fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <remove_chain+0x88>
 8006a04:	7ffb      	ldrb	r3, [r7, #31]
 8006a06:	e01c      	b.n	8006a42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	3b02      	subs	r3, #2
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d20b      	bcs.n	8006a2e <remove_chain+0xae>
			fs->free_clst++;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	791b      	ldrb	r3, [r3, #4]
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d3c6      	bcc.n	80069ca <remove_chain+0x4a>
 8006a3c:	e000      	b.n	8006a40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006a3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3720      	adds	r7, #32
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b088      	sub	sp, #32
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10d      	bne.n	8006a7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <create_chain+0x2c>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d31b      	bcc.n	8006aae <create_chain+0x64>
 8006a76:	2301      	movs	r3, #1
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e018      	b.n	8006aae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fded 	bl	800665e <get_fat>
 8006a84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d801      	bhi.n	8006a90 <create_chain+0x46>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e070      	b.n	8006b72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d101      	bne.n	8006a9c <create_chain+0x52>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	e06a      	b.n	8006b72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d201      	bcs.n	8006aaa <create_chain+0x60>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e063      	b.n	8006b72 <create_chain+0x128>
		scl = clst;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d307      	bcc.n	8006ad2 <create_chain+0x88>
				ncl = 2;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d901      	bls.n	8006ad2 <create_chain+0x88>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e04f      	b.n	8006b72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ad2:	69f9      	ldr	r1, [r7, #28]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fdc2 	bl	800665e <get_fat>
 8006ada:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d003      	beq.n	8006af0 <create_chain+0xa6>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d101      	bne.n	8006af4 <create_chain+0xaa>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	e03e      	b.n	8006b72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1da      	bne.n	8006ab2 <create_chain+0x68>
 8006afc:	2300      	movs	r3, #0
 8006afe:	e038      	b.n	8006b72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006b00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	69f9      	ldr	r1, [r7, #28]
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7ff fe4f 	bl	80067ac <put_fat>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <create_chain+0xe2>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d006      	beq.n	8006b2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6938      	ldr	r0, [r7, #16]
 8006b24:	f7ff fe42 	bl	80067ac <put_fat>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d116      	bne.n	8006b60 <create_chain+0x116>
		fs->last_clst = ncl;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	3b02      	subs	r3, #2
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d804      	bhi.n	8006b50 <create_chain+0x106>
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	791b      	ldrb	r3, [r3, #4]
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	711a      	strb	r2, [r3, #4]
 8006b5e:	e007      	b.n	8006b70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d102      	bne.n	8006b6c <create_chain+0x122>
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6a:	e000      	b.n	8006b6e <create_chain+0x124>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b70:	69fb      	ldr	r3, [r7, #28]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	3304      	adds	r3, #4
 8006b90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	0a5b      	lsrs	r3, r3, #9
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	8952      	ldrh	r2, [r2, #10]
 8006b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1d1a      	adds	r2, r3, #4
 8006ba4:	613a      	str	r2, [r7, #16]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <clmt_clust+0x3a>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e010      	b.n	8006bd6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d307      	bcc.n	8006bcc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006bca:	e7e9      	b.n	8006ba0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006bcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bf8:	d204      	bcs.n	8006c04 <dir_sdi+0x22>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006c04:	2302      	movs	r3, #2
 8006c06:	e063      	b.n	8006cd0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <dir_sdi+0x46>
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d902      	bls.n	8006c28 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10c      	bne.n	8006c48 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	8912      	ldrh	r2, [r2, #8]
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d301      	bcc.n	8006c3e <dir_sdi+0x5c>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e048      	b.n	8006cd0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	61da      	str	r2, [r3, #28]
 8006c46:	e029      	b.n	8006c9c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	895b      	ldrh	r3, [r3, #10]
 8006c4c:	025b      	lsls	r3, r3, #9
 8006c4e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c50:	e019      	b.n	8006c86 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fd01 	bl	800665e <get_fat>
 8006c5c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d101      	bne.n	8006c6a <dir_sdi+0x88>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e032      	b.n	8006cd0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d904      	bls.n	8006c7a <dir_sdi+0x98>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d301      	bcc.n	8006c7e <dir_sdi+0x9c>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e028      	b.n	8006cd0 <dir_sdi+0xee>
			ofs -= csz;
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d2e1      	bcs.n	8006c52 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006c8e:	6979      	ldr	r1, [r7, #20]
 8006c90:	6938      	ldr	r0, [r7, #16]
 8006c92:	f7ff fcc5 	bl	8006620 <clust2sect>
 8006c96:	4602      	mov	r2, r0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <dir_sdi+0xcc>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e010      	b.n	8006cd0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	0a5b      	lsrs	r3, r3, #9
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	3320      	adds	r3, #32
 8006cee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <dir_next+0x28>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cfe:	d301      	bcc.n	8006d04 <dir_next+0x2c>
 8006d00:	2304      	movs	r3, #4
 8006d02:	e0aa      	b.n	8006e5a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 8098 	bne.w	8006e40 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	8912      	ldrh	r2, [r2, #8]
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f0c0 8088 	bcc.w	8006e40 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	2304      	movs	r3, #4
 8006d38:	e08f      	b.n	8006e5a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	0a5b      	lsrs	r3, r3, #9
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	8952      	ldrh	r2, [r2, #10]
 8006d42:	3a01      	subs	r2, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d17a      	bne.n	8006e40 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7ff fc83 	bl	800665e <get_fat>
 8006d58:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d801      	bhi.n	8006d64 <dir_next+0x8c>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e07a      	b.n	8006e5a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d101      	bne.n	8006d70 <dir_next+0x98>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e074      	b.n	8006e5a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d358      	bcc.n	8006e2c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
 8006d86:	2304      	movs	r3, #4
 8006d88:	e067      	b.n	8006e5a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f7ff fe59 	bl	8006a4a <create_chain>
 8006d98:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <dir_next+0xcc>
 8006da0:	2307      	movs	r3, #7
 8006da2:	e05a      	b.n	8006e5a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <dir_next+0xd6>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e055      	b.n	8006e5a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d101      	bne.n	8006dba <dir_next+0xe2>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e04f      	b.n	8006e5a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f7ff fb50 	bl	8006460 <sync_window>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <dir_next+0xf2>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e047      	b.n	8006e5a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3338      	adds	r3, #56	@ 0x38
 8006dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff f949 	bl	800606c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	6979      	ldr	r1, [r7, #20]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fc1d 	bl	8006620 <clust2sect>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dec:	e012      	b.n	8006e14 <dir_next+0x13c>
						fs->wflag = 1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fb33 	bl	8006460 <sync_window>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <dir_next+0x12c>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e02a      	b.n	8006e5a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3301      	adds	r3, #1
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	895b      	ldrh	r3, [r3, #10]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d3e6      	bcc.n	8006dee <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006e32:	6979      	ldr	r1, [r7, #20]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff fbf3 	bl	8006620 <clust2sect>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e52:	441a      	add	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff feb4 	bl	8006be2 <dir_sdi>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d12b      	bne.n	8006edc <dir_alloc+0x7a>
		n = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fb2a 	bl	80064e8 <move_window>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d11d      	bne.n	8006eda <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2be5      	cmp	r3, #229	@ 0xe5
 8006ea6:	d004      	beq.n	8006eb2 <dir_alloc+0x50>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d107      	bne.n	8006ec2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d102      	bne.n	8006ec6 <dir_alloc+0x64>
 8006ec0:	e00c      	b.n	8006edc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ff05 	bl	8006cd8 <dir_next>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0d7      	beq.n	8006e88 <dir_alloc+0x26>
 8006ed8:	e000      	b.n	8006edc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006eda:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d101      	bne.n	8006ee6 <dir_alloc+0x84>
 8006ee2:	2307      	movs	r3, #7
 8006ee4:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	331a      	adds	r3, #26
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff f810 	bl	8005f24 <ld_word>
 8006f04:	4603      	mov	r3, r0
 8006f06:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d109      	bne.n	8006f24 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff f805 	bl	8005f24 <ld_word>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	331a      	adds	r3, #26
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	b292      	uxth	r2, r2
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff f829 	bl	8005f9c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d109      	bne.n	8006f66 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f103 0214 	add.w	r2, r3, #20
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7ff f81b 	bl	8005f9c <st_word>
	}
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	331a      	adds	r3, #26
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe ffd0 	bl	8005f24 <ld_word>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <cmp_lfn+0x1e>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e059      	b.n	8007042 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f96:	1e5a      	subs	r2, r3, #1
 8006f98:	4613      	mov	r3, r2
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	81fb      	strh	r3, [r7, #14]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e033      	b.n	8007016 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006fae:	4a27      	ldr	r2, [pc, #156]	@ (800704c <cmp_lfn+0xdc>)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4413      	add	r3, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe ffb1 	bl	8005f24 <ld_word>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01a      	beq.n	8007002 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2bfe      	cmp	r3, #254	@ 0xfe
 8006fd0:	d812      	bhi.n	8006ff8 <cmp_lfn+0x88>
 8006fd2:	89bb      	ldrh	r3, [r7, #12]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fd99 	bl	8008b0c <ff_wtoupper>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461c      	mov	r4, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	617a      	str	r2, [r7, #20]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 fd8d 	bl	8008b0c <ff_wtoupper>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d001      	beq.n	8006ffc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e022      	b.n	8007042 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ffc:	89bb      	ldrh	r3, [r7, #12]
 8006ffe:	81fb      	strh	r3, [r7, #14]
 8007000:	e006      	b.n	8007010 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007002:	89bb      	ldrh	r3, [r7, #12]
 8007004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007008:	4293      	cmp	r3, r2
 800700a:	d001      	beq.n	8007010 <cmp_lfn+0xa0>
 800700c:	2300      	movs	r3, #0
 800700e:	e018      	b.n	8007042 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	3301      	adds	r3, #1
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d9c8      	bls.n	8006fae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <cmp_lfn+0xd0>
 8007028:	89fb      	ldrh	r3, [r7, #14]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <cmp_lfn+0xd0>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <cmp_lfn+0xd0>
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007040:	2301      	movs	r3, #1
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	bf00      	nop
 800704c:	0800bdac 	.word	0x0800bdac

08007050 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	460b      	mov	r3, r1
 8007060:	71fb      	strb	r3, [r7, #7]
 8007062:	4613      	mov	r3, r2
 8007064:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	330d      	adds	r3, #13
 800706a:	79ba      	ldrb	r2, [r7, #6]
 800706c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	330b      	adds	r3, #11
 8007072:	220f      	movs	r2, #15
 8007074:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	330c      	adds	r3, #12
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	331a      	adds	r3, #26
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe ff89 	bl	8005f9c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	82fb      	strh	r3, [r7, #22]
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <put_lfn+0x6c>
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	61fa      	str	r2, [r7, #28]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80070bc:	4a17      	ldr	r2, [pc, #92]	@ (800711c <put_lfn+0xcc>)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	4413      	add	r3, r2
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	8afa      	ldrh	r2, [r7, #22]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe ff64 	bl	8005f9c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80070d4:	8afb      	ldrh	r3, [r7, #22]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d102      	bne.n	80070e0 <put_lfn+0x90>
 80070da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b0c      	cmp	r3, #12
 80070ea:	d9da      	bls.n	80070a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80070ec:	8afb      	ldrh	r3, [r7, #22]
 80070ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d006      	beq.n	8007104 <put_lfn+0xb4>
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <put_lfn+0xbc>
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	79fa      	ldrb	r2, [r7, #7]
 8007110:	701a      	strb	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	0800bdac 	.word	0x0800bdac

08007120 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08c      	sub	sp, #48	@ 0x30
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800712e:	220b      	movs	r2, #11
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7fe ff79 	bl	800602a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b05      	cmp	r3, #5
 800713c:	d92b      	bls.n	8007196 <gen_numname+0x76>
		sr = seq;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007142:	e022      	b.n	800718a <gen_numname+0x6a>
			wc = *lfn++;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800714e:	2300      	movs	r3, #0
 8007150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007152:	e017      	b.n	8007184 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	005a      	lsls	r2, r3, #1
 8007158:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	4413      	add	r3, r2
 8007160:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <gen_numname+0x5e>
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007178:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800717c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	3301      	adds	r3, #1
 8007182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	2b0f      	cmp	r3, #15
 8007188:	d9e4      	bls.n	8007154 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1d8      	bne.n	8007144 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007196:	2307      	movs	r3, #7
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	3330      	adds	r3, #48	@ 0x30
 80071a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80071aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071ae:	2b39      	cmp	r3, #57	@ 0x39
 80071b0:	d904      	bls.n	80071bc <gen_numname+0x9c>
 80071b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80071b6:	3307      	adds	r3, #7
 80071b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	1e5a      	subs	r2, r3, #1
 80071c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80071c2:	3330      	adds	r3, #48	@ 0x30
 80071c4:	443b      	add	r3, r7
 80071c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80071ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1df      	bne.n	800719a <gen_numname+0x7a>
	ns[i] = '~';
 80071da:	f107 0214 	add.w	r2, r7, #20
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	4413      	add	r3, r2
 80071e2:	227e      	movs	r2, #126	@ 0x7e
 80071e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80071e6:	2300      	movs	r3, #0
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ea:	e002      	b.n	80071f2 <gen_numname+0xd2>
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d205      	bcs.n	8007206 <gen_numname+0xe6>
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	4413      	add	r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b20      	cmp	r3, #32
 8007204:	d1f2      	bne.n	80071ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	2b07      	cmp	r3, #7
 800720a:	d807      	bhi.n	800721c <gen_numname+0xfc>
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007212:	3330      	adds	r3, #48	@ 0x30
 8007214:	443b      	add	r3, r7
 8007216:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800721a:	e000      	b.n	800721e <gen_numname+0xfe>
 800721c:	2120      	movs	r1, #32
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	627a      	str	r2, [r7, #36]	@ 0x24
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	460a      	mov	r2, r1
 800722a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	2b07      	cmp	r3, #7
 8007230:	d9e9      	bls.n	8007206 <gen_numname+0xe6>
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	3730      	adds	r7, #48	@ 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007248:	230b      	movs	r3, #11
 800724a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	0852      	lsrs	r2, r2, #1
 8007252:	01db      	lsls	r3, r3, #7
 8007254:	4313      	orrs	r3, r2
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	6079      	str	r1, [r7, #4]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	4413      	add	r3, r2
 8007262:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3b01      	subs	r3, #1
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ed      	bne.n	800724c <sum_sfn+0x10>
	return sum;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fca7 	bl	8006be2 <dir_sdi>
 8007294:	4603      	mov	r3, r0
 8007296:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <dir_find+0x24>
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	e0a9      	b.n	80073f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072a2:	23ff      	movs	r3, #255	@ 0xff
 80072a4:	753b      	strb	r3, [r7, #20]
 80072a6:	7d3b      	ldrb	r3, [r7, #20]
 80072a8:	757b      	strb	r3, [r7, #21]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6938      	ldr	r0, [r7, #16]
 80072ba:	f7ff f915 	bl	80064e8 <move_window>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8090 	bne.w	80073ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80072d2:	7dbb      	ldrb	r3, [r7, #22]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <dir_find+0x60>
 80072d8:	2304      	movs	r3, #4
 80072da:	75fb      	strb	r3, [r7, #23]
 80072dc:	e08a      	b.n	80073f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	330b      	adds	r3, #11
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ea:	73fb      	strb	r3, [r7, #15]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80072f2:	7dbb      	ldrb	r3, [r7, #22]
 80072f4:	2be5      	cmp	r3, #229	@ 0xe5
 80072f6:	d007      	beq.n	8007308 <dir_find+0x8a>
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <dir_find+0x98>
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b0f      	cmp	r3, #15
 8007306:	d006      	beq.n	8007316 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007308:	23ff      	movs	r3, #255	@ 0xff
 800730a:	757b      	strb	r3, [r7, #21]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f04f 32ff 	mov.w	r2, #4294967295
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
 8007314:	e05e      	b.n	80073d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b0f      	cmp	r3, #15
 800731a:	d136      	bne.n	800738a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d154      	bne.n	80073d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800732a:	7dbb      	ldrb	r3, [r7, #22]
 800732c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	7b5b      	ldrb	r3, [r3, #13]
 800733a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800733c:	7dbb      	ldrb	r3, [r7, #22]
 800733e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007342:	75bb      	strb	r3, [r7, #22]
 8007344:	7dbb      	ldrb	r3, [r7, #22]
 8007346:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007350:	7dba      	ldrb	r2, [r7, #22]
 8007352:	7d7b      	ldrb	r3, [r7, #21]
 8007354:	429a      	cmp	r2, r3
 8007356:	d115      	bne.n	8007384 <dir_find+0x106>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	330d      	adds	r3, #13
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	7d3a      	ldrb	r2, [r7, #20]
 8007362:	429a      	cmp	r2, r3
 8007364:	d10e      	bne.n	8007384 <dir_find+0x106>
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7ff fdfd 	bl	8006f70 <cmp_lfn>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <dir_find+0x106>
 800737c:	7d7b      	ldrb	r3, [r7, #21]
 800737e:	3b01      	subs	r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e000      	b.n	8007386 <dir_find+0x108>
 8007384:	23ff      	movs	r3, #255	@ 0xff
 8007386:	757b      	strb	r3, [r7, #21]
 8007388:	e024      	b.n	80073d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800738a:	7d7b      	ldrb	r3, [r7, #21]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <dir_find+0x126>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ff51 	bl	800723c <sum_sfn>
 800739a:	4603      	mov	r3, r0
 800739c:	461a      	mov	r2, r3
 800739e:	7d3b      	ldrb	r3, [r7, #20]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d024      	beq.n	80073ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <dir_find+0x14a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a18      	ldr	r0, [r3, #32]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3324      	adds	r3, #36	@ 0x24
 80073ba:	220b      	movs	r2, #11
 80073bc:	4619      	mov	r1, r3
 80073be:	f7fe fe70 	bl	80060a2 <mem_cmp>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d014      	beq.n	80073f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80073c8:	23ff      	movs	r3, #255	@ 0xff
 80073ca:	757b      	strb	r3, [r7, #21]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f04f 32ff 	mov.w	r2, #4294967295
 80073d2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fc7e 	bl	8006cd8 <dir_next>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f43f af65 	beq.w	80072b2 <dir_find+0x34>
 80073e8:	e004      	b.n	80073f4 <dir_find+0x176>
		if (res != FR_OK) break;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80073f2:	bf00      	nop

	return res;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08c      	sub	sp, #48	@ 0x30
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007414:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <dir_register+0x20>
 800741c:	2306      	movs	r3, #6
 800741e:	e0e0      	b.n	80075e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007420:	2300      	movs	r3, #0
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
 8007424:	e002      	b.n	800742c <dir_register+0x2c>
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	3301      	adds	r3, #1
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f4      	bne.n	8007426 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007442:	f107 030c 	add.w	r3, r7, #12
 8007446:	220c      	movs	r2, #12
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fdee 	bl	800602a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d032      	beq.n	80074be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2240      	movs	r2, #64	@ 0x40
 800745c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007460:	2301      	movs	r3, #1
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007464:	e016      	b.n	8007494 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	f107 010c 	add.w	r1, r7, #12
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	f7ff fe53 	bl	8007120 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff feff 	bl	800727e <dir_find>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	3301      	adds	r3, #1
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	2b63      	cmp	r3, #99	@ 0x63
 8007498:	d9e5      	bls.n	8007466 <dir_register+0x66>
 800749a:	e000      	b.n	800749e <dir_register+0x9e>
			if (res != FR_OK) break;
 800749c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	2b64      	cmp	r3, #100	@ 0x64
 80074a2:	d101      	bne.n	80074a8 <dir_register+0xa8>
 80074a4:	2307      	movs	r3, #7
 80074a6:	e09c      	b.n	80075e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80074a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d002      	beq.n	80074b6 <dir_register+0xb6>
 80074b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074b4:	e095      	b.n	80075e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80074b6:	7dfa      	ldrb	r2, [r7, #23]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <dir_register+0xd8>
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	330c      	adds	r3, #12
 80074cc:	4a47      	ldr	r2, [pc, #284]	@ (80075ec <dir_register+0x1ec>)
 80074ce:	fba2 2303 	umull	r2, r3, r2, r3
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	3301      	adds	r3, #1
 80074d6:	e000      	b.n	80074da <dir_register+0xda>
 80074d8:	2301      	movs	r3, #1
 80074da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80074dc:	6a39      	ldr	r1, [r7, #32]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fcbf 	bl	8006e62 <dir_alloc>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80074ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d148      	bne.n	8007584 <dir_register+0x184>
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	623b      	str	r3, [r7, #32]
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d042      	beq.n	8007584 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	015b      	lsls	r3, r3, #5
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fb69 	bl	8006be2 <dir_sdi>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007516:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d132      	bne.n	8007584 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	@ 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fe8a 	bl	800723c <sum_sfn>
 8007528:	4603      	mov	r3, r0
 800752a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4619      	mov	r1, r3
 8007532:	69f8      	ldr	r0, [r7, #28]
 8007534:	f7fe ffd8 	bl	80064e8 <move_window>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800753e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11d      	bne.n	8007582 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	68d8      	ldr	r0, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a19      	ldr	r1, [r3, #32]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	7efb      	ldrb	r3, [r7, #27]
 8007554:	f7ff fd7c 	bl	8007050 <put_lfn>
				fs->wflag = 1;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2201      	movs	r2, #1
 800755c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800755e:	2100      	movs	r1, #0
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fbb9 	bl	8006cd8 <dir_next>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800756c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007570:	2b00      	cmp	r3, #0
 8007572:	d107      	bne.n	8007584 <dir_register+0x184>
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	3b01      	subs	r3, #1
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1d5      	bne.n	800752c <dir_register+0x12c>
 8007580:	e000      	b.n	8007584 <dir_register+0x184>
				if (res != FR_OK) break;
 8007582:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007588:	2b00      	cmp	r3, #0
 800758a:	d128      	bne.n	80075de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	4619      	mov	r1, r3
 8007592:	69f8      	ldr	r0, [r7, #28]
 8007594:	f7fe ffa8 	bl	80064e8 <move_window>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800759e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d11b      	bne.n	80075de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	2220      	movs	r2, #32
 80075ac:	2100      	movs	r1, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd5c 	bl	800606c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a18      	ldr	r0, [r3, #32]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3324      	adds	r3, #36	@ 0x24
 80075bc:	220b      	movs	r2, #11
 80075be:	4619      	mov	r1, r3
 80075c0:	f7fe fd33 	bl	800602a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	330c      	adds	r3, #12
 80075d0:	f002 0218 	and.w	r2, r2, #24
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2201      	movs	r2, #1
 80075dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	@ 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	4ec4ec4f 	.word	0x4ec4ec4f

080075f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	61ba      	str	r2, [r7, #24]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4413      	add	r3, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800761e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007620:	2b1f      	cmp	r3, #31
 8007622:	d940      	bls.n	80076a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007626:	2b2f      	cmp	r3, #47	@ 0x2f
 8007628:	d006      	beq.n	8007638 <create_name+0x48>
 800762a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800762c:	2b5c      	cmp	r3, #92	@ 0x5c
 800762e:	d110      	bne.n	8007652 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007630:	e002      	b.n	8007638 <create_name+0x48>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	3301      	adds	r3, #1
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	4413      	add	r3, r2
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b2f      	cmp	r3, #47	@ 0x2f
 8007642:	d0f6      	beq.n	8007632 <create_name+0x42>
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4413      	add	r3, r2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b5c      	cmp	r3, #92	@ 0x5c
 800764e:	d0f0      	beq.n	8007632 <create_name+0x42>
			break;
 8007650:	e02a      	b.n	80076a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2bfe      	cmp	r3, #254	@ 0xfe
 8007656:	d901      	bls.n	800765c <create_name+0x6c>
 8007658:	2306      	movs	r3, #6
 800765a:	e17d      	b.n	8007958 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800765c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800765e:	b2db      	uxtb	r3, r3
 8007660:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007664:	2101      	movs	r1, #1
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fa14 	bl	8008a94 <ff_convert>
 800766c:	4603      	mov	r3, r0
 800766e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <create_name+0x8a>
 8007676:	2306      	movs	r3, #6
 8007678:	e16e      	b.n	8007958 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800767a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800767c:	2b7f      	cmp	r3, #127	@ 0x7f
 800767e:	d809      	bhi.n	8007694 <create_name+0xa4>
 8007680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007682:	4619      	mov	r1, r3
 8007684:	488d      	ldr	r0, [pc, #564]	@ (80078bc <create_name+0x2cc>)
 8007686:	f7fe fd33 	bl	80060f0 <chk_chr>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <create_name+0xa4>
 8007690:	2306      	movs	r3, #6
 8007692:	e161      	b.n	8007958 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	617a      	str	r2, [r7, #20]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80076a4:	e7b4      	b.n	8007610 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80076a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	441a      	add	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80076b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076b4:	2b1f      	cmp	r3, #31
 80076b6:	d801      	bhi.n	80076bc <create_name+0xcc>
 80076b8:	2304      	movs	r3, #4
 80076ba:	e000      	b.n	80076be <create_name+0xce>
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80076c2:	e011      	b.n	80076e8 <create_name+0xf8>
		w = lfn[di - 1];
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80076ca:	3b01      	subs	r3, #1
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80076d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d002      	beq.n	80076e2 <create_name+0xf2>
 80076dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076de:	2b2e      	cmp	r3, #46	@ 0x2e
 80076e0:	d106      	bne.n	80076f0 <create_name+0x100>
		di--;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1ea      	bne.n	80076c4 <create_name+0xd4>
 80076ee:	e000      	b.n	80076f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80076f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <create_name+0x118>
 8007704:	2306      	movs	r3, #6
 8007706:	e127      	b.n	8007958 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3324      	adds	r3, #36	@ 0x24
 800770c:	220b      	movs	r2, #11
 800770e:	2120      	movs	r1, #32
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fcab 	bl	800606c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	e002      	b.n	8007722 <create_name+0x132>
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	3301      	adds	r3, #1
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	2b20      	cmp	r3, #32
 800772e:	d0f5      	beq.n	800771c <create_name+0x12c>
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	2b2e      	cmp	r3, #46	@ 0x2e
 800773c:	d0ee      	beq.n	800771c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <create_name+0x168>
 8007744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007748:	f043 0303 	orr.w	r3, r3, #3
 800774c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007750:	e002      	b.n	8007758 <create_name+0x168>
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3b01      	subs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <create_name+0x182>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007764:	3b01      	subs	r3, #1
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007770:	d1ef      	bne.n	8007752 <create_name+0x162>

	i = b = 0; ni = 8;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007778:	2300      	movs	r3, #0
 800777a:	623b      	str	r3, [r7, #32]
 800777c:	2308      	movs	r3, #8
 800777e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	61ba      	str	r2, [r7, #24]
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007790:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8090 	beq.w	80078b8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800779a:	2b20      	cmp	r3, #32
 800779c:	d006      	beq.n	80077ac <create_name+0x1bc>
 800779e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a2:	d10a      	bne.n	80077ba <create_name+0x1ca>
 80077a4:	69ba      	ldr	r2, [r7, #24]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d006      	beq.n	80077ba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80077ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b0:	f043 0303 	orr.w	r3, r3, #3
 80077b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077b8:	e07d      	b.n	80078b6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80077ba:	6a3a      	ldr	r2, [r7, #32]
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d203      	bcs.n	80077ca <create_name+0x1da>
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d123      	bne.n	8007812 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	2b0b      	cmp	r3, #11
 80077ce:	d106      	bne.n	80077de <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80077d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d4:	f043 0303 	orr.w	r3, r3, #3
 80077d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077dc:	e075      	b.n	80078ca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d005      	beq.n	80077f2 <create_name+0x202>
 80077e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ea:	f043 0303 	orr.w	r3, r3, #3
 80077ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d866      	bhi.n	80078c8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	2308      	movs	r3, #8
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	230b      	movs	r3, #11
 8007804:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007806:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007810:	e051      	b.n	80078b6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007814:	2b7f      	cmp	r3, #127	@ 0x7f
 8007816:	d914      	bls.n	8007842 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007818:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f939 	bl	8008a94 <ff_convert>
 8007822:	4603      	mov	r3, r0
 8007824:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <create_name+0x246>
 800782c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800782e:	3b80      	subs	r3, #128	@ 0x80
 8007830:	4a23      	ldr	r2, [pc, #140]	@ (80078c0 <create_name+0x2d0>)
 8007832:	5cd3      	ldrb	r3, [r2, r3]
 8007834:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <create_name+0x268>
 8007848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800784a:	4619      	mov	r1, r3
 800784c:	481d      	ldr	r0, [pc, #116]	@ (80078c4 <create_name+0x2d4>)
 800784e:	f7fe fc4f 	bl	80060f0 <chk_chr>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007858:	235f      	movs	r3, #95	@ 0x5f
 800785a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800785c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007860:	f043 0303 	orr.w	r3, r3, #3
 8007864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007868:	e01b      	b.n	80078a2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800786a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800786c:	2b40      	cmp	r3, #64	@ 0x40
 800786e:	d909      	bls.n	8007884 <create_name+0x294>
 8007870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007872:	2b5a      	cmp	r3, #90	@ 0x5a
 8007874:	d806      	bhi.n	8007884 <create_name+0x294>
					b |= 2;
 8007876:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800787a:	f043 0302 	orr.w	r3, r3, #2
 800787e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007882:	e00e      	b.n	80078a2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007886:	2b60      	cmp	r3, #96	@ 0x60
 8007888:	d90b      	bls.n	80078a2 <create_name+0x2b2>
 800788a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800788c:	2b7a      	cmp	r3, #122	@ 0x7a
 800788e:	d808      	bhi.n	80078a2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007890:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007894:	f043 0301 	orr.w	r3, r3, #1
 8007898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800789c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800789e:	3b20      	subs	r3, #32
 80078a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	623a      	str	r2, [r7, #32]
 80078a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078aa:	b2d1      	uxtb	r1, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	460a      	mov	r2, r1
 80078b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80078b6:	e763      	b.n	8007780 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80078b8:	bf00      	nop
 80078ba:	e006      	b.n	80078ca <create_name+0x2da>
 80078bc:	0800bca8 	.word	0x0800bca8
 80078c0:	0800bd2c 	.word	0x0800bd2c
 80078c4:	0800bcb4 	.word	0x0800bcb4
			if (si > di) break;			/* No extension */
 80078c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078d0:	2be5      	cmp	r3, #229	@ 0xe5
 80078d2:	d103      	bne.n	80078dc <create_name+0x2ec>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2205      	movs	r2, #5
 80078d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d104      	bne.n	80078ec <create_name+0x2fc>
 80078e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80078ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078f0:	f003 030c 	and.w	r3, r3, #12
 80078f4:	2b0c      	cmp	r3, #12
 80078f6:	d005      	beq.n	8007904 <create_name+0x314>
 80078f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b03      	cmp	r3, #3
 8007902:	d105      	bne.n	8007910 <create_name+0x320>
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007908:	f043 0302 	orr.w	r3, r3, #2
 800790c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d117      	bne.n	800794c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800791c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d105      	bne.n	8007934 <create_name+0x344>
 8007928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800792c:	f043 0310 	orr.w	r3, r3, #16
 8007930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007934:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007938:	f003 030c 	and.w	r3, r3, #12
 800793c:	2b04      	cmp	r3, #4
 800793e:	d105      	bne.n	800794c <create_name+0x35c>
 8007940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007944:	f043 0308 	orr.w	r3, r3, #8
 8007948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007952:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007956:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007958:	4618      	mov	r0, r3
 800795a:	3728      	adds	r7, #40	@ 0x28
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007974:	e002      	b.n	800797c <follow_path+0x1c>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b2f      	cmp	r3, #47	@ 0x2f
 8007982:	d0f8      	beq.n	8007976 <follow_path+0x16>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b5c      	cmp	r3, #92	@ 0x5c
 800798a:	d0f4      	beq.n	8007976 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b1f      	cmp	r3, #31
 8007998:	d80a      	bhi.n	80079b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2280      	movs	r2, #128	@ 0x80
 800799e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80079a2:	2100      	movs	r1, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f91c 	bl	8006be2 <dir_sdi>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75fb      	strb	r3, [r7, #23]
 80079ae:	e043      	b.n	8007a38 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079b0:	463b      	mov	r3, r7
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fe1b 	bl	80075f0 <create_name>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d134      	bne.n	8007a2e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fc5a 	bl	800727e <dir_find>
 80079ca:	4603      	mov	r3, r0
 80079cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80079d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d127      	bne.n	8007a32 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d122      	bne.n	8007a32 <follow_path+0xd2>
 80079ec:	2305      	movs	r3, #5
 80079ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80079f0:	e01f      	b.n	8007a32 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11c      	bne.n	8007a36 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	799b      	ldrb	r3, [r3, #6]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a08:	2305      	movs	r3, #5
 8007a0a:	75fb      	strb	r3, [r7, #23]
 8007a0c:	e014      	b.n	8007a38 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1c:	4413      	add	r3, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fa65 	bl	8006ef0 <ld_clust>
 8007a26:	4602      	mov	r2, r0
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a2c:	e7c0      	b.n	80079b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a2e:	bf00      	nop
 8007a30:	e002      	b.n	8007a38 <follow_path+0xd8>
				break;
 8007a32:	bf00      	nop
 8007a34:	e000      	b.n	8007a38 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a36:	bf00      	nop
			}
		}
	}

	return res;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d031      	beq.n	8007abc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e002      	b.n	8007a66 <get_ldnumber+0x24>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	3301      	adds	r3, #1
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b1f      	cmp	r3, #31
 8007a6c:	d903      	bls.n	8007a76 <get_ldnumber+0x34>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a74:	d1f4      	bne.n	8007a60 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b3a      	cmp	r3, #58	@ 0x3a
 8007a7c:	d11c      	bne.n	8007ab8 <get_ldnumber+0x76>
			tp = *path;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	60fa      	str	r2, [r7, #12]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	3b30      	subs	r3, #48	@ 0x30
 8007a8e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b09      	cmp	r3, #9
 8007a94:	d80e      	bhi.n	8007ab4 <get_ldnumber+0x72>
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d10a      	bne.n	8007ab4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d107      	bne.n	8007ab4 <get_ldnumber+0x72>
					vol = (int)i;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	e002      	b.n	8007abe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007abc:	693b      	ldr	r3, [r7, #16]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	70da      	strb	r2, [r3, #3]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fe fcfe 	bl	80064e8 <move_window>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <check_fs+0x2a>
 8007af2:	2304      	movs	r3, #4
 8007af4:	e038      	b.n	8007b68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3338      	adds	r3, #56	@ 0x38
 8007afa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fa10 	bl	8005f24 <ld_word>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <check_fs+0x48>
 8007b10:	2303      	movs	r3, #3
 8007b12:	e029      	b.n	8007b68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b1a:	2be9      	cmp	r3, #233	@ 0xe9
 8007b1c:	d009      	beq.n	8007b32 <check_fs+0x66>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b24:	2beb      	cmp	r3, #235	@ 0xeb
 8007b26:	d11e      	bne.n	8007b66 <check_fs+0x9a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007b2e:	2b90      	cmp	r3, #144	@ 0x90
 8007b30:	d119      	bne.n	8007b66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3338      	adds	r3, #56	@ 0x38
 8007b36:	3336      	adds	r3, #54	@ 0x36
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fa0c 	bl	8005f56 <ld_dword>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007b44:	4a0a      	ldr	r2, [pc, #40]	@ (8007b70 <check_fs+0xa4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d101      	bne.n	8007b4e <check_fs+0x82>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e00c      	b.n	8007b68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3338      	adds	r3, #56	@ 0x38
 8007b52:	3352      	adds	r3, #82	@ 0x52
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe f9fe 	bl	8005f56 <ld_dword>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4a05      	ldr	r2, [pc, #20]	@ (8007b74 <check_fs+0xa8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d101      	bne.n	8007b66 <check_fs+0x9a>
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007b66:	2302      	movs	r3, #2
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	00544146 	.word	0x00544146
 8007b74:	33544146 	.word	0x33544146

08007b78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b096      	sub	sp, #88	@ 0x58
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff ff58 	bl	8007a42 <get_ldnumber>
 8007b92:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da01      	bge.n	8007b9e <find_volume+0x26>
 8007b9a:	230b      	movs	r3, #11
 8007b9c:	e235      	b.n	800800a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007b9e:	4aa5      	ldr	r2, [pc, #660]	@ (8007e34 <find_volume+0x2bc>)
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <find_volume+0x3a>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	e22b      	b.n	800800a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8007bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bb4:	f7fe fab7 	bl	8006126 <lock_fs>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <find_volume+0x4a>
 8007bbe:	230f      	movs	r3, #15
 8007bc0:	e223      	b.n	800800a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01a      	beq.n	8007c0e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f901 	bl	8005de4 <disk_status>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007be8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <find_volume+0x92>
 8007bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007c06:	230a      	movs	r3, #10
 8007c08:	e1ff      	b.n	800800a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e1fd      	b.n	800800a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe f8f9 	bl	8005e18 <disk_initialize>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e1e6      	b.n	800800a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <find_volume+0xda>
 8007c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007c4e:	230a      	movs	r3, #10
 8007c50:	e1db      	b.n	800800a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c5a:	f7ff ff37 	bl	8007acc <check_fs>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d149      	bne.n	8007d00 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c70:	e01e      	b.n	8007cb0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007c80:	4413      	add	r3, r2
 8007c82:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c86:	3304      	adds	r3, #4
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <find_volume+0x124>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	3308      	adds	r3, #8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe f95f 	bl	8005f56 <ld_dword>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	e000      	b.n	8007c9e <find_volume+0x126>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	3358      	adds	r3, #88	@ 0x58
 8007ca4:	443b      	add	r3, r7
 8007ca6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cac:	3301      	adds	r3, #1
 8007cae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d9dd      	bls.n	8007c72 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <find_volume+0x14e>
 8007cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	3358      	adds	r3, #88	@ 0x58
 8007ccc:	443b      	add	r3, r7
 8007cce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cd2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <find_volume+0x16e>
 8007cda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007cde:	f7ff fef5 	bl	8007acc <check_fs>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	e000      	b.n	8007ce8 <find_volume+0x170>
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d905      	bls.n	8007d00 <find_volume+0x188>
 8007cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d9e2      	bls.n	8007cc6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d101      	bne.n	8007d0c <find_volume+0x194>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e17e      	b.n	800800a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d901      	bls.n	8007d18 <find_volume+0x1a0>
 8007d14:	230d      	movs	r3, #13
 8007d16:	e178      	b.n	800800a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	3338      	adds	r3, #56	@ 0x38
 8007d1c:	330b      	adds	r3, #11
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe f900 	bl	8005f24 <ld_word>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2a:	d001      	beq.n	8007d30 <find_volume+0x1b8>
 8007d2c:	230d      	movs	r3, #13
 8007d2e:	e16c      	b.n	800800a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	3338      	adds	r3, #56	@ 0x38
 8007d34:	3316      	adds	r3, #22
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f8f4 	bl	8005f24 <ld_word>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <find_volume+0x1dc>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d48:	3338      	adds	r3, #56	@ 0x38
 8007d4a:	3324      	adds	r3, #36	@ 0x24
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe f902 	bl	8005f56 <ld_dword>
 8007d52:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d58:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	789b      	ldrb	r3, [r3, #2]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d005      	beq.n	8007d78 <find_volume+0x200>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d001      	beq.n	8007d78 <find_volume+0x200>
 8007d74:	230d      	movs	r3, #13
 8007d76:	e148      	b.n	800800a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	789b      	ldrb	r3, [r3, #2]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	895b      	ldrh	r3, [r3, #10]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <find_volume+0x234>
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	895b      	ldrh	r3, [r3, #10]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	895b      	ldrh	r3, [r3, #10]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <find_volume+0x238>
 8007dac:	230d      	movs	r3, #13
 8007dae:	e12c      	b.n	800800a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	3338      	adds	r3, #56	@ 0x38
 8007db4:	3311      	adds	r3, #17
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe f8b4 	bl	8005f24 <ld_word>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc6:	891b      	ldrh	r3, [r3, #8]
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <find_volume+0x25e>
 8007dd2:	230d      	movs	r3, #13
 8007dd4:	e119      	b.n	800800a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd8:	3338      	adds	r3, #56	@ 0x38
 8007dda:	3313      	adds	r3, #19
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe f8a1 	bl	8005f24 <ld_word>
 8007de2:	4603      	mov	r3, r0
 8007de4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <find_volume+0x282>
 8007dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dee:	3338      	adds	r3, #56	@ 0x38
 8007df0:	3320      	adds	r3, #32
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe f8af 	bl	8005f56 <ld_dword>
 8007df8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	3338      	adds	r3, #56	@ 0x38
 8007dfe:	330e      	adds	r3, #14
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe f88f 	bl	8005f24 <ld_word>
 8007e06:	4603      	mov	r3, r0
 8007e08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <find_volume+0x29c>
 8007e10:	230d      	movs	r3, #13
 8007e12:	e0fa      	b.n	800800a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e18:	4413      	add	r3, r2
 8007e1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e1c:	8912      	ldrh	r2, [r2, #8]
 8007e1e:	0912      	lsrs	r2, r2, #4
 8007e20:	b292      	uxth	r2, r2
 8007e22:	4413      	add	r3, r2
 8007e24:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d204      	bcs.n	8007e38 <find_volume+0x2c0>
 8007e2e:	230d      	movs	r3, #13
 8007e30:	e0eb      	b.n	800800a <find_volume+0x492>
 8007e32:	bf00      	nop
 8007e34:	20000514 	.word	0x20000514
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e40:	8952      	ldrh	r2, [r2, #10]
 8007e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <find_volume+0x2da>
 8007e4e:	230d      	movs	r3, #13
 8007e50:	e0db      	b.n	800800a <find_volume+0x492>
		fmt = FS_FAT32;
 8007e52:	2303      	movs	r3, #3
 8007e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d802      	bhi.n	8007e68 <find_volume+0x2f0>
 8007e62:	2302      	movs	r3, #2
 8007e64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d802      	bhi.n	8007e78 <find_volume+0x300>
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e84:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007e86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e8a:	441a      	add	r2, r3
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007e90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e94:	441a      	add	r2, r3
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d11e      	bne.n	8007ee0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	3338      	adds	r3, #56	@ 0x38
 8007ea6:	332a      	adds	r3, #42	@ 0x2a
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe f83b 	bl	8005f24 <ld_word>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <find_volume+0x340>
 8007eb4:	230d      	movs	r3, #13
 8007eb6:	e0a8      	b.n	800800a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	891b      	ldrh	r3, [r3, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <find_volume+0x34c>
 8007ec0:	230d      	movs	r3, #13
 8007ec2:	e0a2      	b.n	800800a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	3338      	adds	r3, #56	@ 0x38
 8007ec8:	332c      	adds	r3, #44	@ 0x2c
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe f843 	bl	8005f56 <ld_dword>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ede:	e01f      	b.n	8007f20 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	891b      	ldrh	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <find_volume+0x374>
 8007ee8:	230d      	movs	r3, #13
 8007eea:	e08e      	b.n	800800a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	441a      	add	r2, r3
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d103      	bne.n	8007f08 <find_volume+0x390>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	e00a      	b.n	8007f1e <find_volume+0x3a6>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	4413      	add	r3, r2
 8007f12:	085a      	lsrs	r2, r3, #1
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f1e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f26:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007f2a:	0a5b      	lsrs	r3, r3, #9
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d201      	bcs.n	8007f34 <find_volume+0x3bc>
 8007f30:	230d      	movs	r3, #13
 8007f32:	e06a      	b.n	800800a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3a:	619a      	str	r2, [r3, #24]
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	699a      	ldr	r2, [r3, #24]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	2280      	movs	r2, #128	@ 0x80
 8007f48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d149      	bne.n	8007fe6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	3338      	adds	r3, #56	@ 0x38
 8007f56:	3330      	adds	r3, #48	@ 0x30
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd ffe3 	bl	8005f24 <ld_word>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d140      	bne.n	8007fe6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f66:	3301      	adds	r3, #1
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f6c:	f7fe fabc 	bl	80064e8 <move_window>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d137      	bne.n	8007fe6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	2200      	movs	r2, #0
 8007f7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7e:	3338      	adds	r3, #56	@ 0x38
 8007f80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fd ffcd 	bl	8005f24 <ld_word>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d127      	bne.n	8007fe6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	3338      	adds	r3, #56	@ 0x38
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fd ffdb 	bl	8005f56 <ld_dword>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8008014 <find_volume+0x49c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d11e      	bne.n	8007fe6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	3338      	adds	r3, #56	@ 0x38
 8007fac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fd ffd0 	bl	8005f56 <ld_dword>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a17      	ldr	r2, [pc, #92]	@ (8008018 <find_volume+0x4a0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d113      	bne.n	8007fe6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	3338      	adds	r3, #56	@ 0x38
 8007fc2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd ffc5 	bl	8005f56 <ld_dword>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	3338      	adds	r3, #56	@ 0x38
 8007fd6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fd ffbb 	bl	8005f56 <ld_dword>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007fec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <find_volume+0x4a4>)
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	4b09      	ldr	r3, [pc, #36]	@ (800801c <find_volume+0x4a4>)
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	4b08      	ldr	r3, [pc, #32]	@ (800801c <find_volume+0x4a4>)
 8007ffc:	881a      	ldrh	r2, [r3, #0]
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008002:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008004:	f7fe fa08 	bl	8006418 <clear_lock>
#endif
	return FR_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3758      	adds	r7, #88	@ 0x58
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	41615252 	.word	0x41615252
 8008018:	61417272 	.word	0x61417272
 800801c:	20000518 	.word	0x20000518

08008020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800802a:	2309      	movs	r3, #9
 800802c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d02e      	beq.n	8008092 <validate+0x72>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02a      	beq.n	8008092 <validate+0x72>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d025      	beq.n	8008092 <validate+0x72>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	889a      	ldrh	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	88db      	ldrh	r3, [r3, #6]
 8008050:	429a      	cmp	r2, r3
 8008052:	d11e      	bne.n	8008092 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe f864 	bl	8006126 <lock_fs>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d014      	beq.n	800808e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd feba 	bl	8005de4 <disk_status>
 8008070:	4603      	mov	r3, r0
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <validate+0x60>
				res = FR_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	e008      	b.n	8008092 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe f863 	bl	8006152 <unlock_fs>
 800808c:	e001      	b.n	8008092 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800808e:	230f      	movs	r3, #15
 8008090:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <validate+0x7e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	e000      	b.n	80080a0 <validate+0x80>
 800809e:	2300      	movs	r3, #0
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	6013      	str	r3, [r2, #0]
	return res;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080c2:	f107 0310 	add.w	r3, r7, #16
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fcbb 	bl	8007a42 <get_ldnumber>
 80080cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da01      	bge.n	80080d8 <f_mount+0x28>
 80080d4:	230b      	movs	r3, #11
 80080d6:	e048      	b.n	800816a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080d8:	4a26      	ldr	r2, [pc, #152]	@ (8008174 <f_mount+0xc4>)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00f      	beq.n	8008108 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80080e8:	69b8      	ldr	r0, [r7, #24]
 80080ea:	f7fe f995 	bl	8006418 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fdb4 	bl	8008c60 <ff_del_syncobj>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <f_mount+0x52>
 80080fe:	2302      	movs	r3, #2
 8008100:	e033      	b.n	800816a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00f      	beq.n	800812e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3310      	adds	r3, #16
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f000 fd7e 	bl	8008c20 <ff_cre_syncobj>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <f_mount+0x7e>
 800812a:	2302      	movs	r3, #2
 800812c:	e01d      	b.n	800816a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4910      	ldr	r1, [pc, #64]	@ (8008174 <f_mount+0xc4>)
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <f_mount+0x94>
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d001      	beq.n	8008148 <f_mount+0x98>
 8008144:	2300      	movs	r3, #0
 8008146:	e010      	b.n	800816a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008148:	f107 010c 	add.w	r1, r7, #12
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	2200      	movs	r2, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fd10 	bl	8007b78 <find_volume>
 8008158:	4603      	mov	r3, r0
 800815a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	7dfa      	ldrb	r2, [r7, #23]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f7fd fff5 	bl	8006152 <unlock_fs>
 8008168:	7dfb      	ldrb	r3, [r7, #23]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20000514 	.word	0x20000514

08008178 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b09a      	sub	sp, #104	@ 0x68
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <f_open+0x18>
 800818c:	2309      	movs	r3, #9
 800818e:	e1c5      	b.n	800851c <f_open+0x3a4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008196:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008198:	79fa      	ldrb	r2, [r7, #7]
 800819a:	f107 0110 	add.w	r1, r7, #16
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fce8 	bl	8007b78 <find_volume>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80081ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 81a2 	bne.w	80084fc <f_open+0x384>
		dj.obj.fs = fs;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80081bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80081c0:	f000 fd7a 	bl	8008cb8 <ff_memalloc>
 80081c4:	65b8      	str	r0, [r7, #88]	@ 0x58
 80081c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <f_open+0x62>
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2111      	movs	r1, #17
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fd ffbe 	bl	8006152 <unlock_fs>
 80081d6:	2311      	movs	r3, #17
 80081d8:	e1a0      	b.n	800851c <f_open+0x3a4>
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081de:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	f107 0314 	add.w	r3, r7, #20
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fbb9 	bl	8007960 <follow_path>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d118      	bne.n	800822e <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80081fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008200:	b25b      	sxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	da03      	bge.n	800820e <f_open+0x96>
				res = FR_INVALID_NAME;
 8008206:	2306      	movs	r3, #6
 8008208:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800820c:	e00f      	b.n	800822e <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b01      	cmp	r3, #1
 8008212:	bf8c      	ite	hi
 8008214:	2301      	movhi	r3, #1
 8008216:	2300      	movls	r3, #0
 8008218:	b2db      	uxtb	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd ffb0 	bl	8006188 <chk_lock>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	f003 031c 	and.w	r3, r3, #28
 8008234:	2b00      	cmp	r3, #0
 8008236:	d07f      	beq.n	8008338 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8008238:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800823c:	2b00      	cmp	r3, #0
 800823e:	d017      	beq.n	8008270 <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008240:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008244:	2b04      	cmp	r3, #4
 8008246:	d10e      	bne.n	8008266 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008248:	f7fd fffa 	bl	8006240 <enq_lock>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <f_open+0xe8>
 8008252:	f107 0314 	add.w	r3, r7, #20
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff f8d2 	bl	8007400 <dir_register>
 800825c:	4603      	mov	r3, r0
 800825e:	e000      	b.n	8008262 <f_open+0xea>
 8008260:	2312      	movs	r3, #18
 8008262:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	71fb      	strb	r3, [r7, #7]
 800826e:	e010      	b.n	8008292 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008270:	7ebb      	ldrb	r3, [r7, #26]
 8008272:	f003 0311 	and.w	r3, r3, #17
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <f_open+0x10a>
					res = FR_DENIED;
 800827a:	2307      	movs	r3, #7
 800827c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008280:	e007      	b.n	8008292 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <f_open+0x11a>
 800828c:	2308      	movs	r3, #8
 800828e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008292:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008296:	2b00      	cmp	r3, #0
 8008298:	d168      	bne.n	800836c <f_open+0x1f4>
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d063      	beq.n	800836c <f_open+0x1f4>
				dw = GET_FATTIME();
 80082a4:	f7fd fb74 	bl	8005990 <get_fattime>
 80082a8:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80082aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ac:	330e      	adds	r3, #14
 80082ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fe8e 	bl	8005fd2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80082b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b8:	3316      	adds	r3, #22
 80082ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd fe88 	bl	8005fd2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80082c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c4:	330b      	adds	r3, #11
 80082c6:	2220      	movs	r2, #32
 80082c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe fe0d 	bl	8006ef0 <ld_clust>
 80082d6:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082dc:	2200      	movs	r2, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fe25 	bl	8006f2e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	331c      	adds	r3, #28
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fd fe71 	bl	8005fd2 <st_dword>
					fs->wflag = 1;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2201      	movs	r2, #1
 80082f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80082f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d037      	beq.n	800836c <f_open+0x1f4>
						dw = fs->winsect;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008300:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008302:	f107 0314 	add.w	r3, r7, #20
 8008306:	2200      	movs	r2, #0
 8008308:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fb38 	bl	8006980 <remove_chain>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008316:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800831a:	2b00      	cmp	r3, #0
 800831c:	d126      	bne.n	800836c <f_open+0x1f4>
							res = move_window(fs, dw);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe f8e0 	bl	80064e8 <move_window>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008332:	3a01      	subs	r2, #1
 8008334:	615a      	str	r2, [r3, #20]
 8008336:	e019      	b.n	800836c <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008338:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800833c:	2b00      	cmp	r3, #0
 800833e:	d115      	bne.n	800836c <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008340:	7ebb      	ldrb	r3, [r7, #26]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <f_open+0x1da>
					res = FR_NO_FILE;
 800834a:	2304      	movs	r3, #4
 800834c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008350:	e00c      	b.n	800836c <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d007      	beq.n	800836c <f_open+0x1f4>
 800835c:	7ebb      	ldrb	r3, [r7, #26]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <f_open+0x1f4>
						res = FR_DENIED;
 8008366:	2307      	movs	r3, #7
 8008368:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800836c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008370:	2b00      	cmp	r3, #0
 8008372:	d126      	bne.n	80083c2 <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <f_open+0x20e>
				mode |= FA_MODIFIED;
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008384:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800838e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	2b01      	cmp	r3, #1
 8008398:	bf8c      	ite	hi
 800839a:	2301      	movhi	r3, #1
 800839c:	2300      	movls	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	f107 0314 	add.w	r3, r7, #20
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fd ff6b 	bl	8006284 <inc_lock>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <f_open+0x24a>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80083c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f040 8095 	bne.w	80084f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fd8c 	bl	8006ef0 <ld_clust>
 80083d8:	4602      	mov	r2, r0
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80083de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e0:	331c      	adds	r3, #28
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fdb7 	bl	8005f56 <ld_dword>
 80083e8:	4602      	mov	r2, r0
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	88da      	ldrh	r2, [r3, #6]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	79fa      	ldrb	r2, [r7, #7]
 8008406:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3330      	adds	r3, #48	@ 0x30
 800841e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fe21 	bl	800606c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	d060      	beq.n	80084f6 <f_open+0x37e>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d05c      	beq.n	80084f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	895b      	ldrh	r3, [r3, #10]
 8008448:	025b      	lsls	r3, r3, #9
 800844a:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008458:	e016      	b.n	8008488 <f_open+0x310>
					clst = get_fat(&fp->obj, clst);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe f8fd 	bl	800665e <get_fat>
 8008464:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008468:	2b01      	cmp	r3, #1
 800846a:	d802      	bhi.n	8008472 <f_open+0x2fa>
 800846c:	2302      	movs	r3, #2
 800846e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d102      	bne.n	8008480 <f_open+0x308>
 800847a:	2301      	movs	r3, #1
 800847c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008480:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008488:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800848c:	2b00      	cmp	r3, #0
 800848e:	d103      	bne.n	8008498 <f_open+0x320>
 8008490:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008494:	429a      	cmp	r2, r3
 8008496:	d8e0      	bhi.n	800845a <f_open+0x2e2>
				}
				fp->clust = clst;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800849c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800849e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d127      	bne.n	80084f6 <f_open+0x37e>
 80084a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d022      	beq.n	80084f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe f8b3 	bl	8006620 <clust2sect>
 80084ba:	64b8      	str	r0, [r7, #72]	@ 0x48
 80084bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <f_open+0x352>
						res = FR_INT_ERR;
 80084c2:	2302      	movs	r3, #2
 80084c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80084c8:	e015      	b.n	80084f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80084ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084cc:	0a5a      	lsrs	r2, r3, #9
 80084ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	7858      	ldrb	r0, [r3, #1]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1a      	ldr	r2, [r3, #32]
 80084e4:	2301      	movs	r3, #1
 80084e6:	f7fd fcbf 	bl	8005e68 <disk_read>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <f_open+0x37e>
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80084f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80084f8:	f000 fbea 	bl	8008cd0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <f_open+0x392>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd fe1d 	bl	8006152 <unlock_fs>
 8008518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800851c:	4618      	mov	r0, r3
 800851e:	3768      	adds	r7, #104	@ 0x68
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	@ 0x30
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f107 0210 	add.w	r2, r7, #16
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fd6b 	bl	8008020 <validate>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008554:	2b00      	cmp	r3, #0
 8008556:	d107      	bne.n	8008568 <f_write+0x44>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	7d5b      	ldrb	r3, [r3, #21]
 800855c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <f_write+0x58>
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7fd fdee 	bl	8006152 <unlock_fs>
 8008576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800857a:	e173      	b.n	8008864 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	7d1b      	ldrb	r3, [r3, #20]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <f_write+0x72>
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2107      	movs	r1, #7
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fde0 	bl	8006152 <unlock_fs>
 8008592:	2307      	movs	r3, #7
 8008594:	e166      	b.n	8008864 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	f080 814b 	bcs.w	800883e <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80085b0:	e145      	b.n	800883e <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 8101 	bne.w	80087c2 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	0a5b      	lsrs	r3, r3, #9
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	8952      	ldrh	r2, [r2, #10]
 80085ca:	3a01      	subs	r2, #1
 80085cc:	4013      	ands	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d14d      	bne.n	8008672 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10c      	bne.n	80085f8 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d11a      	bne.n	8008620 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2100      	movs	r1, #0
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fa2b 	bl	8006a4a <create_chain>
 80085f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80085f6:	e013      	b.n	8008620 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	4619      	mov	r1, r3
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7fe fab7 	bl	8006b7a <clmt_clust>
 800860c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800860e:	e007      	b.n	8008620 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fe fa16 	bl	8006a4a <create_chain>
 800861e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8110 	beq.w	8008848 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	2b01      	cmp	r3, #1
 800862c:	d109      	bne.n	8008642 <f_write+0x11e>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2202      	movs	r2, #2
 8008632:	755a      	strb	r2, [r3, #21]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2102      	movs	r1, #2
 8008638:	4618      	mov	r0, r3
 800863a:	f7fd fd8a 	bl	8006152 <unlock_fs>
 800863e:	2302      	movs	r3, #2
 8008640:	e110      	b.n	8008864 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d109      	bne.n	800865e <f_write+0x13a>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	755a      	strb	r2, [r3, #21]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f7fd fd7c 	bl	8006152 <unlock_fs>
 800865a:	2301      	movs	r3, #1
 800865c:	e102      	b.n	8008864 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008662:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d102      	bne.n	8008672 <f_write+0x14e>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008670:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7d1b      	ldrb	r3, [r3, #20]
 8008676:	b25b      	sxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	da1d      	bge.n	80086b8 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	7858      	ldrb	r0, [r3, #1]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a1a      	ldr	r2, [r3, #32]
 800868a:	2301      	movs	r3, #1
 800868c:	f7fd fc0c 	bl	8005ea8 <disk_write>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <f_write+0x186>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	755a      	strb	r2, [r3, #21]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2101      	movs	r1, #1
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fd fd56 	bl	8006152 <unlock_fs>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e0dc      	b.n	8008864 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	7d1b      	ldrb	r3, [r3, #20]
 80086ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fd ffad 	bl	8006620 <clust2sect>
 80086c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d109      	bne.n	80086e2 <f_write+0x1be>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2202      	movs	r2, #2
 80086d2:	755a      	strb	r2, [r3, #21]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2102      	movs	r1, #2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fd3a 	bl	8006152 <unlock_fs>
 80086de:	2302      	movs	r3, #2
 80086e0:	e0c0      	b.n	8008864 <f_write+0x340>
			sect += csect;
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	4413      	add	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	0a5b      	lsrs	r3, r3, #9
 80086ee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d041      	beq.n	800877a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	4413      	add	r3, r2
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	8952      	ldrh	r2, [r2, #10]
 8008700:	4293      	cmp	r3, r2
 8008702:	d905      	bls.n	8008710 <f_write+0x1ec>
					cc = fs->csize - csect;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	895b      	ldrh	r3, [r3, #10]
 8008708:	461a      	mov	r2, r3
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	7858      	ldrb	r0, [r3, #1]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	69f9      	ldr	r1, [r7, #28]
 800871a:	f7fd fbc5 	bl	8005ea8 <disk_write>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d009      	beq.n	8008738 <f_write+0x214>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	755a      	strb	r2, [r3, #21]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2101      	movs	r1, #1
 800872e:	4618      	mov	r0, r3
 8008730:	f7fd fd0f 	bl	8006152 <unlock_fs>
 8008734:	2301      	movs	r3, #1
 8008736:	e095      	b.n	8008864 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1a      	ldr	r2, [r3, #32]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	429a      	cmp	r2, r3
 8008744:	d915      	bls.n	8008772 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	025b      	lsls	r3, r3, #9
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800875e:	4619      	mov	r1, r3
 8008760:	f7fd fc63 	bl	800602a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	7d1b      	ldrb	r3, [r3, #20]
 8008768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800876c:	b2da      	uxtb	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008778:	e044      	b.n	8008804 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	429a      	cmp	r2, r3
 8008782:	d01b      	beq.n	80087bc <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800878c:	429a      	cmp	r2, r3
 800878e:	d215      	bcs.n	80087bc <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	7858      	ldrb	r0, [r3, #1]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800879a:	2301      	movs	r3, #1
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	f7fd fb63 	bl	8005e68 <disk_read>
 80087a2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	755a      	strb	r2, [r3, #21]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2101      	movs	r1, #1
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd fccd 	bl	8006152 <unlock_fs>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e053      	b.n	8008864 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ca:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d901      	bls.n	80087dc <f_write+0x2b8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	4413      	add	r3, r2
 80087ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ee:	69f9      	ldr	r1, [r7, #28]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd fc1a 	bl	800602a <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	7d1b      	ldrb	r3, [r3, #20]
 80087fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008808:	4413      	add	r3, r2
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	699a      	ldr	r2, [r3, #24]
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	441a      	add	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	619a      	str	r2, [r3, #24]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	bf38      	it	cc
 8008824:	461a      	movcc	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	441a      	add	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f aeb6 	bne.w	80085b2 <f_write+0x8e>
 8008846:	e000      	b.n	800884a <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008848:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	7d1b      	ldrb	r3, [r3, #20]
 800884e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008852:	b2da      	uxtb	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2100      	movs	r1, #0
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fc78 	bl	8006152 <unlock_fs>
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f107 0208 	add.w	r2, r7, #8
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fbcf 	bl	8008020 <validate>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d16d      	bne.n	8008968 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	7d1b      	ldrb	r3, [r3, #20]
 8008890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d067      	beq.n	8008968 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7d1b      	ldrb	r3, [r3, #20]
 800889c:	b25b      	sxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da1a      	bge.n	80088d8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	7858      	ldrb	r0, [r3, #1]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1a      	ldr	r2, [r3, #32]
 80088b0:	2301      	movs	r3, #1
 80088b2:	f7fd faf9 	bl	8005ea8 <disk_write>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <f_sync+0x5e>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fd fc46 	bl	8006152 <unlock_fs>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e055      	b.n	8008976 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7d1b      	ldrb	r3, [r3, #20]
 80088ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088d8:	f7fd f85a 	bl	8005990 <get_fattime>
 80088dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f7fd fdfe 	bl	80064e8 <move_window>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d138      	bne.n	8008968 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	330b      	adds	r3, #11
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	330b      	adds	r3, #11
 8008906:	f042 0220 	orr.w	r2, r2, #32
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	461a      	mov	r2, r3
 8008918:	68f9      	ldr	r1, [r7, #12]
 800891a:	f7fe fb08 	bl	8006f2e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f103 021c 	add.w	r2, r3, #28
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fd fb51 	bl	8005fd2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3316      	adds	r3, #22
 8008934:	6939      	ldr	r1, [r7, #16]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd fb4b 	bl	8005fd2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3312      	adds	r3, #18
 8008940:	2100      	movs	r1, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd fb2a 	bl	8005f9c <st_word>
					fs->wflag = 1;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2201      	movs	r2, #1
 800894c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f7fd fdf7 	bl	8006544 <sync_fs>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	7d1b      	ldrb	r3, [r3, #20]
 800895e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008962:	b2da      	uxtb	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7dfa      	ldrb	r2, [r7, #23]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7fd fbef 	bl	8006152 <unlock_fs>
 8008974:	7dfb      	ldrb	r3, [r7, #23]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff ff70 	bl	800886c <f_sync>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d11d      	bne.n	80089d2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fb3e 	bl	8008020 <validate>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d111      	bne.n	80089d2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd fcf4 	bl	80063a0 <dec_lock>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fd fbc0 	bl	8006152 <unlock_fs>
#endif
		}
	}
	return res;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089ea:	2301      	movs	r3, #1
 80089ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 80089f4:	7a5b      	ldrb	r3, [r3, #9]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d131      	bne.n	8008a60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 80089fe:	7a5b      	ldrb	r3, [r3, #9]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b1a      	ldr	r3, [pc, #104]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a06:	2100      	movs	r1, #0
 8008a08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a0a:	4b19      	ldr	r3, [pc, #100]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a0c:	7a5b      	ldrb	r3, [r3, #9]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	4a17      	ldr	r2, [pc, #92]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a1a:	4b15      	ldr	r3, [pc, #84]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a1c:	7a5b      	ldrb	r3, [r3, #9]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b13      	ldr	r3, [pc, #76]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a24:	4413      	add	r3, r2
 8008a26:	79fa      	ldrb	r2, [r7, #7]
 8008a28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a2a:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a2c:	7a5b      	ldrb	r3, [r3, #9]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	b2d1      	uxtb	r1, r2
 8008a34:	4a0e      	ldr	r2, [pc, #56]	@ (8008a70 <FATFS_LinkDriverEx+0x94>)
 8008a36:	7251      	strb	r1, [r2, #9]
 8008a38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a3a:	7dbb      	ldrb	r3, [r7, #22]
 8008a3c:	3330      	adds	r3, #48	@ 0x30
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3301      	adds	r3, #1
 8008a48:	223a      	movs	r2, #58	@ 0x3a
 8008a4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3302      	adds	r3, #2
 8008a50:	222f      	movs	r2, #47	@ 0x2f
 8008a52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3303      	adds	r3, #3
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	2000053c 	.word	0x2000053c

08008a74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff ffaa 	bl	80089dc <FATFS_LinkDriverEx>
 8008a88:	4603      	mov	r3, r0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008aa4:	d802      	bhi.n	8008aac <ff_convert+0x18>
		c = chr;
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	81fb      	strh	r3, [r7, #14]
 8008aaa:	e025      	b.n	8008af8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	2bff      	cmp	r3, #255	@ 0xff
 8008ab6:	d805      	bhi.n	8008ac4 <ff_convert+0x30>
 8008ab8:	88fb      	ldrh	r3, [r7, #6]
 8008aba:	3b80      	subs	r3, #128	@ 0x80
 8008abc:	4a12      	ldr	r2, [pc, #72]	@ (8008b08 <ff_convert+0x74>)
 8008abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac2:	e000      	b.n	8008ac6 <ff_convert+0x32>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	81fb      	strh	r3, [r7, #14]
 8008ac8:	e016      	b.n	8008af8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008aca:	2300      	movs	r3, #0
 8008acc:	81fb      	strh	r3, [r7, #14]
 8008ace:	e009      	b.n	8008ae4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8008b08 <ff_convert+0x74>)
 8008ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d006      	beq.n	8008aec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008ade:	89fb      	ldrh	r3, [r7, #14]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	81fb      	strh	r3, [r7, #14]
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ae8:	d9f2      	bls.n	8008ad0 <ff_convert+0x3c>
 8008aea:	e000      	b.n	8008aee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008aec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008aee:	89fb      	ldrh	r3, [r7, #14]
 8008af0:	3380      	adds	r3, #128	@ 0x80
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008af8:	89fb      	ldrh	r3, [r7, #14]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	0800bdbc 	.word	0x0800bdbc

08008b0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1c:	d201      	bcs.n	8008b22 <ff_wtoupper+0x16>
 8008b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c18 <ff_wtoupper+0x10c>)
 8008b20:	e000      	b.n	8008b24 <ff_wtoupper+0x18>
 8008b22:	4b3e      	ldr	r3, [pc, #248]	@ (8008c1c <ff_wtoupper+0x110>)
 8008b24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	1c9a      	adds	r2, r3, #2
 8008b2a:	617a      	str	r2, [r7, #20]
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008b30:	8a7b      	ldrh	r3, [r7, #18]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d068      	beq.n	8008c08 <ff_wtoupper+0xfc>
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	8a7b      	ldrh	r3, [r7, #18]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d364      	bcc.n	8008c08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	1c9a      	adds	r2, r3, #2
 8008b42:	617a      	str	r2, [r7, #20]
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	823b      	strh	r3, [r7, #16]
 8008b48:	8a3b      	ldrh	r3, [r7, #16]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	81fb      	strh	r3, [r7, #14]
 8008b4e:	8a3b      	ldrh	r3, [r7, #16]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	8a79      	ldrh	r1, [r7, #18]
 8008b58:	8a3b      	ldrh	r3, [r7, #16]
 8008b5a:	440b      	add	r3, r1
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	da49      	bge.n	8008bf4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d84f      	bhi.n	8008c06 <ff_wtoupper+0xfa>
 8008b66:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <ff_wtoupper+0x60>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008ba3 	.word	0x08008ba3
 8008b74:	08008bb9 	.word	0x08008bb9
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc9 	.word	0x08008bc9
 8008b80:	08008bd1 	.word	0x08008bd1
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008be9 	.word	0x08008be9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	8a7b      	ldrh	r3, [r7, #18]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	80fb      	strh	r3, [r7, #6]
 8008ba0:	e027      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008ba2:	88fa      	ldrh	r2, [r7, #6]
 8008ba4:	8a7b      	ldrh	r3, [r7, #18]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	80fb      	strh	r3, [r7, #6]
 8008bb6:	e01c      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008bb8:	88fb      	ldrh	r3, [r7, #6]
 8008bba:	3b10      	subs	r3, #16
 8008bbc:	80fb      	strh	r3, [r7, #6]
 8008bbe:	e018      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	3b20      	subs	r3, #32
 8008bc4:	80fb      	strh	r3, [r7, #6]
 8008bc6:	e014      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	3b30      	subs	r3, #48	@ 0x30
 8008bcc:	80fb      	strh	r3, [r7, #6]
 8008bce:	e010      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	3b1a      	subs	r3, #26
 8008bd4:	80fb      	strh	r3, [r7, #6]
 8008bd6:	e00c      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	80fb      	strh	r3, [r7, #6]
 8008bde:	e008      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	3b50      	subs	r3, #80	@ 0x50
 8008be4:	80fb      	strh	r3, [r7, #6]
 8008be6:	e004      	b.n	8008bf2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008bee:	80fb      	strh	r3, [r7, #6]
 8008bf0:	bf00      	nop
			}
			break;
 8008bf2:	e008      	b.n	8008c06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d195      	bne.n	8008b26 <ff_wtoupper+0x1a>
 8008bfa:	8a3b      	ldrh	r3, [r7, #16]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008c04:	e78f      	b.n	8008b26 <ff_wtoupper+0x1a>
			break;
 8008c06:	bf00      	nop
	}

	return chr;
 8008c08:	88fb      	ldrh	r3, [r7, #6]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	0800bebc 	.word	0x0800bebc
 8008c1c:	0800c0b0 	.word	0x0800c0b0

08008c20 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f900 	bl	8008e40 <osSemaphoreCreate>
 8008c40:	4602      	mov	r2, r0
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf14      	ite	ne
 8008c4e:	2301      	movne	r3, #1
 8008c50:	2300      	moveq	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	617b      	str	r3, [r7, #20]

    return ret;
 8008c56:	697b      	ldr	r3, [r7, #20]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f99f 	bl	8008fac <osSemaphoreDelete>
#endif
    return 1;
 8008c6e:	2301      	movs	r3, #1
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008c84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f90b 	bl	8008ea4 <osSemaphoreWait>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008c94:	2301      	movs	r3, #1
 8008c96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008c98:	68fb      	ldr	r3, [r7, #12]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f948 	bl	8008f40 <osSemaphoreRelease>
#endif
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 fd83 	bl	800b7cc <pvPortMalloc>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f002 fe45 	bl	800b968 <vPortFree>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	4603      	mov	r3, r0
 8008cee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cf8:	2b84      	cmp	r3, #132	@ 0x84
 8008cfa:	d005      	beq.n	8008d08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	3303      	adds	r3, #3
 8008d06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d08:	68fb      	ldr	r3, [r7, #12]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1c:	f3ef 8305 	mrs	r3, IPSR
 8008d20:	607b      	str	r3, [r7, #4]
  return(result);
 8008d22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bf14      	ite	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	2300      	moveq	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d3e:	f001 fca3 	bl	800a688 <vTaskStartScheduler>
  
  return osOK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008d4c:	f002 f8c8 	bl	800aee0 <xTaskGetSchedulerState>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <osKernelRunning+0x12>
    return 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <osKernelRunning+0x14>
  else
    return 1;
 8008d5a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008d64:	f7ff ffd7 	bl	8008d16 <inHandlerMode>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008d6e:	f001 fda9 	bl	800a8c4 <xTaskGetTickCountFromISR>
 8008d72:	4603      	mov	r3, r0
 8008d74:	e002      	b.n	8008d7c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008d76:	f001 fd95 	bl	800a8a4 <xTaskGetTickCount>
 8008d7a:	4603      	mov	r3, r0
  }
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d82:	b089      	sub	sp, #36	@ 0x24
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d020      	beq.n	8008dd4 <osThreadCreate+0x54>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01c      	beq.n	8008dd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685c      	ldr	r4, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691e      	ldr	r6, [r3, #16]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff ff9a 	bl	8008ce6 <makeFreeRtosPriority>
 8008db2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dbc:	9202      	str	r2, [sp, #8]
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	9100      	str	r1, [sp, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f001 f9fb 	bl	800a1c4 <xTaskCreateStatic>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	e01c      	b.n	8008e0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685c      	ldr	r4, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008de0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff ff7c 	bl	8008ce6 <makeFreeRtosPriority>
 8008dee:	4602      	mov	r2, r0
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	9200      	str	r2, [sp, #0]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 fa40 	bl	800a284 <xTaskCreate>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d001      	beq.n	8008e0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e000      	b.n	8008e10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <osDelay+0x16>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	e000      	b.n	8008e30 <osDelay+0x18>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 fb5f 	bl	800a4f4 <vTaskDelay>
  
  return osOK;
 8008e36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00f      	beq.n	8008e72 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d10a      	bne.n	8008e6e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	9200      	str	r2, [sp, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	2100      	movs	r1, #0
 8008e64:	2001      	movs	r0, #1
 8008e66:	f000 fabb 	bl	80093e0 <xQueueGenericCreateStatic>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	e016      	b.n	8008e9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e014      	b.n	8008e9c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d110      	bne.n	8008e9a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008e78:	2203      	movs	r2, #3
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f000 fb2c 	bl	80094da <xQueueGenericCreate>
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <osSemaphoreCreate+0x56>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 fb7d 	bl	8009590 <xQueueGenericSend>
      return sema;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e000      	b.n	8008e9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008e9a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	e03a      	b.n	8008f32 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d103      	bne.n	8008ed0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e009      	b.n	8008ee4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d006      	beq.n	8008ee4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <osSemaphoreWait+0x40>
      ticks = 1;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ee4:	f7ff ff17 	bl	8008d16 <inHandlerMode>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d017      	beq.n	8008f1e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008eee:	f107 0308 	add.w	r3, r7, #8
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 ff6c 	bl	8009dd4 <xQueueReceiveFromISR>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d001      	beq.n	8008f06 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f02:	23ff      	movs	r3, #255	@ 0xff
 8008f04:	e015      	b.n	8008f32 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d011      	beq.n	8008f30 <osSemaphoreWait+0x8c>
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f3c <osSemaphoreWait+0x98>)
 8008f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	e008      	b.n	8008f30 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fe47 	bl	8009bb4 <xQueueSemaphoreTake>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d001      	beq.n	8008f30 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f2c:	23ff      	movs	r3, #255	@ 0xff
 8008f2e:	e000      	b.n	8008f32 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f50:	f7ff fee1 	bl	8008d16 <inHandlerMode>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d016      	beq.n	8008f88 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fcb5 	bl	80098d0 <xQueueGiveFromISR>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d001      	beq.n	8008f70 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f6c:	23ff      	movs	r3, #255	@ 0xff
 8008f6e:	e017      	b.n	8008fa0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d013      	beq.n	8008f9e <osSemaphoreRelease+0x5e>
 8008f76:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <osSemaphoreRelease+0x68>)
 8008f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	e00a      	b.n	8008f9e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fafe 	bl	8009590 <xQueueGenericSend>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d001      	beq.n	8008f9e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008f9a:	23ff      	movs	r3, #255	@ 0xff
 8008f9c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008fb4:	f7ff feaf 	bl	8008d16 <inHandlerMode>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008fbe:	2382      	movs	r3, #130	@ 0x82
 8008fc0:	e003      	b.n	8008fca <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 ff88 	bl	8009ed8 <vQueueDelete>

  return osOK; 
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af02      	add	r7, sp, #8
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d011      	beq.n	8009008 <osMessageCreate+0x36>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6859      	ldr	r1, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2400      	movs	r4, #0
 8008ffe:	9400      	str	r4, [sp, #0]
 8009000:	f000 f9ee 	bl	80093e0 <xQueueGenericCreateStatic>
 8009004:	4603      	mov	r3, r0
 8009006:	e008      	b.n	800901a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	4619      	mov	r1, r3
 8009014:	f000 fa61 	bl	80094da <xQueueGenericCreate>
 8009018:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
	...

08009024 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <osMessagePut+0x1e>
    ticks = 1;
 800903e:	2301      	movs	r3, #1
 8009040:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009042:	f7ff fe68 	bl	8008d16 <inHandlerMode>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d018      	beq.n	800907e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800904c:	f107 0210 	add.w	r2, r7, #16
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	2300      	movs	r3, #0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fb9c 	bl	8009794 <xQueueGenericSendFromISR>
 800905c:	4603      	mov	r3, r0
 800905e:	2b01      	cmp	r3, #1
 8009060:	d001      	beq.n	8009066 <osMessagePut+0x42>
      return osErrorOS;
 8009062:	23ff      	movs	r3, #255	@ 0xff
 8009064:	e018      	b.n	8009098 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d014      	beq.n	8009096 <osMessagePut+0x72>
 800906c:	4b0c      	ldr	r3, [pc, #48]	@ (80090a0 <osMessagePut+0x7c>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	e00b      	b.n	8009096 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800907e:	f107 0108 	add.w	r1, r7, #8
 8009082:	2300      	movs	r3, #0
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fa82 	bl	8009590 <xQueueGenericSend>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d001      	beq.n	8009096 <osMessagePut+0x72>
      return osErrorOS;
 8009092:	23ff      	movs	r3, #255	@ 0xff
 8009094:	e000      	b.n	8009098 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b08b      	sub	sp, #44	@ 0x2c
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80090be:	2380      	movs	r3, #128	@ 0x80
 80090c0:	617b      	str	r3, [r7, #20]
    return event;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	461c      	mov	r4, r3
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090d2:	e054      	b.n	800917e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e2:	d103      	bne.n	80090ec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80090e4:	f04f 33ff 	mov.w	r3, #4294967295
 80090e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ea:	e009      	b.n	8009100 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <osMessageGet+0x5c>
      ticks = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009100:	f7ff fe09 	bl	8008d16 <inHandlerMode>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d01c      	beq.n	8009144 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800910a:	f107 0220 	add.w	r2, r7, #32
 800910e:	f107 0314 	add.w	r3, r7, #20
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	68b8      	ldr	r0, [r7, #8]
 8009118:	f000 fe5c 	bl	8009dd4 <xQueueReceiveFromISR>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d102      	bne.n	8009128 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009122:	2310      	movs	r3, #16
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e001      	b.n	800912c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01d      	beq.n	800916e <osMessageGet+0xca>
 8009132:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <osMessageGet+0xe4>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	e014      	b.n	800916e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009144:	f107 0314 	add.w	r3, r7, #20
 8009148:	3304      	adds	r3, #4
 800914a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800914c:	4619      	mov	r1, r3
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f000 fc4e 	bl	80099f0 <xQueueReceive>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d102      	bne.n	8009160 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800915a:	2310      	movs	r3, #16
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	e006      	b.n	800916e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <osMessageGet+0xc6>
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <osMessageGet+0xc8>
 800916a:	2340      	movs	r3, #64	@ 0x40
 800916c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	461c      	mov	r4, r3
 8009172:	f107 0314 	add.w	r3, r7, #20
 8009176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800917a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	372c      	adds	r7, #44	@ 0x2c
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}
 8009186:	bf00      	nop
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f9e3 	bl	800a560 <vTaskSuspend>
  
  return osOK;
 800919a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f103 0208 	add.w	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295
 80091bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f103 0208 	add.w	r2, r3, #8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f103 0208 	add.w	r2, r3, #8
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091f2:	bf00      	nop
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925c:	d103      	bne.n	8009266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e00c      	b.n	8009280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3308      	adds	r3, #8
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e002      	b.n	8009274 <vListInsert+0x2e>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	429a      	cmp	r2, r3
 800927e:	d2f6      	bcs.n	800926e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	6892      	ldr	r2, [r2, #8]
 80092ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6852      	ldr	r2, [r2, #4]
 80092d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d103      	bne.n	80092ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	1e5a      	subs	r2, r3, #1
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10b      	bne.n	8009338 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009338:	f002 f926 	bl	800b588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	441a      	add	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009368:	3b01      	subs	r3, #1
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800936e:	fb01 f303 	mul.w	r3, r1, r3
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	22ff      	movs	r2, #255	@ 0xff
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	22ff      	movs	r2, #255	@ 0xff
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d114      	bne.n	80093b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01a      	beq.n	80093cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3310      	adds	r3, #16
 800939a:	4618      	mov	r0, r3
 800939c:	f001 fbe0 	bl	800ab60 <xTaskRemoveFromEventList>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d012      	beq.n	80093cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <xQueueGenericReset+0xd0>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e009      	b.n	80093cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3310      	adds	r3, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fef1 	bl	80091a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3324      	adds	r3, #36	@ 0x24
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff feec 	bl	80091a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093cc:	f002 f90e 	bl	800b5ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093d0:	2301      	movs	r3, #1
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	@ 0x38
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10b      	bne.n	800940c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009406:	bf00      	nop
 8009408:	bf00      	nop
 800940a:	e7fd      	b.n	8009408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <xQueueGenericCreateStatic+0x56>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <xQueueGenericCreateStatic+0x5a>
 8009436:	2301      	movs	r3, #1
 8009438:	e000      	b.n	800943c <xQueueGenericCreateStatic+0x5c>
 800943a:	2300      	movs	r3, #0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10b      	bne.n	8009458 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	623b      	str	r3, [r7, #32]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <xQueueGenericCreateStatic+0x84>
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <xQueueGenericCreateStatic+0x88>
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <xQueueGenericCreateStatic+0x8a>
 8009468:	2300      	movs	r3, #0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61fb      	str	r3, [r7, #28]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009486:	2348      	movs	r3, #72	@ 0x48
 8009488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b48      	cmp	r3, #72	@ 0x48
 800948e:	d00b      	beq.n	80094a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	61bb      	str	r3, [r7, #24]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80094ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00d      	beq.n	80094d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4613      	mov	r3, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f840 	bl	8009550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3730      	adds	r7, #48	@ 0x30
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b08a      	sub	sp, #40	@ 0x28
 80094de:	af02      	add	r7, sp, #8
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	4613      	mov	r3, r2
 80094e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10b      	bne.n	8009506 <xQueueGenericCreate+0x2c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	613b      	str	r3, [r7, #16]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	fb02 f303 	mul.w	r3, r2, r3
 800950e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	3348      	adds	r3, #72	@ 0x48
 8009514:	4618      	mov	r0, r3
 8009516:	f002 f959 	bl	800b7cc <pvPortMalloc>
 800951a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d011      	beq.n	8009546 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	3348      	adds	r3, #72	@ 0x48
 800952a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009534:	79fa      	ldrb	r2, [r7, #7]
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f805 	bl	8009550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009546:	69bb      	ldr	r3, [r7, #24]
	}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	e002      	b.n	8009572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800957e:	2101      	movs	r1, #1
 8009580:	69b8      	ldr	r0, [r7, #24]
 8009582:	f7ff fec3 	bl	800930c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08e      	sub	sp, #56	@ 0x38
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800959e:	2300      	movs	r3, #0
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <xQueueGenericSend+0x34>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <xQueueGenericSend+0x42>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <xQueueGenericSend+0x46>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <xQueueGenericSend+0x48>
 80095d6:	2300      	movs	r3, #0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10b      	bne.n	80095f4 <xQueueGenericSend+0x64>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d103      	bne.n	8009602 <xQueueGenericSend+0x72>
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <xQueueGenericSend+0x76>
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <xQueueGenericSend+0x78>
 8009606:	2300      	movs	r3, #0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <xQueueGenericSend+0x94>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	623b      	str	r3, [r7, #32]
}
 800961e:	bf00      	nop
 8009620:	bf00      	nop
 8009622:	e7fd      	b.n	8009620 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009624:	f001 fc5c 	bl	800aee0 <xTaskGetSchedulerState>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <xQueueGenericSend+0xa4>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <xQueueGenericSend+0xa8>
 8009634:	2301      	movs	r3, #1
 8009636:	e000      	b.n	800963a <xQueueGenericSend+0xaa>
 8009638:	2300      	movs	r3, #0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10b      	bne.n	8009656 <xQueueGenericSend+0xc6>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	61fb      	str	r3, [r7, #28]
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	e7fd      	b.n	8009652 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009656:	f001 ff97 	bl	800b588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009662:	429a      	cmp	r2, r3
 8009664:	d302      	bcc.n	800966c <xQueueGenericSend+0xdc>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d129      	bne.n	80096c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009672:	f000 fc6d 	bl	8009f50 <prvCopyDataToQueue>
 8009676:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	3324      	adds	r3, #36	@ 0x24
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fa6b 	bl	800ab60 <xTaskRemoveFromEventList>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d013      	beq.n	80096b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009690:	4b3f      	ldr	r3, [pc, #252]	@ (8009790 <xQueueGenericSend+0x200>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	e00a      	b.n	80096b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096a8:	4b39      	ldr	r3, [pc, #228]	@ (8009790 <xQueueGenericSend+0x200>)
 80096aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096b8:	f001 ff98 	bl	800b5ec <vPortExitCritical>
				return pdPASS;
 80096bc:	2301      	movs	r3, #1
 80096be:	e063      	b.n	8009788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d103      	bne.n	80096ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096c6:	f001 ff91 	bl	800b5ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e05c      	b.n	8009788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 faa5 	bl	800ac28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096de:	2301      	movs	r3, #1
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e2:	f001 ff83 	bl	800b5ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096e6:	f001 f831 	bl	800a74c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ea:	f001 ff4d 	bl	800b588 <vPortEnterCritical>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f4:	b25b      	sxtb	r3, r3
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d103      	bne.n	8009704 <xQueueGenericSend+0x174>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800970a:	b25b      	sxtb	r3, r3
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d103      	bne.n	800971a <xQueueGenericSend+0x18a>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971a:	f001 ff67 	bl	800b5ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800971e:	1d3a      	adds	r2, r7, #4
 8009720:	f107 0314 	add.w	r3, r7, #20
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fa94 	bl	800ac54 <xTaskCheckForTimeOut>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d124      	bne.n	800977c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009734:	f000 fd04 	bl	800a140 <prvIsQueueFull>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d018      	beq.n	8009770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	3310      	adds	r3, #16
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 f9e4 	bl	800ab14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800974c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800974e:	f000 fc8f 	bl	800a070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009752:	f001 f809 	bl	800a768 <xTaskResumeAll>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	f47f af7c 	bne.w	8009656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800975e:	4b0c      	ldr	r3, [pc, #48]	@ (8009790 <xQueueGenericSend+0x200>)
 8009760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	e772      	b.n	8009656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009772:	f000 fc7d 	bl	800a070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009776:	f000 fff7 	bl	800a768 <xTaskResumeAll>
 800977a:	e76c      	b.n	8009656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800977c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800977e:	f000 fc77 	bl	800a070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009782:	f000 fff1 	bl	800a768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009788:	4618      	mov	r0, r3
 800978a:	3738      	adds	r7, #56	@ 0x38
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b090      	sub	sp, #64	@ 0x40
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d103      	bne.n	80097d2 <xQueueGenericSendFromISR+0x3e>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <xQueueGenericSendFromISR+0x42>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericSendFromISR+0x44>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10b      	bne.n	80097f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	e7fd      	b.n	80097f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d103      	bne.n	8009802 <xQueueGenericSendFromISR+0x6e>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <xQueueGenericSendFromISR+0x72>
 8009802:	2301      	movs	r3, #1
 8009804:	e000      	b.n	8009808 <xQueueGenericSendFromISR+0x74>
 8009806:	2300      	movs	r3, #0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10b      	bne.n	8009824 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	623b      	str	r3, [r7, #32]
}
 800981e:	bf00      	nop
 8009820:	bf00      	nop
 8009822:	e7fd      	b.n	8009820 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009824:	f001 ff90 	bl	800b748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009828:	f3ef 8211 	mrs	r2, BASEPRI
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	61fa      	str	r2, [r7, #28]
 800983e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009840:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984c:	429a      	cmp	r2, r3
 800984e:	d302      	bcc.n	8009856 <xQueueGenericSendFromISR+0xc2>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d12f      	bne.n	80098b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800985c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009864:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800986c:	f000 fb70 	bl	8009f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009870:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d112      	bne.n	80098a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009884:	3324      	adds	r3, #36	@ 0x24
 8009886:	4618      	mov	r0, r3
 8009888:	f001 f96a 	bl	800ab60 <xTaskRemoveFromEventList>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00e      	beq.n	80098b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e007      	b.n	80098b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80098a4:	3301      	adds	r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	b25a      	sxtb	r2, r3
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098b0:	2301      	movs	r3, #1
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80098b4:	e001      	b.n	80098ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3740      	adds	r7, #64	@ 0x40
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08e      	sub	sp, #56	@ 0x38
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10b      	bne.n	80098fc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	623b      	str	r3, [r7, #32]
}
 80098f6:	bf00      	nop
 80098f8:	bf00      	nop
 80098fa:	e7fd      	b.n	80098f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	61fb      	str	r3, [r7, #28]
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	e7fd      	b.n	8009918 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d103      	bne.n	800992c <xQueueGiveFromISR+0x5c>
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <xQueueGiveFromISR+0x60>
 800992c:	2301      	movs	r3, #1
 800992e:	e000      	b.n	8009932 <xQueueGiveFromISR+0x62>
 8009930:	2300      	movs	r3, #0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10b      	bne.n	800994e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	61bb      	str	r3, [r7, #24]
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	e7fd      	b.n	800994a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800994e:	f001 fefb 	bl	800b748 <vPortValidateInterruptPriority>
	__asm volatile
 8009952:	f3ef 8211 	mrs	r2, BASEPRI
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	617a      	str	r2, [r7, #20]
 8009968:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800996a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800996c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009972:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800997a:	429a      	cmp	r2, r3
 800997c:	d22b      	bcs.n	80099d6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009990:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d112      	bne.n	80099c0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d016      	beq.n	80099d0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	3324      	adds	r3, #36	@ 0x24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 f8da 	bl	800ab60 <xTaskRemoveFromEventList>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e007      	b.n	80099d0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099c4:	3301      	adds	r3, #1
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	b25a      	sxtb	r2, r3
 80099ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80099d0:	2301      	movs	r3, #1
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d4:	e001      	b.n	80099da <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f383 8811 	msr	BASEPRI, r3
}
 80099e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3738      	adds	r7, #56	@ 0x38
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	@ 0x30
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10b      	bne.n	8009a22 <xQueueReceive+0x32>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	623b      	str	r3, [r7, #32]
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	e7fd      	b.n	8009a1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <xQueueReceive+0x40>
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <xQueueReceive+0x44>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e000      	b.n	8009a36 <xQueueReceive+0x46>
 8009a34:	2300      	movs	r3, #0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <xQueueReceive+0x62>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	61fb      	str	r3, [r7, #28]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a52:	f001 fa45 	bl	800aee0 <xTaskGetSchedulerState>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xQueueReceive+0x72>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <xQueueReceive+0x76>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <xQueueReceive+0x78>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10b      	bne.n	8009a84 <xQueueReceive+0x94>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61bb      	str	r3, [r7, #24]
}
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	e7fd      	b.n	8009a80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a84:	f001 fd80 	bl	800b588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01f      	beq.n	8009ad4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a94:	68b9      	ldr	r1, [r7, #8]
 8009a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a98:	f000 fac4 	bl	800a024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00f      	beq.n	8009acc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aae:	3310      	adds	r3, #16
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 f855 	bl	800ab60 <xTaskRemoveFromEventList>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d007      	beq.n	8009acc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009abc:	4b3c      	ldr	r3, [pc, #240]	@ (8009bb0 <xQueueReceive+0x1c0>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009acc:	f001 fd8e 	bl	800b5ec <vPortExitCritical>
				return pdPASS;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e069      	b.n	8009ba8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ada:	f001 fd87 	bl	800b5ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e062      	b.n	8009ba8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d106      	bne.n	8009af6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ae8:	f107 0310 	add.w	r3, r7, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 f89b 	bl	800ac28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009af6:	f001 fd79 	bl	800b5ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009afa:	f000 fe27 	bl	800a74c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009afe:	f001 fd43 	bl	800b588 <vPortEnterCritical>
 8009b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d103      	bne.n	8009b18 <xQueueReceive+0x128>
 8009b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d103      	bne.n	8009b2e <xQueueReceive+0x13e>
 8009b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b2e:	f001 fd5d 	bl	800b5ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b32:	1d3a      	adds	r2, r7, #4
 8009b34:	f107 0310 	add.w	r3, r7, #16
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 f88a 	bl	800ac54 <xTaskCheckForTimeOut>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d123      	bne.n	8009b8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b48:	f000 fae4 	bl	800a114 <prvIsQueueEmpty>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d017      	beq.n	8009b82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	3324      	adds	r3, #36	@ 0x24
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4611      	mov	r1, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 ffda 	bl	800ab14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b62:	f000 fa85 	bl	800a070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b66:	f000 fdff 	bl	800a768 <xTaskResumeAll>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d189      	bne.n	8009a84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009b70:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb0 <xQueueReceive+0x1c0>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	e780      	b.n	8009a84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b84:	f000 fa74 	bl	800a070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b88:	f000 fdee 	bl	800a768 <xTaskResumeAll>
 8009b8c:	e77a      	b.n	8009a84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b90:	f000 fa6e 	bl	800a070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b94:	f000 fde8 	bl	800a768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9a:	f000 fabb 	bl	800a114 <prvIsQueueEmpty>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f43f af6f 	beq.w	8009a84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ba6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3730      	adds	r7, #48	@ 0x30
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08e      	sub	sp, #56	@ 0x38
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10b      	bne.n	8009be8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	623b      	str	r3, [r7, #32]
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	61fb      	str	r3, [r7, #28]
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	e7fd      	b.n	8009c04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c08:	f001 f96a 	bl	800aee0 <xTaskGetSchedulerState>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d102      	bne.n	8009c18 <xQueueSemaphoreTake+0x64>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <xQueueSemaphoreTake+0x68>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <xQueueSemaphoreTake+0x6a>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61bb      	str	r3, [r7, #24]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c3a:	f001 fca5 	bl	800b588 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d024      	beq.n	8009c94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	1e5a      	subs	r2, r3, #1
 8009c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d104      	bne.n	8009c64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c5a:	f001 faed 	bl	800b238 <pvTaskIncrementMutexHeldCount>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00f      	beq.n	8009c8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6e:	3310      	adds	r3, #16
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 ff75 	bl	800ab60 <xTaskRemoveFromEventList>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c7c:	4b54      	ldr	r3, [pc, #336]	@ (8009dd0 <xQueueSemaphoreTake+0x21c>)
 8009c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c8c:	f001 fcae 	bl	800b5ec <vPortExitCritical>
				return pdPASS;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e098      	b.n	8009dc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d112      	bne.n	8009cc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	617b      	str	r3, [r7, #20]
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009cb8:	f001 fc98 	bl	800b5ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e082      	b.n	8009dc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cc6:	f107 030c 	add.w	r3, r7, #12
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 ffac 	bl	800ac28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cd4:	f001 fc8a 	bl	800b5ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cd8:	f000 fd38 	bl	800a74c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cdc:	f001 fc54 	bl	800b588 <vPortEnterCritical>
 8009ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ce6:	b25b      	sxtb	r3, r3
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d103      	bne.n	8009cf6 <xQueueSemaphoreTake+0x142>
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cfc:	b25b      	sxtb	r3, r3
 8009cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d02:	d103      	bne.n	8009d0c <xQueueSemaphoreTake+0x158>
 8009d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d0c:	f001 fc6e 	bl	800b5ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d10:	463a      	mov	r2, r7
 8009d12:	f107 030c 	add.w	r3, r7, #12
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 ff9b 	bl	800ac54 <xTaskCheckForTimeOut>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d132      	bne.n	8009d8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d26:	f000 f9f5 	bl	800a114 <prvIsQueueEmpty>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d026      	beq.n	8009d7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d109      	bne.n	8009d4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009d38:	f001 fc26 	bl	800b588 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 f8eb 	bl	800af1c <xTaskPriorityInherit>
 8009d46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009d48:	f001 fc50 	bl	800b5ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4e:	3324      	adds	r3, #36	@ 0x24
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 fedd 	bl	800ab14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d5c:	f000 f988 	bl	800a070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d60:	f000 fd02 	bl	800a768 <xTaskResumeAll>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f47f af67 	bne.w	8009c3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009d6c:	4b18      	ldr	r3, [pc, #96]	@ (8009dd0 <xQueueSemaphoreTake+0x21c>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	e75d      	b.n	8009c3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d80:	f000 f976 	bl	800a070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d84:	f000 fcf0 	bl	800a768 <xTaskResumeAll>
 8009d88:	e757      	b.n	8009c3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d8c:	f000 f970 	bl	800a070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d90:	f000 fcea 	bl	800a768 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d96:	f000 f9bd 	bl	800a114 <prvIsQueueEmpty>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f43f af4c 	beq.w	8009c3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00d      	beq.n	8009dc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009da8:	f001 fbee 	bl	800b588 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009dac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dae:	f000 f8b7 	bl	8009f20 <prvGetDisinheritPriorityAfterTimeout>
 8009db2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 f9ac 	bl	800b118 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009dc0:	f001 fc14 	bl	800b5ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3738      	adds	r7, #56	@ 0x38
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08e      	sub	sp, #56	@ 0x38
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	623b      	str	r3, [r7, #32]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <xQueueReceiveFromISR+0x3c>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <xQueueReceiveFromISR+0x40>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <xQueueReceiveFromISR+0x42>
 8009e14:	2300      	movs	r3, #0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10b      	bne.n	8009e32 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	61fb      	str	r3, [r7, #28]
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	e7fd      	b.n	8009e2e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e32:	f001 fc89 	bl	800b748 <vPortValidateInterruptPriority>
	__asm volatile
 8009e36:	f3ef 8211 	mrs	r2, BASEPRI
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	61ba      	str	r2, [r7, #24]
 8009e4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02f      	beq.n	8009ebe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e6c:	f000 f8da 	bl	800a024 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d112      	bne.n	8009ea8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d016      	beq.n	8009eb8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	3310      	adds	r3, #16
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fe66 	bl	800ab60 <xTaskRemoveFromEventList>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00e      	beq.n	8009eb8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	e007      	b.n	8009eb8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eac:	3301      	adds	r3, #1
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	b25a      	sxtb	r2, r3
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebc:	e001      	b.n	8009ec2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f383 8811 	msr	BASEPRI, r3
}
 8009ecc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3738      	adds	r7, #56	@ 0x38
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <vQueueDelete+0x2a>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	60bb      	str	r3, [r7, #8]
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	e7fd      	b.n	8009efe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 f934 	bl	800a170 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d102      	bne.n	8009f18 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f001 fd28 	bl	800b968 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f1c3 0307 	rsb	r3, r3, #7
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e001      	b.n	8009f42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f42:	68fb      	ldr	r3, [r7, #12]
	}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10d      	bne.n	8009f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d14d      	bne.n	800a012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f844 	bl	800b008 <xTaskPriorityDisinherit>
 8009f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	609a      	str	r2, [r3, #8]
 8009f88:	e043      	b.n	800a012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d119      	bne.n	8009fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6858      	ldr	r0, [r3, #4]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	461a      	mov	r2, r3
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	f001 fe30 	bl	800bc00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa8:	441a      	add	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d32b      	bcc.n	800a012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	e026      	b.n	800a012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	68d8      	ldr	r0, [r3, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	f001 fe16 	bl	800bc00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fdc:	425b      	negs	r3, r3
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d207      	bcs.n	800a000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff8:	425b      	negs	r3, r3
 8009ffa:	441a      	add	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d105      	bne.n	800a012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	3b01      	subs	r3, #1
 800a010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a01a:	697b      	ldr	r3, [r7, #20]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d018      	beq.n	800a068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03e:	441a      	add	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d303      	bcc.n	800a058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68d9      	ldr	r1, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a060:	461a      	mov	r2, r3
 800a062:	6838      	ldr	r0, [r7, #0]
 800a064:	f001 fdcc 	bl	800bc00 <memcpy>
	}
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a078:	f001 fa86 	bl	800b588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a084:	e011      	b.n	800a0aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d012      	beq.n	800a0b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3324      	adds	r3, #36	@ 0x24
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fd64 	bl	800ab60 <xTaskRemoveFromEventList>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a09e:	f000 fe3d 	bl	800ad1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dce9      	bgt.n	800a086 <prvUnlockQueue+0x16>
 800a0b2:	e000      	b.n	800a0b6 <prvUnlockQueue+0x46>
					break;
 800a0b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	22ff      	movs	r2, #255	@ 0xff
 800a0ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a0be:	f001 fa95 	bl	800b5ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0c2:	f001 fa61 	bl	800b588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0ce:	e011      	b.n	800a0f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d012      	beq.n	800a0fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3310      	adds	r3, #16
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fd3f 	bl	800ab60 <xTaskRemoveFromEventList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0e8:	f000 fe18 	bl	800ad1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dce9      	bgt.n	800a0d0 <prvUnlockQueue+0x60>
 800a0fc:	e000      	b.n	800a100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	22ff      	movs	r2, #255	@ 0xff
 800a104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a108:	f001 fa70 	bl	800b5ec <vPortExitCritical>
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a11c:	f001 fa34 	bl	800b588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a128:	2301      	movs	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	e001      	b.n	800a132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a132:	f001 fa5b 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 800a136:	68fb      	ldr	r3, [r7, #12]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a148:	f001 fa1e 	bl	800b588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a154:	429a      	cmp	r2, r3
 800a156:	d102      	bne.n	800a15e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	e001      	b.n	800a162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a162:	f001 fa43 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a178:	2300      	movs	r3, #0
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	e016      	b.n	800a1ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a17e:	4a10      	ldr	r2, [pc, #64]	@ (800a1c0 <vQueueUnregisterQueue+0x50>)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d10b      	bne.n	800a1a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a18e:	4a0c      	ldr	r2, [pc, #48]	@ (800a1c0 <vQueueUnregisterQueue+0x50>)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2100      	movs	r1, #0
 800a194:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a198:	4a09      	ldr	r2, [pc, #36]	@ (800a1c0 <vQueueUnregisterQueue+0x50>)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	4413      	add	r3, r2
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	605a      	str	r2, [r3, #4]
				break;
 800a1a4:	e006      	b.n	800a1b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	d9e5      	bls.n	800a17e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	20000548 	.word	0x20000548

0800a1c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	@ 0x38
 800a1c8:	af04      	add	r7, sp, #16
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	623b      	str	r3, [r7, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a20e:	2354      	movs	r3, #84	@ 0x54
 800a210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2b54      	cmp	r3, #84	@ 0x54
 800a216:	d00b      	beq.n	800a230 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	61bb      	str	r3, [r7, #24]
}
 800a22a:	bf00      	nop
 800a22c:	bf00      	nop
 800a22e:	e7fd      	b.n	800a22c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a230:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	d01e      	beq.n	800a276 <xTaskCreateStatic+0xb2>
 800a238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01b      	beq.n	800a276 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a246:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a250:	2300      	movs	r3, #0
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	9302      	str	r3, [sp, #8]
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f850 	bl	800a30e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a26e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a270:	f000 f8d6 	bl	800a420 <prvAddNewTaskToReadyList>
 800a274:	e001      	b.n	800a27a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a27a:	697b      	ldr	r3, [r7, #20]
	}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3728      	adds	r7, #40	@ 0x28
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08c      	sub	sp, #48	@ 0x30
 800a288:	af04      	add	r7, sp, #16
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a294:	88fb      	ldrh	r3, [r7, #6]
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 fa97 	bl	800b7cc <pvPortMalloc>
 800a29e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00e      	beq.n	800a2c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2a6:	2054      	movs	r0, #84	@ 0x54
 800a2a8:	f001 fa90 	bl	800b7cc <pvPortMalloc>
 800a2ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a2ba:	e005      	b.n	800a2c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2bc:	6978      	ldr	r0, [r7, #20]
 800a2be:	f001 fb53 	bl	800b968 <vPortFree>
 800a2c2:	e001      	b.n	800a2c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d017      	beq.n	800a2fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9303      	str	r3, [sp, #12]
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f80e 	bl	800a30e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2f2:	69f8      	ldr	r0, [r7, #28]
 800a2f4:	f000 f894 	bl	800a420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	e002      	b.n	800a304 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a302:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a304:	69bb      	ldr	r3, [r7, #24]
	}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a326:	3b01      	subs	r3, #1
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f023 0307 	bic.w	r3, r3, #7
 800a334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f003 0307 	and.w	r3, r3, #7
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	617b      	str	r3, [r7, #20]
}
 800a352:	bf00      	nop
 800a354:	bf00      	nop
 800a356:	e7fd      	b.n	800a354 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01f      	beq.n	800a39e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a35e:	2300      	movs	r3, #0
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	e012      	b.n	800a38a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	3334      	adds	r3, #52	@ 0x34
 800a374:	460a      	mov	r2, r1
 800a376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	4413      	add	r3, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	3301      	adds	r3, #1
 800a388:	61fb      	str	r3, [r7, #28]
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b0f      	cmp	r3, #15
 800a38e:	d9e9      	bls.n	800a364 <prvInitialiseNewTask+0x56>
 800a390:	e000      	b.n	800a394 <prvInitialiseNewTask+0x86>
			{
				break;
 800a392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a39c:	e003      	b.n	800a3a6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	2b06      	cmp	r3, #6
 800a3aa:	d901      	bls.n	800a3b0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe ff0c 	bl	80091e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe ff07 	bl	80091e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	f1c3 0207 	rsb	r2, r3, #7
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	69b8      	ldr	r0, [r7, #24]
 800a400:	f000 ff94 	bl	800b32c <pxPortInitialiseStack>
 800a404:	4602      	mov	r2, r0
 800a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a416:	bf00      	nop
 800a418:	3720      	adds	r7, #32
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a428:	f001 f8ae 	bl	800b588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a42c:	4b2a      	ldr	r3, [pc, #168]	@ (800a4d8 <prvAddNewTaskToReadyList+0xb8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3301      	adds	r3, #1
 800a432:	4a29      	ldr	r2, [pc, #164]	@ (800a4d8 <prvAddNewTaskToReadyList+0xb8>)
 800a434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a436:	4b29      	ldr	r3, [pc, #164]	@ (800a4dc <prvAddNewTaskToReadyList+0xbc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d109      	bne.n	800a452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a43e:	4a27      	ldr	r2, [pc, #156]	@ (800a4dc <prvAddNewTaskToReadyList+0xbc>)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a444:	4b24      	ldr	r3, [pc, #144]	@ (800a4d8 <prvAddNewTaskToReadyList+0xb8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d110      	bne.n	800a46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a44c:	f000 fc8a 	bl	800ad64 <prvInitialiseTaskLists>
 800a450:	e00d      	b.n	800a46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a452:	4b23      	ldr	r3, [pc, #140]	@ (800a4e0 <prvAddNewTaskToReadyList+0xc0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d109      	bne.n	800a46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a45a:	4b20      	ldr	r3, [pc, #128]	@ (800a4dc <prvAddNewTaskToReadyList+0xbc>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	429a      	cmp	r2, r3
 800a466:	d802      	bhi.n	800a46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a468:	4a1c      	ldr	r2, [pc, #112]	@ (800a4dc <prvAddNewTaskToReadyList+0xbc>)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a46e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e4 <prvAddNewTaskToReadyList+0xc4>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	4a1b      	ldr	r2, [pc, #108]	@ (800a4e4 <prvAddNewTaskToReadyList+0xc4>)
 800a476:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47c:	2201      	movs	r2, #1
 800a47e:	409a      	lsls	r2, r3
 800a480:	4b19      	ldr	r3, [pc, #100]	@ (800a4e8 <prvAddNewTaskToReadyList+0xc8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4313      	orrs	r3, r2
 800a486:	4a18      	ldr	r2, [pc, #96]	@ (800a4e8 <prvAddNewTaskToReadyList+0xc8>)
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4a15      	ldr	r2, [pc, #84]	@ (800a4ec <prvAddNewTaskToReadyList+0xcc>)
 800a498:	441a      	add	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7fe feac 	bl	80091fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4a6:	f001 f8a1 	bl	800b5ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e0 <prvAddNewTaskToReadyList+0xc0>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4dc <prvAddNewTaskToReadyList+0xbc>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d207      	bcs.n	800a4d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f0 <prvAddNewTaskToReadyList+0xd0>)
 800a4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20000688 	.word	0x20000688
 800a4dc:	20000588 	.word	0x20000588
 800a4e0:	20000694 	.word	0x20000694
 800a4e4:	200006a4 	.word	0x200006a4
 800a4e8:	20000690 	.word	0x20000690
 800a4ec:	2000058c 	.word	0x2000058c
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d018      	beq.n	800a538 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a506:	4b14      	ldr	r3, [pc, #80]	@ (800a558 <vTaskDelay+0x64>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00b      	beq.n	800a526 <vTaskDelay+0x32>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	60bb      	str	r3, [r7, #8]
}
 800a520:	bf00      	nop
 800a522:	bf00      	nop
 800a524:	e7fd      	b.n	800a522 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a526:	f000 f911 	bl	800a74c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a52a:	2100      	movs	r1, #0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fe97 	bl	800b260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a532:	f000 f919 	bl	800a768 <xTaskResumeAll>
 800a536:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d107      	bne.n	800a54e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a53e:	4b07      	ldr	r3, [pc, #28]	@ (800a55c <vTaskDelay+0x68>)
 800a540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a54e:	bf00      	nop
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	200006b0 	.word	0x200006b0
 800a55c:	e000ed04 	.word	0xe000ed04

0800a560 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a568:	f001 f80e 	bl	800b588 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <vTaskSuspend+0x18>
 800a572:	4b3d      	ldr	r3, [pc, #244]	@ (800a668 <vTaskSuspend+0x108>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	e000      	b.n	800a57a <vTaskSuspend+0x1a>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3304      	adds	r3, #4
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe fe99 	bl	80092b8 <uxListRemove>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d115      	bne.n	800a5b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a590:	4936      	ldr	r1, [pc, #216]	@ (800a66c <vTaskSuspend+0x10c>)
 800a592:	4613      	mov	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <vTaskSuspend+0x58>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ac:	43da      	mvns	r2, r3
 800a5ae:	4b30      	ldr	r3, [pc, #192]	@ (800a670 <vTaskSuspend+0x110>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a670 <vTaskSuspend+0x110>)
 800a5b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fe77 	bl	80092b8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4828      	ldr	r0, [pc, #160]	@ (800a674 <vTaskSuspend+0x114>)
 800a5d2:	f7fe fe14 	bl	80091fe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d103      	bne.n	800a5ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a5ea:	f000 ffff 	bl	800b5ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a5ee:	4b22      	ldr	r3, [pc, #136]	@ (800a678 <vTaskSuspend+0x118>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a5f6:	f000 ffc7 	bl	800b588 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a5fa:	f000 fc51 	bl	800aea0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a5fe:	f000 fff5 	bl	800b5ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <vTaskSuspend+0x108>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d128      	bne.n	800a65e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800a60c:	4b1a      	ldr	r3, [pc, #104]	@ (800a678 <vTaskSuspend+0x118>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d018      	beq.n	800a646 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a614:	4b19      	ldr	r3, [pc, #100]	@ (800a67c <vTaskSuspend+0x11c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <vTaskSuspend+0xd4>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60bb      	str	r3, [r7, #8]
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a634:	4b12      	ldr	r3, [pc, #72]	@ (800a680 <vTaskSuspend+0x120>)
 800a636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a644:	e00b      	b.n	800a65e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a646:	4b0b      	ldr	r3, [pc, #44]	@ (800a674 <vTaskSuspend+0x114>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4b0e      	ldr	r3, [pc, #56]	@ (800a684 <vTaskSuspend+0x124>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d103      	bne.n	800a65a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800a652:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <vTaskSuspend+0x108>)
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
	}
 800a658:	e001      	b.n	800a65e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800a65a:	f000 f9ff 	bl	800aa5c <vTaskSwitchContext>
	}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000588 	.word	0x20000588
 800a66c:	2000058c 	.word	0x2000058c
 800a670:	20000690 	.word	0x20000690
 800a674:	20000674 	.word	0x20000674
 800a678:	20000694 	.word	0x20000694
 800a67c:	200006b0 	.word	0x200006b0
 800a680:	e000ed04 	.word	0xe000ed04
 800a684:	20000688 	.word	0x20000688

0800a688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	@ 0x28
 800a68c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a696:	463a      	mov	r2, r7
 800a698:	1d39      	adds	r1, r7, #4
 800a69a:	f107 0308 	add.w	r3, r7, #8
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f5 ff34 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	9202      	str	r2, [sp, #8]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	491f      	ldr	r1, [pc, #124]	@ (800a734 <vTaskStartScheduler+0xac>)
 800a6b8:	481f      	ldr	r0, [pc, #124]	@ (800a738 <vTaskStartScheduler+0xb0>)
 800a6ba:	f7ff fd83 	bl	800a1c4 <xTaskCreateStatic>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <vTaskStartScheduler+0xb4>)
 800a6c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a73c <vTaskStartScheduler+0xb4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	e001      	b.n	800a6d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d116      	bne.n	800a70a <vTaskStartScheduler+0x82>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	613b      	str	r3, [r7, #16]
}
 800a6ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6f0:	4b13      	ldr	r3, [pc, #76]	@ (800a740 <vTaskStartScheduler+0xb8>)
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6f8:	4b12      	ldr	r3, [pc, #72]	@ (800a744 <vTaskStartScheduler+0xbc>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6fe:	4b12      	ldr	r3, [pc, #72]	@ (800a748 <vTaskStartScheduler+0xc0>)
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a704:	f000 fe9c 	bl	800b440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a708:	e00f      	b.n	800a72a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d10b      	bne.n	800a72a <vTaskStartScheduler+0xa2>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60fb      	str	r3, [r7, #12]
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	e7fd      	b.n	800a726 <vTaskStartScheduler+0x9e>
}
 800a72a:	bf00      	nop
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	0800bcf0 	.word	0x0800bcf0
 800a738:	0800ad35 	.word	0x0800ad35
 800a73c:	200006ac 	.word	0x200006ac
 800a740:	200006a8 	.word	0x200006a8
 800a744:	20000694 	.word	0x20000694
 800a748:	2000068c 	.word	0x2000068c

0800a74c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a750:	4b04      	ldr	r3, [pc, #16]	@ (800a764 <vTaskSuspendAll+0x18>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3301      	adds	r3, #1
 800a756:	4a03      	ldr	r2, [pc, #12]	@ (800a764 <vTaskSuspendAll+0x18>)
 800a758:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a75a:	bf00      	nop
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	200006b0 	.word	0x200006b0

0800a768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a772:	2300      	movs	r3, #0
 800a774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a776:	4b42      	ldr	r3, [pc, #264]	@ (800a880 <xTaskResumeAll+0x118>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <xTaskResumeAll+0x2e>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	603b      	str	r3, [r7, #0]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a796:	f000 fef7 	bl	800b588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a79a:	4b39      	ldr	r3, [pc, #228]	@ (800a880 <xTaskResumeAll+0x118>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	4a37      	ldr	r2, [pc, #220]	@ (800a880 <xTaskResumeAll+0x118>)
 800a7a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a4:	4b36      	ldr	r3, [pc, #216]	@ (800a880 <xTaskResumeAll+0x118>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d161      	bne.n	800a870 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7ac:	4b35      	ldr	r3, [pc, #212]	@ (800a884 <xTaskResumeAll+0x11c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d05d      	beq.n	800a870 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7b4:	e02e      	b.n	800a814 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b6:	4b34      	ldr	r3, [pc, #208]	@ (800a888 <xTaskResumeAll+0x120>)
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3318      	adds	r3, #24
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fd78 	bl	80092b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fd73 	bl	80092b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	4b2c      	ldr	r3, [pc, #176]	@ (800a88c <xTaskResumeAll+0x124>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a88c <xTaskResumeAll+0x124>)
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4a27      	ldr	r2, [pc, #156]	@ (800a890 <xTaskResumeAll+0x128>)
 800a7f2:	441a      	add	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	f7fe fcff 	bl	80091fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a804:	4b23      	ldr	r3, [pc, #140]	@ (800a894 <xTaskResumeAll+0x12c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d302      	bcc.n	800a814 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a80e:	4b22      	ldr	r3, [pc, #136]	@ (800a898 <xTaskResumeAll+0x130>)
 800a810:	2201      	movs	r2, #1
 800a812:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a814:	4b1c      	ldr	r3, [pc, #112]	@ (800a888 <xTaskResumeAll+0x120>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1cc      	bne.n	800a7b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a822:	f000 fb3d 	bl	800aea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a826:	4b1d      	ldr	r3, [pc, #116]	@ (800a89c <xTaskResumeAll+0x134>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d010      	beq.n	800a854 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a832:	f000 f859 	bl	800a8e8 <xTaskIncrementTick>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a83c:	4b16      	ldr	r3, [pc, #88]	@ (800a898 <xTaskResumeAll+0x130>)
 800a83e:	2201      	movs	r2, #1
 800a840:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3b01      	subs	r3, #1
 800a846:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f1      	bne.n	800a832 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a84e:	4b13      	ldr	r3, [pc, #76]	@ (800a89c <xTaskResumeAll+0x134>)
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a854:	4b10      	ldr	r3, [pc, #64]	@ (800a898 <xTaskResumeAll+0x130>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d009      	beq.n	800a870 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a860:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a0 <xTaskResumeAll+0x138>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a870:	f000 febc 	bl	800b5ec <vPortExitCritical>

	return xAlreadyYielded;
 800a874:	68bb      	ldr	r3, [r7, #8]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	200006b0 	.word	0x200006b0
 800a884:	20000688 	.word	0x20000688
 800a888:	20000648 	.word	0x20000648
 800a88c:	20000690 	.word	0x20000690
 800a890:	2000058c 	.word	0x2000058c
 800a894:	20000588 	.word	0x20000588
 800a898:	2000069c 	.word	0x2000069c
 800a89c:	20000698 	.word	0x20000698
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8aa:	4b05      	ldr	r3, [pc, #20]	@ (800a8c0 <xTaskGetTickCount+0x1c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8b0:	687b      	ldr	r3, [r7, #4]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	2000068c 	.word	0x2000068c

0800a8c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ca:	f000 ff3d 	bl	800b748 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a8d2:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <xTaskGetTickCountFromISR+0x20>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d8:	683b      	ldr	r3, [r7, #0]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000068c 	.word	0x2000068c

0800a8e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8f2:	4b4f      	ldr	r3, [pc, #316]	@ (800aa30 <xTaskIncrementTick+0x148>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f040 808f 	bne.w	800aa1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8fc:	4b4d      	ldr	r3, [pc, #308]	@ (800aa34 <xTaskIncrementTick+0x14c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3301      	adds	r3, #1
 800a902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a904:	4a4b      	ldr	r2, [pc, #300]	@ (800aa34 <xTaskIncrementTick+0x14c>)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d121      	bne.n	800a954 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a910:	4b49      	ldr	r3, [pc, #292]	@ (800aa38 <xTaskIncrementTick+0x150>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00b      	beq.n	800a932 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	603b      	str	r3, [r7, #0]
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	e7fd      	b.n	800a92e <xTaskIncrementTick+0x46>
 800a932:	4b41      	ldr	r3, [pc, #260]	@ (800aa38 <xTaskIncrementTick+0x150>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	4b40      	ldr	r3, [pc, #256]	@ (800aa3c <xTaskIncrementTick+0x154>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a3e      	ldr	r2, [pc, #248]	@ (800aa38 <xTaskIncrementTick+0x150>)
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	4a3e      	ldr	r2, [pc, #248]	@ (800aa3c <xTaskIncrementTick+0x154>)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	4b3e      	ldr	r3, [pc, #248]	@ (800aa40 <xTaskIncrementTick+0x158>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3301      	adds	r3, #1
 800a94c:	4a3c      	ldr	r2, [pc, #240]	@ (800aa40 <xTaskIncrementTick+0x158>)
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	f000 faa6 	bl	800aea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a954:	4b3b      	ldr	r3, [pc, #236]	@ (800aa44 <xTaskIncrementTick+0x15c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d348      	bcc.n	800a9f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a95e:	4b36      	ldr	r3, [pc, #216]	@ (800aa38 <xTaskIncrementTick+0x150>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d104      	bne.n	800a972 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a968:	4b36      	ldr	r3, [pc, #216]	@ (800aa44 <xTaskIncrementTick+0x15c>)
 800a96a:	f04f 32ff 	mov.w	r2, #4294967295
 800a96e:	601a      	str	r2, [r3, #0]
					break;
 800a970:	e03e      	b.n	800a9f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a972:	4b31      	ldr	r3, [pc, #196]	@ (800aa38 <xTaskIncrementTick+0x150>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	429a      	cmp	r2, r3
 800a988:	d203      	bcs.n	800a992 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a98a:	4a2e      	ldr	r2, [pc, #184]	@ (800aa44 <xTaskIncrementTick+0x15c>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a990:	e02e      	b.n	800a9f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	3304      	adds	r3, #4
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fc8e 	bl	80092b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	3318      	adds	r3, #24
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fc85 	bl	80092b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	409a      	lsls	r2, r3
 800a9b6:	4b24      	ldr	r3, [pc, #144]	@ (800aa48 <xTaskIncrementTick+0x160>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	4a22      	ldr	r2, [pc, #136]	@ (800aa48 <xTaskIncrementTick+0x160>)
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4a1f      	ldr	r2, [pc, #124]	@ (800aa4c <xTaskIncrementTick+0x164>)
 800a9ce:	441a      	add	r2, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fe fc11 	bl	80091fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9e0:	4b1b      	ldr	r3, [pc, #108]	@ (800aa50 <xTaskIncrementTick+0x168>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d3b9      	bcc.n	800a95e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ee:	e7b6      	b.n	800a95e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9f0:	4b17      	ldr	r3, [pc, #92]	@ (800aa50 <xTaskIncrementTick+0x168>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f6:	4915      	ldr	r1, [pc, #84]	@ (800aa4c <xTaskIncrementTick+0x164>)
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d901      	bls.n	800aa0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa0c:	4b11      	ldr	r3, [pc, #68]	@ (800aa54 <xTaskIncrementTick+0x16c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa14:	2301      	movs	r3, #1
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	e004      	b.n	800aa24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <xTaskIncrementTick+0x170>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	4a0d      	ldr	r2, [pc, #52]	@ (800aa58 <xTaskIncrementTick+0x170>)
 800aa22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa24:	697b      	ldr	r3, [r7, #20]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200006b0 	.word	0x200006b0
 800aa34:	2000068c 	.word	0x2000068c
 800aa38:	20000640 	.word	0x20000640
 800aa3c:	20000644 	.word	0x20000644
 800aa40:	200006a0 	.word	0x200006a0
 800aa44:	200006a8 	.word	0x200006a8
 800aa48:	20000690 	.word	0x20000690
 800aa4c:	2000058c 	.word	0x2000058c
 800aa50:	20000588 	.word	0x20000588
 800aa54:	2000069c 	.word	0x2000069c
 800aa58:	20000698 	.word	0x20000698

0800aa5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa62:	4b27      	ldr	r3, [pc, #156]	@ (800ab00 <vTaskSwitchContext+0xa4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa6a:	4b26      	ldr	r3, [pc, #152]	@ (800ab04 <vTaskSwitchContext+0xa8>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa70:	e040      	b.n	800aaf4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800aa72:	4b24      	ldr	r3, [pc, #144]	@ (800ab04 <vTaskSwitchContext+0xa8>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa78:	4b23      	ldr	r3, [pc, #140]	@ (800ab08 <vTaskSwitchContext+0xac>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	fab3 f383 	clz	r3, r3
 800aa84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa86:	7afb      	ldrb	r3, [r7, #11]
 800aa88:	f1c3 031f 	rsb	r3, r3, #31
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	491f      	ldr	r1, [pc, #124]	@ (800ab0c <vTaskSwitchContext+0xb0>)
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10b      	bne.n	800aaba <vTaskSwitchContext+0x5e>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	607b      	str	r3, [r7, #4]
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop
 800aab8:	e7fd      	b.n	800aab6 <vTaskSwitchContext+0x5a>
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <vTaskSwitchContext+0xb0>)
 800aac6:	4413      	add	r3, r2
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	3308      	adds	r3, #8
 800aadc:	429a      	cmp	r2, r3
 800aade:	d104      	bne.n	800aaea <vTaskSwitchContext+0x8e>
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	4a07      	ldr	r2, [pc, #28]	@ (800ab10 <vTaskSwitchContext+0xb4>)
 800aaf2:	6013      	str	r3, [r2, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	371c      	adds	r7, #28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	200006b0 	.word	0x200006b0
 800ab04:	2000069c 	.word	0x2000069c
 800ab08:	20000690 	.word	0x20000690
 800ab0c:	2000058c 	.word	0x2000058c
 800ab10:	20000588 	.word	0x20000588

0800ab14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10b      	bne.n	800ab3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	60fb      	str	r3, [r7, #12]
}
 800ab36:	bf00      	nop
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <vTaskPlaceOnEventList+0x48>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3318      	adds	r3, #24
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7fe fb7e 	bl	8009246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	6838      	ldr	r0, [r7, #0]
 800ab4e:	f000 fb87 	bl	800b260 <prvAddCurrentTaskToDelayedList>
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000588 	.word	0x20000588

0800ab60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10b      	bne.n	800ab8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	60fb      	str	r3, [r7, #12]
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	e7fd      	b.n	800ab8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	3318      	adds	r3, #24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fb90 	bl	80092b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab98:	4b1d      	ldr	r3, [pc, #116]	@ (800ac10 <xTaskRemoveFromEventList+0xb0>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11c      	bne.n	800abda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe fb87 	bl	80092b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abae:	2201      	movs	r2, #1
 800abb0:	409a      	lsls	r2, r3
 800abb2:	4b18      	ldr	r3, [pc, #96]	@ (800ac14 <xTaskRemoveFromEventList+0xb4>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	4a16      	ldr	r2, [pc, #88]	@ (800ac14 <xTaskRemoveFromEventList+0xb4>)
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4a13      	ldr	r2, [pc, #76]	@ (800ac18 <xTaskRemoveFromEventList+0xb8>)
 800abca:	441a      	add	r2, r3
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	3304      	adds	r3, #4
 800abd0:	4619      	mov	r1, r3
 800abd2:	4610      	mov	r0, r2
 800abd4:	f7fe fb13 	bl	80091fe <vListInsertEnd>
 800abd8:	e005      	b.n	800abe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3318      	adds	r3, #24
 800abde:	4619      	mov	r1, r3
 800abe0:	480e      	ldr	r0, [pc, #56]	@ (800ac1c <xTaskRemoveFromEventList+0xbc>)
 800abe2:	f7fe fb0c 	bl	80091fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abea:	4b0d      	ldr	r3, [pc, #52]	@ (800ac20 <xTaskRemoveFromEventList+0xc0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d905      	bls.n	800ac00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac24 <xTaskRemoveFromEventList+0xc4>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e001      	b.n	800ac04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac04:	697b      	ldr	r3, [r7, #20]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200006b0 	.word	0x200006b0
 800ac14:	20000690 	.word	0x20000690
 800ac18:	2000058c 	.word	0x2000058c
 800ac1c:	20000648 	.word	0x20000648
 800ac20:	20000588 	.word	0x20000588
 800ac24:	2000069c 	.word	0x2000069c

0800ac28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac30:	4b06      	ldr	r3, [pc, #24]	@ (800ac4c <vTaskInternalSetTimeOutState+0x24>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac38:	4b05      	ldr	r3, [pc, #20]	@ (800ac50 <vTaskInternalSetTimeOutState+0x28>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	605a      	str	r2, [r3, #4]
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	200006a0 	.word	0x200006a0
 800ac50:	2000068c 	.word	0x2000068c

0800ac54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	613b      	str	r3, [r7, #16]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60fb      	str	r3, [r7, #12]
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	e7fd      	b.n	800ac96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ac9a:	f000 fc75 	bl	800b588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad14 <xTaskCheckForTimeOut+0xc0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d102      	bne.n	800acbe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acb8:	2300      	movs	r3, #0
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	e023      	b.n	800ad06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b15      	ldr	r3, [pc, #84]	@ (800ad18 <xTaskCheckForTimeOut+0xc4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d007      	beq.n	800acda <xTaskCheckForTimeOut+0x86>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d302      	bcc.n	800acda <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800acd4:	2301      	movs	r3, #1
 800acd6:	61fb      	str	r3, [r7, #28]
 800acd8:	e015      	b.n	800ad06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d20b      	bcs.n	800acfc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	1ad2      	subs	r2, r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff ff99 	bl	800ac28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	e004      	b.n	800ad06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad02:	2301      	movs	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad06:	f000 fc71 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 800ad0a:	69fb      	ldr	r3, [r7, #28]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3720      	adds	r7, #32
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2000068c 	.word	0x2000068c
 800ad18:	200006a0 	.word	0x200006a0

0800ad1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad20:	4b03      	ldr	r3, [pc, #12]	@ (800ad30 <vTaskMissedYield+0x14>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	2000069c 	.word	0x2000069c

0800ad34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad3c:	f000 f852 	bl	800ade4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad40:	4b06      	ldr	r3, [pc, #24]	@ (800ad5c <prvIdleTask+0x28>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d9f9      	bls.n	800ad3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad48:	4b05      	ldr	r3, [pc, #20]	@ (800ad60 <prvIdleTask+0x2c>)
 800ad4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad58:	e7f0      	b.n	800ad3c <prvIdleTask+0x8>
 800ad5a:	bf00      	nop
 800ad5c:	2000058c 	.word	0x2000058c
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	607b      	str	r3, [r7, #4]
 800ad6e:	e00c      	b.n	800ad8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4613      	mov	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4a12      	ldr	r2, [pc, #72]	@ (800adc4 <prvInitialiseTaskLists+0x60>)
 800ad7c:	4413      	add	r3, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fa10 	bl	80091a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3301      	adds	r3, #1
 800ad88:	607b      	str	r3, [r7, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b06      	cmp	r3, #6
 800ad8e:	d9ef      	bls.n	800ad70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad90:	480d      	ldr	r0, [pc, #52]	@ (800adc8 <prvInitialiseTaskLists+0x64>)
 800ad92:	f7fe fa07 	bl	80091a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad96:	480d      	ldr	r0, [pc, #52]	@ (800adcc <prvInitialiseTaskLists+0x68>)
 800ad98:	f7fe fa04 	bl	80091a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad9c:	480c      	ldr	r0, [pc, #48]	@ (800add0 <prvInitialiseTaskLists+0x6c>)
 800ad9e:	f7fe fa01 	bl	80091a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ada2:	480c      	ldr	r0, [pc, #48]	@ (800add4 <prvInitialiseTaskLists+0x70>)
 800ada4:	f7fe f9fe 	bl	80091a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ada8:	480b      	ldr	r0, [pc, #44]	@ (800add8 <prvInitialiseTaskLists+0x74>)
 800adaa:	f7fe f9fb 	bl	80091a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adae:	4b0b      	ldr	r3, [pc, #44]	@ (800addc <prvInitialiseTaskLists+0x78>)
 800adb0:	4a05      	ldr	r2, [pc, #20]	@ (800adc8 <prvInitialiseTaskLists+0x64>)
 800adb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ade0 <prvInitialiseTaskLists+0x7c>)
 800adb6:	4a05      	ldr	r2, [pc, #20]	@ (800adcc <prvInitialiseTaskLists+0x68>)
 800adb8:	601a      	str	r2, [r3, #0]
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	2000058c 	.word	0x2000058c
 800adc8:	20000618 	.word	0x20000618
 800adcc:	2000062c 	.word	0x2000062c
 800add0:	20000648 	.word	0x20000648
 800add4:	2000065c 	.word	0x2000065c
 800add8:	20000674 	.word	0x20000674
 800addc:	20000640 	.word	0x20000640
 800ade0:	20000644 	.word	0x20000644

0800ade4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adea:	e019      	b.n	800ae20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adec:	f000 fbcc 	bl	800b588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf0:	4b10      	ldr	r3, [pc, #64]	@ (800ae34 <prvCheckTasksWaitingTermination+0x50>)
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fa5b 	bl	80092b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae02:	4b0d      	ldr	r3, [pc, #52]	@ (800ae38 <prvCheckTasksWaitingTermination+0x54>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	4a0b      	ldr	r2, [pc, #44]	@ (800ae38 <prvCheckTasksWaitingTermination+0x54>)
 800ae0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae3c <prvCheckTasksWaitingTermination+0x58>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	4a0a      	ldr	r2, [pc, #40]	@ (800ae3c <prvCheckTasksWaitingTermination+0x58>)
 800ae14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae16:	f000 fbe9 	bl	800b5ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f810 	bl	800ae40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae20:	4b06      	ldr	r3, [pc, #24]	@ (800ae3c <prvCheckTasksWaitingTermination+0x58>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e1      	bne.n	800adec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	2000065c 	.word	0x2000065c
 800ae38:	20000688 	.word	0x20000688
 800ae3c:	20000670 	.word	0x20000670

0800ae40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d108      	bne.n	800ae64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fd86 	bl	800b968 <vPortFree>
				vPortFree( pxTCB );
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fd83 	bl	800b968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae62:	e019      	b.n	800ae98 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d103      	bne.n	800ae76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fd7a 	bl	800b968 <vPortFree>
	}
 800ae74:	e010      	b.n	800ae98 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d00b      	beq.n	800ae98 <prvDeleteTCB+0x58>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <prvDeleteTCB+0x54>
	}
 800ae98:	bf00      	nop
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aea6:	4b0c      	ldr	r3, [pc, #48]	@ (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aeb8:	e008      	b.n	800aecc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeba:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <prvResetNextTaskUnblockTime+0x38>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a04      	ldr	r2, [pc, #16]	@ (800aedc <prvResetNextTaskUnblockTime+0x3c>)
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000640 	.word	0x20000640
 800aedc:	200006a8 	.word	0x200006a8

0800aee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aee6:	4b0b      	ldr	r3, [pc, #44]	@ (800af14 <xTaskGetSchedulerState+0x34>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeee:	2301      	movs	r3, #1
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	e008      	b.n	800af06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef4:	4b08      	ldr	r3, [pc, #32]	@ (800af18 <xTaskGetSchedulerState+0x38>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d102      	bne.n	800af02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aefc:	2302      	movs	r3, #2
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e001      	b.n	800af06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af02:	2300      	movs	r3, #0
 800af04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af06:	687b      	ldr	r3, [r7, #4]
	}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	20000694 	.word	0x20000694
 800af18:	200006b0 	.word	0x200006b0

0800af1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d05e      	beq.n	800aff0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af36:	4b31      	ldr	r3, [pc, #196]	@ (800affc <xTaskPriorityInherit+0xe0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d24e      	bcs.n	800afde <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	db06      	blt.n	800af56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af48:	4b2c      	ldr	r3, [pc, #176]	@ (800affc <xTaskPriorityInherit+0xe0>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4e:	f1c3 0207 	rsb	r2, r3, #7
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6959      	ldr	r1, [r3, #20]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4a26      	ldr	r2, [pc, #152]	@ (800b000 <xTaskPriorityInherit+0xe4>)
 800af68:	4413      	add	r3, r2
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d12f      	bne.n	800afce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	3304      	adds	r3, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe f9a0 	bl	80092b8 <uxListRemove>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af82:	2201      	movs	r2, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	43da      	mvns	r2, r3
 800af8a:	4b1e      	ldr	r3, [pc, #120]	@ (800b004 <xTaskPriorityInherit+0xe8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4013      	ands	r3, r2
 800af90:	4a1c      	ldr	r2, [pc, #112]	@ (800b004 <xTaskPriorityInherit+0xe8>)
 800af92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af94:	4b19      	ldr	r3, [pc, #100]	@ (800affc <xTaskPriorityInherit+0xe0>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa2:	2201      	movs	r2, #1
 800afa4:	409a      	lsls	r2, r3
 800afa6:	4b17      	ldr	r3, [pc, #92]	@ (800b004 <xTaskPriorityInherit+0xe8>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4313      	orrs	r3, r2
 800afac:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <xTaskPriorityInherit+0xe8>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb4:	4613      	mov	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4a10      	ldr	r2, [pc, #64]	@ (800b000 <xTaskPriorityInherit+0xe4>)
 800afbe:	441a      	add	r2, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fe f919 	bl	80091fe <vListInsertEnd>
 800afcc:	e004      	b.n	800afd8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afce:	4b0b      	ldr	r3, [pc, #44]	@ (800affc <xTaskPriorityInherit+0xe0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e008      	b.n	800aff0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afe2:	4b06      	ldr	r3, [pc, #24]	@ (800affc <xTaskPriorityInherit+0xe0>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe8:	429a      	cmp	r2, r3
 800afea:	d201      	bcs.n	800aff0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff0:	68fb      	ldr	r3, [r7, #12]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20000588 	.word	0x20000588
 800b000:	2000058c 	.word	0x2000058c
 800b004:	20000690 	.word	0x20000690

0800b008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d070      	beq.n	800b100 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b01e:	4b3b      	ldr	r3, [pc, #236]	@ (800b10c <xTaskPriorityDisinherit+0x104>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	429a      	cmp	r2, r3
 800b026:	d00b      	beq.n	800b040 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	60fb      	str	r3, [r7, #12]
}
 800b03a:	bf00      	nop
 800b03c:	bf00      	nop
 800b03e:	e7fd      	b.n	800b03c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	60bb      	str	r3, [r7, #8]
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b064:	1e5a      	subs	r2, r3, #1
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	429a      	cmp	r2, r3
 800b074:	d044      	beq.n	800b100 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d140      	bne.n	800b100 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	3304      	adds	r3, #4
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe f918 	bl	80092b8 <uxListRemove>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d115      	bne.n	800b0ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b092:	491f      	ldr	r1, [pc, #124]	@ (800b110 <xTaskPriorityDisinherit+0x108>)
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10a      	bne.n	800b0ba <xTaskPriorityDisinherit+0xb2>
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ae:	43da      	mvns	r2, r3
 800b0b0:	4b18      	ldr	r3, [pc, #96]	@ (800b114 <xTaskPriorityDisinherit+0x10c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	4a17      	ldr	r2, [pc, #92]	@ (800b114 <xTaskPriorityDisinherit+0x10c>)
 800b0b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c6:	f1c3 0207 	rsb	r2, r3, #7
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	409a      	lsls	r2, r3
 800b0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b114 <xTaskPriorityDisinherit+0x10c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b114 <xTaskPriorityDisinherit+0x10c>)
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4a08      	ldr	r2, [pc, #32]	@ (800b110 <xTaskPriorityDisinherit+0x108>)
 800b0ee:	441a      	add	r2, r3
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f7fe f881 	bl	80091fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b100:	697b      	ldr	r3, [r7, #20]
	}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000588 	.word	0x20000588
 800b110:	2000058c 	.word	0x2000058c
 800b114:	20000690 	.word	0x20000690

0800b118 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b126:	2301      	movs	r3, #1
 800b128:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d079      	beq.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10b      	bne.n	800b150 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	bf00      	nop
 800b14e:	e7fd      	b.n	800b14c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d902      	bls.n	800b160 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	e002      	b.n	800b166 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b164:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d059      	beq.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	429a      	cmp	r2, r3
 800b178:	d154      	bne.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b17a:	4b2c      	ldr	r3, [pc, #176]	@ (800b22c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	429a      	cmp	r2, r3
 800b182:	d10b      	bne.n	800b19c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	60bb      	str	r3, [r7, #8]
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	e7fd      	b.n	800b198 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	69fa      	ldr	r2, [r7, #28]
 800b1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	db04      	blt.n	800b1ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f1c3 0207 	rsb	r2, r3, #7
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	6959      	ldr	r1, [r3, #20]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4a19      	ldr	r2, [pc, #100]	@ (800b230 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b1ca:	4413      	add	r3, r2
 800b1cc:	4299      	cmp	r1, r3
 800b1ce:	d129      	bne.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe f86f 	bl	80092b8 <uxListRemove>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ea:	43da      	mvns	r2, r3
 800b1ec:	4b11      	ldr	r3, [pc, #68]	@ (800b234 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	4a10      	ldr	r2, [pc, #64]	@ (800b234 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b1f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	409a      	lsls	r2, r3
 800b1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b234 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4313      	orrs	r3, r2
 800b204:	4a0b      	ldr	r2, [pc, #44]	@ (800b234 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4a06      	ldr	r2, [pc, #24]	@ (800b230 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b216:	441a      	add	r2, r3
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7fd ffed 	bl	80091fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b224:	bf00      	nop
 800b226:	3720      	adds	r7, #32
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	20000588 	.word	0x20000588
 800b230:	2000058c 	.word	0x2000058c
 800b234:	20000690 	.word	0x20000690

0800b238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b23c:	4b07      	ldr	r3, [pc, #28]	@ (800b25c <pvTaskIncrementMutexHeldCount+0x24>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b244:	4b05      	ldr	r3, [pc, #20]	@ (800b25c <pvTaskIncrementMutexHeldCount+0x24>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b24a:	3201      	adds	r2, #1
 800b24c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800b24e:	4b03      	ldr	r3, [pc, #12]	@ (800b25c <pvTaskIncrementMutexHeldCount+0x24>)
 800b250:	681b      	ldr	r3, [r3, #0]
	}
 800b252:	4618      	mov	r0, r3
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	20000588 	.word	0x20000588

0800b260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b26a:	4b29      	ldr	r3, [pc, #164]	@ (800b310 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b270:	4b28      	ldr	r3, [pc, #160]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3304      	adds	r3, #4
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe f81e 	bl	80092b8 <uxListRemove>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b282:	4b24      	ldr	r3, [pc, #144]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b288:	2201      	movs	r2, #1
 800b28a:	fa02 f303 	lsl.w	r3, r2, r3
 800b28e:	43da      	mvns	r2, r3
 800b290:	4b21      	ldr	r3, [pc, #132]	@ (800b318 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4013      	ands	r3, r2
 800b296:	4a20      	ldr	r2, [pc, #128]	@ (800b318 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a0:	d10a      	bne.n	800b2b8 <prvAddCurrentTaskToDelayedList+0x58>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	481a      	ldr	r0, [pc, #104]	@ (800b31c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2b2:	f7fd ffa4 	bl	80091fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2b6:	e026      	b.n	800b306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2c0:	4b14      	ldr	r3, [pc, #80]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d209      	bcs.n	800b2e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2d0:	4b13      	ldr	r3, [pc, #76]	@ (800b320 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f7fd ffb2 	bl	8009246 <vListInsert>
}
 800b2e2:	e010      	b.n	800b306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b324 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b314 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fd ffa8 	bl	8009246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b328 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d202      	bcs.n	800b306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b300:	4a09      	ldr	r2, [pc, #36]	@ (800b328 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	6013      	str	r3, [r2, #0]
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	2000068c 	.word	0x2000068c
 800b314:	20000588 	.word	0x20000588
 800b318:	20000690 	.word	0x20000690
 800b31c:	20000674 	.word	0x20000674
 800b320:	20000644 	.word	0x20000644
 800b324:	20000640 	.word	0x20000640
 800b328:	200006a8 	.word	0x200006a8

0800b32c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3b04      	subs	r3, #4
 800b33c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3b04      	subs	r3, #4
 800b34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f023 0201 	bic.w	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3b04      	subs	r3, #4
 800b35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b35c:	4a0c      	ldr	r2, [pc, #48]	@ (800b390 <pxPortInitialiseStack+0x64>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3b14      	subs	r3, #20
 800b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3b04      	subs	r3, #4
 800b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f06f 0202 	mvn.w	r2, #2
 800b37a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3b20      	subs	r3, #32
 800b380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b382:	68fb      	ldr	r3, [r7, #12]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	0800b395 	.word	0x0800b395

0800b394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b39e:	4b13      	ldr	r3, [pc, #76]	@ (800b3ec <prvTaskExitError+0x58>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a6:	d00b      	beq.n	800b3c0 <prvTaskExitError+0x2c>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60fb      	str	r3, [r7, #12]
}
 800b3ba:	bf00      	nop
 800b3bc:	bf00      	nop
 800b3be:	e7fd      	b.n	800b3bc <prvTaskExitError+0x28>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	60bb      	str	r3, [r7, #8]
}
 800b3d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3d4:	bf00      	nop
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0fc      	beq.n	800b3d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	2000000c 	.word	0x2000000c

0800b3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3f0:	4b07      	ldr	r3, [pc, #28]	@ (800b410 <pxCurrentTCBConst2>)
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	6808      	ldr	r0, [r1, #0]
 800b3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	f380 8809 	msr	PSP, r0
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8811 	msr	BASEPRI, r0
 800b40a:	4770      	bx	lr
 800b40c:	f3af 8000 	nop.w

0800b410 <pxCurrentTCBConst2>:
 800b410:	20000588 	.word	0x20000588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop

0800b418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b418:	4808      	ldr	r0, [pc, #32]	@ (800b43c <prvPortStartFirstTask+0x24>)
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	6800      	ldr	r0, [r0, #0]
 800b41e:	f380 8808 	msr	MSP, r0
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8814 	msr	CONTROL, r0
 800b42a:	b662      	cpsie	i
 800b42c:	b661      	cpsie	f
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	df00      	svc	0
 800b438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b43a:	bf00      	nop
 800b43c:	e000ed08 	.word	0xe000ed08

0800b440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b446:	4b47      	ldr	r3, [pc, #284]	@ (800b564 <xPortStartScheduler+0x124>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a47      	ldr	r2, [pc, #284]	@ (800b568 <xPortStartScheduler+0x128>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d10b      	bne.n	800b468 <xPortStartScheduler+0x28>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60fb      	str	r3, [r7, #12]
}
 800b462:	bf00      	nop
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b468:	4b3e      	ldr	r3, [pc, #248]	@ (800b564 <xPortStartScheduler+0x124>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a3f      	ldr	r2, [pc, #252]	@ (800b56c <xPortStartScheduler+0x12c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d10b      	bne.n	800b48a <xPortStartScheduler+0x4a>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	613b      	str	r3, [r7, #16]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b48a:	4b39      	ldr	r3, [pc, #228]	@ (800b570 <xPortStartScheduler+0x130>)
 800b48c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	22ff      	movs	r2, #255	@ 0xff
 800b49a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	4b31      	ldr	r3, [pc, #196]	@ (800b574 <xPortStartScheduler+0x134>)
 800b4b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4b2:	4b31      	ldr	r3, [pc, #196]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4b4:	2207      	movs	r2, #7
 800b4b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4b8:	e009      	b.n	800b4ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b4ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d6:	2b80      	cmp	r3, #128	@ 0x80
 800b4d8:	d0ef      	beq.n	800b4ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4da:	4b27      	ldr	r3, [pc, #156]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f1c3 0307 	rsb	r3, r3, #7
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d00b      	beq.n	800b4fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60bb      	str	r3, [r7, #8]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b578 <xPortStartScheduler+0x138>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	4a1c      	ldr	r2, [pc, #112]	@ (800b578 <xPortStartScheduler+0x138>)
 800b506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b508:	4b1b      	ldr	r3, [pc, #108]	@ (800b578 <xPortStartScheduler+0x138>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b510:	4a19      	ldr	r2, [pc, #100]	@ (800b578 <xPortStartScheduler+0x138>)
 800b512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b51c:	4b17      	ldr	r3, [pc, #92]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a16      	ldr	r2, [pc, #88]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b528:	4b14      	ldr	r3, [pc, #80]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a13      	ldr	r2, [pc, #76]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b52e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b534:	f000 f8da 	bl	800b6ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b538:	4b11      	ldr	r3, [pc, #68]	@ (800b580 <xPortStartScheduler+0x140>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b53e:	f000 f8f9 	bl	800b734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b542:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <xPortStartScheduler+0x144>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a0f      	ldr	r2, [pc, #60]	@ (800b584 <xPortStartScheduler+0x144>)
 800b548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b54c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b54e:	f7ff ff63 	bl	800b418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b552:	f7ff fa83 	bl	800aa5c <vTaskSwitchContext>
	prvTaskExitError();
 800b556:	f7ff ff1d 	bl	800b394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e000ed00 	.word	0xe000ed00
 800b568:	410fc271 	.word	0x410fc271
 800b56c:	410fc270 	.word	0x410fc270
 800b570:	e000e400 	.word	0xe000e400
 800b574:	200006b4 	.word	0x200006b4
 800b578:	200006b8 	.word	0x200006b8
 800b57c:	e000ed20 	.word	0xe000ed20
 800b580:	2000000c 	.word	0x2000000c
 800b584:	e000ef34 	.word	0xe000ef34

0800b588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5a2:	4b10      	ldr	r3, [pc, #64]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d110      	bne.n	800b5d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <vPortEnterCritical+0x60>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	603b      	str	r3, [r7, #0]
}
 800b5d0:	bf00      	nop
 800b5d2:	bf00      	nop
 800b5d4:	e7fd      	b.n	800b5d2 <vPortEnterCritical+0x4a>
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000000c 	.word	0x2000000c
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5f2:	4b12      	ldr	r3, [pc, #72]	@ (800b63c <vPortExitCritical+0x50>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10b      	bne.n	800b612 <vPortExitCritical+0x26>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	607b      	str	r3, [r7, #4]
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	e7fd      	b.n	800b60e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b612:	4b0a      	ldr	r3, [pc, #40]	@ (800b63c <vPortExitCritical+0x50>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3b01      	subs	r3, #1
 800b618:	4a08      	ldr	r2, [pc, #32]	@ (800b63c <vPortExitCritical+0x50>)
 800b61a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b61c:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <vPortExitCritical+0x50>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <vPortExitCritical+0x44>
 800b624:	2300      	movs	r3, #0
 800b626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f383 8811 	msr	BASEPRI, r3
}
 800b62e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	2000000c 	.word	0x2000000c

0800b640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b640:	f3ef 8009 	mrs	r0, PSP
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <pxCurrentTCBConst>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	f01e 0f10 	tst.w	lr, #16
 800b650:	bf08      	it	eq
 800b652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65a:	6010      	str	r0, [r2, #0]
 800b65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b664:	f380 8811 	msr	BASEPRI, r0
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f7ff f9f4 	bl	800aa5c <vTaskSwitchContext>
 800b674:	f04f 0000 	mov.w	r0, #0
 800b678:	f380 8811 	msr	BASEPRI, r0
 800b67c:	bc09      	pop	{r0, r3}
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b686:	f01e 0f10 	tst.w	lr, #16
 800b68a:	bf08      	it	eq
 800b68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b690:	f380 8809 	msr	PSP, r0
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst>:
 800b6a0:	20000588 	.word	0x20000588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
}
 800b6c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6c2:	f7ff f911 	bl	800a8e8 <xTaskIncrementTick>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <xPortSysTickHandler+0x40>)
 800b6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	f383 8811 	msr	BASEPRI, r3
}
 800b6de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <vPortSetupTimerInterrupt+0x38>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <vPortSetupTimerInterrupt+0x3c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0a      	ldr	r2, [pc, #40]	@ (800b72c <vPortSetupTimerInterrupt+0x40>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	099b      	lsrs	r3, r3, #6
 800b708:	4a09      	ldr	r2, [pc, #36]	@ (800b730 <vPortSetupTimerInterrupt+0x44>)
 800b70a:	3b01      	subs	r3, #1
 800b70c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b70e:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	e000e010 	.word	0xe000e010
 800b724:	e000e018 	.word	0xe000e018
 800b728:	20000000 	.word	0x20000000
 800b72c:	10624dd3 	.word	0x10624dd3
 800b730:	e000e014 	.word	0xe000e014

0800b734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b744 <vPortEnableVFP+0x10>
 800b738:	6801      	ldr	r1, [r0, #0]
 800b73a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b73e:	6001      	str	r1, [r0, #0]
 800b740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b742:	bf00      	nop
 800b744:	e000ed88 	.word	0xe000ed88

0800b748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b74e:	f3ef 8305 	mrs	r3, IPSR
 800b752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b0f      	cmp	r3, #15
 800b758:	d915      	bls.n	800b786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b75a:	4a18      	ldr	r2, [pc, #96]	@ (800b7bc <vPortValidateInterruptPriority+0x74>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b764:	4b16      	ldr	r3, [pc, #88]	@ (800b7c0 <vPortValidateInterruptPriority+0x78>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	7afa      	ldrb	r2, [r7, #11]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d20b      	bcs.n	800b786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	607b      	str	r3, [r7, #4]
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	e7fd      	b.n	800b782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b786:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <vPortValidateInterruptPriority+0x7c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b78e:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c8 <vPortValidateInterruptPriority+0x80>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	429a      	cmp	r2, r3
 800b794:	d90b      	bls.n	800b7ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	603b      	str	r3, [r7, #0]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <vPortValidateInterruptPriority+0x62>
	}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	e000e3f0 	.word	0xe000e3f0
 800b7c0:	200006b4 	.word	0x200006b4
 800b7c4:	e000ed0c 	.word	0xe000ed0c
 800b7c8:	200006b8 	.word	0x200006b8

0800b7cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08a      	sub	sp, #40	@ 0x28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7d8:	f7fe ffb8 	bl	800a74c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b950 <pvPortMalloc+0x184>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7e4:	f000 f924 	bl	800ba30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b954 <pvPortMalloc+0x188>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f040 8095 	bne.w	800b920 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01e      	beq.n	800b83a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	3308      	adds	r3, #8
 800b816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <pvPortMalloc+0x6e>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	617b      	str	r3, [r7, #20]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d06f      	beq.n	800b920 <pvPortMalloc+0x154>
 800b840:	4b45      	ldr	r3, [pc, #276]	@ (800b958 <pvPortMalloc+0x18c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d86a      	bhi.n	800b920 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b84a:	4b44      	ldr	r3, [pc, #272]	@ (800b95c <pvPortMalloc+0x190>)
 800b84c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b84e:	4b43      	ldr	r3, [pc, #268]	@ (800b95c <pvPortMalloc+0x190>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b854:	e004      	b.n	800b860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d903      	bls.n	800b872 <pvPortMalloc+0xa6>
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f1      	bne.n	800b856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b872:	4b37      	ldr	r3, [pc, #220]	@ (800b950 <pvPortMalloc+0x184>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b878:	429a      	cmp	r2, r3
 800b87a:	d051      	beq.n	800b920 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2208      	movs	r2, #8
 800b882:	4413      	add	r3, r2
 800b884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	1ad2      	subs	r2, r2, r3
 800b896:	2308      	movs	r3, #8
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d920      	bls.n	800b8e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b89e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	613b      	str	r3, [r7, #16]
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8da:	69b8      	ldr	r0, [r7, #24]
 800b8dc:	f000 f90a 	bl	800baf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b960 <pvPortMalloc+0x194>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d203      	bcs.n	800b902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8fa:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a18      	ldr	r2, [pc, #96]	@ (800b960 <pvPortMalloc+0x194>)
 800b900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	4b13      	ldr	r3, [pc, #76]	@ (800b954 <pvPortMalloc+0x188>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	431a      	orrs	r2, r3
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b916:	4b13      	ldr	r3, [pc, #76]	@ (800b964 <pvPortMalloc+0x198>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3301      	adds	r3, #1
 800b91c:	4a11      	ldr	r2, [pc, #68]	@ (800b964 <pvPortMalloc+0x198>)
 800b91e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b920:	f7fe ff22 	bl	800a768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <pvPortMalloc+0x17a>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	60fb      	str	r3, [r7, #12]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <pvPortMalloc+0x176>
	return pvReturn;
 800b946:	69fb      	ldr	r3, [r7, #28]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3728      	adds	r7, #40	@ 0x28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	200042c4 	.word	0x200042c4
 800b954:	200042d8 	.word	0x200042d8
 800b958:	200042c8 	.word	0x200042c8
 800b95c:	200042bc 	.word	0x200042bc
 800b960:	200042cc 	.word	0x200042cc
 800b964:	200042d0 	.word	0x200042d0

0800b968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d04f      	beq.n	800ba1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b97a:	2308      	movs	r3, #8
 800b97c:	425b      	negs	r3, r3
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b25      	ldr	r3, [pc, #148]	@ (800ba24 <vPortFree+0xbc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4013      	ands	r3, r2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <vPortFree+0x46>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60fb      	str	r3, [r7, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	e7fd      	b.n	800b9aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00b      	beq.n	800b9ce <vPortFree+0x66>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60bb      	str	r3, [r7, #8]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	4b14      	ldr	r3, [pc, #80]	@ (800ba24 <vPortFree+0xbc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01e      	beq.n	800ba1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d11a      	bne.n	800ba1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <vPortFree+0xbc>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	401a      	ands	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9f4:	f7fe feaa 	bl	800a74c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba28 <vPortFree+0xc0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4413      	add	r3, r2
 800ba02:	4a09      	ldr	r2, [pc, #36]	@ (800ba28 <vPortFree+0xc0>)
 800ba04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f000 f874 	bl	800baf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <vPortFree+0xc4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	4a06      	ldr	r2, [pc, #24]	@ (800ba2c <vPortFree+0xc4>)
 800ba14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba16:	f7fe fea7 	bl	800a768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba1a:	bf00      	nop
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	200042d8 	.word	0x200042d8
 800ba28:	200042c8 	.word	0x200042c8
 800ba2c:	200042d4 	.word	0x200042d4

0800ba30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ba3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba3c:	4b27      	ldr	r3, [pc, #156]	@ (800badc <prvHeapInit+0xac>)
 800ba3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f003 0307 	and.w	r3, r3, #7
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f023 0307 	bic.w	r3, r3, #7
 800ba56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	4a1f      	ldr	r2, [pc, #124]	@ (800badc <prvHeapInit+0xac>)
 800ba60:	4413      	add	r3, r2
 800ba62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba68:	4a1d      	ldr	r2, [pc, #116]	@ (800bae0 <prvHeapInit+0xb0>)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bae0 <prvHeapInit+0xb0>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	4413      	add	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1a9b      	subs	r3, r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0307 	bic.w	r3, r3, #7
 800ba8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a15      	ldr	r2, [pc, #84]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba92:	4b14      	ldr	r3, [pc, #80]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba9a:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bab0:	4b0c      	ldr	r3, [pc, #48]	@ (800bae4 <prvHeapInit+0xb4>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4a0a      	ldr	r2, [pc, #40]	@ (800bae8 <prvHeapInit+0xb8>)
 800babe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4a09      	ldr	r2, [pc, #36]	@ (800baec <prvHeapInit+0xbc>)
 800bac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bac8:	4b09      	ldr	r3, [pc, #36]	@ (800baf0 <prvHeapInit+0xc0>)
 800baca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bace:	601a      	str	r2, [r3, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	200006bc 	.word	0x200006bc
 800bae0:	200042bc 	.word	0x200042bc
 800bae4:	200042c4 	.word	0x200042c4
 800bae8:	200042cc 	.word	0x200042cc
 800baec:	200042c8 	.word	0x200042c8
 800baf0:	200042d8 	.word	0x200042d8

0800baf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bafc:	4b28      	ldr	r3, [pc, #160]	@ (800bba0 <prvInsertBlockIntoFreeList+0xac>)
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	e002      	b.n	800bb08 <prvInsertBlockIntoFreeList+0x14>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d8f7      	bhi.n	800bb02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d108      	bne.n	800bb36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	441a      	add	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d118      	bne.n	800bb7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	4b15      	ldr	r3, [pc, #84]	@ (800bba4 <prvInsertBlockIntoFreeList+0xb0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d00d      	beq.n	800bb72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	441a      	add	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	e008      	b.n	800bb84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb72:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <prvInsertBlockIntoFreeList+0xb0>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e003      	b.n	800bb84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d002      	beq.n	800bb92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	200042bc 	.word	0x200042bc
 800bba4:	200042c4 	.word	0x200042c4

0800bba8 <memset>:
 800bba8:	4402      	add	r2, r0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d100      	bne.n	800bbb2 <memset+0xa>
 800bbb0:	4770      	bx	lr
 800bbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bbb6:	e7f9      	b.n	800bbac <memset+0x4>

0800bbb8 <__libc_init_array>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4d0d      	ldr	r5, [pc, #52]	@ (800bbf0 <__libc_init_array+0x38>)
 800bbbc:	4c0d      	ldr	r4, [pc, #52]	@ (800bbf4 <__libc_init_array+0x3c>)
 800bbbe:	1b64      	subs	r4, r4, r5
 800bbc0:	10a4      	asrs	r4, r4, #2
 800bbc2:	2600      	movs	r6, #0
 800bbc4:	42a6      	cmp	r6, r4
 800bbc6:	d109      	bne.n	800bbdc <__libc_init_array+0x24>
 800bbc8:	4d0b      	ldr	r5, [pc, #44]	@ (800bbf8 <__libc_init_array+0x40>)
 800bbca:	4c0c      	ldr	r4, [pc, #48]	@ (800bbfc <__libc_init_array+0x44>)
 800bbcc:	f000 f826 	bl	800bc1c <_init>
 800bbd0:	1b64      	subs	r4, r4, r5
 800bbd2:	10a4      	asrs	r4, r4, #2
 800bbd4:	2600      	movs	r6, #0
 800bbd6:	42a6      	cmp	r6, r4
 800bbd8:	d105      	bne.n	800bbe6 <__libc_init_array+0x2e>
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe0:	4798      	blx	r3
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__libc_init_array+0xc>
 800bbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbea:	4798      	blx	r3
 800bbec:	3601      	adds	r6, #1
 800bbee:	e7f2      	b.n	800bbd6 <__libc_init_array+0x1e>
 800bbf0:	0800c174 	.word	0x0800c174
 800bbf4:	0800c174 	.word	0x0800c174
 800bbf8:	0800c174 	.word	0x0800c174
 800bbfc:	0800c178 	.word	0x0800c178

0800bc00 <memcpy>:
 800bc00:	440a      	add	r2, r1
 800bc02:	4291      	cmp	r1, r2
 800bc04:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc08:	d100      	bne.n	800bc0c <memcpy+0xc>
 800bc0a:	4770      	bx	lr
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc16:	4291      	cmp	r1, r2
 800bc18:	d1f9      	bne.n	800bc0e <memcpy+0xe>
 800bc1a:	bd10      	pop	{r4, pc}

0800bc1c <_init>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	bf00      	nop
 800bc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc22:	bc08      	pop	{r3}
 800bc24:	469e      	mov	lr, r3
 800bc26:	4770      	bx	lr

0800bc28 <_fini>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	bf00      	nop
 800bc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2e:	bc08      	pop	{r3}
 800bc30:	469e      	mov	lr, r3
 800bc32:	4770      	bx	lr
